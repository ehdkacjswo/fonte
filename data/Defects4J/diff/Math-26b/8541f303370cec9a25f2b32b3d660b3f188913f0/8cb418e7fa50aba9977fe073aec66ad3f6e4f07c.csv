is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,63,nt getEvaluations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,63,int getEvaluations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,65,/** Get the number of evaluations of the objective function jacobian .
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,66,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,67,* The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,68,"* {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,69,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,70,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,71,* @return number of evaluations of the objective function jacobian
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,73,int getJacobianEvaluations();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,20,mport java.util.Arrays;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,22,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,23,mport org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,24,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,25,mport org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,26,mport org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,29, Base class for implementing estimators.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,30, <p>This base class handles the boilerplates methods associated to thresholds
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,31," settings, jacobian and error estimation.</p>"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,32, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,33, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,36,ublic abstract class AbstractEstimator implements Estimator {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,38,** Default maximal number of cost evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,39,ublic static final int DEFAULT_MAX_COST_EVALUATIONS = 100;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,42, Build an abstract estimator for least squares problems.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,43, <p>The maximal number of cost evaluations allowed is set
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,44, to its default value {@link #DEFAULT_MAX_COST_EVALUATIONS}.</p>
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,46,rotected AbstractEstimator() {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,47,etMaxCostEval(DEFAULT_MAX_COST_EVALUATIONS);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,51, Set the maximal number of cost evaluations allowed.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,53, @param maxCostEval maximal number of cost evaluations allowed
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,54, @see #estimate
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,56,ublic final void setMaxCostEval(int maxCostEval) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,57,his.maxCostEval = maxCostEval;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,61, Get the number of cost evaluations.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,63, @return number of cost evaluations
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,65,ublic final int getCostEvaluations() {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,66,eturn costEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,70, Get the number of jacobian evaluations.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,72, @return number of jacobian evaluations
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,74,ublic final int getJacobianEvaluations() {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,75,eturn jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,79, Update the jacobian matrix.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,81,rotected void updateJacobian() {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,82,ncrementJacobianEvaluationsCounter();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,83,"rrays.fill(jacobian, 0);"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,84,"or (int i = 0, index = 0; i < rows; i++) {"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,85,eightedMeasurement wm = measurements[i];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,86,ouble factor = -Math.sqrt(wm.getWeight());
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,87,or (int j = 0; j < cols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,88,acobian[index++] = factor * wm.getPartial(parameters[j]);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,94, Increment the jacobian evaluations counter.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,96,rotected final void incrementJacobianEvaluationsCounter() {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,97,+jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,101, Update the residuals array and cost function value.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,102, @exception OptimizationException if the number of cost evaluations
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,103, exceeds the maximum allowed
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,105,rotected void updateResidualsAndCost()
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,106,hrows OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,108,f (++costEvaluations > maxCostEval) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,109,"hrow new OptimizationException(""maximal number of evaluations exceeded ({0})"","
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,110,axCostEval);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,113,ost = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,114,"or (int i = 0, index = 0; i < rows; i++, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,115,eightedMeasurement wm = measurements[i];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,116,ouble residual = wm.getResidual();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,117,esiduals[i] = Math.sqrt(wm.getWeight()) * residual;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,118,ost += wm.getWeight() * residual * residual;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,120,ost = Math.sqrt(cost);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,125, Get the Root Mean Square value.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,126," Get the Root Mean Square value, i.e. the root of the arithmetic"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,127, mean of the square of all weighted residuals. This is related to the
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,128, criterion that is minimized by the estimator as follows: if
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,129," <em>c</em> if the criterion, and <em>n</em> is the number of"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,130," measurements, then the RMS is <em>sqrt (c/n)</em>."
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,132, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,133, @return RMS value
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,135,ublic double getRMS(EstimationProblem problem) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,136,eightedMeasurement[] wm = problem.getMeasurements();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,137,ouble criterion = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,138,or (int i = 0; i < wm.length; ++i) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,139,ouble residual = wm[i].getResidual();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,140,riterion += wm[i].getWeight() * residual * residual;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,142,eturn Math.sqrt(criterion / wm.length);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,146, Get the Chi-Square value.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,147, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,148, @return chi-square value
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,150,ublic double getChiSquare(EstimationProblem problem) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,151,eightedMeasurement[] wm = problem.getMeasurements();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,152,ouble chiSquare = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,153,or (int i = 0; i < wm.length; ++i) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,154,ouble residual = wm[i].getResidual();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,155,hiSquare += residual * residual / wm[i].getWeight();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,157,eturn chiSquare;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,161, Get the covariance matrix of unbound estimated parameters.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,162, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,163, @return covariance matrix
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,164, @exception OptimizationException if the covariance matrix
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,165, cannot be computed (singular problem)
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,167,ublic double[][] getCovariances(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,168,hrows OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,170,/ set up the jacobian
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,171,pdateJacobian();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,173,"/ compute transpose(J).J, avoiding building big intermediate matrices"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,174,inal int rows = problem.getMeasurements().length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,175,inal int cols = problem.getUnboundParameters().length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,176,inal int max  = cols * rows;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,177,ouble[][] jTj = new double[cols][cols];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,178,or (int i = 0; i < cols; ++i) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,179,or (int j = i; j < cols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,180,ouble sum = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,181,or (int k = 0; k < max; k += cols) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,182,um += jacobian[k + i] * jacobian[k + j];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,184,Tj[i][j] = sum;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,185,Tj[j][i] = sum;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,189,ry {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,190,/ compute the covariances matrix
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,191,ealMatrix inverse =
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,192,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,193,eturn inverse.getData();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,194, catch (InvalidMatrixException ime) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,195,"hrow new OptimizationException(""unable to compute covariances: singular problem"");"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,201, Guess the errors in unbound estimated parameters.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,202," <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,203, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,204, @return errors in estimated parameters
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,205, @exception OptimizationException if the covariances matrix cannot be computed
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,206, or the number of degrees of freedom is not positive (number of measurements
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,207, lesser or equal to number of parameters)
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,209,ublic double[] guessParametersErrors(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,210,hrows OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,211,nt m = problem.getMeasurements().length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,212,nt p = problem.getUnboundParameters().length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,213,f (m <= p) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,214,hrow new OptimizationException(
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,215,"no degrees of freedom ({0} measurements, {1} parameters)"","
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,216,", p);"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,218,ouble[] errors = new double[problem.getUnboundParameters().length];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,219,inal double c = Math.sqrt(getChiSquare(problem) / (m - p));
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,220,ouble[][] covar = getCovariances(problem);
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,221,or (int i = 0; i < errors.length; ++i) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,222,rrors[i] = Math.sqrt(covar[i][i]) * c;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,224,eturn errors;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,228, Initialization of the common parts of the estimation.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,229, <p>This method <em>must</em> be called at the start
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,230, of the {@link #estimate(EstimationProblem) estimate}
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,231, method.</p>
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,232, @param problem estimation problem to solve
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,234,rotected void initializeEstimate(EstimationProblem problem) {
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,236,/ reset counters
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,237,ostEvaluations     = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,238,acobianEvaluations = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,240,/ retrieve the equations and the parameters
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,241,easurements = problem.getMeasurements();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,242,arameters   = problem.getUnboundParameters();
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,244,/ arrays shared with the other private methods
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,245,ows      = measurements.length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,246,ols      = parameters.length;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,247,acobian  = new double[rows * cols];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,248,esiduals = new double[rows];
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,250,ost = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,255, Solve an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,257, <p>The method should set the parameters of the problem to several
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,258, trial values until it reaches convergence. If this method returns
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,259," normally (i.e. without throwing an exception), then the best"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,260, estimate of the parameters can be retrieved from the problem
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,261," itself, through the {@link EstimationProblem#getAllParameters"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,262, EstimationProblem.getAllParameters} method.</p>
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,264, @param problem estimation problem to solve
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,265, @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,268,ublic abstract void estimate(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,269,hrows OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,271,** Array of measurements. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,272,rotected WeightedMeasurement[] measurements;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,274,** Array of parameters. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,275,rotected EstimatedParameter[] parameters;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,278, Jacobian matrix.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,279, <p>This matrix is in canonical form just after the calls to
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,280," {@link #updateJacobian()}, but may be modified by the solver"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,281, in the derived class (the {@link LevenbergMarquardtEstimator
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,282, Levenberg-Marquardt estimator} does this).</p>
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,284,rotected double[] jacobian;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,286,** Number of columns of the jacobian matrix. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,287,rotected int cols;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,289,** Number of rows of the jacobian matrix. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,290,rotected int rows;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,292,** Residuals array.
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,293, <p>This array is in canonical form just after the calls to
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,294," {@link #updateJacobian()}, but may be modified by the solver"
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,295, in the derived class (the {@link LevenbergMarquardtEstimator
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,296, Levenberg-Marquardt estimator} does this).</p>
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,298,rotected double[] residuals;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,300,** Cost value (square root of the sum of the residuals). */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,301,rotected double cost;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,303,** Maximal allowed number of cost evaluations. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,304,rivate int maxCostEval;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,306,** Number of cost evaluations. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,307,rivate int costEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,309,** Number of jacobian evaluations. */
False,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,310,rivate int jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,33, Base class for implementing estimators.
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,34, <p>This base class handles the boilerplates methods associated to thresholds
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,33,* Base class for implementing least squares optimizers.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,34,* <p>This base class handles the boilerplate methods associated to thresholds
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,64, in the derived class (the {@link LevenbergMarquardtEstimator
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,65, Levenberg-Marquardt estimator} does this).</p>
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,64,* in the derived class (the {@link LevenbergMarquardtOptimizer
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,65,* Levenberg-Marquardt optimizer} does this).</p>
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,90,/** Current residuals. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,91,protected double[] residuals;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,120,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,121,public int getJacobianEvaluations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,122,return jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178,inal double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,186,final double residual = target[i] - objective[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,187,residuals[i] = residual;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,189, criterion that is minimized by the estimator as follows: if
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,198,* criterion that is minimized by the optimizer as follows: if
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,198,inal double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,207,final double residual = residuals[i];
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,211,inal double residual = objective[i] - target[i];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,220,final double residual = residuals[i];
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,218, Get the covariance matrix of unbound estimated parameters.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,227,* Get the covariance matrix of optimized parameters.
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,234,inal double[] ji = jacobian[i];
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,236,inal double[] jj = jacobian[j];
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,239,um += ji[k] * jj[k];
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,246,sum += jacobian[k][i] * jacobian[k][j];
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,258, Guess the errors in unbound estimated parameters.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,265,* Guess the errors in optimized parameters.
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,260, @return errors in estimated parameters
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,267,* @return errors in optimized parameters
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,309,this.residuals = new double[target.length];
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,22,** This class represents the estimated parameters of an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,24," <p>The parameters of an estimation problem have a name, a value and"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,25, a bound flag. The value of bound parameters is considered trusted
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,26," and the solvers should not adjust them. On the other hand, the"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,27, solvers should adjust the value of unbounds parameters until they
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,28, satisfy convergence criterions specific to each solver.</p>
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,30, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,31, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,35,ublic class EstimatedParameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,36,mplements Serializable {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,38,** Simple constructor.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,39," Build an instance from a first estimate of the parameter,"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,40, initially considered unbound.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,41, @param name name of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,42, @param firstEstimate first estimate of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,44,"ublic EstimatedParameter(String name, double firstEstimate) {"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,45,his.name = name;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,46,stimate  = firstEstimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,47,ound     = false;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,50,** Simple constructor.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,51, Build an instance from a first estimate of the parameter and a
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,52, bound flag
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,53, @param name name of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,54, @param firstEstimate first estimate of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,55," @param bound flag, should be true if the parameter is bound"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,57,"ublic EstimatedParameter(String name,"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,58,"ouble firstEstimate,"
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,59,oolean bound) {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,60,his.name  = name;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,61,stimate   = firstEstimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,62,his.bound = bound;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,65,** Copy constructor.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,66, Build a copy of a parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,67, @param parameter instance to copy
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,69,ublic EstimatedParameter(EstimatedParameter parameter) {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,70,ame     = parameter.name;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,71,stimate = parameter.estimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,72,ound    = parameter.bound;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,75,** Set a new estimated value for the parameter.
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,76, @param estimate new estimate for the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,78,ublic void setEstimate(double estimate) {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,79,his.estimate = estimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,82,** Get the current estimate of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,83, @return current estimate
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,85,ublic double getEstimate() {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,86,eturn estimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,89,** get the name of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,90, @return parameter name
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,92,ublic String getName() {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,93,eturn name;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,96,** Set the bound flag of the parameter
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,97, @param bound this flag should be set to true if the parameter is
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,98, bound (i.e. if it should not be adjusted by the solver).
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,100,ublic void setBound(boolean bound) {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,101,his.bound = bound;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,104,** Check if the parameter is bound
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,105, @return true if the parameter is bound */
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,106,ublic boolean isBound() {
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,107,eturn bound;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,110,** Name of the parameter */
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,111,rivate   String  name;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,113,** Current value of the parameter */
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,114,rotected double  estimate;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,116,** Indicator for bound parameters
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,117, (ie parameters that should not be estimated)
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,119,rivate   boolean bound;
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,121,** Serializable version identifier */
False,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,122,rivate static final long serialVersionUID = -555440800213416949L;
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,21, This interface represents an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,23, <p>This interface should be implemented by all real estimation
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,24, problems before they can be handled by the estimators through the
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,25, {@link Estimator#estimate Estimator.estimate} method.</p>
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,27," <p>An estimation problem, as seen by a solver is a set of"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,28, parameters and a set of measurements. The parameters are adjusted
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,29, during the estimation through the {@link #getUnboundParameters
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,30, getUnboundParameters} and {@link EstimatedParameter#setEstimate
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,31, EstimatedParameter.setEstimate} methods. The measurements both have
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,32, a measured value which is generally fixed at construction and a
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,33, theoretical value which depends on the model and hence varies as
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,34, the parameters are adjusted. The purpose of the solver is to reduce
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,35," the residual between these values, it can retrieve the measurements"
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,36, through the {@link #getMeasurements getMeasurements} method.</p>
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,38, @see Estimator
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,39, @see WeightedMeasurement
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,41, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,42, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,46,ublic interface EstimationProblem {
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,48, Get the measurements of an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,49, @return measurements
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,51,eightedMeasurement[] getMeasurements();
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,54, Get the unbound parameters of the problem.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,55, @return unbound parameters
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,57,stimatedParameter[] getUnboundParameters();
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,60, Get all the parameters of the problem.
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,61, @return parameters
False,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,63,stimatedParameter[] getAllParameters();
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,20,mport org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,23, This interface represents solvers for estimation problems.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,25, <p>The classes which are devoted to solve estimation problems
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,26, should implement this interface. The problems which can be handled
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,27, should implement the {@link EstimationProblem} interface which
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,28, gather all the information needed by the solver.</p>
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,30, <p>The interface is composed only of the {@link #estimate estimate}
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,31, method.</p>
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,33, @see EstimationProblem
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,35, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,36, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,40,ublic interface Estimator {
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,43, Solve an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,45, <p>The method should set the parameters of the problem to several
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,46, trial values until it reaches convergence. If this method returns
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,47," normally (i.e. without throwing an exception), then the best"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,48, estimate of the parameters can be retrieved from the problem
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,49," itself, through the {@link EstimationProblem#getAllParameters"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,50, EstimationProblem.getAllParameters} method.</p>
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,52, @param problem estimation problem to solve
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,53, @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,56,oid estimate(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,57,hrows OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,60, Get the Root Mean Square value.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,61," Get the Root Mean Square value, i.e. the root of the arithmetic"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,62, mean of the square of all weighted residuals. This is related to the
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,63, criterion that is minimized by the estimator as follows: if
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,64," <em>c</em> is the criterion, and <em>n</em> is the number of"
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,65," measurements, then the RMS is <em>sqrt (c/n)</em>."
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,66, @see #guessParametersErrors(EstimationProblem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,68, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,69, @return RMS value
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,71,ouble getRMS(EstimationProblem problem);
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,74, Get the covariance matrix of estimated parameters.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,75, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,76, @return covariance matrix
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,77, @exception OptimizationException if the covariance matrix
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,78, cannot be computed (singular problem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,80,ouble[][] getCovariances(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,81,hrows OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,84, Guess the errors in estimated parameters.
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,85, @see #getRMS(EstimationProblem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,86, @param problem estimation problem
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,87, @return errors in estimated parameters
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,88, @exception OptimizationException if the error cannot be guessed
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,90,ouble[] guessParametersErrors(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,91,hrows OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,22,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,23,mport org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,24,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,25,mport org.apache.commons.math.linear.RealVector;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,26,mport org.apache.commons.math.linear.RealVectorImpl;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,27,mport org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,28,mport org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,31, This class implements a solver for estimation problems.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,33, <p>This class solves estimation problems using a weighted least
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,34, squares criterion on the measurement residuals. It uses a
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,35, Gauss-Newton algorithm.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,37, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,38, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,42,ublic class GaussNewtonEstimator extends AbstractEstimator implements Serializable {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,44,** Serializable version identifier */
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,45,rivate static final long serialVersionUID = 5485001826076289109L;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,47,** Default threshold for cost steady state detection. */
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,48,rivate static final double DEFAULT_STEADY_STATE_THRESHOLD = 1.0e-6;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,50,** Default threshold for cost convergence. */
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,51,rivate static final double DEFAULT_CONVERGENCE = 1.0e-6;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,53,** Threshold for cost steady state detection. */
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,54,rivate double steadyStateThreshold;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,56,** Threshold for cost convergence. */
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,57,rivate double convergence;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,59,** Simple constructor with default settings.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,60, <p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,61, The estimator is built with default values for all settings.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,62, </p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,63, @see #DEFAULT_STEADY_STATE_THRESHOLD
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,64, @see #DEFAULT_CONVERGENCE
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,65, @see AbstractEstimator#DEFAULT_MAX_COST_EVALUATIONS
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,67,ublic GaussNewtonEstimator() {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,68,his.steadyStateThreshold = DEFAULT_STEADY_STATE_THRESHOLD;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,69,his.convergence          = DEFAULT_CONVERGENCE;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,73, Simple constructor.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,75, <p>This constructor builds an estimator and stores its convergence
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,76, characteristics.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,78, <p>An estimator is considered to have converged whenever either
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,79, the criterion goes below a physical threshold under which
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,80, improvements are considered useless or when the algorithm is
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,81, unable to improve it (even if it is still high). The first
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,82, condition that is met stops the iterations.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,84, <p>The fact an estimator has converged does not mean that the
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,85, model accurately fits the measurements. It only means no better
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,86," solution can be found, it does not mean this one is good. Such an"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,87, analysis is left to the caller.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,89, <p>If neither conditions are fulfilled before a given number of
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,90," iterations, the algorithm is considered to have failed and an"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,91, {@link OptimizationException} is thrown.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,93, @param maxCostEval maximal number of cost evaluations allowed
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,94, @param convergence criterion threshold below which we do not need
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,95, to improve the criterion anymore
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,96," @param steadyStateThreshold steady state detection threshold, the"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,97, problem has converged has reached a steady state if
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,98, <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,99," J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,100, and <code>J<sub>n-1</sub></code> are the current and preceding criterion
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,101, values (square sum of the weighted residuals of considered measurements).
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,103,"ublic GaussNewtonEstimator(final int maxCostEval, final double convergence,"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,104,inal double steadyStateThreshold) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,105,etMaxCostEval(maxCostEval);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,106,his.steadyStateThreshold = steadyStateThreshold;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,107,his.convergence          = convergence;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,111, Set the convergence criterion threshold.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,112, @param convergence criterion threshold below which we do not need
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,113, to improve the criterion anymore
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,115,ublic void setConvergence(final double convergence) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,116,his.convergence = convergence;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,120, Set the steady state detection threshold.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,121, <p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,122, The problem has converged has reached a steady state if
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,123, <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,124," J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,125, and <code>J<sub>n-1</sub></code> are the current and preceding criterion
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,126, values (square sum of the weighted residuals of considered measurements).
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,127, </p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,128, @param steadyStateThreshold steady state detection threshold
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,130,ublic void setSteadyStateThreshold(final double steadyStateThreshold) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,131,his.steadyStateThreshold = steadyStateThreshold;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,135, Solve an estimation problem using a least squares criterion.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,137, <p>This method set the unbound parameters of the given problem
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,138, starting from their current values through several iterations. At
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,139," each step, the unbound parameters are changed in order to"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,140, minimize a weighted least square criterion based on the
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,141, measurements of the problem.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,143, <p>The iterations are stopped either when the criterion goes
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,144, below a physical threshold under which improvement are considered
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,145, useless or when the algorithm is unable to improve it (even if it
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,146, is still high). The first condition that is met stops the
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,147, iterations. If the convergence it not reached before the maximum
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,148," number of iterations, an {@link OptimizationException} is"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,149, thrown.</p>
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,151, @param problem estimation problem to solve
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,152, @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,154, @see EstimationProblem
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,157,ublic void estimate(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,158,hrows OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,160,nitializeEstimate(problem);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,162,/ work matrices
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,163,ouble[] grad             = new double[parameters.length];
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,164,ealVectorImpl bDecrement = new RealVectorImpl(parameters.length);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,165,ouble[] bDecrementData   = bDecrement.getDataRef();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,166,"ealMatrix wGradGradT     = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,168,/ iterate until convergence is reached
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,169,ouble previous = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,170,o {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,172,/ build the linear problem
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,173,ncrementJacobianEvaluationsCounter();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,174,ealVector b = new RealVectorImpl(parameters.length);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,175,"ealMatrix a = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,176,or (int i = 0; i < measurements.length; ++i) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,177,f (! measurements [i].isIgnored()) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,179,ouble weight   = measurements[i].getWeight();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,180,ouble residual = measurements[i].getResidual();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,182,/ compute the normal equation
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,183,or (int j = 0; j < parameters.length; ++j) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,184,rad[j] = measurements[i].getPartial(parameters[j]);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,185,DecrementData[j] = weight * residual * grad[j];
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,188,/ build the contribution matrix for measurement i
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,189,or (int k = 0; k < parameters.length; ++k) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,190,ouble gk = grad[k];
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,191,or (int l = 0; l < parameters.length; ++l) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,192,"GradGradT.setEntry(k, l, weight * gk * grad[l]);"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,196,/ update the matrices
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,197, = a.add(wGradGradT);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,198, = b.add(bDecrement);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,203,ry {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,205,/ solve the linearized least squares problem
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,206,ealVector dX = new LUDecompositionImpl(a).getSolver().solve(b);
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,208,/ update the estimated parameters
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,209,or (int i = 0; i < parameters.length; ++i) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,210,arameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i));
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,213, catch(InvalidMatrixException e) {
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,214,"hrow new OptimizationException(""unable to solve: singular problem"");"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,218,revious = cost;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,219,pdateResidualsAndCost();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,221, while ((getCostEvaluations() < 2) ||
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,222,Math.abs(previous - cost) > (cost * steadyStateThreshold) &&
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,223,Math.abs(cost) > convergence)));
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,17,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,20,mport java.util.Arrays;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,22,mport org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,26, This class solves a least squares problem.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,28, <p>This implementation <em>should</em> work even for over-determined systems
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,29, (i.e. systems having more variables than equations). Over-determined systems
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,30, are solved by ignoring the variables which have the smallest impact according
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,31, to their jacobian column norm. Only the rank of the matrix and some loop bounds
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,32, are changed to implement this.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,34, <p>The resolution engine is a simple translation of the MINPACK <a
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,35," href=""http://www.netlib.org/minpack/lmder.f"">lmder</a> routine with minor"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,36, changes. The changes include the over-determined resolution and the Q.R.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,37, decomposition which has been rewritten following the algorithm described in the
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,38, P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,39," appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986. The"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,40, redistribution policy for MINPACK is available <a
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,41," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,42, is reproduced below.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,44," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,45, <tr><td>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,46,    Minpack Copyright Notice (1999) University of Chicago.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,47,    All rights reserved
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,48, </td></tr>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,49, <tr><td>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,50," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,51," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,52, are met:
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,53, <ol>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,54,  <li>Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,55,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,56, <li>Redistributions in binary form must reproduce the above
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,57,"     copyright notice, this list of conditions and the following"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,58,     disclaimer in the documentation and/or other materials provided
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,59,     with the distribution.</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,60," <li>The end-user documentation included with the redistribution, if any,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,61,     must include the following acknowledgment:
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,62,     <code>This product includes software developed by the University of
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,63,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,64,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,65,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,66," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,67,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,68,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,69,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,70,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,71,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,72,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,73,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,74,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,75,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,76,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,77,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,78,     BE CORRECTED.</strong></li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,79, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,80,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,81,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,82,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,83,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,84,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,85,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,86,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,87,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,88,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,89, <ol></td></tr>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,90, </table>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,92, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,93, @author Burton S. Garbow (original fortran)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,94, @author Kenneth E. Hillstrom (original fortran)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,95, @author Jorge J. More (original fortran)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,97, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,98, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,101,ublic class LevenbergMarquardtEstimator extends AbstractEstimator implements Serializable {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,104, Build an estimator for least squares problems.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,105, <p>The default values for the algorithm settings are:
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,106,   <ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,107,    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,108,    <li>{@link #setMaxCostEval maximal cost evaluations}: 1000</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,109,    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,110,    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,111,    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,112,   </ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,113, </p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,115,ublic LevenbergMarquardtEstimator() {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,117,/ set up the superclass with a default  max cost evaluations setting
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,118,etMaxCostEval(1000);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,120,/ default values for the tuning parameters
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,121,etInitialStepBoundFactor(100.0);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,122,etCostRelativeTolerance(1.0e-10);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,123,etParRelativeTolerance(1.0e-10);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,124,etOrthoTolerance(1.0e-10);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,129, Set the positive input variable used in determining the initial step bound.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,130," This bound is set to the product of initialStepBoundFactor and the euclidean norm of diag*x if nonzero,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,131, or else to initialStepBoundFactor itself. In most cases factor should lie
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,132," in the interval (0.1, 100.0). 100.0 is a generally recommended value"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,134, @param initialStepBoundFactor initial step bound factor
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,135, @see #estimate
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,137,ublic void setInitialStepBoundFactor(double initialStepBoundFactor) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,138,his.initialStepBoundFactor = initialStepBoundFactor;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,142, Set the desired relative error in the sum of squares.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,144, @param costRelativeTolerance desired relative error in the sum of squares
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,145, @see #estimate
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,147,ublic void setCostRelativeTolerance(double costRelativeTolerance) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,148,his.costRelativeTolerance = costRelativeTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,152, Set the desired relative error in the approximate solution parameters.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,154, @param parRelativeTolerance desired relative error
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,155, in the approximate solution parameters
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,156, @see #estimate
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,158,ublic void setParRelativeTolerance(double parRelativeTolerance) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,159,his.parRelativeTolerance = parRelativeTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,163, Set the desired max cosine on the orthogonality.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,165, @param orthoTolerance desired max cosine on the orthogonality
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,166, between the function vector and the columns of the jacobian
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,167, @see #estimate
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,169,ublic void setOrthoTolerance(double orthoTolerance) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,170,his.orthoTolerance = orthoTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,174, Solve an estimation problem using the Levenberg-Marquardt algorithm.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,175," <p>The algorithm used is a modified Levenberg-Marquardt one, based"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,176," on the MINPACK <a href=""http://www.netlib.org/minpack/lmder.f"">lmder</a>"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,177, routine. The algorithm settings must have been set up before this method
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,178," is called with the {@link #setInitialStepBoundFactor},"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,179," {@link #setMaxCostEval}, {@link #setCostRelativeTolerance},"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,180, {@link #setParRelativeTolerance} and {@link #setOrthoTolerance} methods.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,181," If these methods have not been called, the default values set up by the"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,182, {@link #LevenbergMarquardtEstimator() constructor} will be used.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,183, <p>The authors of the original fortran function are:</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,184, <ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,185,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,186,   <li>Burton  S. Garbow</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,187,   <li>Kenneth E. Hillstrom</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,188,   <li>Jorge   J. More</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,189,   </ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,190, <p>Luc Maisonobe did the Java translation.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,192, @param problem estimation problem to solve
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,193, @exception OptimizationException if convergence cannot be
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,194, reached with the specified algorithm settings or if there are more variables
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,195, than equations
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,196, @see #setInitialStepBoundFactor
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,197, @see #setCostRelativeTolerance
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,198, @see #setParRelativeTolerance
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,199, @see #setOrthoTolerance
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,201,ublic void estimate(EstimationProblem problem)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,202,hrows OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,204,nitializeEstimate(problem);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,206,/ arrays shared with the other private methods
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,207,"olvedCols  = Math.min(rows, cols);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,208,iagR       = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,209,acNorm     = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,210,eta        = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,211,ermutation = new int[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,212,mDir       = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,214,/ local variables
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,215,"ouble   delta   = 0, xNorm = 0;"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,216,ouble[] diag    = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,217,ouble[] oldX    = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,218,ouble[] oldRes  = new double[rows];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,219,ouble[] work1   = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,220,ouble[] work2   = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,221,ouble[] work3   = new double[cols];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,223,/ evaluate the function at the starting point and calculate its norm
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,224,pdateResidualsAndCost();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,226,/ outer loop
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,227,mPar = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,228,oolean firstIteration = true;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,229,hile (true) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,231,/ compute the Q.R. decomposition of the jacobian matrix
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,232,pdateJacobian();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,233,rDecomposition();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,235,/ compute Qt.res
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,236,Ty(residuals);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,238,"/ now we don't need Q anymore,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,239,/ so let jacobian contain the R matrix with its diagonal elements
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,240,or (int k = 0; k < solvedCols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,241,nt pk = permutation[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,242,acobian[k * cols + pk] = diagR[pk];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,245,f (firstIteration) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,247,/ scale the variables according to the norms of the columns
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,248,/ of the initial jacobian
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,249,Norm = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,250,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,251,ouble dk = jacNorm[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,252,f (dk == 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,253,k = 1.0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,255,ouble xk = dk * parameters[k].getEstimate();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,256,Norm  += xk * xk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,257,iag[k] = dk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,259,Norm = Math.sqrt(xNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,261,/ initialize the step bound delta
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,262,elta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,266,/ check orthogonality between function vector and jacobian columns
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,267,ouble maxCosine = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,268,f (cost != 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,269,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,270,nt    pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,271,ouble s  = jacNorm[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,272,f (s != 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,273,ouble sum = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,274,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,275,um += jacobian[index] * residuals[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,277,"axCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,281,f (maxCosine <= orthoTolerance) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,282,eturn;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,285,/ rescale if necessary
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,286,or (int j = 0; j < cols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,287,"iag[j] = Math.max(diag[j], jacNorm[j]);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,290,/ inner loop
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,291,or (double ratio = 0; ratio < 1.0e-4;) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,293,/ save the state
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,294,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,295,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,296,ldX[pj] = parameters[pj].getEstimate();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,298,ouble previousCost = cost;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,299,ouble[] tmpVec = residuals;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,300,esiduals = oldRes;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,301,ldRes    = tmpVec;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,303,/ determine the Levenberg-Marquardt parameter
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,304,"etermineLMParameter(oldRes, delta, diag, work1, work2, work3);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,306,/ compute the new point and the norm of the evolution direction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,307,ouble lmNorm = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,308,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,309,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,310,mDir[pj] = -lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,311,arameters[pj].setEstimate(oldX[pj] + lmDir[pj]);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,312,ouble s = diag[pj] * lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,313,mNorm  += s * s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,315,mNorm = Math.sqrt(lmNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,317,"/ on the first iteration, adjust the initial step bound."
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,318,f (firstIteration) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,319,"elta = Math.min(delta, lmNorm);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,322,/ evaluate the function at x + p and calculate its norm
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,323,pdateResidualsAndCost();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,325,/ compute the scaled actual reduction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,326,ouble actRed = -1.0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,327,f (0.1 * cost < previousCost) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,328,ouble r = cost / previousCost;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,329,ctRed = 1.0 - r * r;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,332,/ compute the scaled predicted reduction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,333,/ and the scaled directional derivative
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,334,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,335,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,336,ouble dirJ = lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,337,ork1[j] = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,338,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,339,ork1[i] += jacobian[index] * dirJ;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,342,ouble coeff1 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,343,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,344,oeff1 += work1[j] * work1[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,346,ouble pc2 = previousCost * previousCost;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,347,oeff1 = coeff1 / pc2;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,348,ouble coeff2 = lmPar * lmNorm * lmNorm / pc2;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,349,ouble preRed = coeff1 + 2 * coeff2;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,350,ouble dirDer = -(coeff1 + coeff2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,352,/ ratio of the actual to the predicted reduction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,353,atio = (preRed == 0) ? 0 : (actRed / preRed);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,355,/ update the step bound
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,356,f (ratio <= 0.25) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,357,ouble tmp =
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,358,actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,359,f ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,360,mp = 0.1;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,362,"elta = tmp * Math.min(delta, 10.0 * lmNorm);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,363,mPar /= tmp;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,364, else if ((lmPar == 0) || (ratio >= 0.75)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,365,elta = 2 * lmNorm;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,366,mPar *= 0.5;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,369,/ test for successful iteration.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,370,f (ratio >= 1.0e-4) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,371,"/ successful iteration, update the norm"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,372,irstIteration = false;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,373,Norm = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,374,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,375,ouble xK = diag[k] * parameters[k].getEstimate();
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,376,Norm    += xK * xK;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,378,Norm = Math.sqrt(xNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,379, else {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,380,"/ failed iteration, reset the previous values"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,381,ost = previousCost;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,382,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,383,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,384,arameters[pj].setEstimate(oldX[pj]);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,386,mpVec    = residuals;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,387,esiduals = oldRes;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,388,ldRes    = tmpVec;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,391,/ tests for convergence.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,392,f (((Math.abs(actRed) <= costRelativeTolerance) &&
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,393,preRed <= costRelativeTolerance) &&
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,394,ratio <= 2.0)) ||
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,395,delta <= parRelativeTolerance * xNorm)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,396,eturn;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,399,/ tests for termination and stringent tolerances
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,400,/ (2.2204e-16 is the machine epsilon for IEEE754)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,401,f ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,402,"hrow new OptimizationException(""cost relative tolerance is too small ({0}),"" +"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,403," no further reduction in the"" +"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,404," sum of squares is possible"","
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,405,ostRelativeTolerance);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,406, else if (delta <= 2.2204e-16 * xNorm) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,407,"hrow new OptimizationException(""parameters relative tolerance is too small"" +"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,408," ({0}), no further improvement in"" +"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,409," the approximate solution is possible"","
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,410,arRelativeTolerance);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,411, else if (maxCosine <= 2.2204e-16)  {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,412,"hrow new OptimizationException(""orthogonality tolerance is too small ({0}),"" +"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,413," solution is orthogonal to the jacobian"","
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,414,rthoTolerance);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,424, Determine the Levenberg-Marquardt parameter.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,425, <p>This implementation is a translation in Java of the MINPACK
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,426," <a href=""http://www.netlib.org/minpack/lmpar.f"">lmpar</a>"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,427, routine.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,428, <p>This method sets the lmPar and lmDir attributes.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,429, <p>The authors of the original fortran function are:</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,430, <ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,431,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,432,   <li>Burton  S. Garbow</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,433,   <li>Kenneth E. Hillstrom</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,434,   <li>Jorge   J. More</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,435, </ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,436, <p>Luc Maisonobe did the Java translation.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,438, @param qy array containing qTy
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,439, @param delta upper bound on the euclidean norm of diagR * lmDir
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,440, @param diag diagonal matrix
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,441, @param work1 work array
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,442, @param work2 work array
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,443, @param work3 work array
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,445,"rivate void determineLMParameter(double[] qy, double delta, double[] diag,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,446,"ouble[] work1, double[] work2, double[] work3) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,448,"/ compute and store in x the gauss-newton direction, if the"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,449,"/ jacobian is rank-deficient, obtain a least squares solution"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,450,or (int j = 0; j < rank; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,451,mDir[permutation[j]] = qy[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,453,or (int j = rank; j < cols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,454,mDir[permutation[j]] = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,456,or (int k = rank - 1; k >= 0; --k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,457,nt pk = permutation[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,458,ouble ypk = lmDir[pk] / diagR[pk];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,459,"or (int i = 0, index = pk; i < k; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,460,mDir[permutation[i]] -= ypk * jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,462,mDir[pk] = ypk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,465,"/ evaluate the function at the origin, and test"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,466,/ for acceptance of the Gauss-Newton direction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,467,ouble dxNorm = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,468,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,469,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,470,ouble s = diag[pj] * lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,471,ork1[pj] = s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,472,xNorm += s * s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,474,xNorm = Math.sqrt(dxNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,475,ouble fp = dxNorm - delta;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,476,f (fp <= 0.1 * delta) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,477,mPar = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,478,eturn;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,481,"/ if the jacobian is not rank deficient, the Newton step provides"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,482,"/ a lower bound, parl, for the zero of the function,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,483,/ otherwise set this bound to zero
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,484,"ouble sum2, parl = 0;"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,485,f (rank == solvedCols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,486,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,487,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,488,ork1[pj] *= diag[pj] / dxNorm;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,490,um2 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,491,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,492,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,493,ouble sum = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,494,"or (int i = 0, index = pj; i < j; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,495,um += jacobian[index] * work1[permutation[i]];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,497,ouble s = (work1[pj] - sum) / diagR[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,498,ork1[pj] = s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,499,um2 += s * s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,501,arl = fp / (delta * sum2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,504,"/ calculate an upper bound, paru, for the zero of the function"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,505,um2 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,506,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,507,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,508,ouble sum = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,509,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,510,um += jacobian[index] * qy[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,512,um /= diag[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,513,um2 += sum * sum;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,515,ouble gNorm = Math.sqrt(sum2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,516,ouble paru = gNorm / delta;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,517,f (paru == 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,518,/ 2.2251e-308 is the smallest positive real for IEE754
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,519,"aru = 2.2251e-308 / Math.min(delta, 0.1);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,522,"/ if the input par lies outside of the interval (parl,paru),"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,523,/ set par to the closer endpoint
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,524,"mPar = Math.min(paru, Math.max(lmPar, parl));"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,525,f (lmPar == 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,526,mPar = gNorm / dxNorm;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,529,or (int countdown = 10; countdown >= 0; --countdown) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,531,/ evaluate the function at the current value of lmPar
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,532,f (lmPar == 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,533,"mPar = Math.max(2.2251e-308, 0.001 * paru);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,535,ouble sPar = Math.sqrt(lmPar);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,536,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,537,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,538,ork1[pj] = sPar * diag[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,540,"etermineLMDirection(qy, work1, work2, work3);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,542,xNorm = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,543,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,544,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,545,ouble s = diag[pj] * lmDir[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,546,ork3[pj] = s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,547,xNorm += s * s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,549,xNorm = Math.sqrt(dxNorm);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,550,ouble previousFP = fp;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,551,p = dxNorm - delta;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,553,"/ if the function is small enough, accept the current value"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,554,"/ of lmPar, also test for the exceptional cases where parl is zero"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,555,f ((Math.abs(fp) <= 0.1 * delta) ||
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,556,(parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,557,eturn;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,560,/ compute the Newton correction
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,561,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,562,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,563,ork1[pj] = work3[pj] * diag[pj] / dxNorm;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,565,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,566,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,567,ork1[pj] /= work2[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,568,ouble tmp = work1[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,569,or (int i = j + 1; i < solvedCols; ++i) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,570,ork1[permutation[i]] -= jacobian[i * cols + pj] * tmp;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,573,um2 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,574,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,575,ouble s = work1[permutation[j]];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,576,um2 += s * s;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,578,ouble correction = fp / (delta * sum2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,580,"/ depending on the sign of the function, update parl or paru."
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,581,f (fp > 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,582,"arl = Math.max(parl, lmPar);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,583, else if (fp < 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,584,"aru = Math.min(paru, lmPar);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,587,/ compute an improved estimate for lmPar
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,588,"mPar = Math.max(parl, lmPar + correction);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,594, Solve a*x = b and d*x = 0 in the least squares sense.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,595, <p>This implementation is a translation in Java of the MINPACK
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,596," <a href=""http://www.netlib.org/minpack/qrsolv.f"">qrsolv</a>"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,597, routine.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,598, <p>This method sets the lmDir and lmDiag attributes.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,599, <p>The authors of the original fortran function are:</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,600, <ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,601,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,602,   <li>Burton  S. Garbow</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,603,   <li>Kenneth E. Hillstrom</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,604,   <li>Jorge   J. More</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,605, </ul>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,606, <p>Luc Maisonobe did the Java translation.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,608, @param qy array containing qTy
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,609, @param diag diagonal matrix
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,610, @param lmDiag diagonal elements associated with lmDir
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,611, @param work work array
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,613,"rivate void determineLMDirection(double[] qy, double[] diag,"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,614,"ouble[] lmDiag, double[] work) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,616,/ copy R and Qty to preserve input and initialize s
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,617,"/  in particular, save the diagonal elements of R in lmDir"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,618,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,619,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,620,or (int i = j + 1; i < solvedCols; ++i) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,621,acobian[i * cols + pj] = jacobian[j * cols + permutation[i]];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,623,mDir[j] = diagR[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,624,ork[j]  = qy[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,627,/ eliminate the diagonal matrix d using a Givens rotation
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,628,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,630,"/ prepare the row of d to be eliminated, locating the"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,631,/ diagonal element using p from the Q.R. factorization
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,632,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,633,ouble dpj = diag[pj];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,634,f (dpj != 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,635,"rrays.fill(lmDiag, j + 1, lmDiag.length, 0);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,637,mDiag[j] = dpj;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,639,/  the transformations to eliminate the row of d
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,640,/ modify only a single element of Qty
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,641,"/ beyond the first n, which is initially zero."
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,642,ouble qtbpj = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,643,or (int k = j; k < solvedCols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,644,nt pk = permutation[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,646,/ determine a Givens rotation which eliminates the
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,647,/ appropriate element in the current row of d
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,648,f (lmDiag[k] != 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,650,"ouble sin, cos;"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,651,ouble rkk = jacobian[k * cols + pk];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,652,f (Math.abs(rkk) < Math.abs(lmDiag[k])) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,653,ouble cotan = rkk / lmDiag[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,654,in   = 1.0 / Math.sqrt(1.0 + cotan * cotan);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,655,os   = sin * cotan;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,656, else {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,657,ouble tan = lmDiag[k] / rkk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,658,os = 1.0 / Math.sqrt(1.0 + tan * tan);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,659,in = cos * tan;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,662,/ compute the modified diagonal element of R and
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,663,"/ the modified element of (Qty,0)"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,664,acobian[k * cols + pk] = cos * rkk + sin * lmDiag[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,665,ouble temp = cos * work[k] + sin * qtbpj;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,666,tbpj = -sin * work[k] + cos * qtbpj;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,667,ork[k] = temp;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,669,/ accumulate the tranformation in the row of s
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,670,or (int i = k + 1; i < solvedCols; ++i) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,671,ouble rik = jacobian[i * cols + pk];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,672,emp = cos * rik + sin * lmDiag[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,673,mDiag[i] = -sin * rik + cos * lmDiag[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,674,acobian[i * cols + pk] = temp;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,680,/ store the diagonal element of s and restore
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,681,/ the corresponding diagonal element of R
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,682,nt index = j * cols + permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,683,mDiag[j]       = jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,684,acobian[index] = lmDir[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,688,"/ solve the triangular system for z, if the system is"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,689,"/ singular, then obtain a least squares solution"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,690,nt nSing = solvedCols;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,691,or (int j = 0; j < solvedCols; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,692,f ((lmDiag[j] == 0) && (nSing == solvedCols)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,693,Sing = j;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,695,f (nSing < solvedCols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,696,ork[j] = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,699,f (nSing > 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,700,or (int j = nSing - 1; j >= 0; --j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,701,nt pj = permutation[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,702,ouble sum = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,703,or (int i = j + 1; i < nSing; ++i) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,704,um += jacobian[i * cols + pj] * work[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,706,ork[j] = (work[j] - sum) / lmDiag[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,710,/ permute the components of z back to components of lmDir
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,711,or (int j = 0; j < lmDir.length; ++j) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,712,mDir[permutation[j]] = work[j];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,718, Decompose a matrix A as A.P = Q.R using Householder transforms.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,719, <p>As suggested in the P. Lascaux and R. Theodor book
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,720, <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,721," l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,722, the Householder transforms with u<sub>k</sub> unit vectors such that:
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,723, <pre>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,724, H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,725, </pre>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,726, we use <sub>k</sub> non-unit vectors such that:
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,727, <pre>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,728, H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,729, </pre>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,730, where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,731, The beta<sub>k</sub> coefficients are provided upon exit as recomputing
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,732, them from the v<sub>k</sub> vectors would be costly.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,733, <p>This decomposition handles rank deficient cases since the tranformations
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,734, are performed in non-increasing columns norms order thanks to columns
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,735, pivoting. The diagonal elements of the R matrix are therefore also in
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,736, non-increasing absolute values order.</p>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,737, @exception OptimizationException if the decomposition cannot be performed
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,739,rivate void qrDecomposition() throws OptimizationException {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,741,/ initializations
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,742,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,743,ermutation[k] = k;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,744,ouble norm2 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,745,or (int index = k; index < jacobian.length; index += cols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,746,ouble akk = jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,747,orm2 += akk * akk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,749,acNorm[k] = Math.sqrt(norm2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,752,/ transform the matrix column after column
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,753,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,755,/ select the column with the greatest norm on active components
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,756,nt nextColumn = -1;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,757,ouble ak2 = Double.NEGATIVE_INFINITY;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,758,or (int i = k; i < cols; ++i) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,759,ouble norm2 = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,760,nt iDiag = k * cols + permutation[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,761,or (int index = iDiag; index < jacobian.length; index += cols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,762,ouble aki = jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,763,orm2 += aki * aki;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,765,f (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,766,hrow new OptimizationException(
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,767,"unable to perform Q.R decomposition on the {0}x{1} jacobian matrix"","
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,768,"ows, cols);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,770,f (norm2 > ak2) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,771,extColumn = i;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,772,k2        = norm2;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,775,f (ak2 == 0) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,776,ank = k;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,777,eturn;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,779,nt pk                  = permutation[nextColumn];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,780,ermutation[nextColumn] = permutation[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,781,ermutation[k]          = pk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,783,/ choose alpha such that Hk.u = alpha ek
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,784,nt    kDiag = k * cols + pk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,785,ouble akk   = jacobian[kDiag];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,786,ouble alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,787,ouble betak = 1.0 / (ak2 - akk * alpha);
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,788,eta[pk]     = betak;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,790,/ transform the current column
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,791,iagR[pk]        = alpha;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,792,acobian[kDiag] -= alpha;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,794,/ transform the remaining columns
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,795,or (int dk = cols - 1 - k; dk > 0; --dk) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,796,nt dkp = permutation[k + dk] - pk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,797,ouble gamma = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,798,or (int index = kDiag; index < jacobian.length; index += cols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,799,amma += jacobian[index] * jacobian[index + dkp];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,801,amma *= betak;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,802,or (int index = kDiag; index < jacobian.length; index += cols) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,803,acobian[index + dkp] -= gamma * jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,809,ank = solvedCols;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,814, Compute the product Qt.y for some Q.R. decomposition.
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,816, @param y vector to multiply (will be overwritten with the result)
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,818,rivate void qTy(double[] y) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,819,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,820,nt pk = permutation[k];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,821,nt kDiag = k * cols + pk;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,822,ouble gamma = 0;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,823,"or (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,824,amma += jacobian[index] * y[i];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,826,amma *= beta[pk];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,827,"or (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,828,[i] -= gamma * jacobian[index];
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,833,** Number of solved variables. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,834,rivate int solvedCols;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,836,** Diagonal elements of the R matrix in the Q.R. decomposition. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,837,rivate double[] diagR;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,839,** Norms of the columns of the jacobian matrix. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,840,rivate double[] jacNorm;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,842,** Coefficients of the Householder transforms vectors. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,843,rivate double[] beta;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,845,** Columns permutation array. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,846,rivate int[] permutation;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,848,** Rank of the jacobian matrix. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,849,rivate int rank;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,851,** Levenberg-Marquardt parameter. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,852,rivate double lmPar;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,854,** Parameters evolution direction associated with lmPar. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,855,rivate double[] lmDir;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,857,** Positive input variable used in determining the initial step bound. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,858,rivate double initialStepBoundFactor;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,860,** Desired relative error in the sum of squares. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,861,rivate double costRelativeTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,863,**  Desired relative error in the approximate solution parameters. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,864,rivate double parRelativeTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,866,** Desired max cosine on the orthogonality between the function vector
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,867, and the columns of the jacobian. */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,868,rivate double orthoTolerance;
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,870,** Serializable version identifier */
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,871,rivate static final long serialVersionUID = -5705952631533171019L;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,17,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,19,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,21,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,22,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,23,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,27,* This class solves a least squares problem using the Levenberg-Marquardt algorithm.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,29,* <p>This implementation <em>should</em> work even for over-determined systems
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,30,* (i.e. systems having more variables than equations). Over-determined systems
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,31,* are solved by ignoring the variables which have the smallest impact according
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,32,* to their jacobian column norm. Only the rank of the matrix and some loop bounds
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,33,* are changed to implement this.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,35,* <p>The resolution engine is a simple translation of the MINPACK <a
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,36,"* href=""http://www.netlib.org/minpack/lmder.f"">lmder</a> routine with minor"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,37,* changes. The changes include the over-determined resolution and the Q.R.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,38,* decomposition which has been rewritten following the algorithm described in the
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,39,* P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,40,"* appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986. The"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,41,* redistribution policy for MINPACK is available <a
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,42,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,43,* is reproduced below.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,45,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,46,* <tr><td>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,47,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,48,*    All rights reserved
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,49,* </td></tr>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,50,* <tr><td>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,51,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,52,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,53,* are met:
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,54,* <ol>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,55,*  <li>Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,56,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,57,* <li>Redistributions in binary form must reproduce the above
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,58,"*     copyright notice, this list of conditions and the following"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,59,*     disclaimer in the documentation and/or other materials provided
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,60,*     with the distribution.</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,61,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,62,*     must include the following acknowledgment:
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,63,*     <code>This product includes software developed by the University of
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,64,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,65,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,66,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,67,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,68,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,69,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,70,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,71,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,72,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,73,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,74,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,75,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,76,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,77,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,78,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,79,*     BE CORRECTED.</strong></li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,80,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,81,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,82,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,83,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,84,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,85,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,86,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,87,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,88,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,89,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,90,* <ol></td></tr>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,91,* </table>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,93,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,94,* @author Burton S. Garbow (original fortran)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,95,* @author Kenneth E. Hillstrom (original fortran)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,96,* @author Jorge J. More (original fortran)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,98,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,99,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,102,public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,104,/** Serializable version identifier */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,105,private static final long serialVersionUID = 8851282236194244323L;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,107,/** Number of solved variables. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,108,private int solvedCols;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,110,/** Diagonal elements of the R matrix in the Q.R. decomposition. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,111,private double[] diagR;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,113,/** Norms of the columns of the jacobian matrix. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,114,private double[] jacNorm;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,116,/** Coefficients of the Householder transforms vectors. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,117,private double[] beta;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,119,/** Columns permutation array. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,120,private int[] permutation;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,122,/** Rank of the jacobian matrix. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,123,private int rank;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,125,/** Levenberg-Marquardt parameter. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,126,private double lmPar;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,128,/** Parameters evolution direction associated with lmPar. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,129,private double[] lmDir;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,131,/** Positive input variable used in determining the initial step bound. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,132,private double initialStepBoundFactor;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,134,/** Desired relative error in the sum of squares. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,135,private double costRelativeTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,137,/**  Desired relative error in the approximate solution parameters. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,138,private double parRelativeTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,140,/** Desired max cosine on the orthogonality between the function vector
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,141,* and the columns of the jacobian. */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,142,private double orthoTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,145,* Build an optimizer for least squares problems.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,146,* <p>The default values for the algorithm settings are:
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,147,*   <ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,148,*    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,149,*    <li>{@link #setMaxCostEval maximal cost evaluations}: 1000</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,150,*    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,151,*    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,152,*    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,153,*   </ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,154,* </p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,156,public LevenbergMarquardtOptimizer() {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,158,// set up the superclass with a default  max cost evaluations setting
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,159,setMaxEvaluations(1000);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,161,// default values for the tuning parameters
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,162,setInitialStepBoundFactor(100.0);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,163,setCostRelativeTolerance(1.0e-10);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,164,setParRelativeTolerance(1.0e-10);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,165,setOrthoTolerance(1.0e-10);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,* Set the positive input variable used in determining the initial step bound.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,171,* This bound is set to the product of initialStepBoundFactor and the euclidean
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,172,"* norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,173,"* cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,174,* recommended value.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,176,* @param initialStepBoundFactor initial step bound factor
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,178,public void setInitialStepBoundFactor(double initialStepBoundFactor) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,179,this.initialStepBoundFactor = initialStepBoundFactor;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,183,* Set the desired relative error in the sum of squares.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,185,* @param costRelativeTolerance desired relative error in the sum of squares
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,187,public void setCostRelativeTolerance(double costRelativeTolerance) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,188,this.costRelativeTolerance = costRelativeTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,192,* Set the desired relative error in the approximate solution parameters.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,194,* @param parRelativeTolerance desired relative error
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,195,* in the approximate solution parameters
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,197,public void setParRelativeTolerance(double parRelativeTolerance) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,198,this.parRelativeTolerance = parRelativeTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,202,* Set the desired max cosine on the orthogonality.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,204,* @param orthoTolerance desired max cosine on the orthogonality
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,205,* between the function vector and the columns of the jacobian
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,207,public void setOrthoTolerance(double orthoTolerance) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,208,this.orthoTolerance = orthoTolerance;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,211,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,212,protected VectorialPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,213,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,215,// arrays shared with the other private methods
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,216,"solvedCols  = Math.min(rows, cols);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,217,diagR       = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,218,jacNorm     = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,219,beta        = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,220,permutation = new int[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,221,lmDir       = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223,// local variables
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,224,"double   delta   = 0, xNorm = 0;"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,225,double[] diag    = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,226,double[] oldX    = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,227,double[] oldRes  = new double[rows];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,228,double[] work1   = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,229,double[] work2   = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,230,double[] work3   = new double[cols];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,232,// evaluate the function at the starting point and calculate its norm
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,233,updateResidualsAndCost();
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,235,// outer loop
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,236,lmPar = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,237,boolean firstIteration = true;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,238,while (true) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,240,// compute the Q.R. decomposition of the jacobian matrix
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,241,updateJacobian();
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,242,qrDecomposition();
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,244,// compute Qt.res
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,245,qTy(residuals);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,247,"// now we don't need Q anymore,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,248,// so let jacobian contain the R matrix with its diagonal elements
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,249,for (int k = 0; k < solvedCols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,250,int pk = permutation[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,251,jacobian[k][pk] = diagR[pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,254,if (firstIteration) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,256,// scale the variables according to the norms of the columns
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,257,// of the initial jacobian
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,258,xNorm = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,259,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,260,double dk = jacNorm[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,261,if (dk == 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,262,dk = 1.0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,264,double xk = dk * variables[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,265,xNorm  += xk * xk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,266,diag[k] = dk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,268,xNorm = Math.sqrt(xNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,270,// initialize the step bound delta
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,271,delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,275,// check orthogonality between function vector and jacobian columns
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,276,double maxCosine = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,277,if (cost != 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,278,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,279,int    pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,280,double s  = jacNorm[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,281,if (s != 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,282,double sum = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,283,for (int i = 0; i <= j; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,284,sum += jacobian[i][pj] * residuals[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,286,"maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,290,if (maxCosine <= orthoTolerance) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,291,// convergence has been reached
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,292,"return new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,295,// rescale if necessary
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,296,for (int j = 0; j < cols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,297,"diag[j] = Math.max(diag[j], jacNorm[j]);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,300,// inner loop
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,301,for (double ratio = 0; ratio < 1.0e-4;) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,303,// save the state
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,304,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,305,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,306,oldX[pj] = variables[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,308,double previousCost = cost;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,309,double[] tmpVec = residuals;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,310,residuals = oldRes;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,311,oldRes    = tmpVec;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,313,// determine the Levenberg-Marquardt parameter
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,314,"determineLMParameter(oldRes, delta, diag, work1, work2, work3);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,316,// compute the new point and the norm of the evolution direction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,317,double lmNorm = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,318,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,319,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,320,lmDir[pj] = -lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,321,variables[pj] = oldX[pj] + lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,322,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,323,lmNorm  += s * s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,325,lmNorm = Math.sqrt(lmNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,327,"// on the first iteration, adjust the initial step bound."
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,328,if (firstIteration) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,329,"delta = Math.min(delta, lmNorm);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,332,// evaluate the function at x + p and calculate its norm
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,333,updateResidualsAndCost();
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,335,// compute the scaled actual reduction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,336,double actRed = -1.0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,337,if (0.1 * cost < previousCost) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,338,double r = cost / previousCost;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,339,actRed = 1.0 - r * r;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,342,// compute the scaled predicted reduction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,343,// and the scaled directional derivative
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,344,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,345,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,346,double dirJ = lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,347,work1[j] = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,348,for (int i = 0; i <= j; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,349,work1[i] += jacobian[i][pj] * dirJ;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,352,double coeff1 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,353,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,354,coeff1 += work1[j] * work1[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,356,double pc2 = previousCost * previousCost;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,357,coeff1 = coeff1 / pc2;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,358,double coeff2 = lmPar * lmNorm * lmNorm / pc2;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,359,double preRed = coeff1 + 2 * coeff2;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,360,double dirDer = -(coeff1 + coeff2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,362,// ratio of the actual to the predicted reduction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,363,ratio = (preRed == 0) ? 0 : (actRed / preRed);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,365,// update the step bound
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,366,if (ratio <= 0.25) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,367,double tmp =
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,368,(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,369,if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,370,tmp = 0.1;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,372,"delta = tmp * Math.min(delta, 10.0 * lmNorm);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,373,lmPar /= tmp;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,374,} else if ((lmPar == 0) || (ratio >= 0.75)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,375,delta = 2 * lmNorm;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,376,lmPar *= 0.5;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,379,// test for successful iteration.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,380,if (ratio >= 1.0e-4) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,381,"// successful iteration, update the norm"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,382,firstIteration = false;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,383,xNorm = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,384,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,385,double xK = diag[k] * variables[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,386,xNorm    += xK * xK;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,388,xNorm = Math.sqrt(xNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,389,} else {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,390,"// failed iteration, reset the previous values"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,391,cost = previousCost;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,392,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,393,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,394,variables[pj] = oldX[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,396,tmpVec    = residuals;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,397,residuals = oldRes;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,398,oldRes    = tmpVec;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,401,// tests for convergence.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,402,if (((Math.abs(actRed) <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,403,(preRed <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,404,(ratio <= 2.0)) ||
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,405,(delta <= parRelativeTolerance * xNorm)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,406,"return new VectorialPointValuePair(variables, objective);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,409,// tests for termination and stringent tolerances
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,410,// (2.2204e-16 is the machine epsilon for IEEE754)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,411,if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,412,"throw new OptimizationException(""cost relative tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,413,""" no further reduction in the"" +"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,414,""" sum of squares is possible"","
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,415,costRelativeTolerance);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,416,} else if (delta <= 2.2204e-16 * xNorm) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,417,"throw new OptimizationException(""parameters relative tolerance is too small"" +"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,418,""" ({0}), no further improvement in"" +"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,419,""" the approximate solution is possible"","
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,420,parRelativeTolerance);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,421,} else if (maxCosine <= 2.2204e-16)  {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,422,"throw new OptimizationException(""orthogonality tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,423,""" solution is orthogonal to the jacobian"","
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,424,orthoTolerance);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,434,* Determine the Levenberg-Marquardt parameter.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,435,* <p>This implementation is a translation in Java of the MINPACK
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,436,"* <a href=""http://www.netlib.org/minpack/lmpar.f"">lmpar</a>"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,437,* routine.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,438,* <p>This method sets the lmPar and lmDir attributes.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,439,* <p>The authors of the original fortran function are:</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,440,* <ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,441,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,442,*   <li>Burton  S. Garbow</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,443,*   <li>Kenneth E. Hillstrom</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,444,*   <li>Jorge   J. More</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,445,* </ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,446,* <p>Luc Maisonobe did the Java translation.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,448,* @param qy array containing qTy
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,449,* @param delta upper bound on the euclidean norm of diagR * lmDir
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,450,* @param diag diagonal matrix
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,451,* @param work1 work array
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,452,* @param work2 work array
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,453,* @param work3 work array
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,455,"private void determineLMParameter(double[] qy, double delta, double[] diag,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,456,"double[] work1, double[] work2, double[] work3) {"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,458,"// compute and store in x the gauss-newton direction, if the"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,459,"// jacobian is rank-deficient, obtain a least squares solution"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,460,for (int j = 0; j < rank; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,461,lmDir[permutation[j]] = qy[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,463,for (int j = rank; j < cols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,464,lmDir[permutation[j]] = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,466,for (int k = rank - 1; k >= 0; --k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,467,int pk = permutation[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,468,double ypk = lmDir[pk] / diagR[pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,469,for (int i = 0; i < k; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,470,lmDir[permutation[i]] -= ypk * jacobian[i][pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,472,lmDir[pk] = ypk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,475,"// evaluate the function at the origin, and test"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,476,// for acceptance of the Gauss-Newton direction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,477,double dxNorm = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,478,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,479,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,480,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,481,work1[pj] = s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,482,dxNorm += s * s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,484,dxNorm = Math.sqrt(dxNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,485,double fp = dxNorm - delta;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,486,if (fp <= 0.1 * delta) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,487,lmPar = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,488,return;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,491,"// if the jacobian is not rank deficient, the Newton step provides"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,492,"// a lower bound, parl, for the zero of the function,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,493,// otherwise set this bound to zero
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,494,"double sum2, parl = 0;"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,495,if (rank == solvedCols) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,496,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,497,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,498,work1[pj] *= diag[pj] / dxNorm;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,500,sum2 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,501,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,502,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,503,double sum = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,504,for (int i = 0; i < j; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,505,sum += jacobian[i][pj] * work1[permutation[i]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,507,double s = (work1[pj] - sum) / diagR[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,508,work1[pj] = s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,509,sum2 += s * s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,511,parl = fp / (delta * sum2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,514,"// calculate an upper bound, paru, for the zero of the function"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,515,sum2 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,516,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,517,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,518,double sum = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,519,for (int i = 0; i <= j; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,520,sum += jacobian[i][pj] * qy[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,522,sum /= diag[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,523,sum2 += sum * sum;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,525,double gNorm = Math.sqrt(sum2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,526,double paru = gNorm / delta;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,527,if (paru == 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,528,// 2.2251e-308 is the smallest positive real for IEE754
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,529,"paru = 2.2251e-308 / Math.min(delta, 0.1);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,532,"// if the input par lies outside of the interval (parl,paru),"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,533,// set par to the closer endpoint
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,534,"lmPar = Math.min(paru, Math.max(lmPar, parl));"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,535,if (lmPar == 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,536,lmPar = gNorm / dxNorm;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,539,for (int countdown = 10; countdown >= 0; --countdown) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,541,// evaluate the function at the current value of lmPar
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,542,if (lmPar == 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,543,"lmPar = Math.max(2.2251e-308, 0.001 * paru);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,545,double sPar = Math.sqrt(lmPar);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,546,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,547,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,548,work1[pj] = sPar * diag[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,550,"determineLMDirection(qy, work1, work2, work3);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,552,dxNorm = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,553,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,554,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,555,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,556,work3[pj] = s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,557,dxNorm += s * s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,559,dxNorm = Math.sqrt(dxNorm);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,560,double previousFP = fp;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,561,fp = dxNorm - delta;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,563,"// if the function is small enough, accept the current value"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,564,"// of lmPar, also test for the exceptional cases where parl is zero"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,565,if ((Math.abs(fp) <= 0.1 * delta) ||
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,566,((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,567,return;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,570,// compute the Newton correction
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,571,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,572,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,573,work1[pj] = work3[pj] * diag[pj] / dxNorm;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,575,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,576,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,577,work1[pj] /= work2[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,578,double tmp = work1[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,579,for (int i = j + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,580,work1[permutation[i]] -= jacobian[i][pj] * tmp;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,583,sum2 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,584,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,585,double s = work1[permutation[j]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,586,sum2 += s * s;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,588,double correction = fp / (delta * sum2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,590,"// depending on the sign of the function, update parl or paru."
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,591,if (fp > 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,592,"parl = Math.max(parl, lmPar);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,593,} else if (fp < 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,594,"paru = Math.min(paru, lmPar);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,597,// compute an improved estimate for lmPar
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,598,"lmPar = Math.max(parl, lmPar + correction);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,604,* Solve a*x = b and d*x = 0 in the least squares sense.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,605,* <p>This implementation is a translation in Java of the MINPACK
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,606,"* <a href=""http://www.netlib.org/minpack/qrsolv.f"">qrsolv</a>"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,607,* routine.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,608,* <p>This method sets the lmDir and lmDiag attributes.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,609,* <p>The authors of the original fortran function are:</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,610,* <ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,611,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,612,*   <li>Burton  S. Garbow</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,613,*   <li>Kenneth E. Hillstrom</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,614,*   <li>Jorge   J. More</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,615,* </ul>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,616,* <p>Luc Maisonobe did the Java translation.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,618,* @param qy array containing qTy
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,619,* @param diag diagonal matrix
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,620,* @param lmDiag diagonal elements associated with lmDir
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,621,* @param work work array
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,623,"private void determineLMDirection(double[] qy, double[] diag,"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,624,"double[] lmDiag, double[] work) {"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,626,// copy R and Qty to preserve input and initialize s
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,627,"//  in particular, save the diagonal elements of R in lmDir"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,628,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,629,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,630,for (int i = j + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,631,jacobian[i][pj] = jacobian[j][permutation[i]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,633,lmDir[j] = diagR[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,634,work[j]  = qy[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,637,// eliminate the diagonal matrix d using a Givens rotation
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,638,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,640,"// prepare the row of d to be eliminated, locating the"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,641,// diagonal element using p from the Q.R. factorization
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,642,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,643,double dpj = diag[pj];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,644,if (dpj != 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,645,"Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,647,lmDiag[j] = dpj;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,649,//  the transformations to eliminate the row of d
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,650,// modify only a single element of Qty
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,651,"// beyond the first n, which is initially zero."
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,652,double qtbpj = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,653,for (int k = j; k < solvedCols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,654,int pk = permutation[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,656,// determine a Givens rotation which eliminates the
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,657,// appropriate element in the current row of d
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,658,if (lmDiag[k] != 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,660,"double sin, cos;"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,661,double rkk = jacobian[k][pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,662,if (Math.abs(rkk) < Math.abs(lmDiag[k])) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,663,double cotan = rkk / lmDiag[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,664,sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,665,cos   = sin * cotan;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,666,} else {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,667,double tan = lmDiag[k] / rkk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,668,cos = 1.0 / Math.sqrt(1.0 + tan * tan);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,669,sin = cos * tan;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,672,// compute the modified diagonal element of R and
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,673,"// the modified element of (Qty,0)"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,674,jacobian[k][pk] = cos * rkk + sin * lmDiag[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,675,double temp = cos * work[k] + sin * qtbpj;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,676,qtbpj = -sin * work[k] + cos * qtbpj;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,677,work[k] = temp;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,679,// accumulate the tranformation in the row of s
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,680,for (int i = k + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,681,double rik = jacobian[i][pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,682,temp = cos * rik + sin * lmDiag[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,683,lmDiag[i] = -sin * rik + cos * lmDiag[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,684,jacobian[i][pk] = temp;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,690,// store the diagonal element of s and restore
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,691,// the corresponding diagonal element of R
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,692,lmDiag[j] = jacobian[j][permutation[j]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,693,jacobian[j][permutation[j]] = lmDir[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,697,"// solve the triangular system for z, if the system is"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,698,"// singular, then obtain a least squares solution"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,699,int nSing = solvedCols;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,700,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,701,if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,702,nSing = j;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,704,if (nSing < solvedCols) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,705,work[j] = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,708,if (nSing > 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,709,for (int j = nSing - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,710,int pj = permutation[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,711,double sum = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,712,for (int i = j + 1; i < nSing; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,713,sum += jacobian[i][pj] * work[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,715,work[j] = (work[j] - sum) / lmDiag[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,719,// permute the components of z back to components of lmDir
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,720,for (int j = 0; j < lmDir.length; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,721,lmDir[permutation[j]] = work[j];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,727,* Decompose a matrix A as A.P = Q.R using Householder transforms.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,728,* <p>As suggested in the P. Lascaux and R. Theodor book
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,729,* <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,730,"* l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,731,* the Householder transforms with u<sub>k</sub> unit vectors such that:
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,732,* <pre>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,733,* H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,734,* </pre>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,735,* we use <sub>k</sub> non-unit vectors such that:
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,736,* <pre>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,737,* H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,738,* </pre>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,739,* where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,740,* The beta<sub>k</sub> coefficients are provided upon exit as recomputing
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,741,* them from the v<sub>k</sub> vectors would be costly.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,742,* <p>This decomposition handles rank deficient cases since the tranformations
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,743,* are performed in non-increasing columns norms order thanks to columns
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,744,* pivoting. The diagonal elements of the R matrix are therefore also in
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,745,* non-increasing absolute values order.</p>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,746,* @exception OptimizationException if the decomposition cannot be performed
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,748,private void qrDecomposition() throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,750,// initializations
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,751,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,752,permutation[k] = k;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,753,double norm2 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,754,for (int i = 0; i < jacobian.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,755,double akk = jacobian[i][k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,756,norm2 += akk * akk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,758,jacNorm[k] = Math.sqrt(norm2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,761,// transform the matrix column after column
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,762,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,764,// select the column with the greatest norm on active components
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,765,int nextColumn = -1;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,766,double ak2 = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,767,for (int i = k; i < cols; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,768,double norm2 = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,769,for (int j = k; j < jacobian.length; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,770,double aki = jacobian[j][permutation[i]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,771,norm2 += aki * aki;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,773,if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,774,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,775,"""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix"","
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,776,"rows, cols);"
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,778,if (norm2 > ak2) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,779,nextColumn = i;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,780,ak2        = norm2;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,783,if (ak2 == 0) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,784,rank = k;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,785,return;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,787,int pk                  = permutation[nextColumn];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,788,permutation[nextColumn] = permutation[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,789,permutation[k]          = pk;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,791,// choose alpha such that Hk.u = alpha ek
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,792,double akk   = jacobian[k][pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,793,double alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,794,double betak = 1.0 / (ak2 - akk * alpha);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,795,beta[pk]     = betak;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,797,// transform the current column
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,798,diagR[pk]        = alpha;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,799,jacobian[k][pk] -= alpha;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,801,// transform the remaining columns
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,802,for (int dk = cols - 1 - k; dk > 0; --dk) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,803,double gamma = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,804,for (int j = k; j < jacobian.length; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,805,gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,807,gamma *= betak;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,808,for (int j = k; j < jacobian.length; ++j) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,809,jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,815,rank = solvedCols;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,820,* Compute the product Qt.y for some Q.R. decomposition.
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,822,* @param y vector to multiply (will be overwritten with the result)
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,824,private void qTy(double[] y) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,825,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,826,int pk = permutation[k];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,827,double gamma = 0;
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,828,for (int i = k; i < rows; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,829,gamma += jacobian[i][pk] * y[i];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,831,gamma *= beta[pk];
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,832,for (int i = k; i < rows; ++i) {
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,833,y[i] -= gamma * jacobian[i][pk];
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,20,mport java.util.ArrayList;
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,21,mport java.util.List;
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,24, Simple implementation of the {@link EstimationProblem
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,25, EstimationProblem} interface for boilerplate data handling.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,26, <p>This class <em>only</em> handles parameters and measurements
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,27, storage and unbound parameters filtering. It does not compute
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,28, anything by itself. It should either be used with measurements
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,29, implementation that are smart enough to know about the
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,30, various parameters in order to compute the partial derivatives
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,31, appropriately. Since the problem-specific logic is mainly related to
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,32," the various measurements models, the simplest way to use this class"
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,33, is by extending it and using one internal class extending
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,34, {@link WeightedMeasurement WeightedMeasurement} for each measurement
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,35, type. The instances of the internal classes would have access to the
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,36, various parameters and their current estimate.</p>
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,38, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,39, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,42,ublic class SimpleEstimationProblem implements EstimationProblem {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,45, Build an empty instance without parameters nor measurements.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,47,ublic SimpleEstimationProblem() {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,48,arameters   = new ArrayList<EstimatedParameter>();
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,49,easurements = new ArrayList<WeightedMeasurement>();
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,53, Get all the parameters of the problem.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,54, @return parameters
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,56,ublic EstimatedParameter[] getAllParameters() {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,57,eturn (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,61, Get the unbound parameters of the problem.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,62, @return unbound parameters
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,64,ublic EstimatedParameter[] getUnboundParameters() {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,66,/ filter the unbound parameters
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,67,ist<EstimatedParameter> unbound = new ArrayList<EstimatedParameter>(parameters.size());
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,68,or (EstimatedParameter p : parameters) {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,69,f (! p.isBound()) {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,70,nbound.add(p);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,74,/ convert to an array
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,75,eturn (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,80, Get the measurements of an estimation problem.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,81, @return measurements
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,83,ublic WeightedMeasurement[] getMeasurements() {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,84,eturn (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,87,** Add a parameter to the problem.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,88, @param p parameter to add
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,90,rotected void addParameter(EstimatedParameter p) {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,91,arameters.add(p);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,95, Add a new measurement to the set.
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,96, @param m measurement to add
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,98,rotected void addMeasurement(WeightedMeasurement m) {
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,99,easurements.add(m);
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,102,** Estimated parameters. */
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,103,rivate final List<EstimatedParameter> parameters;
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,105,** Measurements. */
False,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,106,rivate final List<WeightedMeasurement> measurements;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,18,ackage org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,23, This class represents measurements in estimation problems.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,25, <p>This abstract class implements all the methods needed to handle
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,26, measurements in a general way. It defines neither the {@link
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,27, #getTheoreticalValue getTheoreticalValue} nor the {@link
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,28," #getPartial getPartial} methods, which should be defined by"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,29, sub-classes according to the specific problem.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,31, <p>The {@link #getTheoreticalValue getTheoreticalValue} and {@link
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,32, #getPartial getPartial} methods must always use the current
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,33, estimate of the parameters set by the solver in the problem. These
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,34, parameters can be retrieved through the {@link
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,35, EstimationProblem#getAllParameters
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,36, EstimationProblem.getAllParameters} method if the measurements are
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,37," independent of the problem, or directly if they are implemented as"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,38, inner classes of the problem.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,40, <p>The instances for which the <code>ignored</code> flag is set
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,41, through the {@link #setIgnored setIgnored} method are ignored by the
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,42, solvers. This can be used to reject wrong measurements at some
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,43, steps of the estimation.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,45, @see EstimationProblem
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,47, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,48, @since 1.2
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,52,ublic abstract class WeightedMeasurement implements Serializable {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,54,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,55,rivate static final long serialVersionUID = 4360046376796901941L;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,58, Simple constructor.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,59," Build a measurement with the given parameters, and set its ignore"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,60, flag to false.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,61, @param weight weight of the measurement in the least squares problem
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,62," (two common choices are either to use 1.0 for all measurements, or to"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,63, use a value proportional to the inverse of the variance of the measurement
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,64, type)
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,66, @param measuredValue measured value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,68,"ublic WeightedMeasurement(double weight, double measuredValue) {"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,69,his.weight        = weight;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,70,his.measuredValue = measuredValue;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,71,gnored            = false;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,74,** Simple constructor.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,76, Build a measurement with the given parameters
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,78, @param weight weight of the measurement in the least squares problem
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,79, @param measuredValue measured value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,80, @param ignored true if the measurement should be ignored
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,82,"ublic WeightedMeasurement(double weight, double measuredValue,"
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,83,oolean ignored) {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,84,his.weight        = weight;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,85,his.measuredValue = measuredValue;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,86,his.ignored       = ignored;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,90, Get the weight of the measurement in the least squares problem
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,92, @return weight
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,94,ublic double getWeight() {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,95,eturn weight;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,99, Get the measured value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,101, @return measured value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,103,ublic double getMeasuredValue() {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,104,eturn measuredValue;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,108, Get the residual for this measurement
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,109, The residual is the measured value minus the theoretical value.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,111, @return residual
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,113,ublic double getResidual() {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,114,eturn measuredValue - getTheoreticalValue();
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,118, Get the theoretical value expected for this measurement
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,119, <p>The theoretical value is the value expected for this measurement
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,120, if the model and its parameter were all perfectly known.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,121, <p>The value must be computed using the current estimate of the parameters
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,122, set by the solver in the problem.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,124, @return theoretical value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,126,ublic abstract double getTheoreticalValue();
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,129, Get the partial derivative of the {@link #getTheoreticalValue
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,130, theoretical value} according to the parameter.
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,131, <p>The value must be computed using the current estimate of the parameters
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,132, set by the solver in the problem.</p>
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,134, @param parameter parameter against which the partial derivative
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,135, should be computed
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,136, @return partial derivative of the {@link #getTheoreticalValue
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,137, theoretical value}
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,139,ublic abstract double getPartial(EstimatedParameter parameter);
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,142, Set the ignore flag to the specified value
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,143, Setting the ignore flag to true allow to reject wrong
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,144," measurements, which sometimes can be detected only rather late."
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,146, @param ignored value for the ignore flag
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,148,ublic void setIgnored(boolean ignored) {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,149,his.ignored = ignored;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,153, Check if this measurement should be ignored
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,155, @return true if the measurement should be ignored
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,157,ublic boolean isIgnored() {
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,158,eturn ignored;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,161,** Measurement weight. */
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,162,rivate final double  weight;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,164,** Value of the measurements. */
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,165,rivate final double  measuredValue;
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,167,** Ignore measurement indicator. */
False,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,168,rivate       boolean ignored;
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,18,ackage org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,21,mport junit.framework.*;
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,23,ublic class EstimatedParameterTest
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,24,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,26,ublic EstimatedParameterTest(String name) {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,27,uper(name);
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,30,ublic void testConstruction() {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,32,"stimatedParameter p1 = new EstimatedParameter(""p1"", 1.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,33,"ssertTrue(p1.getName().equals(""p1""));"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,34,"heckValue(p1.getEstimate(), 1.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,35,ssertTrue(! p1.isBound());
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,37,"stimatedParameter p2 = new EstimatedParameter(""p2"", 2.0, true);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,38,"ssertTrue(p2.getName().equals(""p2""));"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,39,"heckValue(p2.getEstimate(), 2.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,40,ssertTrue(p2.isBound());
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,44,ublic void testBound() {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,46,"stimatedParameter p = new EstimatedParameter(""p"", 0.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,47,ssertTrue(! p.isBound());
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,48,.setBound(true);
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,49,ssertTrue(p.isBound());
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,50,.setBound(false);
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,51,ssertTrue(! p.isBound());
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,55,ublic void testEstimate() {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,57,"stimatedParameter p = new EstimatedParameter(""p"", 0.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,58,"heckValue(p.getEstimate(), 0.0);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,60,or (double e = 0.0; e < 10.0; e += 0.5) {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,61,.setEstimate(e);
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,62,"heckValue(p.getEstimate(), e);"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,67,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,68,eturn new TestSuite(EstimatedParameterTest.class);
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,71,"rivate void checkValue(double value, double expected) {"
False,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,72,ssertTrue(Math.abs(value - expected) < 1.0e-10);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,18,ackage org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,20,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,21,mport java.util.HashSet;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,23,mport org.apache.commons.math.optimization.OptimizationException;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,26,mport junit.framework.Test;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,27,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,28,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,31, <p>Some of the unit tests are re-implementations of the MINPACK <a
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,32," href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,33," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,34, The redistribution policy for MINPACK is available <a
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,35," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,36," convenience, it is reproduced below.</p>"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,38," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,39, <tr><td>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,40,    Minpack Copyright Notice (1999) University of Chicago.
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,41,    All rights reserved
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,42, </td></tr>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,43, <tr><td>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,44," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,45," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,46, are met:
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,47, <ol>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,48,  <li>Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,49,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,50, <li>Redistributions in binary form must reproduce the above
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,51,"     copyright notice, this list of conditions and the following"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,52,     disclaimer in the documentation and/or other materials provided
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,53,     with the distribution.</li>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,54," <li>The end-user documentation included with the redistribution, if any,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,55,     must include the following acknowledgment:
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,56,     <code>This product includes software developed by the University of
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,57,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,58,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,59,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,60," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,61,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,62,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,63,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,64,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,65,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,66,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,67,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,68,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,69,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,70,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,71,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,72,     BE CORRECTED.</strong></li>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,73, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,74,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,75,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,76,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,77,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,78,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,79,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,80,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,81,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,82,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,83, <ol></td></tr>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,84, </table>
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,86, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,87, @author Burton S. Garbow (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,88, @author Kenneth E. Hillstrom (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,89, @author Jorge J. More (original fortran minpack tests)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,90, @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,92,ublic class LevenbergMarquardtEstimatorTest
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,93,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,95,ublic LevenbergMarquardtEstimatorTest(String name) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,96,uper(name);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,99,ublic void testTrivial() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,100,inearProblem problem =
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,101,ew LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,102,"ew LinearMeasurement(new double[] {2},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,103,ew EstimatedParameter[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,104,"ew EstimatedParameter(""p0"", 0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,105,", 3.0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,107,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,108,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,109,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,110,ry {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,111,stimator.guessParametersErrors(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,112,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,113, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,114,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,115, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,116,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,118,"ssertEquals(1.5,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,119,"roblem.getUnboundParameters()[0].getEstimate(),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,120,.0e-10);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,123,ublic void testQRColumnsPermutation() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,125,stimatedParameter[] x = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,126,"ew EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,128,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,129,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,130,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,131,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,132,"ew LinearMeasurement(new double[] { 2.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,133,"ew EstimatedParameter[] { x[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,134,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,135,"ew LinearMeasurement(new double[] { 1.0, -2.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,136,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,137,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,140,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,141,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,142,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,143,"ssertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,144,"ssertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,148,ublic void testNoDependency() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,149,stimatedParameter[] p = new EstimatedParameter[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,150,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,151,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,152,"ew EstimatedParameter(""p2"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,153,"ew EstimatedParameter(""p3"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,154,"ew EstimatedParameter(""p4"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,155,"ew EstimatedParameter(""p5"", 0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,157,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,158,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,159,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,160,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,161,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,162,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,163,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,165,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,166,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,167,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,168,or (int i = 0; i < p.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,169,"ssertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,173,ublic void testOneSet() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,175,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,176,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,177,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,178,"ew EstimatedParameter(""p2"", 0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,180,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,181,"ew LinearMeasurement(new double[] { 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,182,"ew EstimatedParameter[] { p[0] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,183,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,184,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,185,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,186,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,187,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,188,"ew EstimatedParameter[] { p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,189,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,192,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,193,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,194,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,195,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,196,"ssertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,197,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,201,ublic void testTwoSets() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,202,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,203,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,204,"ew EstimatedParameter(""p1"", 1),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,205,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,206,"ew EstimatedParameter(""p3"", 3),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,207,"ew EstimatedParameter(""p4"", 4),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,208,"ew EstimatedParameter(""p5"", 5)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,211,ouble epsilon = 1.0e-7;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,212,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,214,/ 4 elements sub-problem
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,215,"ew LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,216,"ew EstimatedParameter[] { p[0], p[1], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,217,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,218,"ew LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,219,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,220,"9.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,221,"ew LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,222,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,223,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,224,"ew LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,225,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,226,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,228,/ 2 elements sub-problem
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,229,"ew LinearMeasurement(new double[] { epsilon, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,230,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,231,".0 + epsilon * epsilon),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,232,"ew LinearMeasurement(new double[] {  1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,233,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,234,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,238,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,239,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,240,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,241,"ssertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,242,"ssertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,243,"ssertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,244,"ssertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,245,"ssertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,246,"ssertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,250,ublic void testNonInversible() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,252,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,253,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,254,"ew EstimatedParameter(""p1"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,255,"ew EstimatedParameter(""p2"", 0)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,257,inearMeasurement[] m = new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,258,"ew LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,259,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,260,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,261,"ew LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,262,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,263,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,264,"ew LinearMeasurement(new double[] { -3.0, -9.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,265,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,266,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,268,inearProblem problem = new LinearProblem(m);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,270,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,271,ouble initialCost = estimator.getRMS(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,272,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,273,ssertTrue(estimator.getRMS(problem) < initialCost);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,274,ssertTrue(Math.sqrt(m.length) * estimator.getRMS(problem) > 0.6);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,275,ry {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,276,stimator.getCovariances(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,277,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,278, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,279,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,280, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,281,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,283,ouble dJ0 = 2 * (m[0].getResidual() * m[0].getPartial(p[0])
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,284, m[1].getResidual() * m[1].getPartial(p[0])
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,285, m[2].getResidual() * m[2].getPartial(p[0]));
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,286,ouble dJ1 = 2 * (m[0].getResidual() * m[0].getPartial(p[1])
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,287, m[1].getResidual() * m[1].getPartial(p[1]));
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,288,ouble dJ2 = 2 * (m[0].getResidual() * m[0].getPartial(p[2])
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,289, m[1].getResidual() * m[1].getPartial(p[2])
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,290, m[2].getResidual() * m[2].getPartial(p[2]));
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,291,"ssertEquals(0, dJ0, 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,292,"ssertEquals(0, dJ1, 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,293,"ssertEquals(0, dJ2, 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,297,ublic void testIllConditioned() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,298,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,299,"ew EstimatedParameter(""p0"", 0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,300,"ew EstimatedParameter(""p1"", 1),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,301,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,302,"ew EstimatedParameter(""p3"", 3)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,305,inearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,306,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,307,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,308,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,309,"ew LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,310,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,311,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,312,"ew LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,313,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,314,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,315,"ew LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,316,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,317,1.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,319,evenbergMarquardtEstimator estimator1 = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,320,stimator1.estimate(problem1);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,321,"ssertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,322,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,323,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,324,"ssertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,325,"ssertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,327,inearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,328,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,329,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,330,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,331,"ew LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,332,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,333,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,334,"ew LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,335,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,336,"3.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,337,"ew LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,338,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,339,1.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,341,evenbergMarquardtEstimator estimator2 = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,342,stimator2.estimate(problem2);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,343,"ssertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,344,"ssertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,345,"ssertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,346,"ssertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,347,"ssertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,351,ublic void testMoreEstimatedParametersSimple() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,353,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,354,"ew EstimatedParameter(""p0"", 7),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,355,"ew EstimatedParameter(""p1"", 6),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,356,"ew EstimatedParameter(""p2"", 5),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,357,"ew EstimatedParameter(""p3"", 4)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,359,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,360,"ew LinearMeasurement(new double[] { 3.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,361,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,362,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,363,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,364,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,365,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,366,"ew LinearMeasurement(new double[] { 2.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,367,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,368,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,371,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,372,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,373,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,377,ublic void testMoreEstimatedParametersUnsorted() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,378,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,379,"ew EstimatedParameter(""p0"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,380,"ew EstimatedParameter(""p1"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,381,"ew EstimatedParameter(""p2"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,382,"ew EstimatedParameter(""p3"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,383,"ew EstimatedParameter(""p4"", 2),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,384,"ew EstimatedParameter(""p5"", 2)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,386,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,387,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,388,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,389,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,390,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,391,"ew EstimatedParameter[] { p[2], p[3], p[4] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,392,"2.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,393,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,394,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,395,"1.0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,396,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,397,"ew EstimatedParameter[] { p[3], p[2], p[5] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,398,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,399,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,400,"ew EstimatedParameter[] { p[4], p[3] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,401,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,404,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,405,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,406,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,407,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,408,"ssertEquals(4.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,409,"ssertEquals(5.0, p[4].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,410,"ssertEquals(6.0, p[5].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,414,ublic void testRedundantEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,415,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,416,"ew EstimatedParameter(""p0"", 1),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,417,"ew EstimatedParameter(""p1"", 1)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,419,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,420,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,421,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,422,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,423,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,424,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,425,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,426,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,427,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,428,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,431,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,432,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,433,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,434,"ssertEquals(2.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,435,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,439,ublic void testInconsistentEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,440,stimatedParameter[] p = {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,441,"ew EstimatedParameter(""p0"", 1),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,442,"ew EstimatedParameter(""p1"", 1)"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,444,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,445,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,446,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,447,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,448,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,449,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,450,".0),"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,451,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,452,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,453,.0)
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,456,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,457,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,458,ssertTrue(estimator.getRMS(problem) > 0.1);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,462,ublic void testControlParameters() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,463,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,464,"ircle.addPoint( 30.0,  68.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,465,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,466,"ircle.addPoint(110.0, -20.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,467,"ircle.addPoint( 35.0,  15.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,468,"ircle.addPoint( 45.0,  97.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,469,"heckEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,470,"heckEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,471,"heckEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,472,"ircle.addPoint(300, -300);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,473,"heckEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,476,"rivate void checkEstimate(EstimationProblem problem,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,477,"ouble initialStepBoundFactor, int maxCostEval,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,478,"ouble costRelativeTolerance, double parRelativeTolerance,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,479,"ouble orthoTolerance, boolean shouldFail) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,480,ry {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,481,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,482,stimator.setInitialStepBoundFactor(initialStepBoundFactor);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,483,stimator.setMaxCostEval(maxCostEval);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,484,stimator.setCostRelativeTolerance(costRelativeTolerance);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,485,stimator.setParRelativeTolerance(parRelativeTolerance);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,486,stimator.setOrthoTolerance(orthoTolerance);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,487,stimator.estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,488,ssertTrue(! shouldFail);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,489, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,490,ssertTrue(shouldFail);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,491, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,492,"ail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,496,ublic void testCircleFitting() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,497,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,498,"ircle.addPoint( 30.0,  68.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,499,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,500,"ircle.addPoint(110.0, -20.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,501,"ircle.addPoint( 35.0,  15.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,502,"ircle.addPoint( 45.0,  97.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,503,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,504,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,505,ssertTrue(estimator.getCostEvaluations() < 10);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,506,ssertTrue(estimator.getJacobianEvaluations() < 10);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,507,ouble rms = estimator.getRMS(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,508,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,509,"ssertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,510,"ssertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,511,"ssertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,512,ouble[][] cov = estimator.getCovariances(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,513,"ssertEquals(1.839, cov[0][0], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,514,"ssertEquals(0.731, cov[0][1], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,515,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,516,"ssertEquals(0.786, cov[1][1], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,517,ouble[] errors = estimator.guessParametersErrors(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,518,"ssertEquals(1.384, errors[0], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,519,"ssertEquals(0.905, errors[1], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,521,/ add perfect measurements and check errors are reduced
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,522,ouble cx = circle.getX();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,523,ouble cy = circle.getY();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,524,ouble  r = circle.getRadius();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,525,or (double d= 0; d < 2 * Math.PI; d += 0.01) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,526,"ircle.addPoint(cx + r * Math.cos(d), cy + r * Math.sin(d));"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,528,stimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,529,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,530,ov = estimator.getCovariances(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,531,"ssertEquals(0.004, cov[0][0], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,532,"ssertEquals(6.40e-7, cov[0][1], 1.0e-9);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,533,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,534,"ssertEquals(0.003, cov[1][1], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,535,rrors = estimator.guessParametersErrors(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,536,"ssertEquals(0.004, errors[0], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,537,"ssertEquals(0.004, errors[1], 0.001);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,541,ublic void testCircleFittingBadInit() throws OptimizationException {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,542,"ircle circle = new Circle(-12, -12);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,543,ouble[][] points = new double[][] {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,544,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,545,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,546,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,547,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,548," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,549," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,550,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,551,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,552,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,553,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,554,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,555," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,556," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,557,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,558,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,559,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,560,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,561,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,562," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,563," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,564," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,565,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,566,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,567,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,568,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,569,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,570," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,571," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,572,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,574,or (int i = 0; i < points.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,575,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,577,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,578,stimator.estimate(circle);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,579,ssertTrue(estimator.getCostEvaluations() < 15);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,580,ssertTrue(estimator.getJacobianEvaluations() < 10);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,581,"ssertEquals( 0.030184491196225207, estimator.getRMS(circle), 1.0e-9);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,582,"ssertEquals( 0.2922350065939634,   circle.getRadius(), 1.0e-9);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,583,"ssertEquals(-0.15173845023862165,  circle.getX(),      1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,584,"ssertEquals( 0.20750021499570379,  circle.getY(),      1.0e-8);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,587,ublic void testMath199() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,588,ry {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,589,uadraticProblem problem = new QuadraticProblem();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,590,"roblem.addPoint (0, -3.182591015485607, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,591,"roblem.addPoint (1, -2.5581184967730577, 4.4E-323);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,592,"roblem.addPoint (2, -2.1488478161387325, 1.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,593,"roblem.addPoint (3, -1.9122489313410047, 4.4E-323);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,594,"roblem.addPoint (4, 1.7785661310051026, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,595,ew LevenbergMarquardtEstimator().estimate(problem);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,596,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,597, catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,598,/ expected behavior
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,603,rivate static class LinearProblem implements EstimationProblem {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,605,ublic LinearProblem(LinearMeasurement[] measurements) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,606,his.measurements = measurements;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,609,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,610,eturn measurements;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,613,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,614,eturn getAllParameters();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,617,ublic EstimatedParameter[] getAllParameters() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,618,ashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,619,or (int i = 0; i < measurements.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,620,stimatedParameter[] parameters = measurements[i].getParameters();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,621,or (int j = 0; j < parameters.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,622,et.add(parameters[j]);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,625,eturn (EstimatedParameter[]) set.toArray(new EstimatedParameter[set.size()]);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,628,rivate LinearMeasurement[] measurements;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,632,rivate static class LinearMeasurement extends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,634,"ublic LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,635,ouble setPoint) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,636,"uper(1.0, setPoint);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,637,his.factors = factors;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,638,his.parameters = parameters;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,641,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,642,ouble v = 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,643,or (int i = 0; i < factors.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,644, += factors[i] * parameters[i].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,646,eturn v;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,649,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,650,or (int i = 0; i < parameters.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,651,f (parameters[i] == parameter) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,652,eturn factors[i];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,655,eturn 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,658,ublic EstimatedParameter[] getParameters() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,659,eturn parameters;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,662,rivate double[] factors;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,663,rivate EstimatedParameter[] parameters;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,664,rivate static final long serialVersionUID = -3922448707008868580L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,668,rivate static class Circle implements EstimationProblem {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,670,"ublic Circle(double cx, double cy) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,671,"his.cx = new EstimatedParameter(""cx"", cx);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,672,"his.cy = new EstimatedParameter(""cy"", cy);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,673,oints  = new ArrayList<PointModel>();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,676,"ublic void addPoint(double px, double py) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,677,"oints.add(new PointModel(px, py));"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,680,ublic int getM() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,681,eturn points.size();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,684,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,685,eturn (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,688,ublic EstimatedParameter[] getAllParameters() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,689,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,692,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,693,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,696,ublic double getPartialRadiusX() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,697,ouble dRdX = 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,698,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,699,RdX += point.getPartialDiX();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,701,eturn dRdX / points.size();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,704,ublic double getPartialRadiusY() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,705,ouble dRdY = 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,706,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,707,RdY += point.getPartialDiY();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,709,eturn dRdY / points.size();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,712,ublic double getRadius() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,713,ouble r = 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,714,or (PointModel point : points) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,715, += point.getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,717,eturn r / points.size();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,720,ublic double getX() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,721,eturn cx.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,724,ublic double getY() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,725,eturn cy.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,728,rivate class PointModel extends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,730,"ublic PointModel(double px, double py) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,731,"uper(1.0, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,732,his.px = px;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,733,his.py = py;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,736,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,737,f (parameter == cx) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,738,eturn getPartialDiX() - getPartialRadiusX();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,739, else if (parameter == cy) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,740,eturn getPartialDiY() - getPartialRadiusY();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,742,eturn 0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,745,ublic double getCenterDistance() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,746,ouble dx = px - cx.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,747,ouble dy = py - cy.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,748,eturn Math.sqrt(dx * dx + dy * dy);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,751,ublic double getPartialDiX() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,752,eturn (cx.getEstimate() - px) / getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,755,ublic double getPartialDiY() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,756,eturn (cy.getEstimate() - py) / getCenterDistance();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,759,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,760,eturn getCenterDistance() - getRadius();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,763,rivate double px;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,764,rivate double py;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,765,rivate static final long serialVersionUID = 1L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,769,rivate EstimatedParameter cx;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,770,rivate EstimatedParameter cy;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,771,rivate ArrayList<PointModel> points;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,775,rivate static class QuadraticProblem extends SimpleEstimationProblem {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,777,rivate EstimatedParameter a;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,778,rivate EstimatedParameter b;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,779,rivate EstimatedParameter c;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,781,ublic QuadraticProblem() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,782," = new EstimatedParameter(""a"", 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,783," = new EstimatedParameter(""b"", 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,784," = new EstimatedParameter(""c"", 0.0);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,785,ddParameter(a);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,786,ddParameter(b);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,787,ddParameter(c);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,790,"ublic void addPoint(double x, double y, double w) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,791,"ddMeasurement(new LocalMeasurement(x, y, w));"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,794,ublic double getA() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,795,eturn a.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,798,ublic double getB() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,799,eturn b.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,802,ublic double getC() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,803,eturn c.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,806,ublic double theoreticalValue(double x) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,807,eturn ( (a.getEstimate() * x + b.getEstimate() ) * x + c.getEstimate());
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,810,"rivate double partial(double x, EstimatedParameter parameter) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,811,f (parameter == a) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,812,eturn x * x;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,813, else if (parameter == b) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,814,eturn x;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,815, else {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,816,eturn 1.0;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,820,rivate class LocalMeasurement extends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,822,rivate static final long serialVersionUID = 1555043155023729130L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,823,rivate final double x;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,825,/ constructor
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,826,"ublic LocalMeasurement(double x, double y, double w) {"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,827,"uper(w, y);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,828,his.x = x;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,831,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,832,eturn theoreticalValue(x);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,835,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,836,"eturn partial(x, parameter);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,842,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,843,eturn new TestSuite(LevenbergMarquardtEstimatorTest.class);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,18,package org.apache.commons.math.optimization.general;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,20,import java.awt.geom.Point2D;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,23,import java.util.List;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,25,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,27,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,30,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,34,import org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,35,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,38,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,39,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,40,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,41,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,42,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,43,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,45,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,46,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,47,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,48,*    All rights reserved
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,49,* </td></tr>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,50,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,51,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,52,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,53,* are met:
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,54,* <ol>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,55,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,56,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,57,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,58,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,59,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,60,*     with the distribution.</li>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,61,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,62,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,63,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,64,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,65,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,66,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,67,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,68,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,69,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,70,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,71,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,72,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,73,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,74,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,75,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,76,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,77,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,78,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,79,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,80,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,81,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,82,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,83,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,84,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,85,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,86,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,87,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,88,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,89,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,90,* <ol></td></tr>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,91,* </table>
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,93,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,94,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,95,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,96,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,97,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,99,public class LevenbergMarquardtOptimizerTest
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,100,extends TestCase {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,102,public LevenbergMarquardtOptimizerTest(String name) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,103,super(name);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,106,"public void testTrivial() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,107,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,108,"new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,109,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,110,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,111,"optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,112,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,113,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,114,optimizer.guessParametersErrors();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,115,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,116,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,117,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,118,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,119,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,121,"assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,124,"public void testQRColumnsPermutation() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,126,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,127,"new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,128,"new double[] { 4.0, 6.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,130,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,131,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,132,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,133,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,134,"assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,135,"assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,139,"public void testNoDependency() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,140,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,141,"{ 2, 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,142,"{ 0, 2, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,143,"{ 0, 0, 2, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,144,"{ 0, 0, 0, 2, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,145,"{ 0, 0, 0, 0, 2, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,146,"{ 0, 0, 0, 0, 0, 2 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,147,"}, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,148,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,149,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,150,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,151,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,152,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,153,for (int i = 0; i < problem.target.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,154,"assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,158,"public void testOneSet() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,160,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,161,"{  1,  0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,162,"{ -1,  1, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,163,"{  0, -1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,164,"}, new double[] { 1, 1, 1});"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,165,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,166,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,167,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,168,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,169,"assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,170,"assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,171,"assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,175,"public void testTwoSets() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,176,double epsilon = 1.0e-7;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,177,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,178,"{  2,  1,   0,  4,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,179,"{ -4, -2,   3, -7,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,180,"{  4,  1,  -2,  8,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,181,"{  0, -3, -12, -1,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,182,"{  0,  0,   0,  0, epsilon, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,183,"{  0,  0,   0,  0,       1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,184,"}, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,186,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,187,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,188,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,189,"new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,190,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,191,"assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,192,"assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,193,"assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,194,"assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,195,"assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,196,"assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,200,"public void testNonInversible() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,202,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,203,"{  1, 2, -3 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,204,"{  2, 1,  3 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,205,"{ -3, 0, -9 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,206,"}, new double[] { 1, 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,208,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,209,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,210,assertTrue(Math.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,211,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,212,optimizer.getCovariances();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,213,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,214,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,215,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,216,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,217,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,222,"public void testIllConditioned() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,223,LinearProblem problem1 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,224,"{ 10.0, 7.0,  8.0,  7.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,225,"{  7.0, 5.0,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,226,"{  8.0, 6.0, 10.0,  9.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,227,"{  7.0, 5.0,  9.0, 10.0 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,228,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,229,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,230,VectorialPointValuePair optimum1 =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,231,"optimizer.optimize(problem1, problem1.target, new double[] { 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,232,"new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,233,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,234,"assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,235,"assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,236,"assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,237,"assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,239,LinearProblem problem2 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,240,"{ 10.00, 7.00, 8.10, 7.20 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,241,"{  7.08, 5.04, 6.00, 5.00 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,242,"{  8.00, 5.98, 9.89, 9.00 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,243,"{  6.99, 4.99, 9.00, 9.98 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,244,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,245,VectorialPointValuePair optimum2 =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,246,"optimizer.optimize(problem2, problem2.target, new double[] { 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,247,"new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,248,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,249,"assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,250,"assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,251,"assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,252,"assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,256,"public void testMoreEstimatedParametersSimple() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,258,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,259,"{ 3.0, 2.0,  0.0, 0.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,260,"{ 0.0, 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,261,"{ 2.0, 0.0,  1.0, 0.0 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,262,"}, new double[] { 7.0, 3.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,264,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,265,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,266,"new double[] { 7, 6, 5, 4 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,267,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,271,"public void testMoreEstimatedParametersUnsorted() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,272,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,273,"{ 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,274,"{ 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,275,"{ 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,276,"{ 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,277,"{ 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,278,"}, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,280,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,281,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,282,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,283,"new double[] { 2, 2, 2, 2, 2, 2 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,284,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,285,"assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,286,"assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,287,"assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,288,"assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,292,"public void testRedundantEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,293,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,294,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,295,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,296,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,297,"}, new double[] { 3.0, 1.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,299,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,300,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,301,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,302,"new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,303,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,304,"assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,305,"assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,309,"public void testInconsistentEquations() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,310,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,311,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,312,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,313,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,314,"}, new double[] { 3.0, 1.0, 4.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,316,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,317,"optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,318,assertTrue(optimizer.getRMS() > 0.1);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,322,"public void testInconsistentSizes() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,323,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,324,"new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,325,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,327,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,328,"optimizer.optimize(problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,329,"assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,330,"assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,331,"assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,333,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,334,"optimizer.optimize(problem, problem.target,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,335,"new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,336,"new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,337,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,338,} catch (OptimizationException oe) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,339,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,340,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,341,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,344,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,345,"optimizer.optimize(problem, new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,346,"new double[] { 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,347,"new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,348,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,349,} catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,350,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,351,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,352,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,357,public void testControlParameters() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,358,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,359,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,360,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,361,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,362,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,363,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,364,"checkEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,365,"checkEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,366,"checkEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,367,"circle.addPoint(300, -300);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,368,"checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,371,"private void checkEstimate(VectorialDifferentiableObjectiveFunction problem,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,372,"double initialStepBoundFactor, int maxCostEval,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,373,"double costRelativeTolerance, double parRelativeTolerance,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,374,"double orthoTolerance, boolean shouldFail) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,375,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,376,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,377,optimizer.setInitialStepBoundFactor(initialStepBoundFactor);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,378,optimizer.setMaxEvaluations(maxCostEval);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,379,optimizer.setCostRelativeTolerance(costRelativeTolerance);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,380,optimizer.setParRelativeTolerance(parRelativeTolerance);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,381,optimizer.setOrthoTolerance(orthoTolerance);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,382,"optimizer.optimize(problem, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,383,"new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,384,assertTrue(! shouldFail);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,386,assertTrue(shouldFail);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,387,} catch (ObjectiveException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,388,assertTrue(shouldFail);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,389,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,390,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,394,"public void testCircleFitting() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,395,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,396,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,397,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,398,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,399,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,400,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,401,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,402,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,403,"optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,404,"new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,405,assertTrue(optimizer.getEvaluations() < 10);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,406,assertTrue(optimizer.getJacobianEvaluations() < 10);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,407,double rms = optimizer.getRMS();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,408,"assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,409,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,410,"assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,411,"assertEquals(96.07590211815305, center.x,      1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,412,"assertEquals(48.13516790438953, center.y,      1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,413,double[][] cov = optimizer.getCovariances();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,414,"assertEquals(1.839, cov[0][0], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,415,"assertEquals(0.731, cov[0][1], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,416,"assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,417,"assertEquals(0.786, cov[1][1], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,418,double[] errors = optimizer.guessParametersErrors();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,419,"assertEquals(1.384, errors[0], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,420,"assertEquals(0.905, errors[1], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,422,// add perfect measurements and check errors are reduced
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,423,double  r = circle.getRadius(center);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,424,for (double d= 0; d < 2 * Math.PI; d += 0.01) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,425,"circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,427,double[] target = new double[circle.getN()];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,428,"Arrays.fill(target, 0.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,429,double[] weights = new double[circle.getN()];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,430,"Arrays.fill(weights, 2.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,431,optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,432,"optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,433,cov = optimizer.getCovariances();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,434,"assertEquals(0.0016, cov[0][0], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,435,"assertEquals(3.2e-7, cov[0][1], 1.0e-9);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,436,"assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,437,"assertEquals(0.0016, cov[1][1], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,438,errors = optimizer.guessParametersErrors();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,439,"assertEquals(0.002, errors[0], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,440,"assertEquals(0.002, errors[1], 0.001);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,444,"public void testCircleFittingBadInit() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,445,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,446,double[][] points = new double[][] {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,447,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,448,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,449,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,450,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,451,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,452,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,453,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,454,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,455,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,456,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,457,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,458,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,459,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,460,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,461,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,462,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,463,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,464,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,465,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,466,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,467,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,468,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,469,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,470,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,471,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,472,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,473,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,474,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,475,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,477,double[] target = new double[points.length];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,478,"Arrays.fill(target, 0.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,479,double[] weights = new double[points.length];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,480,"Arrays.fill(weights, 2.0);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,481,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,482,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,484,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,485,"optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-10, 1.0e-10));"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,486,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,487,"optimizer.optimize(circle, target, weights, new double[] { -12, -12 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,488,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,489,assertTrue(optimizer.getEvaluations() < 25);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,490,assertTrue(optimizer.getJacobianEvaluations() < 20);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,491,"assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,492,"assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,493,"assertEquals(-0.151738,  center.x,      1.0e-6);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,494,"assertEquals( 0.2075001, center.y,      1.0e-6);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,497,"public void testMath199() throws ObjectiveException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,498,try {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,499,QuadraticProblem problem = new QuadraticProblem();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,500,"problem.addPoint (0, -3.182591015485607);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,501,"problem.addPoint (1, -2.5581184967730577);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,502,"problem.addPoint (2, -2.1488478161387325);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,503,"problem.addPoint (3, -1.9122489313410047);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,504,"problem.addPoint (4, 1.7785661310051026);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,505,"new LevenbergMarquardtOptimizer().optimize(problem,"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,506,"new double[] { 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,507,"new double[] { 0.0, 4.4e-323, 1.0, 4.4e-323, 0.0 },"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,508,"new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,509,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,510,} catch (OptimizationException ee) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,511,// expected behavior
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,516,private static class LinearProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,518,private static final long serialVersionUID = 703247177355019415L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,519,final RealMatrix factors;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,520,final double[] target;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,521,"public LinearProblem(double[][] factors, double[] target) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,522,this.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,523,this.target  = target;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,526,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,527,return factors.getData();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,530,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,531,return factors.operate(variables);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,536,private static class Circle implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,538,private static final long serialVersionUID = -4711170319243817874L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,540,private ArrayList<Point2D.Double> points;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,542,public Circle() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,543,points  = new ArrayList<Point2D.Double>();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,546,"public void addPoint(double px, double py) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,547,"points.add(new Point2D.Double(px, py));"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,550,public int getN() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,551,return points.size();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,554,public double getRadius(Point2D.Double center) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,555,double r = 0;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,556,for (Point2D.Double point : points) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,557,r += point.distance(center);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,559,return r / points.size();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,562,"public double[][] jacobian(double[] variables, double[] value)"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,563,"throws ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,565,int n = points.size();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,566,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,568,// gradient of the optimal radius
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,569,double dRdX = 0;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,570,double dRdY = 0;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,571,for (Point2D.Double pk : points) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,572,double dk = pk.distance(center);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,573,dRdX += (center.x - pk.x) / dk;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,574,dRdY += (center.y - pk.y) / dk;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,576,dRdX /= n;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,577,dRdY /= n;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,579,// jacobian of the radius residuals
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,580,double[][] jacobian = new double[n][2];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,581,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,582,Point2D.Double pi = points.get(i);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,583,double di   = pi.distance(center);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,584,jacobian[i][0] = (center.x - pi.x) / di - dRdX;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,585,jacobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,588,return jacobian;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,592,public double[] objective(double[] variables)
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,593,"throws ObjectiveException, IllegalArgumentException {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,595,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,596,double radius = getRadius(center);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,598,double[] residuals = new double[points.size()];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,599,for (int i = 0; i < residuals.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,600,residuals[i] = points.get(i).distance(center) - radius;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,603,return residuals;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,609,private static class QuadraticProblem implements VectorialDifferentiableObjectiveFunction {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,611,private static final long serialVersionUID = -247096133023967957L;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,612,private List<Double> x;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,613,private List<Double> y;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,615,public QuadraticProblem() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,616,x = new ArrayList<Double>();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,617,y = new ArrayList<Double>();
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,620,"public void addPoint(double x, double y) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,621,this.x.add(x);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,622,this.y.add(y);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,625,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,626,double[][] jacobian = new double[x.size()][3];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,627,for (int i = 0; i < jacobian.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,628,jacobian[i][0] = x.get(i) * x.get(i);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,629,jacobian[i][1] = x.get(i);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,630,jacobian[i][2] = 1.0;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,632,return jacobian;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,635,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,636,double[] values = new double[x.size()];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,637,for (int i = 0; i < values.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,638,values[i] = (variables[0] * x.get(i) + variables[1]) * x.get(i) + variables[2];
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,640,return values;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,645,public static Test suite() {
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,646,return new TestSuite(LevenbergMarquardtOptimizerTest.class);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,22,import org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,24,import org.apache.commons.math.optimization.VectorialDifferentiableObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,25,import org.apache.commons.math.optimization.VectorialPointValuePair;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,89,ublic class MinpackTest
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,90,xtends TestCase {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,92,public class MinpackTest extends TestCase {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,505,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,506,stimator.setMaxCostEval(100 * (function.getN() + 1));
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,507,stimator.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,508,stimator.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,509,stimator.setOrthoTolerance(2.22044604926e-16);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,510,ssertTrue(function.checkTheoreticalStartCost(estimator.getRMS(function)));
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,511,ry {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,512,stimator.estimate(function);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,513,ssertFalse(exceptionExpected);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,514, catch (OptimizationException lsse) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,515,ssertTrue(exceptionExpected);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,517,ssertTrue(function.checkTheoreticalMinCost(estimator.getRMS(function)));
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,518,ssertTrue(function.checkTheoreticalMinParams());
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,507,LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,508,optimizer.setMaxEvaluations(100 * (function.getN() + 1));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,509,optimizer.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,510,optimizer.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,511,optimizer.setOrthoTolerance(2.22044604926e-16);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,512,//      assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,513,try {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,514,VectorialPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,515,"optimizer.optimize(function,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,516,"function.getTarget(), function.getWeight(),"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,517,function.getStartPoint());
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,518,assertFalse(exceptionExpected);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,519,assertTrue(function.checkTheoreticalMinCost(optimizer.getRMS()));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,520,assertTrue(function.checkTheoreticalMinParams(optimum));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,521,} catch (OptimizationException lsse) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,522,assertTrue(exceptionExpected);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,523,} catch (ObjectiveException oe) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,524,assertTrue(exceptionExpected);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,521,rivate static abstract class MinpackFunction implements EstimationProblem {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,528,private static abstract class MinpackFunction
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,529,implements VectorialDifferentiableObjectiveFunction {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,523,"rotected MinpackFunction(int m,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,524,"ouble[] startParams,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,525,"ouble   theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,526,"ouble   theoreticalMinCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,527,ouble[] theoreticalMinParams) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,528,his.m = m;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,529,his.n = startParams.length;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,530,arameters = new EstimatedParameter[n];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,531,or (int i = 0; i < n; ++i) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,532,"arameters[i] = new EstimatedParameter(""p"" + i, startParams[i]);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,531,private static final long serialVersionUID = -6209760235478794233L;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,532,protected int      n;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,533,protected int      m;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,534,protected double[] startParams;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,535,protected double   theoreticalMinCost;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,536,protected double[] theoreticalMinParams;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,537,protected double   costAccuracy;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,538,protected double   paramsAccuracy;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,540,"protected MinpackFunction(int m, double[] startParams,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,541,"double theoreticalMinCost, double[] theoreticalMinParams) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,542,this.m = m;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,543,this.n = startParams.length;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,544,this.startParams          = startParams.clone();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,545,this.theoreticalMinCost   = theoreticalMinCost;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,546,this.theoreticalMinParams = theoreticalMinParams;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,547,this.costAccuracy         = 1.0e-8;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,548,this.paramsAccuracy       = 1.0e-5;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,534,his.theoreticalStartCost = theoreticalStartCost;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,535,his.theoreticalMinCost   = theoreticalMinCost;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,536,his.theoreticalMinParams = theoreticalMinParams;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,537,his.costAccuracy         = 1.0e-8;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,538,his.paramsAccuracy       = 1.0e-5;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,541,"rotected static double[] buildArray(int n, double x) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,542,ouble[] array = new double[n];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,543,"rrays.fill(array, x);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,544,eturn array;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,547,rotected void setCostAccuracy(double costAccuracy) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,548,his.costAccuracy = costAccuracy;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,551,rotected void setParamsAccuracy(double paramsAccuracy) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,552,his.paramsAccuracy = paramsAccuracy;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,555,ublic int getN() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,556,eturn parameters.length;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,559,ublic boolean checkTheoreticalStartCost(double rms) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,560,ouble threshold = costAccuracy * (1.0 + theoreticalStartCost);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,561,eturn Math.abs(Math.sqrt(m) * rms - theoreticalStartCost) <= threshold;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,564,ublic boolean checkTheoreticalMinCost(double rms) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,565,ouble threshold = costAccuracy * (1.0 + theoreticalMinCost);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,566,eturn Math.abs(Math.sqrt(m) * rms - theoreticalMinCost) <= threshold;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,569,ublic boolean checkTheoreticalMinParams() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,570,f (theoreticalMinParams != null) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,571,or (int i = 0; i < theoreticalMinParams.length; ++i) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,572,ouble mi = theoreticalMinParams[i];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,573,ouble vi = parameters[i].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,574,f (Math.abs(mi - vi) > (paramsAccuracy * (1.0 + Math.abs(mi)))) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,575,eturn false;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,579,eturn true;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,582,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,583,eightedMeasurement[] measurements = new WeightedMeasurement[m];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,584,or (int i = 0; i < m; ++i) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,585,easurements[i] = new MinpackMeasurement(i);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,551,"protected static double[] buildArray(int n, double x) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,552,double[] array = new double[n];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,553,"Arrays.fill(array, x);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,554,return array;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,587,eturn measurements;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,590,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,591,eturn parameters;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,557,public double[] getTarget() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,558,"return buildArray(m, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,594,ublic EstimatedParameter[] getAllParameters() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,595,eturn parameters;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,561,public double[] getWeight() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,562,"return buildArray(m, 1.0);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,598,rotected abstract double[][] getJacobian();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,565,public double[] getStartPoint() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,566,return startParams.clone();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,600,rotected abstract double[] getResiduals();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,569,protected void setCostAccuracy(double costAccuracy) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,570,this.costAccuracy = costAccuracy;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,602,rivate class MinpackMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,573,protected void setParamsAccuracy(double paramsAccuracy) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,574,this.paramsAccuracy = paramsAccuracy;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,604,ublic MinpackMeasurement(int index) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,605,"uper(1.0, 0.0);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,606,his.index = index;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,577,public int getN() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,578,return startParams.length;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,609,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,610,/ this is obviously NOT efficient as we recompute the whole vector
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,611,"/ each time we need only one element, but it is only for test"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,612,/ purposes and is simpler to check.
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,613,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,614,eturn getResiduals()[index];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,581,public boolean checkTheoreticalMinCost(double rms) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,582,double threshold = costAccuracy * (1.0 + theoreticalMinCost);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,583,return Math.abs(Math.sqrt(m) * rms - theoreticalMinCost) <= threshold;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,617,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,618,/ this is obviously NOT efficient as we recompute the whole jacobian
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,619,"/ each time we need only one element, but it is only for test"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,620,/ purposes and is simpler to check.
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,621,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,622,or (int j = 0; j < n; ++j) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,623,f (parameter == parameters[j]) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,624,eturn getJacobian()[index][j];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,586,public boolean checkTheoreticalMinParams(VectorialPointValuePair optimum) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,587,double[] params = optimum.getPointRef();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,588,if (theoreticalMinParams != null) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,589,for (int i = 0; i < theoreticalMinParams.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,590,double mi = theoreticalMinParams[i];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,591,double vi = params[i];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,592,if (Math.abs(mi - vi) > (paramsAccuracy * (1.0 + Math.abs(mi)))) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,593,return false;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,627,eturn 0;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,597,return true;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,630,rivate int index;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,631,rivate static final long serialVersionUID = 1L;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,600,"public abstract double[][] jacobian(double[] variables, double[] value);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,635,rotected int                  n;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,636,rotected int                  m;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,637,rotected EstimatedParameter[] parameters;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,638,rotected double               theoreticalStartCost;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,639,rotected double               theoreticalMinCost;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,640,rotected double[]             theoreticalMinParams;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,641,rotected double               costAccuracy;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,642,rotected double               paramsAccuracy;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,602,public abstract double[] objective(double[] variables);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,608,private static final long serialVersionUID = -9030323226268039536L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,651,"uper(m, buildArray(n, x0), theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,652,"heoreticalMinCost, buildArray(n, -1.0));"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,613,"super(m, buildArray(n, x0), theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,614,"buildArray(n, -1.0));"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,655,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,617,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,667,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,629,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,670,um += parameters[i].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,632,sum += variables[i];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,675,[i] = parameters[i].getEstimate() - t;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,637,f[i] = variables[i] - t;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,647,private static final long serialVersionUID = 8494863245104608300L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,688,"uper(m, buildArray(n, x0), theoreticalStartCost, theoreticalMinCost, null);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,652,"super(m, buildArray(n, x0), theoreticalMinCost, null);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,691,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,655,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,702,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,666,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,706,um += (i + 1) * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,670,sum += (i + 1) * variables[i];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,682,private static final long serialVersionUID = -3316653043091995018L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,720,"ath.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,725,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,690,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,744,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,709,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,748,um += (i + 1) * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,713,sum += (i + 1) * variables[i];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,726,private static final long serialVersionUID = 2893438180956569134L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,762,"uper(2, startParams, theoreticalStartCost, 0.0, buildArray(2, 1.0));"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,729,"super(2, startParams, 0.0, buildArray(2, 1.0));"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,765,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,766,ouble x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,732,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,733,double x1 = variables[0];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,770,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,771,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,772,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,737,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,738,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,739,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,747,private static final long serialVersionUID = 220613787843200102L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,782,"uper(3, startParams, theoreticalStartCost, 0.0,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,783,"ew double[] { 1.0, 0.0, 0.0 });"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,751,"super(3, startParams, 0.0, new double[] { 1.0, 0.0, 0.0 });"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,786,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,787,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,788,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,754,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,755,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,756,double x2 = variables[1];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,799,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,800,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,801,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,802,ouble x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,767,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,768,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,769,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,770,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,794,private static final long serialVersionUID = 7298364171208142405L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,828,"uper(4, startParams, theoreticalStartCost, 0.0, buildArray(4, 0.0));"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,798,"super(4, startParams, 0.0, buildArray(4, 0.0));"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,831,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,832,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,833,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,834,ouble x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,835,ouble x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,801,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,802,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,803,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,804,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,805,double x4 = variables[3];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,844,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,845,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,846,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,847,ouble x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,848,ouble x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,814,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,815,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,816,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,817,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,818,double x4 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,834,private static final long serialVersionUID = 2892404999344244214L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,868,"uper(2, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,869,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,840,"super(2, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,841,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,872,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,873,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,844,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,845,double x2 = variables[1];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,880,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,881,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,882,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,852,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,853,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,854,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,865,private static final long serialVersionUID = 5990442612572087668L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,897,"uper(15, buildArray(3, x0), theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,898,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,871,"super(15, buildArray(3, x0), theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,872,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,901,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,902,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,903,ouble   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,875,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,876,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,877,double   x3 = variables[2];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,916,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,917,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,918,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,919,ouble   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,890,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,891,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,892,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,893,double   x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,914,private static final long serialVersionUID = -4867445739880495801L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,944,"uper(11, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,945,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,920,"super(11, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,921,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,952,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,953,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,954,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,955,ouble   x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,956,ouble   x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,928,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,929,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,930,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,931,double   x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,932,double   x4 = variables[3];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,969,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,970,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,971,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,972,ouble x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,973,ouble x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,945,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,946,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,947,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,948,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,949,double x4 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,970,private static final long serialVersionUID = -838060619150131027L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,998,"uper(16, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,999,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,976,"super(16, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,977,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1006,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1007,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1008,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1009,ouble   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,984,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,985,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,986,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,987,double   x3 = variables[2];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1021,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1022,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1023,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1024,ouble x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,999,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1000,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1001,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1002,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1021,private static final long serialVersionUID = -9034759294980218927L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1047,"uper(31, buildArray(n, x0), theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1048,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1027,"super(31, buildArray(n, x0), theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1028,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1051,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1031,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1060,2 += dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1040,s2 += dx * variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1076,acobian[m - 1][0]= -2 * parameters[0].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1056,jacobian[m - 1][0]= -2 * variables[0];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1083,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1063,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1090,1 += j * dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1070,s1 += j * dx * variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1096,2 += dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1076,s2 += dx * variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1102,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1103,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1082,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1083,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1095,private static final long serialVersionUID = 5511403858142574493L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1117,"uper(m, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1118,".0, new double[] { 1.0, 10.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1099,"super(m, startParams, 0.0,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1100,"new double[] { 1.0, 10.0, 1.0 });"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1121,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1122,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1123,ouble   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1103,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1104,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1105,double   x2 = variables[1];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1136,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1137,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1138,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1139,ouble x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1118,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1119,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1120,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1121,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1135,private static final long serialVersionUID = -2489165190443352947L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1157,"uper(m, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1158,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1141,"super(m, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1142,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1161,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1162,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1163,ouble   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1145,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1146,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1147,double   x2 = variables[1];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1172,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1173,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1174,ouble x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1156,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1157,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1158,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1171,private static final long serialVersionUID = 8340018645694243910L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1191,"uper(m, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1192,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1177,"super(m, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1178,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1195,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1196,ouble   x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1197,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1198,ouble   x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1199,ouble   x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1181,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1182,double   x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1183,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1184,double   x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1185,double   x4 = variables[3];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1213,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1214,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1215,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1216,ouble x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1217,ouble x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1199,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1200,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1201,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1202,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1203,double x4 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1218,private static final long serialVersionUID = -2394877275028008594L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1245,"uper(m, buildChebyquadArray(n, factor), theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1246,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1233,"super(m, buildChebyquadArray(n, factor), theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1234,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1249,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1237,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1259,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1247,double tmp2 = 2 * variables[j] - 1;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1278,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1266,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1284,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1272,double tmp2 = 2 * variables[j] - 1;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1300,private static final long serialVersionUID = 8239594490466964725L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1316,"uper(m, buildArray(m, factor), theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1317,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1306,"super(m, buildArray(m, factor), theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1307,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1320,rotected double[][] getJacobian() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1310,"public double[][] jacobian(double[] variables, double[] value) {"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1328,rod *= parameters[j].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1318,prod *= variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1336,stimatedParameter vj = parameters[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1337,ouble temp = vj.getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1326,double temp = variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1343,rod *= parameters[k].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1332,prod *= variables[k];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1354,rotected double[] getResiduals() {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1343,public double[] objective(double[] variables) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1359,um  += parameters[j].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1360,rod *= parameters[j].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1348,sum  += variables[j];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1349,prod *= variables[j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1363,[i] = parameters[i].getEstimate() + sum;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1352,f[i] = variables[i] + sum;
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1362,private static final long serialVersionUID = 4006743521149849494L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1377,"uper(33, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1378,"heoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1368,"super(33, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1369,theoreticalMinParams);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1381,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1382,ouble   x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1383,ouble   x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1384,ouble   x4 = parameters[3].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1385,ouble   x5 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1372,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1373,double   x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1374,double   x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1375,double   x4 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1376,double   x5 = variables[4];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1398,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1399,ouble x1 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1400,ouble x2 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1401,ouble x3 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1402,ouble x4 = parameters[3].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1403,ouble x5 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1389,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1390,double x1 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1391,double x2 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1392,double x3 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1393,double x4 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1394,double x5 = variables[4];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1415,private static final long serialVersionUID = -8418268780389858746L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1428,"uper(65, startParams, theoreticalStartCost,"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1429,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1432,rotected double[][] getJacobian() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1433,ouble   x01 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1434,ouble   x02 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1435,ouble   x03 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1436,ouble   x04 = parameters[3].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1437,ouble   x05 = parameters[4].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1438,ouble   x06 = parameters[5].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1439,ouble   x07 = parameters[6].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1440,ouble   x08 = parameters[7].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1441,ouble   x09 = parameters[8].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1442,ouble   x10 = parameters[9].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1443,ouble   x11 = parameters[10].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1421,"super(65, startParams, theoreticalMinCost,"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1422,theoreticalMinParams);
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1425,"public double[][] jacobian(double[] variables, double[] value) {"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1426,double   x01 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1427,double   x02 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1428,double   x03 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1429,double   x04 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1430,double   x05 = variables[4];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1431,double   x06 = variables[5];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1432,double   x07 = variables[6];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1433,double   x08 = variables[7];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1434,double   x09 = variables[8];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1435,double   x10 = variables[9];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1436,double   x11 = variables[10];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1468,rotected double[] getResiduals() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1469,ouble x01 = parameters[0].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1470,ouble x02 = parameters[1].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1471,ouble x03 = parameters[2].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1472,ouble x04 = parameters[3].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1473,ouble x05 = parameters[4].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1474,ouble x06 = parameters[5].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1475,ouble x07 = parameters[6].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1476,ouble x08 = parameters[7].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1477,ouble x09 = parameters[8].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1478,ouble x10 = parameters[9].getEstimate();
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1479,ouble x11 = parameters[10].getEstimate();
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1461,public double[] objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1462,double x01 = variables[0];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1463,double x02 = variables[1];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1464,double x03 = variables[2];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1465,double x04 = variables[3];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1466,double x05 = variables[4];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1467,double x06 = variables[5];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1468,double x07 = variables[6];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1469,double x08 = variables[7];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1470,double x09 = variables[8];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1471,double x10 = variables[9];
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,1472,double x11 = variables[10];
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,18,ackage org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,21,mport junit.framework.*;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,23,ublic class WeightedMeasurementTest
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,24,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,26,ublic WeightedMeasurementTest(String name) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,27,uper(name);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,28,1 = null;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,29,2 = null;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,32,ublic void testConstruction() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,33,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,34,"heckValue(m.getWeight(), 3.0);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,35,"heckValue(m.getMeasuredValue(), theoretical() + 0.1);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,38,ublic void testIgnored() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,39,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,40,ssertTrue(!m.isIgnored());
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,41,.setIgnored(true);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,42,ssertTrue(m.isIgnored());
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,43,.setIgnored(false);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,44,ssertTrue(!m.isIgnored());
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,47,ublic void testTheory() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,48,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,49,"heckValue(m.getTheoreticalValue(), theoretical());"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,50,"heckValue(m.getResidual(), 0.1);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,52,ouble oldP1 = p1.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,53,1.setEstimate(oldP1 + m.getResidual() / m.getPartial(p1));
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,54,"heckValue(m.getResidual(), 0.0);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,55,1.setEstimate(oldP1);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,56,"heckValue(m.getResidual(), 0.1);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,58,ouble oldP2 = p2.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,59,2.setEstimate(oldP2 + m.getResidual() / m.getPartial(p2));
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,60,"heckValue(m.getResidual(), 0.0);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,61,2.setEstimate(oldP2);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,62,"heckValue(m.getResidual(), 0.1);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,66,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,67,eturn new TestSuite(WeightedMeasurementTest.class);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,70,ublic void setUp() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,71,"1 = new EstimatedParameter(""p1"", 1.0);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,72,"2 = new EstimatedParameter(""p2"", 2.0);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,75,ublic void tearDown() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,76,1 = null;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,77,2 = null;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,80,"rivate void checkValue(double value, double expected) {"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,81,ssertTrue(Math.abs(value - expected) < 1.0e-10);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,84,rivate double theoretical() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,85,eturn 3 * p1.getEstimate() - p2.getEstimate();
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,88,rivate double partial(EstimatedParameter p) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,89,f (p == p1) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,90,eturn 3.0;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,91, else if (p == p2) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,92,eturn -1.0;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,93, else {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,94,eturn 0.0;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,98,rivate static class MyMeasurement
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,99,xtends WeightedMeasurement {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,101,"ublic MyMeasurement(double weight, double measuredValue,"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,102,eightedMeasurementTest testInstance) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,103,"uper(weight, measuredValue);"
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,104,his.testInstance = testInstance;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,107,ublic double getTheoreticalValue() {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,108,eturn testInstance.theoretical();
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,111,ublic double getPartial(EstimatedParameter p) {
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,112,eturn testInstance.partial(p);
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,115,rivate transient WeightedMeasurementTest testInstance;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,117,rivate static final long serialVersionUID = -246712922500792332L;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,121,rivate EstimatedParameter p1;
False,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,122,rivate EstimatedParameter p2;

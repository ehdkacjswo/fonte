is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,20,import java.util.Arrays;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,31,ublic class PolynomialFunction implements DifferentiableUnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,34,"public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,37,* Serializtion identifier
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,39,private static final long serialVersionUID = -7726511984200295583L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,326,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,327,@Override
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,328,public int hashCode() {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,329,final int prime = 31;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,330,int result = 1;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,331,result = prime * result + Arrays.hashCode(coefficients);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,332,return result;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,335,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,336,@Override
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,337,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,338,if (this == obj)
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,339,return true;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,340,if (obj == null)
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,341,return false;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,342,if (!(obj instanceof PolynomialFunction))
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,343,return false;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,344,PolynomialFunction other = (PolynomialFunction) obj;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,345,"if (!Arrays.equals(coefficients, other.coefficients))"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,346,return false;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,347,return true;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,19,mport java.io.Serializable;
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,21,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,229,public void testSerial() {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,230,"PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,231,"assertEquals(p2, TestUtils.serializeAndRecover(p2));"

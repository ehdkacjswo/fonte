is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,27, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,27,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,204,hile (p < .99) {
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,204,while (p < .99) {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,148,"0016.708722343366, 559.8117399576674, 6750.190788301587,"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,148,"10016.708722343366, 559.8117399576674, 6750.190788301587,"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,152,"4175.088570476366,1975.7955858241994,5193.178422374075,"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,152,"-4175.088570476366,1975.7955858241994,5193.178422374075,"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,374," 0.0, 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,375," 1.0, 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,376," -1.0,0.0, 1.0 }"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,374,"{ 0.0, 1.0, -1.0 },"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,375,"{ 1.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,376,"{ -1.0,0.0, 1.0 }"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,74," 11, 12 }, { 21, 22 }"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,74,"{ 11, 12 }, { 21, 22 }"
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,87,eturn gradientVector;
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,87,return gradientVector;
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,231,"estUtils.assertEquals(expectedGeneratorUpperBounds, dist.getGeneratorUpperBounds(), tol);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,231,"TestUtils.assertEquals(expectedGeneratorUpperBounds, dist.getGeneratorUpperBounds(), tol);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,221,* TODO: re-enable when MATH-282 is resolved
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,221,/* TODO: re-enable when MATH-282 is resolved
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,232,/ large means
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,232,// large means
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,252,nt minExpectedCount = 7;     // Minimum size of expected bin count
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,253,ong maxObservedValue = 0;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,254,ouble alpha = 0.001;         // Probability of false failure
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,252,int minExpectedCount = 7;     // Minimum size of expected bin count
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,253,long maxObservedValue = 0;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,254,double alpha = 0.001;         // Probability of false failure
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,265,  Set up bins for chi-square test.
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,265,*  Set up bins for chi-square test.
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,294,"  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,294,"*  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,309,inal int binCount = binBounds.size() + 1;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,309,final int binCount = binBounds.size() + 1;
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,86,ssertTrue(result > 0 && result <= 1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,86,assertTrue(result > 0 && result <= 1);
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,"eightedStatistic.evaluate(values, weights), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,"weightedStatistic.evaluate(values, weights), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,140,"ssertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,140,"assertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);"

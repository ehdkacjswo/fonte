is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,36,"/** <a href=""http://en.wikipedia.org/wiki/Euler-Mascheroni_constant"">Euler-Mascheroni constant</a> */"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,37,public static final double GAMMA = 0.577215664901532860606512090082;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,269,// limits for switching algorithm in digamma
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,270,/** C limit */
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,271,private static final double C_LIMIT = 49;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,272,/** S limit */
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,273,private static final double S_LIMIT = 1e-5;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,276,"* <p>Computes the <a href=""http://en.wikipedia.org/wiki/Digamma_function"">digamma function</a>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,277,* using the algorithm defined in <br/>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,278,"* Jose Bernardo, Algorithm AS 103: Psi (Digamma) Function, Applied Statistics, 1976.</p>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,280,* <p>Some of the constants have been changed to increase accuracy at the moderate expense
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,281,* of run-time performance.  The result should be accurate to within 10^-8 absolute tolerance for
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,282,* x >= 10^-5 and within 10^-8 relative tolerance for x > 0.</p>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,284,* <p> Performance for large negative values of x will be quite expensive (proportional to
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,285,* |x|).  Accuracy for negative values of x should be about 10^-8 absolute for results
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,286,* less than 10^5 and 10^-8 relative for results larger than that.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,287,* @param x argument
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,288,* @return value of the digamma function
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,290,public static double digamma(double x) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,291,if (x > 0 && x <= S_LIMIT) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,292,// use method 5 from Bernardo AS103
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,293,// accurate to O(x)
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,294,return -GAMMA - 1 / x;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,297,if (x >= C_LIMIT) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,298,// use method 4 (accurate to O(1/x^8)
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,299,double inv = 1 / (x * x);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,300,//            1       1        1         1
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,301,// log(x) -  --- - ------ - ------- - -------
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,302,//           2 x   12 x^2   120 x^4   252 x^6
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,303,return Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,306,return digamma(x + 1) - 1 / x;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,29, Constructor for BetaTest.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,30, @param name
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,93,public void testDigammaLargeArgs() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,94,double eps = 1e-8;
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,95,"assertEquals(4.6001618527380874002, Gamma.digamma(100), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,96,"assertEquals(3.9019896734278921970, Gamma.digamma(50), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,97,"assertEquals(2.9705239922421490509, Gamma.digamma(20), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,98,"assertEquals(2.9958363947076465821, Gamma.digamma(20.5), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,99,"assertEquals(2.2622143570941481605, Gamma.digamma(10.1), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,100,"assertEquals(2.1168588189004379233, Gamma.digamma(8.8), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,101,"assertEquals(1.8727843350984671394, Gamma.digamma(7), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,102,"assertEquals(0.42278433509846713939, Gamma.digamma(2), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,103,"assertEquals(-100.56088545786867450, Gamma.digamma(0.01), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,104,"assertEquals(-4.0390398965921882955, Gamma.digamma(-0.8), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,105,"assertEquals(4.2003210041401844726, Gamma.digamma(-6.3), eps);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,108,public void testDigammaSmallArgs() {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,109,// values for negative powers of 10 from 1 to 30 as computed by webMathematica with 20 digits
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,110,// see functions.wolfram.com
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,111,"double[] expected = {-10.423754940411076795, -100.56088545786867450, -1000.5755719318103005,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,112,"-10000.577051183514335, -100000.57719921568107, -1.0000005772140199687e6, -1.0000000577215500408e7,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,113,"-1.0000000057721564845e8, -1.0000000005772156633e9, -1.0000000000577215665e10, -1.0000000000057721566e11,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,114,"-1.0000000000005772157e12, -1.0000000000000577216e13, -1.0000000000000057722e14, -1.0000000000000005772e15, -1e+16,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,115,"-1e+17, -1e+18, -1e+19, -1e+20, -1e+21, -1e+22, -1e+23, -1e+24, -1e+25, -1e+26,"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,116,"-1e+27, -1e+28, -1e+29, -1e+30};"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,117,for (double n = 1; n < 30; n++) {
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,118,"checkRelativeError(String.format(""Test %.0f: "", n), expected[(int) (n - 1)], Gamma.digamma(Math.pow(10.0, -n)), 1e-8);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,122,"private void checkRelativeError(String msg, double expected, double actual, double tolerance) {"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,123,"assertEquals(msg, expected, actual, Math.abs(tolerance * actual));"

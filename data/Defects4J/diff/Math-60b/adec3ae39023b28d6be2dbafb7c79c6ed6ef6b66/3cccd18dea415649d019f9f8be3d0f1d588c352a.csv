is_addition,old_file_path,new_file_path,line_num,content
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,17,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,19,ublic class DerivativeOperatorFactory {
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,21,ublic static DerivativeOperatorFactory newInstance() {
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,22,eturn null;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,25,ublic FunctionOperator getDefaultDerivativeOperator() {
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,26,eturn null;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,29,ublic FunctionOperator getCenteredDifferenceDerivativeOperator(){
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,30,eturn null;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactory.java,33,/ and so on for other implementations of numerical deriv's
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,17,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,19,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,24, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,25, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,27,ublic class DerivativeOperatorFactoryTest extends TestCase {
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,30, Constructor for DerivativeOperatorFactoryTest.
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,31, @param arg0
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,33,ublic DerivativeOperatorFactoryTest(String arg0) {
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,34,uper(arg0);
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,37,/UnivariateRealFunction f = new SomeUserDefinedFunction();
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,38,/FunctionOperator derivative =
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,39,/  DerivativeOperatorFactory.newInstance().getDefaultDerivativeOperator();
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,41,/UnivariateRealFunction g = derivative.evaluate( f );
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,43,/ to obtain the value of f'(0.0) use
False,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,src/experimental/org/apache/commons/math/analysis/DerivativeOperatorFactoryTest.java,44,/double fprime_at_0 = g.value( 0.0 );
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,17,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,19,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,21,ublic interface FunctionOperator {
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,25, Evaluate the Function Operator for a given real single variable function.
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,27, @param f the function which should be evaluated
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,28, @return the resultant function
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,29, @throws MathException if the function couldn't be evaluated
False,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,src/experimental/org/apache/commons/math/analysis/FunctionOperator.java,31,ublic UnivariateRealFunction evaluate(UnivariateRealFunction f) throws MathException;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,18,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,21, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,22, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,24,ublic abstract class UnivariateRealFunctionProxy
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,25,mplements UnivariateRealFunction {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,27,rivate UnivariateRealFunction function;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,30, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,32,ublic UnivariateRealFunctionProxy(UnivariateRealFunction function) {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,33,uper();
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,34,etFunction(function);
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,38, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,40,rotected UnivariateRealFunction getFunction() {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,41,eturn function;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,45, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,47,rivate void setFunction(UnivariateRealFunction function) {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java,48,his.function = function;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,18,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,20,mport org.apache.commons.math.analysis.derivative.BackwardDifferenceDerivative;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,21,mport org.apache.commons.math.analysis.derivative.CenterDifferenceDerivative;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,22,mport org.apache.commons.math.analysis.derivative.ForwardDifferenceDerivative;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,25, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,26, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,28,ublic class UnivariateRealFunctionUtils {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,31, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,33,rivate UnivariateRealFunctionUtils() {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,34,uper();
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,37,"ublic static UnivariateRealFunction backwardDifferenceDerivative(UnivariateRealFunction function, double delta) {"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,38,"eturn BackwardDifferenceDerivative.decorate(function, delta);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,41,"ublic static UnivariateRealFunction centerDifferenceDerivative(UnivariateRealFunction function, double delta) {"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,42,"eturn CenterDifferenceDerivative.decorate(function, delta);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,45,"ublic static UnivariateRealFunction forwardDifferenceDerivative(UnivariateRealFunction function, double delta) {"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java,46,"eturn ForwardDifferenceDerivative.decorate(function, delta);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,18,ackage org.apache.commons.math.analysis;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,20,mport org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,22,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,25, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,26, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,28,ublic class UnivariateRealFunctionUtilsTest extends TestCase {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,32,ublic void testLocalMaximumCentered() {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,33,nivariateRealFunction function = new SinFunction();
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,34,"nivariateRealFunction derivative = UnivariateRealFunctionUtils.centerDifferenceDerivative(function, 1.0e-5);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,35,estLocalMaximum(derivative);
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,41,ublic void testLocalMaximumForward() {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,42,nivariateRealFunction function = new SinFunction();
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,43,"nivariateRealFunction derivative = UnivariateRealFunctionUtils.forwardDifferenceDerivative(function, 1.0e-5);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,44,estLocalMaximum(derivative);
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,50,ublic void testLocalMaximumBackward() {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,51,nivariateRealFunction function = new SinFunction();
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,52,"nivariateRealFunction derivative = UnivariateRealFunctionUtils.backwardDifferenceDerivative(function, 1.0e-5);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,53,estLocalMaximum(derivative);
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,57," Find a local extrema, i.e. f'(x) = 0."
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,59,rivate void testLocalMaximum(UnivariateRealFunction derivative) {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,60,ry {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,61,"ouble maximum = UnivariateRealSolverUtils.solve(derivative, Math.PI / 3.0, Math.PI * 2.0 / 3.0);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,62,"ssertEquals(maximum, Math.PI / 2.0, 1.0e-5);"
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,63, catch (Exception ex) {
False,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java,64,ail(ex.getMessage());
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,18,ackage org.apache.commons.math.analysis.derivative;
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,20,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunctionProxy;
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,24, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,25, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,27,ublic abstract class AbstractDifferenceDerivative extends UnivariateRealFunctionProxy implements UnivariateRealFunction {
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,29,rivate double delta;
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,32, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,34,"ublic AbstractDifferenceDerivative(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,35,uper(function);
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,36,etDelta(h);
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,39,rivate void setDelta(double h) {
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,40,his.delta = h;
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,43,rotected double getDelta() {
False,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java,44,eturn delta;
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,18,ackage org.apache.commons.math.analysis.derivative;
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,20,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,24, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,25, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,27,ublic class BackwardDifferenceDerivative extends AbstractDifferenceDerivative {
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,30, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,32,"ublic BackwardDifferenceDerivative(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,33,"uper(function, h);"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,37, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,39,ublic double value(double x) throws MathException {
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,40,nivariateRealFunction f = getFunction();
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,41,ouble h = getDelta();
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,42,eturn (f.value(x) - f.value(x - h)) / h;
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,48,"ublic static UnivariateRealFunction decorate(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java,49,"eturn new BackwardDifferenceDerivative(function, h);"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,18,ackage org.apache.commons.math.analysis.derivative;
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,20,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,24, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,25, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,27,ublic class CenterDifferenceDerivative extends AbstractDifferenceDerivative {
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,30, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,32,"ublic CenterDifferenceDerivative(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,33,"uper(function, h);"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,37, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,39,ublic double value(double x) throws MathException {
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,40,nivariateRealFunction f = getFunction();
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,41,ouble h2 = getDelta();
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,42,ouble h = h2 * .5;
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,43,eturn (f.value(x + h) - f.value(x - h)) / h2;
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,49,"ublic static UnivariateRealFunction decorate(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java,50,"eturn new CenterDifferenceDerivative(function, h);"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,18,ackage org.apache.commons.math.analysis.derivative;
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,20,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,24, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,25, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,27,ublic class ForwardDifferenceDerivative extends AbstractDifferenceDerivative {
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,30, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,32,"ublic ForwardDifferenceDerivative(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,33,"uper(function, h);"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,37, @todo add javadoc comment
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,39,ublic double value(double x) throws MathException {
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,40,nivariateRealFunction f = getFunction();
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,41,ouble h = getDelta();
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,42,eturn (f.value(x + h) - f.value(x)) / h;
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,48,"ublic static UnivariateRealFunction decorate(UnivariateRealFunction function, double h) {"
False,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java,49,"eturn new ForwardDifferenceDerivative(function, h);"
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,25,ublic interface Compilable {
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,27,ublic abstract Evaluation compile(EvaluationContext context)
False,src/experimental/org/apache/commons/math/function/Compilable.java,src/experimental/org/apache/commons/math/function/Compilable.java,28,hrows EvaluationException;
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,25,ublic class DefaultContext implements EvaluationContext {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,30,ublic DefaultContext() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,31,uper();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,32,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,35,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,36, @see org.apache.archimedes.EvaluationContext#doubleValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,38,ublic double doubleValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,39,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,40,eturn ((DefaultValue)argument.evaluate(this)).doubleValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,43,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,44, @see org.apache.archimedes.EvaluationContext#floatValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,46,ublic float floatValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,47,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,48,eturn ((DefaultValue)argument.evaluate(this)).floatValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,51,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,52, @see org.apache.archimedes.EvaluationContext#intValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,54,ublic int intValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,55,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,56,eturn ((DefaultValue)argument.evaluate(this)).intValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,59,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,60, @see org.apache.archimedes.EvaluationContext#longValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,62,ublic long longValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,63,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,64,eturn ((DefaultValue)argument.evaluate(this)).longValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,67,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,68, @see org.apache.archimedes.EvaluationContext#shortValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,70,ublic short shortValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,71,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,72,eturn ((DefaultValue)argument.evaluate(this)).shortValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,75,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,76, @see org.apache.archimedes.EvaluationContext#byteValue(org.apache.archimedes.Evaluation)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,78,ublic byte byteValue(Evaluation argument) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,79,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,80,eturn ((DefaultValue)argument.evaluate(this)).byteValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,83,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,84, @see org.apache.archimedes.EvaluationContext#evaluate(double)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,86,ublic Evaluation evaluate(double d) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,87,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,88,eturn new DefaultValue(d);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,91,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,92, @see org.apache.archimedes.EvaluationContext#evaluate(float)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,94,ublic Evaluation evaluate(float f) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,95,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,96,eturn new DefaultValue(f);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,99,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,100, @see org.apache.archimedes.EvaluationContext#evaluate(int)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,102,ublic Evaluation evaluate(int i) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,103,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,104,eturn new DefaultValue(i);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,107,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,108, @see org.apache.archimedes.EvaluationContext#evaluate(long)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,110,ublic Evaluation evaluate(long l) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,111,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,112,eturn new DefaultValue(l);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,115,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,116, @see org.apache.archimedes.EvaluationContext#evaluate(short)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,118,ublic Evaluation evaluate(short s) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,119,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,120,eturn new DefaultValue(s);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,123,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,124, @see org.apache.archimedes.EvaluationContext#evaluate(byte)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,126,ublic Evaluation evaluate(byte b) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,127,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,128,eturn new DefaultValue(b);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,131,ublic class DefaultValue extends Number implements Evaluation {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,133,umber value;
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,138,efaultValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,139,uper();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,140,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,143,efaultValue(Number n) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,144,alue = n;
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,147,efaultValue(double d) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,148,alue = Double.valueOf(d);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,151,efaultValue(float f) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,152,alue = Float.valueOf(f);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,155,efaultValue(int i) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,156,alue = Integer.valueOf(i);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,159,efaultValue(long l) {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,160,alue = Long.valueOf(l);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,163,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,164, @see org.apache.archimedes.Evaluation#evaluate(org.apache.archimedes.EvaluationContext)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,166,ublic Evaluation evaluate(EvaluationContext context)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,167,hrows EvaluationException {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,168,eturn this;
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,171,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,172, @see java.lang.Number#intValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,174,ublic int intValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,175,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,176,eturn value.intValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,179,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,180, @see java.lang.Number#longValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,182,ublic long longValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,183,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,184,eturn value.longValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,187,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,188, @see java.lang.Number#floatValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,190,ublic float floatValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,191,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,192,eturn value.floatValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,195,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,196, @see java.lang.Number#doubleValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,198,ublic double doubleValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,199,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,200,eturn value.doubleValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,203,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,204, @see java.lang.Number#byteValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,206,ublic byte byteValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,207,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,208,eturn value.byteValue();
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,211,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,212, @see java.lang.Number#shortValue()
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,214,ublic short shortValue() {
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,215,/ TODO Auto-generated method stub
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,216,eturn value.shortValue();
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,25,ublic interface Evaluation {
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,27,ublic abstract Evaluation evaluate(EvaluationContext context)
False,src/experimental/org/apache/commons/math/function/Evaluation.java,src/experimental/org/apache/commons/math/function/Evaluation.java,28,hrows EvaluationException;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,25,ublic interface EvaluationContext {
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,27,ublic abstract double doubleValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,29,ublic abstract float floatValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,31,ublic abstract int intValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,33,ublic abstract long longValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,35,ublic abstract short shortValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,37,ublic abstract byte byteValue(Evaluation argument) throws EvaluationException ;
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,39,ublic abstract Evaluation evaluate(double d);
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,41,ublic abstract Evaluation evaluate(float f);
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,43,ublic abstract Evaluation evaluate(int i);
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,45,ublic abstract Evaluation evaluate(long l);
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,47,ublic abstract Evaluation evaluate(short s);
False,src/experimental/org/apache/commons/math/function/EvaluationContext.java,src/experimental/org/apache/commons/math/function/EvaluationContext.java,49,ublic abstract Evaluation evaluate(byte b);
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,19,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,24, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,25, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,27,ublic class EvaluationException extends MathException {
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,32,ublic EvaluationException() {
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,33,uper();
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,34,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,38, @param message
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,40,ublic EvaluationException(String message) {
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,41,uper(message);
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,42,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,46, @param message
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,47, @param cause
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,49,"ublic EvaluationException(String message, Throwable cause) {"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,50,"uper(message, cause);"
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,51,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,55, @param cause
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,57,ublic EvaluationException(Throwable cause) {
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,58,uper(cause);
False,src/experimental/org/apache/commons/math/function/EvaluationException.java,src/experimental/org/apache/commons/math/function/EvaluationException.java,59,/ TODO Auto-generated constructor stub
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,17,ackage org.apache.commons.math.function;
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,25,"ublic class Variable implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,27,ublic Evaluation evaluate(EvaluationContext context)
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,28,hrows EvaluationException {
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,29,eturn null;
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,31,/context.evaluate(value.doubleValue());
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,34,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/Variable.java,src/experimental/org/apache/commons/math/function/Variable.java,35,"eturn ""Variable"";"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,21,mport org.apache.commons.math.function.Compilable;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,22,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,23,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,24,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,30,"ublic class Add implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,32,rivate Evaluation left;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,34,rivate Evaluation right;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,36,ublic void setLeftOperand(Evaluation left) {
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,37,his.left = left;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,40,ublic void setRightOperand(Evaluation right) {
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,41,his.right = right;
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,44,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,45,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,46,ontext.doubleValue(left) + context.doubleValue(right)
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,51,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Add.java,src/experimental/org/apache/commons/math/function/simple/Add.java,52,"eturn ""Add"";"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,21,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,22,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,23,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,29,"ublic class Divide implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,31,rivate Evaluation left;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,33,rivate Evaluation right;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,35,ublic void setLeftOperand(Evaluation left) {
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,36,his.left = left;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,39,ublic void setRightOperand(Evaluation right) {
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,40,his.right = right;
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,43,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,44,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,45,ontext.doubleValue(left) / context.doubleValue(right)
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,49,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Divide.java,src/experimental/org/apache/commons/math/function/simple/Divide.java,50,"eturn ""Divide"";"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,21,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,22,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,29,"ublic class Equals implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,31,rivate Evaluation left;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,33,rivate Evaluation right;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,35,ublic void setLeftOperand(Evaluation left) {
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,36,his.left = left;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,39,ublic void setRightOperand(Evaluation right) {
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,40,his.right = right;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,43,ublic Evaluation evaluate(EvaluationContext context) {
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,45,eturn null;
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,48,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Equals.java,src/experimental/org/apache/commons/math/function/simple/Equals.java,49,"eturn ""Equals"";"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,21,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,22,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,23,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,29,"ublic class Multiply implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,31,rivate Evaluation left;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,33,rivate Evaluation right;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,35,ublic void setLeftOperand(Evaluation left) {
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,36,his.left = left;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,39,ublic void setRightOperand(Evaluation right) {
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,40,his.right = right;
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,43,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,44,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,45,ontext.doubleValue(left) * context.doubleValue(right)
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,49,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Multiply.java,src/experimental/org/apache/commons/math/function/simple/Multiply.java,50,"eturn ""Multiply"";"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,21,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,22,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,23,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,30,"ublic class Power implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,32,rivate Evaluation argument;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,34,rivate Evaluation power;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,36,ublic void setOperand(Evaluation argument) {
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,37,his.argument = argument;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,40,ublic void setPower(Evaluation power) {
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,41,his.power = power;
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,44,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,45,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,46,ath.pow(
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,47,"ontext.doubleValue(argument),"
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,48,ontext.doubleValue(power)
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,53,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Power.java,src/experimental/org/apache/commons/math/function/simple/Power.java,54,"eturn ""Power"";"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,21,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,22,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,23,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,30,"ublic class Sqrt implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,32,rivate Evaluation argument;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,34,ublic void setOperand(Evaluation argument) {
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,35,his.argument = argument;
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,38,* (non-Javadoc)
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,39, @see org.apache.archimedes.NumericFunction#evaluate(org.apache.archimedes.EvaluationContext)
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,41,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,42,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,43,ath.sqrt(context.doubleValue(argument)));
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,47,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,src/experimental/org/apache/commons/math/function/simple/Sqrt.java,48,"eturn ""Square Root"";"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,17,ackage org.apache.commons.math.function.simple;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,21,mport org.apache.commons.math.function.EvaluationContext;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,22,mport org.apache.commons.math.function.Evaluation;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,23,mport org.apache.commons.math.function.EvaluationException;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,29,"ublic class Subtract implements Evaluation, Serializable {"
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,31,rivate Evaluation left;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,33,rivate Evaluation right;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,35,ublic void setLeftOperand(Evaluation left) {
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,36,his.left = left;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,39,ublic void setRightOperand(Evaluation right) {
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,40,his.right = right;
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,43,ublic Evaluation evaluate(EvaluationContext context) throws EvaluationException {
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,44,eturn context.evaluate(
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,45,ontext.doubleValue(left) - context.doubleValue(right)
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,49,ublic String toString() {
False,src/experimental/org/apache/commons/math/function/simple/Subtract.java,src/experimental/org/apache/commons/math/function/simple/Subtract.java,50,"eturn ""Subtract"";"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,18,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,22," Solves a linear equitation with symmetrical, positiv definit"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,23, coefficient matrix by Cholesky decomposition.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,24, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,25," For every symmetric, positiv definit matrix <code>M</code> there is a"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,26, lower triangular matrix <code>L</code> so that <code>L*L^T=M</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,27, <code>L</code> is called the <i>Cholesky decomposition</i> of <code>M</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,28, For any constant vector <code>c</code> it can be used to solve
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,29, the linear equitation <code>M*x=L*(L^T*x)=c</code>.<br>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,30, Compared to the LU-decompoistion the Cholesky methods requires only half
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,31, the number of operations.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,32, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,33," @author Stefan Koeberle, 11/2003"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,35,ublic class CholeskySolver {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,37,rivate double numericalZero = 10E-12;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,39,** The lower triangular matrix */
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,40,rivate Array2DRowRealMatrix decompMatrix;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,44, Creates a new instance of CholeskySolver
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,46,ublic CholeskySolver() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,47,//constructor CholeskySolver
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,51, Every double <code>d</code> satisfying
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,52, <code>java.lang.Math.abs(d) <= numericalZero</code>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,53, is considered equal to <code>0.0d.</code>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,55,ublic void setNumericalZero(double numericalZero) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,56,his.numericalZero = numericalZero;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,57,//setNumericalZero
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,60, See <code>setNumericalZero</code>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,62,ublic double getNumericalZero() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,63,eturn numericalZero;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,64,//getNumericalZero
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,68," Calculates the Cholesky-decomposition of the symmetrical, positiv definit"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,69, matrix <code>M</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,70, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,71, The decomposition matrix is internally stored.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,72, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,73, @throws IllegalArgumentException   if <code>M</code> ist not square or
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,74,                                    not positiv definit
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,76,ublic void decompose(RealMatrix m)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,77,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,79,ecompMatrix = null;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,80,ouble[][] mval = m.getData();
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,81,nt numRows = m.getRowDimension();
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,82,nt numCols = m.getColumnDimension();
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,83,f (numRows != numCols)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,84,"hrow new IllegalArgumentException(""matrix is not square"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,85,ouble[][] decomp = new double[numRows][numCols];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,86,ouble sum;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,88,/for all columns
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,89,or (int col=0; col<numCols; col++) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,91,/diagonal element
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,92,um = mval[col][col];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,93,or (int k=0; k<col; k++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,94,um = sum - decomp[col][k]*decomp[col][k];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,95,f (sum <= numericalZero) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,96,hrow new IllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,97,"Matrix is not positiv definit"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,99,ecomp[col][col] += Math.sqrt(sum);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,101,/column below diagonal
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,102,or (int row=col+1; row<numRows; row++) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,103,um = mval[row][col];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,104,or (int k=0; k<col; k++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,105,um = sum - decomp[col][k]*decomp[row][k];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,106,ecomp[row][col] = sum/decomp[col][col];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,107,//for
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,109,//for all columns
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,111,ecompMatrix = new Array2DRowRealMatrix(decomp);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,113,//decompose
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,117, Returns the last calculated decomposition matrix.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,118, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,119, Caution: Every call of this Method will return the same object.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,120, Decomposing another matrix will generate a new one.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,122,ublic Array2DRowRealMatrix getDecomposition() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,123,eturn decompMatrix;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,124,//getDecomposition
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,128, Returns the solution for a linear system with constant vector <code>c</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,129, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,130," This method solves a linear system <code>M*x=c</code> for a symmetrical,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,131, positiv definit coefficient matrix <code>M</code>. Before using this
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,132, method the matrix <code>M</code> must have been decomposed.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,133, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,134, @throws IllegalStateException    if this methode is called before
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,135,                                  a matrix was decomposed
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,136, @throws IllegalArgumentException if the dimension of <code>c</code> doesn't
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,137,                                  match the row dimension of <code>M</code>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,139,ublic double[] solve(double[] c)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,140,"hrows IllegalStateException, IllegalArgumentException {"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,142,f (decompMatrix == null) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,143,"hrow new IllegalStateException(""no decomposed matrix available"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,144,//if
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,145,f (decompMatrix.getColumnDimension() != c.length)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,146,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,148,ouble[][] decomp = decompMatrix.getData();
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,149,ouble[] x = new double[decomp.length];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,150,ouble sum;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,152,/forward elimination
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,153,or (int i=0; i<x.length; i++) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,154,um = c[i];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,155,or (int k=0; k<i; k++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,156,um = sum - decomp[i][k]*x[k];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,157,[i] = sum / decomp[i][i];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,158,//forward elimination
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,160,/backward elimination
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,161,or (int i=x.length-1; i>=0; i--) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,162,um = x[i];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,163,or (int k=i+1; k<x.length; k++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,164,um = sum - decomp[k][i]*x[k];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,165,[i] = sum / decomp[i][i];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,166,//backward elimination
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,168,eturn x;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,169,//solve
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,173," Returns the solution for a linear system with a symmetrical,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,174, positiv definit coefficient matrix <code>M</code> and
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,175, constant vector <code>c</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,176, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,177," As a side effect, the Cholesky-decomposition <code>L*L^T=M</code> is"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,178, calculated and internally stored.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,179, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,180, This is a convenience method for <code><pre>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,181,   solver.decompose(m);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,182,   solver.solve(c);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,183, </pre></code>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,184," @throws IllegalArgumentException if M ist not square, not positive definit"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,185,                                  or the dimensions of <code>M</code> and
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,186,                                  <code>c</code> don't match.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,188,"ublic double[] solve(RealMatrix m, double[] c)"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,189,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,190,ecompose(m);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,191,eturn solve(c);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,192,//solve
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,196, Returns the determinant of the a matrix <code>M</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,197, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,198, Before using this  method the matrix <code>M</code> must
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,199, have been decomposed.
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,200, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,201, @throws IllegalStateException  if this method is called before
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,202,                                a matrix was decomposed
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,204,ublic double getDeterminant() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,206,f (decompMatrix == null) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,207,"hrow new IllegalStateException(""no decomposed matrix available"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,208,//if
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,210,ouble[][] data = decompMatrix.getData();
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,211,ouble res = 1.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,212,or (int i=0; i<data.length; i++) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,213,es *= data[i][i];
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,214,//for
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,215,es = res*res;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,217,eturn res;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,218,//getDeterminant
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,220,//class CholeskySolver
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,18,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,20,mport junit.framework.Test;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,21,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,22,mport junit.framework.TestSuite;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,23,mport junit.textui.TestRunner;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,26, Test cases for the {@link CholeskySolver} class.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,27, <p>
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,28," @author Stefan Koeberle, 11/2003"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,30,ublic class CholeskySolverTest
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,31,xtends TestCase {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,33,rivate double[][] m1 = {{1}};
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,34,rivate double m1Det = 1.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,36,"rivate double[][] m2 = {{1, 0} ,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,37,"0, 2}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,38,rivate double m2Det = 2.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,40,"rivate double[][] m3 = {{1, 0, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,41,"0, 2, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,42,"0, 0, 3}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,43,rivate double m3Det = 6.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,45,"rivate double[][] m4 = {{1, 0, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,46,"2, 3, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,47,"4, 5, 6}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,48,rivate double m4Det = 18.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,50,"rivate double[][] m5 = {{ 1,  0,  0,  0,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,51,"-2,  3,  0,  0,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,52," 4, -5,  6,  0,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,53," 7,  8, -9, 10,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,54,"11, 12, 13, 14, 15}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,55,rivate double m5Det = 2700.0d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,58,"rivate double[][] m6 = {{1, 0,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,59,"2, 0,  0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,60,"4, 5,  6}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,62,"rivate double[][] m7 = {{1, 2, 3},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,63,"4, 5, 6}};"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,66, Creates a new instance of CholeskySolverTest
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,68,ublic CholeskySolverTest(String nameOfTest) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,69,uper(nameOfTest);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,70,//constructor CholeskySolverTest
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,72,ublic void setUp()
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,73,hrows java.lang.Exception {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,74,uper.setUp();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,75,//setUp
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,78,ublic void tearDown()
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,79,hrows java.lang.Exception {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,80,uper.tearDown();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,81,//tearDown
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,83,ublic static Test suite() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,84,estSuite suite = new TestSuite(CholeskySolverTest.class);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,85,"uite.setName(""CholeskySolver Tests"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,86,eturn suite;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,87,//suite
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,91, tests CholeskySolver.setNumericalZero()
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,93,ublic void testNumericalZero() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,94,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,95,ouble numericalZero = 77.77d;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,96,olver.setNumericalZero(numericalZero);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,97,"ssertEquals(solver.getNumericalZero(), numericalZero, 0.0d);"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,99,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,100,olver.decompose(
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,101,"ew Array2DRowRealMatrix(new double[][]{{numericalZero/2, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,102,"0, numericalZero/2}}));"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,103,"ail(""testing numericalZero"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,104, catch (IllegalArgumentException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,106,//testNumericalZero
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,110, tests CholeskySolver.decompose(...)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,112,ublic void testDecompose() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,114,/The following decompositions should succeed.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,115,"estDecompose(m1, ""Decomposing matrix m1"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,116,"estDecompose(m2, ""Decomposing matrix m2"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,117,"estDecompose(m3, ""Decomposing matrix m3"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,118,"estDecompose(m4, ""Decomposing matrix m4"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,119,"estDecompose(m5, ""Decomposing matrix m5"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,121,/The following decompositions will fail. An IllegalArgumentException
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,122,/should be thrown.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,123,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,124,"estDecompose(m6, ""Decomposing matrix m6"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,125,"ail(""Decomposing matrix m6"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,126, catch (IllegalArgumentException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,128,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,129,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,130,olver.decompose(new Array2DRowRealMatrix(m7));
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,131,"ail(""Decomposing matrix m7"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,132, catch (IllegalArgumentException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,134,//testDecomposition
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,138, tests CholeskySolver.solve(...)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,140,ublic void testSolve() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,142,"/If there's no matrix, there's no linear euqitation to solve ..."
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,143,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,144,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,145,"olver.solve(new double[] {1,2,3});"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,146,"ail(""solving a liniar equitation with a missing matrix should fail"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,147, catch (IllegalStateException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,149,/The following operations should succeed.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,150,"estSolve(m1, ""Solving matrix m1"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,151,"estSolve(m2, ""Solving matrix m2"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,152,"estSolve(m3, ""Solving matrix m3"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,153,"estSolve(m4, ""Solving matrix m4"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,154,"estSolve(m5, ""Solving matrix m5"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,156,/The following operations will fail. An IllegalArgumentException
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,157,/should be thrown.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,158,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,159,"estSolve(m6, ""Solving matrix m6"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,160,"ail(""Solving matrix m6"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,161, catch (IllegalArgumentException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,163,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,164,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,165,"olver.solve(new Array2DRowRealMatrix(m3), new double[] {1, 2, 3, 4});"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,166,"ail(""Solving matrix m3[3x3], v[4]"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,167, catch (IllegalArgumentException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,169,//testDecomposition
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,173, tests CholeskySolver.getDeterminant(...)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,175,ublic void testGetDeterminant() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,177,"/Since no matrix was decomposed, there's no determinant."
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,178,ry {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,179,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,180,olver.getDeterminant();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,181,"ail(""Calculating determinant of missing matrix should fail"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,182, catch (IllegalStateException e) {}
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,184,/These test will suceed.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,185,"estGetDeterminant(m1, m1Det, ""Calculating determinant of m1"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,186,"estGetDeterminant(m2, m2Det, ""Calculating determinant of m2"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,187,"estGetDeterminant(m3, m3Det, ""Calculating determinant of m3"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,188,"estGetDeterminant(m4, m4Det, ""Calculating determinant of m4"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,189,"estGetDeterminant(m5, m5Det, ""Calculating determinant of m5"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,190,//test
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,194, Generates the matrix
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,195, <code>m = lowerTriangularMatrix * lowerTriangularMatrix^T</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,196, If alle diagonalelements of <code>lowerTriangularMatrix</code> are
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,197," positiv, <code>m</code> will be positiv definit."
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,198, Decomposing <code>m</code> should result in
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,199, <code>lowerTriangularMatrix</code> again. So there's a simple test ...
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,201,"rivate void testDecompose(double[][] lowerTriangularMatrix, String message)"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,202,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,204,ealMatrix triangularMatrix = new Array2DRowRealMatrix(lowerTriangularMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,205,ealMatrix pdMatrix =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,206,riangularMatrix.multiply(triangularMatrix.transpose());
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,208,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,209,olver.decompose(pdMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,211,"ssertTrue(message,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,212,"reEqual(triangularMatrix, solver.getDecomposition(), 1.0E-10));"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,214,//testDecompose
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,218, Similar to <code> private testDecompose(...)</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,220,"rivate void testSolve(double[][] lowerTriangularMatrix, String message)  {"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,222,ealMatrix triangularMatrix =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,223,ew Array2DRowRealMatrix(lowerTriangularMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,224,rray2DRowRealMatrix pdMatrix =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,225,Array2DRowRealMatrix) triangularMatrix.multiply(triangularMatrix.transpose());
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,226,holeskySolver solver =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,227,ew CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,229,ouble[] c = new double[lowerTriangularMatrix.length];
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,230,or (int i=0; i<c.length; i++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,231,or (int j=0; j<lowerTriangularMatrix[0].length; j++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,232,[i] += lowerTriangularMatrix[i][j];
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,234,olver.decompose(pdMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,235,ealMatrix x = new Array2DRowRealMatrix(solver.solve(c));
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,237,"ssertTrue(message,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,238,"reEqual(pdMatrix.multiply(x),  new Array2DRowRealMatrix(c), 1.0E-10));"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,239,//testSolve
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,243, Similar to <code> private testDecompose(...)</code>.
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,245,"rivate void testGetDeterminant(double[][] lowerTriangularMatrix,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,246,"ouble determinant,"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,247,tring message)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,248,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,250,ealMatrix triangularMatrix = new Array2DRowRealMatrix(lowerTriangularMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,251,ealMatrix pdMatrix =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,252,riangularMatrix.multiply(triangularMatrix.transpose());
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,253,ouble pdDeterminant = determinant * determinant;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,255,holeskySolver solver = new CholeskySolver();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,256,olver.decompose(pdMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,257,"ssertEquals(message, solver.getDeterminant(), pdDeterminant, 1.0E-10);"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,258,//testGetDeterminant
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,262, Are <code>m1</code> and <code>m2</code> equal?
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,264,"rivate static boolean areEqual(RealMatrix m1, RealMatrix m2, double delta) {"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,266,ouble[][] mv1 = m1.getData();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,267,ouble[][] mv2 = m2.getData();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,269,f (mv1.length != mv1.length  ||
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,270,v1[0].length != mv2[0].length)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,271,eturn false;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,273,or (int i=0; i<mv1.length; i++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,274,or (int j=0; j<mv1[0].length; j++)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,275,f (Math.abs(mv1[i][j] -mv2[i][j]) > delta)
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,276,eturn false;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,278,eturn true;
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,279,//isEqual
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,283, Executes all tests of this class
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,285,ublic static void main(String[] args) {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,286,"ystem.out.println(""Start"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,287,estRunner runner = new TestRunner();
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,288,unner.doRun(CholeskySolverTest.suite());
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,289,"ystem.out.println(""End"");"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,290,//main
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,292,//class CholeskySolverTest
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,17,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,25,ublic interface Decomposer {
False,src/experimental/org/apache/commons/math/linear/Decomposer.java,src/experimental/org/apache/commons/math/linear/Decomposer.java,27,ecomposition decompose(RealMatrix matrix);
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,17,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,25,ublic interface Decomposition {
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,27,/ solve A*x=b
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,28,ealVector solve(RealVector b);
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,31,/ solve matrix equation
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,32,ealMatrix solve(RealMatrix b);
False,src/experimental/org/apache/commons/math/linear/Decomposition.java,src/experimental/org/apache/commons/math/linear/Decomposition.java,35,ealMatrix invert();
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,17,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,22, To change the template for this generated type comment go to
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,23, Window>Preferences>Java>Code Generation>Code and Comments
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,25,ublic abstract  class DecompositionFactory {
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,28, get a matrix specific decomposer factory
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,29, class RealMatrix {
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,30,     DecompositionFactory getDecompositionFactory();
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,34,/ get overall default factory
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,35,ublic static DecompositionFactory newInstance(){
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,36,eturn null;
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,39,/ construct a new default decomposer
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,40,ublic abstract Decomposer newDecomposer();
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,42,/ example for a specific decomposer (Householder or QR)
False,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,src/experimental/org/apache/commons/math/linear/DecompositionFactory.java,43,ublic abstract Decomposer newQRDecopmposer();
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,17,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/RealVector.java,src/experimental/org/apache/commons/math/linear/RealVector.java,20,ublic class RealVector {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,18,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,20,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,25, Cache-friendly implementation of RealMatrix using recursive array layouts to store
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,26, the matrix elements.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,27, <p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,28," As of 2009-02-13, this implementation does not work! The padding at left and bottom"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,29, sides of the matrix should be cleared after some operations like scalerAdd
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,30, and is not. Also there is a limitation in the multiplication that can only
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,31, process matrices with sizes similar enough to have the same power of two
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,32," number of tiles in all three matrices A, B and C such that C = A*B. These"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,33, parts have not been fixed since the performance gain with respect to
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,34," BlockRealMatrix are not very important, and the numerical stability is not"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,35, good. This may well be due to a bad implementation. This code has been put
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,36," in the experimental part for the record, putting it into production would"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,37, require solving all these issues.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,38, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,39, <p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,40, This implementation is based on the 2002 paper: <a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,41," href=""http://www.cs.duke.edu/~alvy/papers/matrix-tpds.pdf"">Recursive Array Layouts"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,42," and Fast Matrix Multiplication</a> by Siddhartha Chatterjee, Alvin R. Lebeck,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,43, Praveen K. Patnala and Mithuna Thottethodi.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,44, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,45, <p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,46, The matrix is split into several rectangular tiles. The tiles are laid out using
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,47, a space-filling curve in a 2<sup>k</sup>&times;2<sup>k</sup> square. This
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,48, implementation uses the Gray-Morton layout which starts as follows for a three-level
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,49, recursion (i.e. an 8x8 matrix). The tiles size are adjusted in order to have the
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,50, 2<sup>k</sup>&times;2<sup>k</sup> square. This may require padding at the right and
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,51, bottom sides of the matrix (see above paper for a discussion of this padding feature).
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,52, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,53, <pre>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,55,    00 01 | 06 07   |   24  25 | 30  31
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,56,    03 02 | 05 04   |   27  26 | 29  28
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,58,    12 13 | 10 11   |   20  21 | 18  19
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,59,    15 14 | 09 08   |   23  22 | 17  16
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,63,    48 49 | 54 55   |   40  41 | 46  47
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,64,    51 50 | 53 52   |   43  42 | 45  44
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,66,    60 61 | 58 59   |   36  37 | 34  35
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,67,    63 62 | 57 56   |   39  38 | 33  32
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,69, </pre>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,70, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,71, @since 2.0
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,73,ublic class RecursiveLayoutRealMatrix extends AbstractRealMatrix implements Serializable {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,75,** Serializable version identifier */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,76,rivate static final long serialVersionUID = 1607919006739190004L;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,78,** Maximal allowed tile size in bytes.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,79," <p>In order to avoid cache miss during multiplication,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,80, a suggested value is cache_size/3.</p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,82,rivate static final int MAX_TILE_SIZE_BYTES = (64 * 1024) / 3;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,83,/private static final int MAX_TILE_SIZE_BYTES = 32;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,85,** Storage array for matrix elements. */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,86,rivate final double data[];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,88,** Number of rows of the matrix. */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,89,rivate final int rows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,91,** Number of columns of the matrix. */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,92,rivate final int columns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,94,** Number of terminal tiles along rows and columns (guaranteed to be a power of 2). */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,95,rivate final int tileNumber;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,97,** Number of rows in each terminal tile. */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,98,rivate final int tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,100,** Number of columns in each terminal tile. */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,101,rivate final int tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,104, Create a new matrix with the supplied row and column dimensions.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,106, @param rows  the number of rows in the new matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,107, @param columns  the number of columns in the new matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,108, @throws IllegalArgumentException if row or column dimension is not
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,109,  positive
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,111,"ublic RecursiveLayoutRealMatrix(final int rows, final int columns)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,112,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,114,"uper(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,115,his.rows    = rows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,116,his.columns = columns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,118,/ compute optimal layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,119,"ileNumber      = tilesNumber(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,120,"ileSizeRows    = tileSize(rows, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,121,"ileSizeColumns = tileSize(columns, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,123,/ create storage array
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,124,ata = new double[tileNumber * tileNumber * tileSizeRows * tileSizeColumns];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,129, Create a new dense matrix copying entries from raw layout data.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,130, <p>The input array <em>must</em> be in raw layout.</p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,131, <p>Calling this constructor is equivalent to call:
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,132," <pre>matrix = new RecursiveLayoutRealMatrix(rawData.length, rawData[0].length,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,133,"                                             toRecursiveLayout(rawData), false);</pre>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,134, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,135," @param rawData data for new matrix, in raw layout"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,137, @exception IllegalArgumentException if <code>rawData</code> shape is
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,138, inconsistent with tile layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,139," @see #RecursiveLayoutRealMatrix(int, int, double[][], boolean)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,141,ublic RecursiveLayoutRealMatrix(final double[][] rawData)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,142,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,143,"his(rawData.length, rawData[0].length, toRecursiveLayout(rawData), false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,147, Create a new dense matrix copying entries from recursive layout data.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,148, <p>The input array <em>must</em> already be in recursive layout.</p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,149, @param rows  the number of rows in the new matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,150, @param columns  the number of columns in the new matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,151," @param data data for new matrix, in recursive layout"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,152," @param copyArray if true, the input array will be copied, otherwise"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,153, it will be referenced
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,155, @exception IllegalArgumentException if <code>data</code> size is
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,156, inconsistent with matrix size
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,157, @see #toRecursiveLayout(double[][])
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,158, @see #RecursiveLayoutRealMatrix(double[][])
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,160,"ublic RecursiveLayoutRealMatrix(final int rows, final int columns,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,161,"inal double[] data, final boolean copyArray)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,162,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,164,"uper(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,165,his.rows    = rows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,166,his.columns = columns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,168,/ compute optimal layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,169,"ileNumber      = tilesNumber(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,170,"ileSizeRows    = tileSize(rows, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,171,"ileSizeColumns = tileSize(columns, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,173,/ create storage array
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,174,inal int expectedLength = tileNumber * tileNumber * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,175,f (data.length != expectedLength) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,176,hrow MathRuntimeException.createIllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,177,"wrong array size (got {0}, expected {1})"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,178,"ata.length, expectedLength);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,181,f (copyArray) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,182,/ allocate storage array
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,183,his.data = data.clone();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,184, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,185,/ reference existing array
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,186,his.data = data;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,192, Convert a data array from raw layout to recursive layout.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,193, <p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,194, Raw layout is the straightforward layout where element at row i and
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,195, column j is in array element <code>rawData[i][j]</code>. Recursive layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,196," is the layout used in {@link RecursiveLayoutRealMatrix} instances, where the matrix"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,197, is stored in a dimension 1 array using a space-filling curve to spread the matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,198, elements along the array.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,199, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,200, @param rawData data array in raw layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,201, @return a new data array containing the same entries but in recursive layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,202, @exception IllegalArgumentException if <code>rawData</code> is not rectangular
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,203,  (not all rows have the same length)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,204," @see #RecursiveLayoutRealMatrix(int, int, double[], boolean)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,206,ublic static double[] toRecursiveLayout(final double[][] rawData)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,207,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,209,inal int rows    = rawData.length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,210,inal int columns = rawData[0].length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,212,/ compute optimal layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,213,"inal int tileNumber      = tilesNumber(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,214,"inal int tileSizeRows    = tileSize(rows, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,215,"inal int tileSizeColumns = tileSize(columns, tileNumber);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,217,/ safety checks
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,218,or (int i = 0; i < rawData.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,219,inal int length = rawData[i].length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,220,f (length != columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,221,hrow MathRuntimeException.createIllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,222,"some rows have length {0} while others have length {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,223,"olumns, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,227,/ convert array row after row
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,228,inal double[] data = new double[tileNumber * tileNumber * tileSizeRows * tileSizeColumns];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,229,or (int i = 0; i < rawData.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,230,inal int iTile = i / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,231,inal double[] rawDataI = rawData[i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,232,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,233,"inal int tileStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,234,inal int dataStart = tileStart + (i - iTile * tileSizeRows) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,235,inal int jStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,236,f (jStart < columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,237,"inal int jEnd      = Math.min(jStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,238,"ystem.arraycopy(rawDataI, jStart, data, dataStart, jEnd - jStart);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,243,eturn data;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,247,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,248,"ublic RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,249,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,250,"eturn new RecursiveLayoutRealMatrix(rowDimension, columnDimension);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,253,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,254,ublic RealMatrix copy() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,255,"eturn new RecursiveLayoutRealMatrix(rows, columns, data, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,258,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,259,ublic RealMatrix add(final RealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,260,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,261,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,262,eturn add((RecursiveLayoutRealMatrix) m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,263, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,265,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,266,heckAdditionCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,268,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,270,"/ perform addition tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,271,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,273,/ perform addition on the current tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,274,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,275,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,276,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,277,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,278,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,279,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,280,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,281,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,282,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,283,inal int kStart = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,284,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,285,"ut.data[k] = data[k] + m.getEntry(p, q);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,291,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,297, Compute the sum of this and <code>m</code>.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,299, @param m    matrix to be added
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,300, @return     this + m
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,301, @throws  IllegalArgumentException if m is not the same size as this
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,303,ublic RecursiveLayoutRealMatrix add(final RecursiveLayoutRealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,304,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,306,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,307,heckAdditionCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,309,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,311,/ streamlined addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,312,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,313,ut.data[i] = data[i] + m.data[i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,316,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,320,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,321,ublic RealMatrix subtract(final RealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,322,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,323,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,324,eturn subtract((RecursiveLayoutRealMatrix) m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,325, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,327,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,328,heckSubtractionCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,330,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,332,"/ perform subtraction tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,333,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,335,/ perform addition on the current tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,336,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,337,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,338,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,339,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,340,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,341,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,342,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,343,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,344,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,345,inal int kStart = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,346,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,347,"ut.data[k] = data[k] - m.getEntry(p, q);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,353,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,359, Compute this minus <code>m</code>.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,361, @param m    matrix to be subtracted
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,362, @return     this - m
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,363, @throws  IllegalArgumentException if m is not the same size as this
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,365,ublic RecursiveLayoutRealMatrix subtract(final RecursiveLayoutRealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,366,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,368,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,369,heckSubtractionCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,371,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,373,/ streamlined subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,374,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,375,ut.data[i] = data[i] - m.data[i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,378,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,382,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,383,ublic RealMatrix scalarAdd(final double d)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,384,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,386,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,388,/ streamlined addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,389,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,390,ut.data[i] = data[i] + d;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,393,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,397,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,398,ublic RealMatrix scalarMultiply(final double d)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,399,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,401,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,403,/ streamlined multiplication
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,404,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,405,ut.data[i] = data[i] * d;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,408,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,412,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,413,ublic RealMatrix multiply(final RealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,414,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,415,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,416,eturn multiply((RecursiveLayoutRealMatrix) m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,417, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,419,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,420,heckMultiplicationCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,422,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, m.getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,424,"/ perform multiplication tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,425,or (int index = 0; index < out.tileNumber * out.tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,426,inal int tileStart = index * out.tileSizeRows * out.tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,427,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,428,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,429,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,430,inal int iStart    = iTile * out.tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,431,"inal int iEnd      = Math.min(iStart + out.tileSizeRows, out.rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,432,inal int jStart    = jTile * out.tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,433,"inal int jEnd      = Math.min(jStart + out.tileSizeColumns, out.columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,435,/ perform multiplication for current tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,436,or (int kTile = 0; kTile < tileNumber; ++kTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,437,"inal int kTileStart = tileIndex(iTile, kTile) * tileSizeRows * tileSizeColumns;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,438,"or (int i = iStart, lStart = kTileStart, oStart = tileStart;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,439, < iEnd;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,440,"+i, lStart += tileSizeColumns, oStart += out.tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,441,"inal int lEnd = Math.min(lStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,442,"or (int j = jStart, o = oStart; j < jEnd; ++j, ++o) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,443,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,444,"or (int l = lStart, k = kTile * tileSizeColumns; l < lEnd; ++l, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,445,"um += data[l] * m.getEntry(k, j);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,447,ut.data[o] += sum;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,453,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,459, Returns the result of postmultiplying this by m.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,460, <p>The Strassen matrix multiplication method is used here. This
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,461, method computes C = A &times; B recursively by splitting all matrices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,462, in four quadrants and computing:</p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,463, <pre>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,464," P<sub>1</sub> = (A<sub>1,1</sub> + A<sub>2,2</sub>) &times; (B<sub>1,1</sub> + B<sub>2,2</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,465," P<sub>2</sub> = (A<sub>2,1</sub> + A<sub>2,2</sub>) &times; (B<sub>1,1</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,466," P<sub>3</sub> = (A<sub>1,1</sub>) &times; (B<sub>1,2</sub> - B<sub>2,2</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,467," P<sub>4</sub> = (A<sub>2,2</sub>) &times; (B<sub>2,1</sub> - B<sub>1,1</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,468," P<sub>5</sub> = (A<sub>1,1</sub> + A<sub>1,2</sub>) &times; B<sub>2,2</sub>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,469," P<sub>6</sub> = (A<sub>2,1</sub> - A<sub>1,1</sub>) &times; (B<sub>1,1</sub> + B<sub>1,2</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,470," P<sub>7</sub> = (A<sub>1,2</sub> - A<sub>2,2</sub>) &times; (B<sub>2,1</sub> + B<sub>2,2</sub>)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,472," C<sub>1,1</sub> = P<sub>1</sub> + P<sub>4</sub> - P<sub>5</sub> + P<sub>7</sub>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,473," C<sub>1,2</sub> = P<sub>3</sub> + P<sub>5</sub>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,474," C<sub>2,1</sub> = P<sub>2</sub> + P<sub>4</sub>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,475," C<sub>2,2</sub> = P<sub>1</sub> + P<sub>3</sub> - P<sub>2</sub> + P<sub>6</sub>"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,476, </pre>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,477, <p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,478, This implementation is based on the 2002 paper: <a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,479," href=""http://www.cs.duke.edu/~alvy/papers/matrix-tpds.pdf"">Recursive Array Layouts"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,480," and Fast Matrix Multiplication</a> by Siddhartha Chatterjee, Alvin R. Lebeck,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,481, Praveen K. Patnala and Mithuna Thottethodi.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,482, </p>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,484, @param m    matrix to postmultiply by
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,485, @return     this * m
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,486, @throws     IllegalArgumentException
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,487,             if columnDimension(this) != rowDimension(m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,489,ublic RecursiveLayoutRealMatrix multiply(RecursiveLayoutRealMatrix m)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,490,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,492,/ safety check
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,493,heckMultiplicationCompatible(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,495,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, m.columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,496,f ((tileNumber != m.tileNumber) || (tileNumber != out.tileNumber)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,497,/ TODO get rid of this test
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,498,"hrow new RuntimeException(""multiplication "" + rows + ""x"" + columns + "" * "" +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,499,".rows + ""x"" + m.columns + "" -> left matrix: "" + tileNumber +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,500," tiles, right matrix: "" + m.tileNumber + "" tiles, result matrix "" +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,501,"ut.tileNumber + "" tiles"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,503,"trassenMultiply(data, 0, true, m.data, 0, true, out.data, 0, tileNumber,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,504,"ileSizeRows, m.tileSizeColumns, tileSizeColumns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,506,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,511, Perform recursive multiplication using Strassen's algorithm.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,512, @param a left term of multiplication
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,513, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,514, @param aDirect direct/reversed orientation flag for a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,515, @param b right term of multiplication
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,516, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,517, @param bDirect direct/reversed orientation flag for b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,518, @param result result array (will have same orientation as b)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,519, @param resultStart start index in result
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,520, @param nTiles number of elements to add
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,521, @param bsRows number of rows in result tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,522, @param bsColumns number of columns in result tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,523, @param bsMultiplicands number of rows/columns in multiplicands
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,525,"rivate static void strassenMultiply(final double[] a, final int aStart, final boolean aDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,526,"inal double[] b, final int bStart, final boolean bDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,527,"inal double[] result, final int resultStart, final int nTiles,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,528,"inal int bsRows, final int bsColumns, final int bsMultiplicands) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,529,f (nTiles == 1) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,530,/ leaf recursion tile: perform traditional multiplication
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,531,inal int bsColumns2 = 2 * bsColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,532,inal int bsColumns3 = 3 * bsColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,533,inal int bsColumns4 = 4 * bsColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,534,or (int i = 0; i < bsRows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,535,or (int j = 0; j < bsColumns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,536,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,537,nt k  = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,538,nt aK = aStart + i * bsMultiplicands;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,539,nt bK = bStart + j;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,540,hile (k < bsMultiplicands - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,541,um += a[aK]     * b[bK] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,542,[aK + 1] * b[bK + bsColumns] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,543,[aK + 2] * b[bK + bsColumns2] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,544,[aK + 3] * b[bK + bsColumns3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,545,  += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,546,K += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,547,K += bsColumns4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,549,hile (k < bsMultiplicands) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,550,um += a[aK] * b[bK];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,551,  += 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,552,K += 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,553,K += bsColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,555,esult[resultStart + i * bsColumns + j] = sum;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,558, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,559,/ regular recursion node: use recursive Strassen implementation
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,560,inal int n2            = nTiles / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,561,inal int aQuadrantSize = bsRows          * n2 * bsMultiplicands * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,562,inal int bQuadrantSize = bsMultiplicands * n2 * bsColumns       * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,563,inal int cQuadrantSize = bsRows          * n2 * bsColumns       * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,564,inal double[] sA = new double[aQuadrantSize];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,565,inal double[] sB = new double[bQuadrantSize];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,566,inal boolean nonLeafQuadrants = n2 > 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,568,/ identify A quadrants start indices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,569,"inal int a11Start, a12Start, a21Start, a22Start;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,570,f (aDirect) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,571,11Start = aStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,572,12Start = aStart +     aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,573,21Start = aStart + 3 * aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,574,22Start = aStart + 2 * aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,575, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,576,11Start = aStart + 2 * aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,577,12Start = aStart + 3 * aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,578,21Start = aStart +     aQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,579,22Start = aStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,582,/ identify B and C quadrants start indices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,583,/ (C is constructed with the same orientation as B)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,584,"inal int b11Start, b12Start, b21Start, b22Start;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,585,"inal int c11Start, c12Start, c21Start, c22Start;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,586,f (bDirect) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,587,11Start = bStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,588,12Start = bStart +     bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,589,21Start = bStart + 3 * bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,590,22Start = bStart + 2 * bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,591,11Start = resultStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,592,12Start = resultStart +     cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,593,21Start = resultStart + 3 * cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,594,22Start = resultStart + 2 * cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,595, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,596,11Start = bStart + 2 * bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,597,12Start = bStart + 3 * bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,598,21Start = bStart +     bQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,599,22Start = bStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,600,11Start = resultStart + 2 * cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,601,12Start = resultStart + 3 * cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,602,21Start = resultStart +     cQuadrantSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,603,22Start = resultStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,606,"/ optimal order for cache efficiency: P3, P6, P2, P1, P5, P7, P4"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,608,/ P3  = (A11)(B12 - B22)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,609,/ C12 = P3 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,610,"ilesSubtract(b, b12Start, false, b, b22Start, false, sB, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,611,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,612,"trassenMultiply(a, a11Start, true, sB, 0, false, result, c12Start,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,613,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,615,/ P6  = (A21 - A11)(B11 + B12)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,616,/ C22 = P3 + P6 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,617,inal double[] p67 = new double[cQuadrantSize];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,618,"ilesSubtract(a, a21Start, true, a, a11Start, true, sA, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,619,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,620,"ilesAdd(b, b11Start, true, b, b12Start, false, sB, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,621,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,622,"trassenMultiply(sA, 0, true, sB, 0, true, p67, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,623,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,624,"ilesAdd(result, c12Start, false, p67, 0, true, result, c22Start,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,625,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,627,/ P2  = (A21 + A22)(B11)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,628,/ C21 = P2 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,629,/ C22 = P3 + P6 - P2 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,630,"ilesAdd(a, a21Start, true, a, a22Start, false, sA, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,631,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,632,"trassenMultiply(sA, 0, true, b, b11Start, true, result, c21Start,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,633,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,634,"ilesSelfSubtract(result, c22Start, false, result, c21Start, true,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,635,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,637,/ P1  = (A11 + A22)(B11 + B22)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,638,/ C11 = P1 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,639,/ C22 = P3 + P6 - P2 + P1
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,640,"ilesAdd(a, a11Start, true, a, a22Start, false, sA, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,641,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,642,"ilesAdd(b, b11Start, true, b, b22Start, false, sB, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,643,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,644,"trassenMultiply(sA, 0, true, sB, 0, true, result, c11Start,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,645,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,646,"ilesSelfAdd(result, c22Start, false, result, c11Start, true,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,647,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,649,/ P5  = (A11 + A12)B22
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,650,/ beware: there is a sign error here in Chatterjee et al. paper
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,651,"/ in figure 1, table b they subtract A12 from A11 instead of adding it"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,652,/ C12 = P3 + P5
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,653,/ C11 = P1 - P5 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,654,inal double[] p45 = new double[cQuadrantSize];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,655,"ilesAdd(a, a11Start, true, a, a12Start, false, sA, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,656,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,657,"trassenMultiply(sA, 0, true, b, b22Start, false, p45, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,658,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,659,"ilesSelfAdd(result, c12Start, false, p45, 0, false,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,660,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,661,"ilesSelfSubtract(result, c11Start, true, p45, 0, false,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,662,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,664,/ P7  = (A12 - A22)(B21 + B22)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,665,/ C11 = P1 - P5 + P7 + ...
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,666,"ilesSubtract(a, a12Start, false, a, a22Start, false, sA, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,667,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,668,"ilesAdd(b, b21Start, true, b, b22Start, false, sB, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,669,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,670,"trassenMultiply(sA, 0, false, sB, 0, true, p67, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,671,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,672,"ilesSelfAdd(result, c11Start, true, p67, 0, true,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,673,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,675,/ P4  = (A22)(B21 - B11)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,676,/ C11 = P1 - P5 + P7 + P4
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,677,/ C21 = P2 + P4
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,678,"ilesSubtract(b, b21Start, true, b, b11Start, true, sB, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,679,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,680,"trassenMultiply(a, a22Start, false, sB, 0, true, p45, 0,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,681,"2, bsRows, bsColumns, bsMultiplicands);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,682,"ilesSelfAdd(result, c11Start, true, p45, 0, true,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,683,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,684,"ilesSelfAdd(result, c21Start, true, p45, 0, true,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,685,"QuadrantSize, nonLeafQuadrants);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,691, Perform an addition on a few tiles in arrays.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,692, @param a left term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,693, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,694, @param aDirect direct/reversed orientation flag for a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,695, @param b right term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,696, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,697, @param bDirect direct/reversed orientation flag for b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,698, @param result result array (will have same orientation as a)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,699, @param resultStart start index in result
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,700, @param n number of elements to add
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,701, @param nonLeafQuadrants if true the quadrant can be further decomposed
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,703,"rivate static void tilesAdd(final double[] a, final int aStart, final boolean aDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,704,"inal double[] b, final int bStart, final boolean bDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,705,"inal double[] result, final int resultStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,706,"inal int n, final boolean nonLeafQuadrants) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,707,f ((aDirect ^ bDirect) & nonLeafQuadrants) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,708,/ a and b have different orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,709,/ perform addition in two half
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,710,inal int n2 = n / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,711,"ddLoop(a, aStart,      b, bStart + n2, result, resultStart,      n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,712,"ddLoop(a, aStart + n2, b, bStart,      result, resultStart + n2, n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,713, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,714,/ a and b have same orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,715,/ perform addition in one loop
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,716,"ddLoop(a, aStart, b, bStart, result, resultStart, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,721, Perform an addition loop.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,722, @param a left term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,723, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,724, @param b right term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,725, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,726, @param result result array (will have same orientation as a)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,727, @param resultStart start index in result
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,728, @param n number of elements to add
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,730,"rivate static void addLoop(final double[] a, final int aStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,731,"inal double[] b, final int bStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,732,"inal double[] result, final int resultStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,733,inal int n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,734,nt i = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,735,hile (i < n - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,736,inal int r0 = resultStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,737,inal int a0 = aStart      + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,738,inal int b0 = bStart      + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,739,esult[r0]     = a[a0]     + b[b0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,740,esult[r0 + 1] = a[a0 + 1] + b[b0 + 1];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,741,esult[r0 + 2] = a[a0 + 2] + b[b0 + 2];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,742,esult[r0 + 3] = a[a0 + 3] + b[b0 + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,743, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,745,hile (i < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,746,esult[resultStart + i] = a[aStart + i] + b[bStart + i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,747,+i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,752, Perform a subtraction on a few tiles in arrays.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,753, @param a left term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,754, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,755, @param aDirect direct/reversed orientation flag for a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,756, @param b right term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,757, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,758, @param bDirect direct/reversed orientation flag for b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,759, @param result result array (will have same orientation as a)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,760, @param resultStart start index in result
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,761, @param n number of elements to subtract
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,762, @param nonLeafQuadrants if true the quadrant can be further decomposed
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,764,"rivate static void tilesSubtract(final double[] a, final int aStart, final boolean aDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,765,"inal double[] b, final int bStart, final boolean bDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,766,"inal double[] result, final int resultStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,767,"inal int n, final boolean nonLeafQuadrants) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,768,f ((aDirect ^ bDirect) & nonLeafQuadrants) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,769,/ a and b have different orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,770,/ perform subtraction in two half
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,771,inal int n2 = n / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,772,"ubtractLoop(a, aStart,      b, bStart + n2, result, resultStart,      n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,773,"ubtractLoop(a, aStart + n2, b, bStart,      result, resultStart + n2, n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,774, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,775,/ a and b have same orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,776,/ perform subtraction in one loop
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,777,"ubtractLoop(a, aStart, b, bStart, result, resultStart, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,782, Perform a subtraction loop.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,783, @param a left term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,784, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,785, @param b right term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,786, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,787, @param result result array (will have same orientation as a)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,788, @param resultStart start index in result
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,789, @param n number of elements to subtract
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,791,"rivate static void subtractLoop(final double[] a, final int aStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,792,"inal double[] b, final int bStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,793,"inal double[] result, final int resultStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,794,inal int n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,795,nt i = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,796,hile (i < n - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,797,inal int r0 = resultStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,798,inal int a0 = aStart      + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,799,inal int b0 = bStart      + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,800,esult[r0]     = a[a0]     - b[b0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,801,esult[r0 + 1] = a[a0 + 1] - b[b0 + 1];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,802,esult[r0 + 2] = a[a0 + 2] - b[b0 + 2];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,803,esult[r0 + 3] = a[a0 + 3] - b[b0 + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,804, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,806,hile (i < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,807,esult[resultStart + i] = a[aStart + i] - b[bStart + i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,808,+i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,813, Perform a self-addition on a few tiles in arrays.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,814, @param a left term of addition (will be overwritten with result)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,815, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,816, @param aDirect direct/reversed orientation flag for a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,817, @param b right term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,818, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,819, @param bDirect direct/reversed orientation flag for b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,820, @param n number of elements to add
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,821, @param nonLeafQuadrants if true the quadrant can be further decomposed
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,823,"rivate static void tilesSelfAdd(final double[] a, final int aStart, final boolean aDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,824,"inal double[] b, final int bStart, final boolean bDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,825,"inal int n, final boolean nonLeafQuadrants) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,826,f ((aDirect ^ bDirect) & nonLeafQuadrants) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,827,/ a and b have different orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,828,/ perform addition in two half
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,829,inal int n2 = n / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,830,"elfAddLoop(a, aStart,      b, bStart + n2, n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,831,"elfAddLoop(a, aStart + n2, b, bStart,      n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,832, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,833,/ a and b have same orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,834,/ perform addition in one loop
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,835,"elfAddLoop(a, aStart, b, bStart, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,840, Perform a self-addition loop.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,841, @param a left term of addition (will be overwritten with result)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,842, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,843, @param b right term of addition
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,844, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,845, @param n number of elements to add
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,847,"rivate static void selfAddLoop(final double[] a, final int aStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,848,"inal double[] b, final int bStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,849,inal int n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,850,nt i = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,851,hile (i < n - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,852,inal int a0 = aStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,853,inal int b0 = bStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,854,[a0]     += b[b0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,855,[a0 + 1] += b[b0 + 1];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,856,[a0 + 2] += b[b0 + 2];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,857,[a0 + 3] += b[b0 + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,858, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,860,hile (i < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,861,[aStart + i] += b[bStart + i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,862,+i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,867, Perform a self-subtraction on a few tiles in arrays.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,868, @param a left term of subtraction (will be overwritten with result)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,869, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,870, @param aDirect direct/reversed orientation flag for a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,871, @param b right term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,872, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,873, @param bDirect direct/reversed orientation flag for b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,874, @param n number of elements to subtract
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,875, @param nonLeafQuadrants if true the quadrant can be further decomposed
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,877,"rivate static void tilesSelfSubtract(final double[] a, final int aStart, final boolean aDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,878,"inal double[] b, final int bStart, final boolean bDirect,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,879,"inal int n, final boolean nonLeafQuadrants) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,880,f ((aDirect ^ bDirect) & nonLeafQuadrants) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,881,/ a and b have different orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,882,/ perform subtraction in two half
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,883,inal int n2 = n / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,884,"elfSubtractLoop(a, aStart,      b, bStart + n2, n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,885,"elfSubtractLoop(a, aStart + n2, b, bStart,      n2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,886, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,887,/ a and b have same orientations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,888,/ perform subtraction in one loop
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,889,"elfSubtractLoop(a, aStart, b, bStart, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,894, Perform a self-subtraction loop.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,895, @param a left term of subtraction (will be overwritten with result)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,896, @param aStart start index in a
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,897, @param b right term of subtraction
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,898, @param bStart start index in b
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,899, @param n number of elements to subtract
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,901,"rivate static void selfSubtractLoop(final double[] a, final int aStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,902,"inal double[] b, final int bStart,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,903,inal int n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,904,nt i = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,905,hile (i < n - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,906,inal int a0 = aStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,907,inal int b0 = bStart + i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,908,[a0]     -= b[b0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,909,[a0 + 1] -= b[b0 + 1];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,910,[a0 + 2] -= b[b0 + 2];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,911,[a0 + 3] -= b[b0 + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,912, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,914,hile (i < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,915,[aStart + i] -= b[bStart + i];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,916,+i;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,920,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,921,ublic double[][] getData() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,923,inal double[][] out = new double[rows][columns];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,925,"/ perform extraction tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,926,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,928,/ perform extraction on the current tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,929,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,930,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,931,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,932,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,933,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,934,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,935,f (pStart < rows && qStart < columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,936,"inal int pEnd = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,937,"inal int qEnd = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,938,nt tileRowStart = tileStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,939,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,940,"ystem.arraycopy(data, tileRowStart, out[p], qStart, qEnd - qStart);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,941,ileRowStart += tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,947,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,951,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,952,ublic double getFrobeniusNorm() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,953,ouble sum2 = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,954,or (final double entry : data) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,955,um2 += entry * entry;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,957,eturn Math.sqrt(sum2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,960,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,961,"ublic RealMatrix getSubMatrix(final int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,962,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,963,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,965,/ safety checks
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,966,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,968,/ create the output matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,969,inal RecursiveLayoutRealMatrix out =
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,970,"ew RecursiveLayoutRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,972,"/ perform extraction tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,973,or (int iTile = 0; iTile < out.tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,974,inal int iStart = startRow + iTile * out.tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,975,"inal int iEnd   = Math.min(startRow + Math.min((iTile + 1) * out.tileSizeRows, out.rows),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,976,ndRow + 1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,977,or (int jTile = 0; jTile < out.tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,978,inal int jStart = startColumn + jTile * out.tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,979,"inal int jEnd   = Math.min(startColumn + Math.min((jTile + 1) * out.tileSizeColumns, out.columns),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,980,ndColumn + 1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,982,/ the current output tile may expand on more than one instance tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,983,or (int pTile = iStart / tileSizeRows; pTile * tileSizeRows < iEnd; ++pTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,984,inal int p0     = pTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,985,"inal int pStart = Math.max(p0, iStart);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,986,"inal int pEnd   = Math.min(Math.min(p0 + tileSizeRows, endRow + 1), iEnd);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,987,or (int qTile = jStart / tileSizeColumns; qTile * tileSizeColumns < jEnd; ++qTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,988,inal int q0     = qTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,989,"inal int qStart = Math.max(q0, jStart);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,990,"inal int qEnd   = Math.min(Math.min(q0 + tileSizeColumns, endColumn + 1), jEnd);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,992,/ copy the overlapping part of instance and output tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,993,"nt outIndex = tileIndex(iTile, jTile) * out.tileSizeRows * out.tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,994,pStart - iStart) * out.tileSizeColumns + (qStart - jStart);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,995,"nt index    = tileIndex(pTile, qTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,996,pStart - p0) * tileSizeColumns + (qStart - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,997,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,998,"ystem.arraycopy(data, index, out.data, outIndex, qEnd - qStart);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,999,utIndex += out.tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1000,ndex    += tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1010,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1014,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1015,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1016,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1018,/ safety checks
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1019,inal int refLength = subMatrix[0].length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1020,f (refLength < 1) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1021,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1022,ull);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1024,inal int endRow    = row + subMatrix.length - 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1025,inal int endColumn = column + refLength - 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1026,"heckSubMatrixIndex(row, endRow, column, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1027,or (final double[] subRow : subMatrix) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1028,f (subRow.length != refLength) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1029,hrow MathRuntimeException.createIllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1030,"some rows have length {0} while others have length {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1031,"efLength, subRow.length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1035,/ compute tiles bounds
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1036,inal int tileStartRow    = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1037,inal int tileEndRow      = (endRow + tileSizeRows) / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1038,inal int tileStartColumn = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1039,inal int tileEndColumn   = (endColumn + tileSizeColumns) / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1041,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1042,or (int iTile = tileStartRow; iTile < tileEndRow; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1043,inal int firstRow = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1044,"inal int iStart   = Math.max(row,    firstRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1045,"inal int iEnd     = Math.min(endRow + 1, firstRow + tileSizeRows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1047,or (int jTile = tileStartColumn; jTile < tileEndColumn; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1048,inal int firstColumn = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1049,"inal int jStart      = Math.max(column,    firstColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1050,"inal int jEnd        = Math.min(endColumn + 1, firstColumn + tileSizeColumns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1051,inal int jLength     = jEnd - jStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1052,"inal int tileStart   = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1054,"/ handle one tile, row by row"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1055,or (int i = iStart; i < iEnd; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1056,"ystem.arraycopy(subMatrix[i - row], jStart - column,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1057,"ata, tileStart + (i - firstRow) * tileSizeColumns + (jStart - firstColumn),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1058,Length);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1065,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1066,ublic RealMatrix getRowMatrix(final int row)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1067,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1069,heckRowIndex(row);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1070,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(1, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1072,"/ a row matrix has always only one large tile,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1073,/ because a single row cannot be split into 2^k tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1074,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1075,inal int iTile     = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1076,inal int rowOffset = row - iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1077,nt outIndex        = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1078,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1079,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1080,owOffset * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1081,"inal int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1082,"ystem.arraycopy(data, kStart, out.data, outIndex, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1083,utIndex += length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1086,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1090,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1091,"ublic void setRowMatrix(final int row, final RealMatrix matrix)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1092,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1093,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1094,"etRowMatrix(row, (RecursiveLayoutRealMatrix) matrix);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1095, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1096,"uper.setRowMatrix(row, matrix);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1101, Sets the entries in row number <code>row</code>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1102, as a row matrix.  Row indices start at 0.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1104, @param row the row to be set
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1105, @param matrix row matrix (must have one row and the same number of columns
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1106, as the instance)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1107, @throws MatrixIndexException if the specified row index is invalid
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1108, @throws InvalidMatrixException if the matrix dimensions do not match one
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1109, instance row
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1111,"ublic void setRowMatrix(final int row, final RecursiveLayoutRealMatrix matrix)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1112,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1114,heckRowIndex(row);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1115,inal int nCols = getColumnDimension();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1116,f ((matrix.getRowDimension() != 1) ||
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1117,matrix.getColumnDimension() != nCols)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1118,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1119,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1120,"atrix.getRowDimension(), matrix.getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1121,", nCols);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1124,"/ a row matrix has always only one large tile,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1125,/ because a single row cannot be split into 2^k tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1126,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1127,inal int iTile     = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1128,inal int rowOffset = row - iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1129,nt outIndex        = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1130,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1131,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1132,owOffset * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1133,"inal int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1134,"ystem.arraycopy(matrix.data, outIndex, data, kStart, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1135,utIndex += length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1140,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1141,ublic RealMatrix getColumnMatrix(final int column)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1142,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1144,heckColumnIndex(column);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1145,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1147,"/ a column matrix has always only one large tile,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1148,/ because a single column cannot be split into 2^k tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1149,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1150,inal int jTile        = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1151,inal int columnOffset = column - jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1152,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1153,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1154,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1155,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1156,olumnOffset;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1157,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1158,ut.data[p] = data[k];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1162,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1166,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1167,"ublic void setColumnMatrix(final int column, final RealMatrix matrix)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1168,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1169,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1170,"etColumnMatrix(column, (RecursiveLayoutRealMatrix) matrix);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1171, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1172,"uper.setColumnMatrix(column, matrix);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1177, Sets the entries in column number <code>column</code>
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1178, as a column matrix.  Column indices start at 0.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1180, @param column the column to be set
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1181, @param matrix column matrix (must have one column and the same number of rows
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1182, as the instance)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1183, @throws MatrixIndexException if the specified column index is invalid
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1184, @throws InvalidMatrixException if the matrix dimensions do not match one
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1185, instance column
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1187,"oid setColumnMatrix(final int column, final RecursiveLayoutRealMatrix matrix)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1188,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1190,heckColumnIndex(column);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1191,inal int nRows = getRowDimension();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1192,f ((matrix.getRowDimension() != nRows) ||
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1193,matrix.getColumnDimension() != 1)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1194,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1195,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1196,"atrix.getRowDimension(), matrix.getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1197,"Rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1200,"/ a column matrix has always only one large tile,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1201,/ because a single column cannot be split into 2^k tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1202,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1203,inal int jTile        = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1204,inal int columnOffset = column - jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1205,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1206,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1207,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1208,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1209,olumnOffset;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1210,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1211,ata[k] = matrix.data[p];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1217,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1218,"ublic void setRowVector(final int row, final RealVector vector)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1219,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1220,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1221,"etRow(row, ((RealVectorImpl) vector).getDataRef());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1222, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1223,heckRowIndex(row);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1224,f (vector.getDimension() != columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1225,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1226,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1227,", vector.getDimension(), 1, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1230,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1231,inal int iTile     = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1232,inal int rowOffset = row - iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1233,nt outIndex        = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1234,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1235,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1236,owOffset * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1237,"inal int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1238,or (int l = 0; l < length; ++l) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1239,ata[kStart + l] = vector.getEntry(outIndex + l);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1241,utIndex += length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1246,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1247,"ublic void setColumnVector(final int column, final RealVector vector)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1248,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1249,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1250,"etColumn(column, ((RealVectorImpl) vector).getDataRef());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1251, catch (ClassCastException cce) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1252,heckColumnIndex(column);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1253,f (vector.getDimension() != rows) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1254,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1255,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1256,"ector.getDimension(), 1, rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1259,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1260,inal int jTile        = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1261,inal int columnOffset = column - jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1262,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1263,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1264,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1265,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1266,olumnOffset;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1267,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1268,ata[k] = vector.getEntry(p);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1274,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1275,ublic double[] getRow(final int row)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1276,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1278,heckRowIndex(row);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1279,inal double[] out = new double[columns];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1281,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1282,inal int iTile     = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1283,inal int rowOffset = row - iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1284,nt outIndex        = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1285,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1286,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1287,owOffset * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1288,"inal int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1289,"ystem.arraycopy(data, kStart, out, outIndex, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1290,utIndex += length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1293,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1297,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1298,"ublic void setRow(final int row, final double[] array)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1299,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1301,heckRowIndex(row);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1302,f (array.length != columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1303,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1304,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1305,", array.length, 1, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1308,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1309,inal int iTile     = row / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1310,inal int rowOffset = row - iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1311,nt outIndex        = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1312,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1313,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1314,owOffset * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1315,"inal int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1316,"ystem.arraycopy(array, outIndex, data, kStart, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1317,utIndex += length;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1322,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1323,ublic double[] getColumn(final int column)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1324,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1326,heckColumnIndex(column);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1327,inal double[] out = new double[rows];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1329,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1330,inal int jTile        = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1331,inal int columnOffset = column - jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1332,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1333,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1334,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1335,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1336,olumnOffset;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1337,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1338,ut[p] = data[k];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1342,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1346,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1347,"ublic void setColumn(final int column, final double[] array)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1348,"hrows MatrixIndexException, InvalidMatrixException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1350,heckColumnIndex(column);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1351,f (array.length != rows) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1352,hrow new InvalidMatrixException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1353,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1354,"rray.length, 1, rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1357,"/ perform copy tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1358,inal int jTile        = column / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1359,inal int columnOffset = column - jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1360,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1361,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1362,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1363,"inal int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1364,olumnOffset;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1365,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1366,ata[k] = array[p];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1372,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1373,"ublic double getEntry(final int row, final int column)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1374,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1375,f ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1376,hrow new MatrixIndexException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1377,"no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1378,"ow, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1380,"eturn data[index(row, column)];"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1383,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1384,"ublic void setEntry(final int row, final int column, final double value)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1385,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1386,f ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1387,hrow new MatrixIndexException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1388,"no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1389,"ow, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1391,"ata[index(row, column)] = value;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1394,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1395,"ublic void addToEntry(final int row, final int column, final double increment)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1396,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1397,f ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1398,hrow new MatrixIndexException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1399,"no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1400,"ow, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1402,"ata[index(row, column)] += increment;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1405,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1406,"ublic void multiplyEntry(final int row, final int column, final double factor)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1407,hrows MatrixIndexException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1408,f ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1409,hrow new MatrixIndexException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1410,"no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1411,"ow, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1413,"ata[index(row, column)] *= factor;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1416,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1417,ublic RealMatrix transpose() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1419,"inal RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(columns, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1421,"/ perform transpose tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1422,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1423,inal int tileStart    = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1424,inal long indices     = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1425,inal int outJTile     = (int) (indices >> 32);        // iTile in the instance
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1426,inal int outITile     = (int) (indices & 0xffffffff); // jTile in the instance
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1427,"inal int outIndex     = tileIndex(outITile, outJTile);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1428,inal int outTileStart = outIndex * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1430,/ transpose current tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1431,inal int outPStart = outITile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1432,"inal int outPEnd   = Math.min(outPStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1433,inal int outQStart = outJTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1434,"inal int outQEnd   = Math.min(outQStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1435,or (int outP = outPStart; outP < outPEnd; ++outP) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1436,inal int dP = outP - outPStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1437,nt k = outTileStart + dP * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1438,nt l = tileStart + dP;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1439,or (int outQ = outQStart; outQ < outQEnd; ++outQ) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1440,ut.data[k++] = data[l];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1441,+= tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1447,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1451,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1452,ublic int getRowDimension() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1453,eturn rows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1456,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1457,ublic int getColumnDimension() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1458,eturn columns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1461,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1462,ublic double[] operate(final double[] v)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1463,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1465,f (v.length != columns) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1466,hrow MathRuntimeException.createIllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1467,"vector length mismatch: got {0} but expected {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1468,".length, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1470,inal double[] out = new double[rows];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1472,"/ perform multiplication tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1473,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1474,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1475,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1476,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1477,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1478,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1479,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1480,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1481,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1482,"or (int p = pStart, k = tileStart; p < pEnd; ++p) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1483,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1484,nt    q   = qStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1485,hile (q < qEnd - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1486,um += data[k]     * v[q]     +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1487,ata[k + 1] * v[q + 1] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1488,ata[k + 2] * v[q + 2] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1489,ata[k + 3] * v[q + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1490, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1491, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1493,hile (q < qEnd) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1494,um += data[k++] * v[q++];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1496,ut[p] += sum;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1500,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1504,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1505,ublic double[] preMultiply(final double[] v)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1506,hrows IllegalArgumentException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1508,f (v.length != rows) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1509,hrow MathRuntimeException.createIllegalArgumentException(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1510,"vector length mismatch: got {0} but expected {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1511,".length, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1513,inal double[] out = new double[columns];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1515,inal int offset1 = tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1516,inal int offset2 = offset1 + offset1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1517,inal int offset3 = offset2 + offset1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1518,inal int offset4 = offset3 + offset1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1520,"/ perform multiplication tile-wise, to ensure good cache behavior"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1521,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1522,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1523,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1524,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1525,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1526,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1527,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1528,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1529,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1530,or (int q = qStart; q < qEnd; ++q) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1531,nt k = tileStart + q - qStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1532,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1533,nt p = pStart;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1534,hile (p < pEnd - 3) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1535,um += data[k]           * v[p]     +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1536,ata[k + offset1] * v[p + 1] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1537,ata[k + offset2] * v[p + 2] +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1538,ata[k + offset3] * v[p + 3];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1539, += offset4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1540, += 4;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1542,hile (p < pEnd) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1543,um += data[k] * v[p++];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1544,   += offset1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1546,ut[q] += sum;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1550,eturn out;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1554,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1555,ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1556,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1557,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1558,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1559,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1560,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1561,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1562,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1563,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1564,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1565,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1566,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1567,inal int kStart    = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1568,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1569,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1574,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1577,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1578,ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1579,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1580,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1581,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1582,inal int pStart = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1583,"inal int pEnd   = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1584,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1585,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1586,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1587,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1588,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1589,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1590,inal int kStart    = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1591,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1592,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1597,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1600,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1601,"ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1602,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1603,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1604,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1605,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1606,"isitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1607,or (int iTile = startRow / tileSizeRows; iTile < 1 + endRow / tileSizeRows; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1608,inal int p0     = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1609,"inal int pStart = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1610,"inal int pEnd   = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1611,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1612,or (int jTile = startColumn / tileSizeColumns; jTile < 1 + endColumn / tileSizeColumns; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1613,inal int q0        = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1614,"inal int qStart    = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1615,"inal int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1616,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1617,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1618,inal int kStart    = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1619,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1620,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1625,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1628,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1629,"ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1630,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1631,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1632,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1633,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1634,"isitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1635,or (int iTile = startRow / tileSizeRows; iTile < 1 + endRow / tileSizeRows; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1636,inal int p0     = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1637,"inal int pStart = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1638,"inal int pEnd   = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1639,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1640,or (int jTile = startColumn / tileSizeColumns; jTile < 1 + endColumn / tileSizeColumns; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1641,inal int q0        = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1642,"inal int qStart    = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1643,"inal int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1644,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1645,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1646,inal int kStart    = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1647,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1648,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1653,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1656,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1657,ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1658,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1659,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1660,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1661,inal int qStart = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1662,"inal int qEnd   = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1663,or (int q = qStart; q < qEnd; ++q) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1664,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1665,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1666,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1667,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1668,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1669,inal int kStart    = tileStart + (q - qStart);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1670,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1671,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1676,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1679,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1680,ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1681,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1682,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1683,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1684,inal int qStart = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1685,"inal int qEnd   = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1686,or (int q = qStart; q < qEnd; ++q) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1687,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1688,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1689,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1690,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1691,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1692,inal int kStart    = tileStart + (q - qStart);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1693,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1694,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1699,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1702,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1703,"ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1704,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1705,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1706,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1707,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1708,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1709,"tartRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1710,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1711,inal int q0     = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1712,"inal int qStart = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1713,"inal int qEnd   = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1714,or (int q = qStart; q < qEnd; ++q) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1715,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1716,inal int p0        = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1717,"inal int pStart    = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1718,"inal int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1719,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1720,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1721,inal int kStart = tileStart + (pStart - p0) * tileSizeColumns + (q - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1722,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1723,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1728,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1731,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1732,"ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1733,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1734,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1735,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1736,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1737,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1738,"tartRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1739,or (int jTile = 0; jTile < tileNumber; ++jTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1740,inal int q0     = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1741,"inal int qStart = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1742,"inal int qEnd   = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1743,or (int q = qStart; q < qEnd; ++q) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1744,or (int iTile = 0; iTile < tileNumber; ++iTile) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1745,inal int p0        = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1746,"inal int pStart    = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1747,"inal int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1748,"inal int tileStart = tileIndex(iTile, jTile) *"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1749,ileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1750,inal int kStart = tileStart + (pStart - p0) * tileSizeColumns + (q - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1751,"or (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1752,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1757,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1760,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1761,ublic double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1762,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1763,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1764,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1765,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1766,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1767,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1768,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1769,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1770,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1771,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1772,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1773,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1774,inal int kStart = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1775,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1776,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1780,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1783,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1784,ublic double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1785,hrows MatrixVisitorException {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1786,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1787,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1788,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1789,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1790,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1791,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1792,inal int pStart    = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1793,"inal int pEnd      = Math.min(pStart + tileSizeRows, rows);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1794,inal int qStart    = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1795,"inal int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1796,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1797,inal int kStart = tileStart + (p - pStart) * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1798,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1799,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1803,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1806,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1807,"ublic double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1808,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1809,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1810,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1811,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1812,"isitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1813,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1814,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1815,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1816,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1817,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1818,inal int p0        = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1819,"inal int pStart    = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1820,"inal int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1821,inal int q0        = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1822,"inal int qStart    = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1823,"inal int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1824,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1825,inal int kStart = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1826,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1827,"ata[k] = visitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1831,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1834,** {@inheritDoc} */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1835,"ublic double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1836,"inal int startRow, final int endRow,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1837,"inal int startColumn, final int endColumn)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1838,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1839,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1840,"isitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1841,or (int index = 0; index < tileNumber * tileNumber; ++index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1842,inal int tileStart = index * tileSizeRows * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1843,inal long indices  = tilesIndices(index);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1844,inal int iTile     = (int) (indices >> 32);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1845,inal int jTile     = (int) (indices & 0xffffffff);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1846,inal int p0        = iTile * tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1847,"inal int pStart    = Math.max(startRow, p0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1848,"inal int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1849,inal int q0        = jTile * tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1850,"inal int qStart    = Math.max(startColumn, q0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1851,"inal int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1852,or (int p = pStart; p < pEnd; ++p) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1853,inal int kStart = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1854,"or (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1855,"isitor.visit(p, q, data[k]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1859,eturn visitor.end();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1863, Get the index of an element.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1864, @param row row index of the element
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1865, @param column column index of the element
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1866, @return index of the element
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1868,"rivate int index(final int row, final int columns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1869,inal int iTile       = row     / tileSizeRows;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1870,inal int jTile       = columns / tileSizeColumns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1871,"inal int tileStart   = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1872,inal int indexInTile = (row % tileSizeRows) * tileSizeColumns +
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1873,columns % tileSizeColumns);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1874,eturn tileStart + indexInTile;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1878, Get the index of a tile.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1879, @param iTile row index of the tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1880, @param jTile column index of the tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1881, @return index of the tile
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1883,"rivate static int tileIndex(int iTile, int jTile) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1885,/ compute n = 2^k such that a nxn square contains the indices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1886,"nt n = Integer.highestOneBit(Math.max(iTile, jTile)) << 1;"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1888,/ start recursion by noting the index is somewhere in the nxn
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1889,/ square whose lowest index is 0 and which has direct orientation
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1890,nt lowIndex   = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1891,oolean direct = true;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1893,/ the tail-recursion on the square size is replaced by an iteration here
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1894,hile (n > 1) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1896,/ reduce square to 4 quadrants
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1897, >>= 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1898,inal int n2 = n * n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1900,"/ check in which quadrant the element is,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1901,/ updating the lowest index of the quadrant and its orientation
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1902,f (iTile < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1903,f (jTile < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1904,/ the element is in the top-left quadrant
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1905,f (!direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1906,owIndex += 2 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1907,irect = true;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1909, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1910,/ the element is in the top-right quadrant
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1911,Tile -= n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1912,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1913,owIndex += n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1914,irect = false;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1915, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1916,owIndex += 3 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1919, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1920,Tile -= n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1921,f (jTile < n) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1922,/ the element is in the bottom-left quadrant
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1923,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1924,owIndex += 3 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1925, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1926,owIndex += n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1927,irect = true;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1929, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1930,/ the element is in the bottom-right quadrant
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1931,Tile -= n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1932,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1933,owIndex += 2 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1934,irect = false;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1940,/ the lowest index of the remaining 1x1 quadrant is the requested index
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1941,eturn lowIndex;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1946, Get the row and column tile indices of a tile.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1947, @param index index of the tile in the layout
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1948, @return row and column indices packed in one long (row tile index
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1949," in 32 high order bits, column tile index in low order bits)"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1951,rivate static long tilesIndices(int index) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1953,/ compute n = 2^k such that a nxn square contains the index
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1954,nt n = Integer.highestOneBit((int) Math.sqrt(index)) << 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1956,/ start recursion by noting the index is somewhere in the nxn
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1957,/ square whose lowest index is 0 and which has direct orientation
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1958,nt iLow       = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1959,nt jLow       = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1960,oolean direct = true;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1962,/ the tail-recursion on the square size is replaced by an iteration here
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1963,hile (n > 1) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1965,/ reduce square to 4 quadrants
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1966, >>= 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1967,inal int n2 = n * n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1969,"/ check in which quadrant the element is,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1970,/ updating the low indices of the quadrant and its orientation
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1971,witch (index / n2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1972,ase 0 :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1973,f (!direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1974,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1975,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1977,reak;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1978,ase 1 :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1979,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1980,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1981, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1982,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1984,ndex -= n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1985,irect = !direct;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1986,reak;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1987,ase 2 :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1988,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1989,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1990,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1992,ndex -= 2 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1993,irect = !direct;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1994,reak;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1995,efault :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1996,f (direct) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1997,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1998, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1999,Low += n;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2001,ndex -= 3 * n2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2006,/ the lowest indices of the remaining 1x1 quadrant are the requested indices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2007,eturn (((long) iLow) << 32) | (long) jLow;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2012, Compute the power of two number of tiles for a matrix.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2013, @param rows number of rows
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2014, @param columns number of columns
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2015, @return power of two number of tiles
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2017,"rivate static int tilesNumber(final int rows, final int columns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2019,"/ find the minimal number of tiles, given that one double variable is 8 bytes"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2020,inal int nbElements         = rows * columns;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2021,inal int maxElementsPerTile = MAX_TILE_SIZE_BYTES / 8;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2022,inal int minTiles           = nbElements / maxElementsPerTile;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2024,/ the number of tiles must be a 2^k x 2^k square
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2025,nt twoK = 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2026,or (int nTiles = minTiles; nTiles != 0; nTiles >>= 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2027,woK <<= 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2030,/ make sure the tiles have at least one row and one column each
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2031,"/ (this may lead to tile sizes greater than MAX_BLOCK_SIZE_BYTES,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2032,/  in degenerate cases like a 3000x1 matrix)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2033,"hile (twoK > Math.min(rows, columns)) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2034,woK >>= 1;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2037,eturn twoK;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2042, Compute optimal tile size for a row or column count.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2043, @param count row or column count
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2044, @param twoK optimal tile number (must be a power of 2)
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2045, @return optimal tile size
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2047,"rivate static int tileSize(final int count, final int twoK) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2048,eturn (count + twoK - 1) / twoK;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,17,ackage org.apache.commons.math.linear;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,19,mport java.util.Arrays;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,20,mport java.util.Random;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,22,mport junit.framework.Test;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,23,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,24,mport junit.framework.TestSuite;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,27, Test cases for the {@link RecursiveLayoutRealMatrix} class.
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,29, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,32,ublic final class RecursiveLayoutRealMatrixTest extends TestCase {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,34,/ 3 x 3 identity matrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,35,"rotected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,37,/ Test data for group operations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,38,"rotected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,39,"rotected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,40,"rotected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,41,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,42,"-1d,0d,-8d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,43,"rotected double[] testDataRow1 = {1d,2d,3d};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,44,"rotected double[] testDataCol3 = {3d,3d,8d};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,45,rotected double[][] testDataInv =
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,46," {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,47,"rotected double[] preMultTest = {8,12,33};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,48,"rotected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,49,"rotected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,50,rotected double[][] testDataPlusInv =
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,51," {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,53,/ lu decomposition tests
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,54,"rotected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,55,"rotected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,56,"0.33333333333333,0d,0.33333333333333} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,58,/ singular matrices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,59,"rotected double[][] singular = { {2d,3d}, {2d,3d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,60,"rotected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,61,"7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,62,"rotected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,63,"rotected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,65,/ vectors
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,66,"rotected double[] testVector = {1,2,3};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,67,"rotected double[] testVector2 = {1,2,3,4};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,69,/ submatrix accessor tests
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,70,"rotected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,71,"2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,72,/ array selections
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,73,"rotected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,74,"rotected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,75,"rotected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,76,/ effective permutations
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,77,"rotected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,78,"rotected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,79,/ contiguous ranges
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,80,"rotected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,81,"rotected double[][] subRows23Cols00 = {{2} , {4}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,82,rotected double[][] subRows00Cols33 = {{4}};
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,83,/ row matrices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,84,"rotected double[][] subRow0 = {{1,2,3,4}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,85,"rotected double[][] subRow3 = {{4,5,6,7}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,86,/ column matrices
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,87,"rotected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,88,"rotected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,90,/ tolerances
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,91,rotected double entryTolerance = 10E-16;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,92,rotected double normTolerance = 10E-14;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,94,ublic RecursiveLayoutRealMatrixTest(String name) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,95,uper(name);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,98,ublic void setUp() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,102,ublic static Test suite() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,103,estSuite suite = new TestSuite(RecursiveLayoutRealMatrixTest.class);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,104,"uite.setName(""RecursiveLayoutRealMatrix Tests"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,105,eturn suite;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,108,** test dimensions */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,109,ublic void testDimensions() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,110,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,111,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,112,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,113,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,114,"ssertTrue(""testData is square"",m.isSquare());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,115,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,116,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,117,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,120,** test copy functions */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,121,ublic void testCopyFunctions() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,122,andom r = new Random(66636328996002l);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,123,"ecursiveLayoutRealMatrix m1 = createRandomMatrix(r, 47, 83);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,124,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(m1.getData());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,125,"ssertEquals(m1, m2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,126,ecursiveLayoutRealMatrix m3 = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,127,ecursiveLayoutRealMatrix m4 = new RecursiveLayoutRealMatrix(m3.getData());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,128,"ssertEquals(m3, m4);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,131,** test add */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,132,ublic void testAdd() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,133,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,134,ecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,135,ealMatrix mPlusMInv = m.add(mInv);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,136,ouble[][] sumEntries = mPlusMInv.getData();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,137,or (int row = 0; row < m.getRowDimension(); row++) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,138,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,139,"ssertEquals(""sum entry entry"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,140,"estDataPlusInv[row][col],sumEntries[row][col],"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,141,ntryTolerance);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,146,** test add failure */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,147,ublic void testAddFail() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,148,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,149,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,150,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,151,.add(m2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,152,"ail(""IllegalArgumentException expected"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,153, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,158,** test norm */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,159,ublic void testNorm() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,160,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,161,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,162,"ssertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,163,"ssertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,166,** test Frobenius norm */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,167,ublic void testFrobeniusNorm() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,168,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,169,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,170,"ssertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,171,"ssertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,174,** test m-n = m + -n */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,175,ublic void testPlusMinus() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,176,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,177,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testDataInv);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,178,"ssertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,179,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,180,.subtract(new RecursiveLayoutRealMatrix(testData2));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,181,"ail(""Expecting illegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,182, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,187,** test multiply */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,188,ublic void testMultiply() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,189,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,190,ecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,191,ecursiveLayoutRealMatrix identity = new RecursiveLayoutRealMatrix(id);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,192,ecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,193,"ssertClose(m.multiply(mInv), identity, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,194,"ssertClose(mInv.multiply(m), identity, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,195,"ssertClose(m.multiply(identity), m, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,196,"ssertClose(identity.multiply(mInv), mInv, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,197,"ssertClose(m2.multiply(identity), m2, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,198,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,199,.multiply(new RecursiveLayoutRealMatrix(bigSingular));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,200,"ail(""Expecting illegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,201, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,202,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,206,ublic void testSeveralBlocks() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,208,"ealMatrix m = new RecursiveLayoutRealMatrix(35, 71);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,209,or (int i = 0; i < m.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,210,or (int j = 0; j < m.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,211,".setEntry(i, j, i + j / 1024.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,215,ealMatrix mT = m.transpose();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,216,"ssertEquals(m.getRowDimension(), mT.getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,217,"ssertEquals(m.getColumnDimension(), mT.getRowDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,218,or (int i = 0; i < mT.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,219,or (int j = 0; j < mT.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,220,"ssertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,224,ealMatrix mPm = m.add(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,225,or (int i = 0; i < mPm.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,226,or (int j = 0; j < mPm.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,227,"ssertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,231,ealMatrix mPmMm = mPm.subtract(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,232,or (int i = 0; i < mPmMm.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,233,or (int j = 0; j < mPmMm.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,234,"ssertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,238,ealMatrix mTm = mT.multiply(m);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,239,or (int i = 0; i < mTm.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,240,or (int j = 0; j < mTm.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,241,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,242,or (int k = 0; k < mT.getColumnDimension(); ++k) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,243,um += (k + i / 1024.0) * (k + j / 1024.0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,245,"ssertEquals(sum, mTm.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,249,ealMatrix mmT = m.multiply(mT);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,250,or (int i = 0; i < mmT.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,251,or (int j = 0; j < mmT.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,252,ouble sum = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,253,or (int k = 0; k < m.getColumnDimension(); ++k) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,254,um += (i + k / 1024.0) * (j + k / 1024.0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,256,"ssertEquals(sum, mmT.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,260,"ealMatrix sub1 = m.getSubMatrix(2, 9, 5, 20);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,261,or (int i = 0; i < sub1.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,262,or (int j = 0; j < sub1.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,263,"ssertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,267,"ealMatrix sub2 = m.getSubMatrix(10, 12, 3, 70);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,268,or (int i = 0; i < sub2.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,269,or (int j = 0; j < sub2.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,270,"ssertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,274,"ealMatrix sub3 = m.getSubMatrix(30, 34, 0, 5);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,275,or (int i = 0; i < sub3.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,276,or (int j = 0; j < sub3.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,277,"ssertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,281,"ealMatrix sub4 = m.getSubMatrix(30, 32, 62, 65);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,282,or (int i = 0; i < sub4.getRowDimension(); ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,283,or (int j = 0; j < sub4.getColumnDimension(); ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,284,"ssertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,290,/Additional Test for RecursiveLayoutRealMatrixTest.testMultiply
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,292,"rivate double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,293,"rivate double[][] d4 = new double[][] {{1},{2},{3},{4}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,294,"rivate double[][] d5 = new double[][] {{30},{70}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,296,ublic void testMultiply2() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,297,ealMatrix m3 = new RecursiveLayoutRealMatrix(d3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,298,ealMatrix m4 = new RecursiveLayoutRealMatrix(d4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,299,ealMatrix m5 = new RecursiveLayoutRealMatrix(d5);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,300,"ssertClose(m3.multiply(m4), m5, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,303,** test trace */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,304,ublic void testTrace() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,305,ealMatrix m = new RecursiveLayoutRealMatrix(id);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,306,"ssertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,307, = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,308,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,309,.getTrace();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,310,"ail(""Expecting NonSquareMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,311, catch (NonSquareMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,316,** test scalarAdd */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,317,ublic void testScalarAdd() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,318,ealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,319,"ssertClose(new RecursiveLayoutRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,322,** test operate */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,323,ublic void testOperate() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,324,ealMatrix m = new RecursiveLayoutRealMatrix(id);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,325,"ssertClose(testVector, m.operate(testVector), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,326,"ssertClose(testVector, m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,327, = new RecursiveLayoutRealMatrix(bigSingular);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,328,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,329,.operate(testVector);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,330,"ail(""Expecting illegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,331, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,336,ublic void testMultiplyMedium() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,337,ealMatrix m1 = new RecursiveLayoutRealMatrix(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,338,ew double[][] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,339,"  80,  45,  13,  77, -82 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,340," -90,  33,  98,  80,  74 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,341,"  24, -37,  36,  -8, -69 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,342," -74,   2,  32, -67, -65 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,343," -29, -81,  44,  54, -65 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,344,"  17,  58, -36, -98,  25 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,345,"  48, -64, -95, -75,  34 }"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,347,ealMatrix m2 = new RecursiveLayoutRealMatrix(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,348,ew double[][] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,349,"  81,  58,  70,  18,   5, -57 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,350," -54,  33,  87,  68, -22,  73 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,351," -78,  -5,  34,  -7,  -3, -31 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,352," -16, -82, -68,   7,  10, -47 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,353,"  51,   4,  92,  15,  32, -51 }"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,355,ealMatrix m1m2 = m1.multiply(m2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,356,ealMatrix reference = new RecursiveLayoutRealMatrix(
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,357,ew double[][]{
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,358,"  -2378,   -582,  -2823,  3718, -2483, -1115 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,359," -14222, -10885,   1271,  1608,  1698, -3033 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,360,"  -2257,    371,  -6119, -3427, -1462, -1290 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,361," -10841,    848,  -5342, -2864, -3260,  9836 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,362,"  -5586,  -9263, -17233, -6935,   -35, -4847 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,363,"   3896,  11216,  13976,  4191, -1263,  7712 },"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,364,"  17688,   7433,   2790, -2838,  2271, -2672 }"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,366,"ssertEquals(0, m1m2.subtract(reference).getNorm(), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,369,ublic void testOperateLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,370,nt testBlockSize = 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,371,nt p = (7 * testBlockSize) / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,372,nt q = (5 * testBlockSize) / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,373,nt r =  3 * testBlockSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,374,andom random = new Random(111007463902334l);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,375,"ealMatrix m1 = createRandomMatrix(random, p, q);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,376,"ealMatrix m2 = createRandomMatrix(random, q, r);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,377,ealMatrix m1m2 = m1.multiply(m2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,378,or (int i = 0; i < r; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,379,"heckArrays(m1m2.getColumn(i), m1.operate(m2.getColumn(i)));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,383,ublic void testOperatePremultiplyLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,384,nt testBlockSize = 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,385,nt p = (7 * testBlockSize) / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,386,nt q = (5 * testBlockSize) / 2;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,387,nt r =  3 * testBlockSize;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,388,andom random = new Random(111007463902334l);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,389,"ealMatrix m1 = createRandomMatrix(random, p, q);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,390,"ealMatrix m2 = createRandomMatrix(random, q, r);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,391,ealMatrix m1m2 = m1.multiply(m2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,392,or (int i = 0; i < p; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,393,"heckArrays(m1m2.getRow(i), m2.preMultiply(m1.getRow(i)));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,397,** test issue MATH-209 */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,398,ublic void testMath209() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,399,ealMatrix a = new RecursiveLayoutRealMatrix(new double[][] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,400," 1, 2 }, { 3, 4 }, { 5, 6 }"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,402,"ouble[] b = a.operate(new double[] { 1, 1 });"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,403,"ssertEquals(a.getRowDimension(), b.length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,404,"ssertEquals( 3.0, b[0], 1.0e-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,405,"ssertEquals( 7.0, b[1], 1.0e-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,406,"ssertEquals(11.0, b[2], 1.0e-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,409,** test transpose */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,410,ublic void testTranspose() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,411,ealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,412,ealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,413,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,414,"ssertClose(mIT, mTI, normTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,415, = new RecursiveLayoutRealMatrix(testData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,416,ealMatrix mt = new RecursiveLayoutRealMatrix(testData2T);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,417,"ssertClose(mt, m.transpose(), normTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,420,** test preMultiply by vector */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,421,ublic void testPremultiplyVector() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,422,ealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,423,"ssertClose(m.preMultiply(testVector), preMultTest, normTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,424,"ssertClose(m.preMultiply(new RealVectorImpl(testVector).getData()),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,425,"reMultTest, normTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,426, = new RecursiveLayoutRealMatrix(bigSingular);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,427,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,428,.preMultiply(testVector);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,429,"ail(""expecting IllegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,430, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,435,ublic void testPremultiply() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,436,ealMatrix m3 = new RecursiveLayoutRealMatrix(d3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,437,ealMatrix m4 = new RecursiveLayoutRealMatrix(d4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,438,ealMatrix m5 = new RecursiveLayoutRealMatrix(d5);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,439,"ssertClose(m4.preMultiply(m3), m5, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,441,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,442,ecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,443,ecursiveLayoutRealMatrix identity = new RecursiveLayoutRealMatrix(id);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,444,"ssertClose(m.preMultiply(mInv), identity, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,445,"ssertClose(mInv.preMultiply(m), identity, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,446,"ssertClose(m.preMultiply(identity), m, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,447,"ssertClose(identity.preMultiply(mInv), mInv, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,448,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,449,.preMultiply(new RecursiveLayoutRealMatrix(bigSingular));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,450,"ail(""Expecting illegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,451, catch (IllegalArgumentException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,456,ublic void testGetVectors() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,457,ealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,458,"ssertClose(m.getRow(0), testDataRow1, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,459,"ssertClose(m.getColumn(2), testDataCol3, entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,460,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,461,.getRow(10);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,462,"ail(""expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,463, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,466,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,467,.getColumn(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,468,"ail(""expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,469, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,474,ublic void testGetEntry() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,475,ealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,476,"ssertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,477,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,478,".getEntry(10, 4);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,479,"ail (""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,480, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,481,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,485,** test examples in user guide */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,486,ublic void testExamples() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,487,/ Create a real matrix with two rows and three columns
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,488,"ouble[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,489,ealMatrix m = new RecursiveLayoutRealMatrix(matrixData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,490,"/ One more with three rows, two columns"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,491,"ouble[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,492,ealMatrix n = new RecursiveLayoutRealMatrix(matrixData2);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,493,/ Now multiply m by n
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,494,ealMatrix p = m.multiply(n);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,495,"ssertEquals(2, p.getRowDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,496,"ssertEquals(2, p.getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,497,/ Invert p
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,498,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,499,"ssertEquals(2, pInverse.getRowDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,500,"ssertEquals(2, pInverse.getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,502,/ Solve example
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,503,"ouble[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,504,ealMatrix coefficients = new RecursiveLayoutRealMatrix(coefficientsData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,505,"ouble[] constants = {1, -2, 1};"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,506,ouble[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,507,"ssertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,508,"ssertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,509,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,513,/ test submatrix accessors
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,514,ublic void testGetSubMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,515,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,516,"heckGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,517,"heckGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,518,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,519,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,520,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,521,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,522,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,523,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,524,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,525,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,526,"heckGetSubMatrix(m, null, -1, 1, 2, 2, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,527,"heckGetSubMatrix(m, null,  1, 0, 2, 2, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,528,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,529,"heckGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,530,"heckGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,533,"rivate void checkGetSubMatrix(RealMatrix m, double[][] reference,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,534,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,535,oolean mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,536,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,537,"ealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,538,"ssertEquals(new RecursiveLayoutRealMatrix(reference), sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,539,f (mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,540,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,542, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,543,f (!mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,544,hrow e;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,549,"rivate void checkGetSubMatrix(RealMatrix m, double[][] reference,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,550,"nt[] selectedRows, int[] selectedColumns,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,551,oolean mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,552,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,553,"ealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,554,"ssertEquals(new RecursiveLayoutRealMatrix(reference), sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,555,f (mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,556,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,558, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,559,f (!mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,560,hrow e;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,565,ublic void testGetSetMatrixLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,566,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,567,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,568,"ealMatrix sub = new RecursiveLayoutRealMatrix(n - 4, n - 4).scalarAdd(1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,570,".setSubMatrix(sub.getData(), 2, 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,571,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,572,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,573,f ((i < 2) || (i > n - 3) || (j < 2) || (j > n - 3)) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,574,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,575, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,576,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,580,"ssertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,584,ublic void testCopySubMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,585,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,586,"heckCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,587,"heckCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,588,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,589,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,590,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,591,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,592,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,593,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,594,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,596,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,597,"heckCopy(m, null, -1, 1, 2, 2, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,598,"heckCopy(m, null,  1, 0, 2, 2, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,599,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,600,"heckCopy(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,601,"heckCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,604,"rivate void checkCopy(RealMatrix m, double[][] reference,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,605,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,606,oolean mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,607,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,608,ouble[][] sub = (reference == null) ?
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,609,ew double[1][1] :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,610,ew double[reference.length][reference[0].length];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,611,".copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,612,"ssertEquals(new RecursiveLayoutRealMatrix(reference), new RecursiveLayoutRealMatrix(sub));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,613,f (mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,614,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,616, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,617,f (!mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,618,hrow e;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,623,"rivate void checkCopy(RealMatrix m, double[][] reference,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,624,"nt[] selectedRows, int[] selectedColumns,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,625,oolean mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,626,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,627,ouble[][] sub = (reference == null) ?
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,628,ew double[1][1] :
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,629,ew double[reference.length][reference[0].length];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,630,".copySubMatrix(selectedRows, selectedColumns, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,631,"ssertEquals(new RecursiveLayoutRealMatrix(reference), new RecursiveLayoutRealMatrix(sub));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,632,f (mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,633,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,635, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,636,f (!mustFail) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,637,hrow e;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,642,ublic void testGetRowMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,643,ealMatrix m     = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,644,ealMatrix mRow0 = new RecursiveLayoutRealMatrix(subRow0);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,645,ealMatrix mRow3 = new RecursiveLayoutRealMatrix(subRow3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,646,"ssertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,647,"ssertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,648,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,649,.getRowMatrix(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,650,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,651, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,652,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,654,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,655,.getRowMatrix(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,656,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,657, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,658,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,662,ublic void testSetRowMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,663,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,664,ealMatrix mRow3 = new RecursiveLayoutRealMatrix(subRow3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,665,"ssertNotSame(mRow3, m.getRowMatrix(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,666,".setRowMatrix(0, mRow3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,667,"ssertEquals(mRow3, m.getRowMatrix(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,668,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,669,".setRowMatrix(-1, mRow3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,670,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,671, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,672,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,674,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,675,".setRowMatrix(0, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,676,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,677, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,678,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,682,ublic void testGetSetRowMatrixLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,683,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,684,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,685,"ealMatrix sub = new RecursiveLayoutRealMatrix(1, n).scalarAdd(1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,687,".setRowMatrix(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,688,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,689,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,690,f (i != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,691,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,692, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,693,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,697,"ssertEquals(sub, m.getRowMatrix(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,701,ublic void testGetColumnMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,702,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,703,ealMatrix mColumn1 = new RecursiveLayoutRealMatrix(subColumn1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,704,ealMatrix mColumn3 = new RecursiveLayoutRealMatrix(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,705,"ssertEquals(mColumn1, m.getColumnMatrix(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,706,"ssertEquals(mColumn3, m.getColumnMatrix(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,707,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,708,.getColumnMatrix(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,709,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,710, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,711,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,713,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,714,.getColumnMatrix(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,715,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,716, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,717,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,721,ublic void testSetColumnMatrix() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,722,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,723,ealMatrix mColumn3 = new RecursiveLayoutRealMatrix(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,724,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,725,".setColumnMatrix(1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,726,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,727,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,728,".setColumnMatrix(-1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,729,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,730, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,731,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,733,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,734,".setColumnMatrix(0, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,735,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,736, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,737,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,741,ublic void testGetSetColumnMatrixLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,742,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,743,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,744,"ealMatrix sub = new RecursiveLayoutRealMatrix(n, 1).scalarAdd(1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,746,".setColumnMatrix(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,747,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,748,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,749,f (j != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,750,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,751, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,752,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,756,"ssertEquals(sub, m.getColumnMatrix(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,760,ublic void testGetRowVector() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,761,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,762,ealVector mRow0 = new RealVectorImpl(subRow0[0]);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,763,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,764,"ssertEquals(mRow0, m.getRowVector(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,765,"ssertEquals(mRow3, m.getRowVector(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,766,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,767,.getRowVector(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,768,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,769, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,770,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,772,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,773,.getRowVector(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,774,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,775, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,776,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,780,ublic void testSetRowVector() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,781,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,782,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,783,"ssertNotSame(mRow3, m.getRowMatrix(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,784,".setRowVector(0, mRow3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,785,"ssertEquals(mRow3, m.getRowVector(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,786,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,787,".setRowVector(-1, mRow3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,788,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,789, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,790,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,792,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,793,".setRowVector(0, new RealVectorImpl(5));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,794,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,795, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,796,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,800,ublic void testGetSetRowVectorLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,801,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,802,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,803,"ealVector sub = new RealVectorImpl(n, 1.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,805,".setRowVector(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,806,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,807,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,808,f (i != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,809,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,810, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,811,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,815,"ssertEquals(sub, m.getRowVector(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,819,ublic void testGetColumnVector() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,820,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,821,ealVector mColumn1 = columnToVector(subColumn1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,822,ealVector mColumn3 = columnToVector(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,823,"ssertEquals(mColumn1, m.getColumnVector(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,824,"ssertEquals(mColumn3, m.getColumnVector(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,825,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,826,.getColumnVector(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,827,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,828, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,829,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,831,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,832,.getColumnVector(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,833,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,834, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,835,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,839,ublic void testSetColumnVector() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,840,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,841,ealVector mColumn3 = columnToVector(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,842,"ssertNotSame(mColumn3, m.getColumnVector(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,843,".setColumnVector(1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,844,"ssertEquals(mColumn3, m.getColumnVector(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,845,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,846,".setColumnVector(-1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,847,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,848, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,849,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,851,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,852,".setColumnVector(0, new RealVectorImpl(5));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,853,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,854, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,855,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,859,ublic void testGetSetColumnVectorLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,860,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,861,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,862,"ealVector sub = new RealVectorImpl(n, 1.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,864,".setColumnVector(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,865,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,866,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,867,f (j != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,868,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,869, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,870,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,874,"ssertEquals(sub, m.getColumnVector(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,878,rivate RealVector columnToVector(double[][] column) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,879,ouble[] data = new double[column.length];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,880,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,881,ata[i] = column[i][0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,883,"eturn new RealVectorImpl(data, false);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,886,ublic void testGetRow() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,887,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,888,"heckArrays(subRow0[0], m.getRow(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,889,"heckArrays(subRow3[0], m.getRow(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,890,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,891,.getRow(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,892,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,893, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,894,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,896,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,897,.getRow(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,898,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,899, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,900,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,904,ublic void testSetRow() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,905,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,906,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,907,".setRow(0, subRow3[0]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,908,"heckArrays(subRow3[0], m.getRow(0));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,909,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,910,".setRow(-1, subRow3[0]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,911,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,912, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,913,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,915,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,916,".setRow(0, new double[5]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,917,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,918, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,919,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,923,ublic void testGetSetRowLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,924,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,925,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,926,ouble[] sub = new double[n];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,927,"rrays.fill(sub, 1.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,929,".setRow(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,930,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,931,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,932,f (i != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,933,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,934, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,935,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,939,"heckArrays(sub, m.getRow(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,943,ublic void testGetColumn() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,944,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,945,ouble[] mColumn1 = columnToArray(subColumn1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,946,ouble[] mColumn3 = columnToArray(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,947,"heckArrays(mColumn1, m.getColumn(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,948,"heckArrays(mColumn3, m.getColumn(3));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,949,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,950,.getColumn(-1);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,951,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,952, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,953,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,955,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,956,.getColumn(4);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,957,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,958, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,959,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,963,ublic void testSetColumn() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,964,ealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,965,ouble[] mColumn3 = columnToArray(subColumn3);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,966,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,967,".setColumn(1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,968,"heckArrays(mColumn3, m.getColumn(1));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,969,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,970,".setColumn(-1, mColumn3);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,971,"ail(""Expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,972, catch (MatrixIndexException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,973,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,975,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,976,".setColumn(0, new double[5]);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,977,"ail(""Expecting InvalidMatrixException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,978, catch (InvalidMatrixException ex) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,979,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,983,ublic void testGetSetColumnLarge() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,984,nt n = 3 * 64;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,985,"ealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,986,ouble[] sub = new double[n];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,987,"rrays.fill(sub, 1.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,989,".setColumn(2, sub);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,990,or (int i = 0; i < n; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,991,or (int j = 0; j < n; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,992,f (j != 2) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,993,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,994, else {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,995,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,999,"heckArrays(sub, m.getColumn(2));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1003,rivate double[] columnToArray(double[][] column) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1004,ouble[] data = new double[column.length];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1005,or (int i = 0; i < data.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1006,ata[i] = column[i][0];
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1008,eturn data;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1011,"rivate void checkArrays(double[] expected, double[] actual) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1012,"ssertEquals(expected.length, actual.length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1013,or (int i = 0; i < expected.length; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1014,"ssertEquals(expected[i], actual[i], 1.0e-9 * Math.abs(expected[i]));"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1018,ublic void testEqualsAndHashCode() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1019,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1020,ecursiveLayoutRealMatrix m1 = (RecursiveLayoutRealMatrix) m.copy();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1021,ecursiveLayoutRealMatrix mt = (RecursiveLayoutRealMatrix) m.transpose();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1022,ssertTrue(m.hashCode() != mt.hashCode());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1023,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1024,"ssertEquals(m, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1025,"ssertEquals(m, m1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1026,ssertFalse(m.equals(null));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1027,ssertFalse(m.equals(mt));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1028,ssertFalse(m.equals(new RecursiveLayoutRealMatrix(bigSingular)));
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1031,ublic void testToString() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1032,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1033,"ssertEquals(""RecursiveLayoutRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1034,.toString());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1037,ublic void testSetSubMatrix() throws Exception {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1038,ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1039,".setSubMatrix(detData2,1,1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1040,ealMatrix expected = new RecursiveLayoutRealMatrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1041,"new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1042,"ssertEquals(expected, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1044,".setSubMatrix(detData2,0,0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1045,xpected = new RecursiveLayoutRealMatrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1046,"new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1047,"ssertEquals(expected, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1049,".setSubMatrix(testDataPlus2,0,0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1050,xpected = new RecursiveLayoutRealMatrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1051,"new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1052,"ssertEquals(expected, m);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1054,/ javadoc example
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1055,ecursiveLayoutRealMatrix matrix = new RecursiveLayoutRealMatrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1056,"new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1057,"atrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1058,xpected = new RecursiveLayoutRealMatrix
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1059,"new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1060,"ssertEquals(expected, matrix);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1062,/ dimension overflow
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1063,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1064,".setSubMatrix(testData,1,1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1065,"ail(""expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1066, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1067,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1069,/ dimension underflow
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1070,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1071,".setSubMatrix(testData,-1,1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1072,"ail(""expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1073, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1074,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1076,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1077,".setSubMatrix(testData,1,-1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1078,"ail(""expecting MatrixIndexException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1079, catch (MatrixIndexException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1080,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1083,/ null
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1084,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1085,".setSubMatrix(null,1,1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1086,"ail(""expecting NullPointerException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1087, catch (NullPointerException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1088,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1091,/ ragged
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1092,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1093,".setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1094,"ail(""expecting IllegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1095, catch (IllegalArgumentException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1096,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1099,/ empty
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1100,ry {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1101,".setSubMatrix(new double[][] {{}}, 0, 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1102,"ail(""expecting IllegalArgumentException"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1103, catch (IllegalArgumentException e) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1104,/ expected
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1109,ublic void testWalk() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1110,nt rows    = 150;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1111,nt columns = 75;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1113,"ealMatrix m = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1114,.walkInRowOrder(new SetVisitor());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1115,etVisitor getVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1116,.walkInOptimizedOrder(getVisitor);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1117,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1119," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1120,".walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1121,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1122,".walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1123,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1124,or (int i = 0; i < rows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1125,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1126,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1128,or (int j = 0; j < columns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1129,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1130,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1133," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1134,.walkInColumnOrder(new SetVisitor());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1135,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1136,.walkInOptimizedOrder(getVisitor);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1137,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1139," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1140,".walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1141,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1142,".walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1143,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1144,or (int i = 0; i < rows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1145,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1146,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1148,or (int j = 0; j < columns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1149,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1150,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1153," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1154,.walkInOptimizedOrder(new SetVisitor());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1155,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1156,.walkInRowOrder(getVisitor);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1157,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1159," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1160,".walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1161,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1162,".walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1163,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1164,or (int i = 0; i < rows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1165,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1166,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1168,or (int j = 0; j < columns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1169,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1170,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1173," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1174,.walkInOptimizedOrder(new SetVisitor());
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1175,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1176,.walkInColumnOrder(getVisitor);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1177,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1179," = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1180,".walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1181,etVisitor = new GetVisitor();
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1182,".walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1183,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1184,or (int i = 0; i < rows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1185,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1186,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1188,or (int j = 0; j < columns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1189,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1190,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1195,rivate static class SetVisitor extends DefaultRealMatrixChangingVisitor {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1196,rivate static final long serialVersionUID = 1773444180892369386L;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1197,"ublic double visit(int i, int j, double value) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1198,eturn i + j / 1024.0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1202,rivate static class GetVisitor extends DefaultRealMatrixPreservingVisitor {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1203,rivate static final long serialVersionUID = -7745543227178932689L;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1204,rivate int count = 0;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1205,"ublic void visit(int i, int j, double value) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1206,+count;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1207,"ssertEquals(i + j / 1024.0, value, 0.0);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1209,ublic int getCount() {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1210,eturn count;
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1214,/--------------- -----------------Protected methods
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1216,** verifies that two matrices are close (1-norm) */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1217,"rotected void assertClose(RealMatrix m, RealMatrix n, double tolerance) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1218,ssertTrue(m.subtract(n).getNorm() < tolerance);
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1221,** verifies that two vectors are close (sup norm) */
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1222,"rotected void assertClose(double[] m, double[] n, double tolerance) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1223,f (m.length != n.length) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1224,"ail(""vectors not same length"");"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1226,or (int i = 0; i < m.length; i++) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1227,"ssertEquals(m[i], n[i], tolerance);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1231,"rivate RecursiveLayoutRealMatrix createRandomMatrix(Random r, int rows, int columns) {"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1232,"ecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(rows, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1233,or (int i = 0; i < rows; ++i) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1234,or (int j = 0; j < columns; ++j) {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1235,".setEntry(i, j, 200 * r.nextDouble() - 100);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1238,eturn m;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,17,ackage org.apache.commons.math.stat.univariate;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,19,mport java.io.Serializable;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,20,mport java.lang.reflect.InvocationTargetException;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,21,mport java.util.ArrayList;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,22,mport java.util.List;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,24,mport org.apache.commons.beanutils.PropertyUtils;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,25,mport org.apache.commons.beanutils.DynaBean;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,26,mport org.apache.commons.beanutils.BasicDynaClass;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,27,mport org.apache.commons.beanutils.DynaProperty;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,28,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,29,mport org.apache.commons.math.util.NumberTransformer;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,32, This implementation of DescriptiveStatistics uses commons-beanutils to gather
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,33, univariate statistics for a List of Java Beans by property.  This
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,34," implementation uses beanutils' PropertyUtils to get a simple, nested,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,35," indexed, mapped, or combined property from an element of a List."
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,36, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,38,ublic class BeanListUnivariateImpl extends ListUnivariateImpl implements Serializable {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,40,** Serializable version identifier */
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,41,tatic final long serialVersionUID = -6428201899045406285L;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,44, propertyName of the property to get from the bean
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,46,rivate String propertyName;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,49, No argument Constructor
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,51,ublic BeanListUnivariateImpl(){
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,52,his(new ArrayList());
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,56, Construct a BeanListUnivariate with specified
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,57, backing list
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,58, @param list Backing List
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,60,ublic BeanListUnivariateImpl(List list) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,61,"his(list, null);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,65, Construct a BeanListUnivariate with specified
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,66, backing list and propertyName
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,67, @param list Backing List
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,68, @param propertyName Bean propertyName
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,70,"ublic BeanListUnivariateImpl(List list, String propertyName) {"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,71,uper(list);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,72,etPropertyName(propertyName);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,76, @return propertyName
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,78,ublic String getPropertyName() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,79,eturn propertyName;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,83, @param propertyName Name of Property
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,85,ublic void setPropertyName(String propertyName) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,86,his.propertyName = propertyName;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,87,his.transformer = new NumberTransformer() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,90, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,92,ublic double transform(final Object o) throws MathException {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,93,ry {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,94,eturn (
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,95,Number) PropertyUtils.getProperty(
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,96,","
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,97,etPropertyName()))
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,98,doubleValue();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,99, catch (IllegalAccessException e) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,100,hrow new MathException(
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,101,"IllegalAccessException in Transformation: """
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,102," e.getMessage(),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,103,);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,104, catch (InvocationTargetException e) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,105,hrow new MathException(
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,106,"InvocationTargetException in Transformation: """
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,107," e.getMessage(),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,108,);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,109, catch (NoSuchMethodException e) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,110,hrow new MathException(
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,111,"oSuchMethodException in Transformation: """
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,112," e.getMessage(),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,113,);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,120,  Creates a {@link org.apache.commons.beanutils.DynaBean} with a
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,121,  {@link org.apache.commons.beanutils.DynaProperty} named
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,122,"  <code>propertyName,</code> sets the value of the property to <code>v</code>"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,123,  and adds the DynaBean to the underlying list.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,126,ublic void addValue(double v)  {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,127,ynaProperty[] props = new DynaProperty[] {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,128,"ew DynaProperty(propertyName, Double.class)"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,130,"asicDynaClass dynaClass = new BasicDynaClass(null, null, props);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,131,ynaBean dynaBean = null;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,132,ry {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,133,ynaBean = dynaClass.newInstance();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,134," catch (Exception ex) {              // InstantiationException, IllegalAccessException"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,135,hrow new RuntimeException(ex);   // should never happen
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,137,"ynaBean.set(propertyName, Double.valueOf(v));"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,138,ddObject(dynaBean);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,142, Adds a bean to this list.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,144, @param bean Bean to add to the list
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,146,ublic void addObject(Object bean) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,147,ist.add(bean);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,17,ackage org.apache.commons.math.stat.univariate;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,19,mport java.util.ArrayList;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,20,mport java.util.List;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,22,mport junit.framework.Test;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,23,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,24,mport junit.framework.TestSuite;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,26,mport org.apache.commons.math.TestUtils;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,27,mport org.apache.commons.math.stat.StatUtils;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,30, Test cases for the {@link BeanListUnivariateImpl} class.
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,32, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,35,ublic final class BeanListUnivariateImplTest extends TestCase {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,37,rivate double one = 1;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,38,rivate float two = 2;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,39,rivate int three = 3;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,40,rivate double mean = 2;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,41,rivate double sumSq = 18;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,42,rivate double sum = 8;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,43,rivate double var = 0.666666666666666666667;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,44,rivate double std = Math.sqrt(var);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,45,rivate double n = 4;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,46,rivate double min = 1;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,47,rivate double max = 3;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,48,rivate double skewness = 0;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,49,rivate double kurtosis = 0.5;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,50,rivate double tolerance = 10E-15;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,53,rivate List patientList = null;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,55,ublic BeanListUnivariateImplTest(String name) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,56,uper(name);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,59,ublic void setUp() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,60,atientList = new ArrayList();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,62,/ Create and add patient bean 1
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,63,"italStats vs1 = new VitalStats( Double.valueOf(120.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,64,ouble.valueOf(96.4) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,65,"atient p1 = new Patient( vs1, Integer.valueOf( 35 ) );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,66,atientList.add( p1 );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,68,/ Create and add patient bean 2
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,69,"italStats vs2 = new VitalStats( Double.valueOf(70.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,70,ouble.valueOf(97.4) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,71,"atient p2 = new Patient( vs2, Integer.valueOf( 23 ) );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,72,atientList.add( p2 );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,74,/ Create and add patient bean 3
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,75,"italStats vs3 = new VitalStats( Double.valueOf(90.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,76,ouble.valueOf(98.6) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,77,"atient p3 = new Patient( vs3, Integer.valueOf( 42 ) );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,78,atientList.add( p3 );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,81,ublic static Test suite() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,82,estSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,83,"uite.setName(""Frequency Tests"");"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,84,eturn suite;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,87,** test stats */
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,88,ublic void testStats() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,89,"escriptiveStatistics u = new BeanListUnivariateImpl( patientList, ""age"" );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,90,"ouble[] values = {35d, 23d, 42d};"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,91,"ssertEquals(""total count"",3,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,92,"ssertEquals(""mean"", StatUtils.mean(values), u.getMean(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,93,"ssertEquals(""min"", StatUtils.min(values), u.getMin(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,94,"ssertEquals(""max"", StatUtils.max(values), u.getMax(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,95,"ssertEquals(""var"", StatUtils.variance(values), u.getVariance(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,96,.clear();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,97,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,100,ublic void testPropStats() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,102,"escriptiveStatistics heartU = new BeanListUnivariateImpl( patientList,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,103,"vitalStats.heartRate"" );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,105,"ssertEquals( ""Mean heart rate unexpected"", 93.333,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,106,"eartU.getMean(), 0.001 );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,107,"ssertEquals( ""Max heart rate unexpected"", 120.0,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,108,"eartU.getMax(), 0.001 );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,110,"escriptiveStatistics ageU = new BeanListUnivariateImpl( patientList,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,111,"age"" );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,113,"ssertEquals( ""Mean age unexpected"", 33.333,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,114,"geU.getMean(), 0.001 );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,115,"ssertEquals( ""Max age unexpected"", 42.0,"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,116,"geU.getMax(), 0.001 );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,120,ublic void testSetPropertyName(){
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,121,eanListUnivariateImpl u = new BeanListUnivariateImpl(null);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,122,"tring expected = ""property"";"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,123,.setPropertyName(expected);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,124,"ssertEquals(expected, u.getPropertyName());"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,127,ublic void testAddValue() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,128,"escriptiveStatistics u = new BeanListUnivariateImpl( patientList, ""age"" );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,129,.addValue(10);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,130,"ouble[] values = {35d, 23d, 42d, 10d};"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,131,"ssertEquals(""total count"",4,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,132,"ssertEquals(""mean"", StatUtils.mean(values), u.getMean(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,133,"ssertEquals(""min"", StatUtils.min(values), u.getMin(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,134,"ssertEquals(""max"", StatUtils.max(values), u.getMax(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,135,"ssertEquals(""var"", StatUtils.variance(values), u.getVariance(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,136,.clear();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,137,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,140,** test stats */
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,141,ublic void testSerialization() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,143,"ouble[] values = {35d, 23d, 42d};"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,145,"escriptiveStatistics u = new BeanListUnivariateImpl( patientList, ""age"" );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,146,"ssertEquals(""total count"",3,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,147,"ssertEquals(""mean"", StatUtils.mean(values), u.getMean(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,148,"ssertEquals(""min"", StatUtils.min(values), u.getMin(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,149,"ssertEquals(""max"", StatUtils.max(values), u.getMax(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,150,"ssertEquals(""var"", StatUtils.variance(values), u.getVariance(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,153,escriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,154,"ssertEquals(""total count"",3,u2.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,155,"ssertEquals(""mean"", StatUtils.mean(values), u2.getMean(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,156,"ssertEquals(""min"", StatUtils.min(values), u2.getMin(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,157,"ssertEquals(""max"", StatUtils.max(values), u2.getMax(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,158,"ssertEquals(""var"", StatUtils.variance(values), u2.getVariance(), tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,160,.clear();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,161,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,163,2.clear();
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,164,"ssertEquals(""total count"",0,u2.getN(),tolerance);"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,168,ublic class VitalStats {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,170,rivate Double heartrate;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,171,rivate Double temperature;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,173,ublic VitalStats() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,176,"ublic VitalStats(Double heartrate, Double temperature) {"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,177,etHeartRate( heartrate );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,178,etTemperature( temperature );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,181,ublic Double getHeartRate() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,182,eturn heartrate;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,185,ublic void setHeartRate(Double heartrate) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,186,his.heartrate = heartrate;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,189,ublic Double getTemperature() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,190,eturn temperature;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,193,ublic void setTemperature(Double temperature) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,194,his.temperature = temperature;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,198,ublic class Patient {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,200,rivate VitalStats vitalStats;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,201,rivate Integer age;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,203,ublic Patient() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,206,"ublic Patient(VitalStats vitalStats, Integer age) {"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,207,etVitalStats( vitalStats );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,208,etAge( age );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,211,ublic VitalStats getVitalStats() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,212,eturn( vitalStats );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,215,ublic void setVitalStats(VitalStats vitalStats) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,216,his.vitalStats = vitalStats;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,219,ublic Integer getAge() {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,220,eturn age;
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,223,ublic void setAge(Integer age) {
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,224,his.age = age;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,17,ackage org.apache.commons.math.util;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,19,mport java.beans.Expression;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,20,mport java.lang.reflect.InvocationTargetException;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,21,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,24, Uses PropertyUtils to map a Bean getter to a double value.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,25, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,27,ublic class BeanTransformer implements NumberTransformer {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,30, The propertyName for this Transformer
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,32,rivate String propertyName = null;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,34,rivate String propertyGetter = null;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,37, Create a BeanTransformer
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,39,ublic BeanTransformer() {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,40,uper();
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,44, Create a BeanTransformer with a specific PropertyName.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,45, @param property The property.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,47,ublic BeanTransformer(final String property) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,48,uper();
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,49,etPropertyName(property);
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,53, Get the property String
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,54, @return the Property Name String
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,56,ublic String getPropertyName() {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,57,eturn propertyName;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,61, Set the propertyString
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,62, @param string The string to set the property to.
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,64,ublic void setPropertyName(final String string) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,65,his.propertyName = string;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,66,"his.propertyGetter = ""get"" + string.substring(0,1).toUpperCase() + string.substring(1);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,71, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,73,ublic double transform(final Object o) throws MathException {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,74,"xpression expr = new Expression(o, propertyGetter, new Object[0]);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,75,bject result;
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,76,ry {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,77,xpr.execute();
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,78,esult = expr.getValue();
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,79, catch (IllegalAccessException e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,80,"hrow new MathException(""IllegalAccessException in Transformation: "" + e.getMessage(), e);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,81, catch (InvocationTargetException e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,82,"hrow new MathException(""InvocationTargetException in Transformation: "" + e.getMessage(), e);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,83, catch (NoSuchMethodException e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,84,"hrow new MathException(""NoSuchMethodException in Transformation: "" + e.getMessage(), e);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,85, catch (ClassCastException e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,86,"hrow new MathException(""ClassCastException in Transformation: "" + e.getMessage(), e);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,87, catch (Exception e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,88,"hrow new MathException(""Exception in Transformation: "" + e.getMessage(), e);"
False,src/experimental/org/apache/commons/math/util/BeanTransformer.java,src/experimental/org/apache/commons/math/util/BeanTransformer.java,91,eturn ((Number) result).doubleValue();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,4, this work for additional information regarding copyright ownership.
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,7, the License.  You may obtain a copy of the License at
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,14, See the License for the specific language governing permissions and
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,15, limitations under the License.
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,18,ackage org.apache.commons.math.util;
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,20,mport org.apache.commons.math.MathException;
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,21,mport org.apache.commons.math.TestUtils;
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,23,mport junit.framework.TestCase;
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,26, @version $Revision$ $Date$
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,28,ublic class BeanTransformerTest extends TestCase {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,33,ublic void testConstructor(){
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,34,eanTransformer b = new BeanTransformer();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,35,ssertNull(b.getPropertyName());
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,41,ublic void testConstructorString(){
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,42,"tring name = ""property"";"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,43,eanTransformer b = new BeanTransformer(name);
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,44,"ssertEquals(name, b.getPropertyName());"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,50,ublic void testSetPropertyName(){
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,51,"tring name = ""property"";"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,52,eanTransformer b = new BeanTransformer();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,53,.setPropertyName(name);
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,54,"ssertEquals(name, b.getPropertyName());"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,60,ublic void testTransformNoSuchMethod(){
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,61,"eanTransformer b = new BeanTransformer(""z"");"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,62,estBean target = new TestBean();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,63,ry {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,64,.transform(target);
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,65,"ail(""Expecting MathException"");"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,66, catch (MathException e) {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,67,/ expected
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,74,ublic void testTransform() throws Exception {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,75,"eanTransformer b = new BeanTransformer(""x"");"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,76,estBean target = new TestBean();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,77,ouble value = Double.NaN;
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,78,alue = b.transform(target);
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,79,"estUtils.assertEquals(1.0, value, 1.0e-2);"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,84,ublic void testTransformInvalidType() throws Exception {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,85,"eanTransformer b = new BeanTransformer(""y"");"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,86,estBean target = new TestBean();
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,87,ry {
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,88,.transform(target);
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,89,"ail(""Expecting ClassCastException"");"
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,90, catch(ClassCastException ex){
False,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,src/experimental/org/apache/commons/math/util/BeanTransformerTest.java,91,/ success
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,18,ackage org.spaceroots.mantissa;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,20,mport java.text.MessageFormat;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,21,mport java.util.ResourceBundle;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,22,mport java.util.MissingResourceException;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,24,** This class is the base class for all specific exceptions thrown by
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,25, the mantissa classes.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,27, <p>When the mantissa classes throw exceptions that are specific to
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,28," the package, these exceptions are always subclasses of"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,29, MantissaException. When exceptions that are already covered by the
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,30," standard java API should be thrown, like"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,31," ArrayIndexOutOfBoundsException or IllegalArgumentException, these"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,32, standard exceptions are thrown rather than the mantissa specific
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,33, ones.</p>
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,35, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,36, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,40,ublic class MantissaException
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,41,xtends Exception {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,43,rivate static final long serialVersionUID = 1L;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,44,rivate static ResourceBundle resources
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,45," ResourceBundle.getBundle(""org.spaceroots.mantissa.MessagesResources"");"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,47,** Translate a string.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,48, @param s string to translate
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,49, @return translated string
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,51,ublic static String translate(String s) {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,52,ry {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,53,eturn resources.getString(s);
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,54, catch (MissingResourceException mre) {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,55,eturn s;
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,59,** Translate a message.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,60, @param specifier format specifier (to be translated)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,61, @param parts to insert in the format (no translation)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,62, @return translated message
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,64,"ublic static String translate(String specifier, String[] parts) {"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,65,eturn new MessageFormat(translate(specifier)).format(parts);
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,68,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,69, Build an exception with an empty message
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,71,ublic MantissaException() {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,72,uper();
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,75,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,76, Build an exception by translating the specified message
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,77, @param message message to translate
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,79,ublic MantissaException(String message) {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,80,uper(translate(message));
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,83,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,84, Build an exception by translating and formating a message
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,85, @param specifier format specifier (to be translated)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,86, @param parts to insert in the format (no translation)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,88,"ublic MantissaException(String specifier, String[] parts) {"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,89,"uper(translate(specifier, parts));"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,92,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,93, Build an exception from a cause
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,94, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,96,ublic MantissaException(Throwable cause) {
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,97,uper(cause);
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,100,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,101, Build an exception from a message and a cause
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,102, @param message message to translate
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,103, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,105,"ublic MantissaException(String message, Throwable cause) {"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,106,"uper(translate(message), cause);"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,109,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,110, Build an exception from a message and a cause
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,111, @param specifier format specifier (to be translated)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,112, @param parts to insert in the format (no translation)
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,113, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,115,"ublic MantissaException(String specifier, String[] parts, Throwable cause) {"
False,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,src/mantissa/src/org/spaceroots/mantissa/MantissaException.java,116,"uper(translate(specifier, parts), cause);"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,18,ackage org.spaceroots.mantissa;
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,20,mport java.util.ListResourceBundle;
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,22,** This class gather the message resources for the mantissa library.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,23, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,24, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,27,ublic class MessagesResources
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,28,xtends ListResourceBundle {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,32,ublic MessagesResources() {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,35,ublic Object[][] getContents() {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,36,eturn (Object[][]) contents.clone();
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,39,tatic final Object[][] contents = {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,41,/ org.spaceroots.mantissa.estimation.GaussNewtonEstimator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,42," ""unable to converge in {0} iterations"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,43,"unable to converge in {0} iterations"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,45,/ org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,46," ""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,47,"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,48," ""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,49,"parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,50," ""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,51,"orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,52," ""maximal number of evaluations exceeded ({0})"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,53,"maximal number of evaluations exceeded ({0})"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,55,/ org.spaceroots.mantissa.fitting.HarmonicCoefficientsGuesser
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,56," ""unable to guess a first estimate"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,57,"unable to guess a first estimate"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,59,/ org.spaceroots.mantissa.fitting.HarmonicFitter
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,60," ""sample must contain at least {0} points"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,61,"sample must contain at least {0} points"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,63,/ org.spaceroots.mantissa.functions.ExhaustedSampleException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,64," ""sample contains only {0} elements"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,65,"sample contains only {0} elements"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,67,/ org.spaceroots.mantissa.geometry.CardanEulerSingularityException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,68," ""Cardan angles singularity"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,69,"Cardan angles singularity"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,70," ""Euler angles singularity"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,71,"Euler angles singularity"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,73,/ org.spaceroots.mantissa.geometry.Rotation
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,74," ""a {0}x{1} matrix cannot be a rotation matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,75,"a {0}x{1} matrix cannot be a rotation matrix"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,76," ""the closest orthogonal matrix has a negative determinant {0}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,77,"the closest orthogonal matrix has a negative determinant {0}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,78," ""unable to orthogonalize matrix in {0} iterations"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,79,"unable to orthogonalize matrix in {0} iterations"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,81,/ org.spaceroots.mantissa.linalg;.SingularMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,82," ""singular matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,83,"singular matrix"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,85,/ org.spaceroots.mantissa.ode.AdaptiveStepsizeIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,86," ""minimal step size ({0}) reached, integration needs {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,87,"minimal step size ({0}) reached, integration needs {1}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,89,"/ org.spaceroots.mantissa.ode.GraggBulirschStoerIntegrator,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,90,"/ org.spaceroots.mantissa.ode.RungeKuttaFehlbergIntegrator,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,91,/ org.spaceroots.mantissa.ode.RungeKuttaIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,92," ""dimensions mismatch: ODE problem has dimension {0},"""
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,93," "" state vector has dimension {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,94,"dimensions mismatch: ODE problem has dimension {0},"""
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,95," "" state vector has dimension {1}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,96," ""too small integration interval: length = {0}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,97,"too small integration interval: length = {0}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,99,/ org.spaceroots.mantissa.optimization.DirectSearchOptimizer
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,100," ""none of the {0} start points lead to convergence"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,101,"none of the {0} start points lead to convergence""  },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,103,/ org.spaceroots.mantissa.random.CorrelatedRandomVectorGenerator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,104," ""dimension mismatch {0} != {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,105,"dimension mismatch {0} != {1}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,107,/ org.spaceroots.mantissa.random.NotPositiveDefiniteMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,108," ""not positive definite matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,109,"not positive definite matrix"" }"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,18,ackage org.spaceroots.mantissa;
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,20,mport java.util.ListResourceBundle;
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,22,** This class gather the message resources for the mantissa library.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,23, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,24, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,26,ublic class MessagesResources_fr
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,27,xtends ListResourceBundle {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,29,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,31,ublic MessagesResources_fr() {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,34,ublic Object[][] getContents() {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,35,eturn (Object[][]) contents.clone();
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,38,tatic final Object[][] contents = {
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,40,/ org.spaceroots.mantissa.estimation.GaussNewtonEstimator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,41," ""unable to converge in {0} iterations"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,42,"pas de convergence apr\u00e8s {0} it\u00e9rations"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,44,/ org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,45," ""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,46,"trop petite tol\u00e9rance relative sur le co\u00fbt ({0}), aucune r\u00e9duction de la somme des carr\u00e9s n''est possible"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,47," ""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,48,"trop petite tol\u00e9rance relative sur les param\u00e8tres ({0}), aucune am\u00e9lioration de la solution approximative n''est possible"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,49," ""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,50,"trop petite tol\u00e9rance sur l''orthogonalit\u00e9 ({0}), la solution est orthogonale \u00e0 la jacobienne"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,51," ""maximal number of evaluations exceeded ({0})"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,52,"nombre maximal d''\u00e9valuations d\u00e9pass\u00e9 ({0})"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,54,/ org.spaceroots.mantissa.fitting.HarmonicCoefficientsGuesser
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,55," ""unable to guess a first estimate"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,56,"impossible de trouver une premi\u00e8re estim\u00e9e"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,58,/ org.spaceroots.mantissa.fitting.HarmonicFitter
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,59," ""sample must contain at least {0} points"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,60,"l''\u00e9chantillon doit contenir au moins {0} points"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,62,/ org.spaceroots.mantissa.functions.ExhaustedSampleException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,63," ""sample contains only {0} elements"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,64,"l''\u00e9chantillon ne contient que {0} points"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,66,/ org.spaceroots.mantissa.geometry.CardanEulerSingularityException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,67," ""Cardan angles singularity"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,68,"singularit\u00e9 d''angles de Cardan"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,69," ""Euler angles singularity"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,70,"singularit\u00e9 d''angles d''Euler"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,72,/ org.spaceroots.mantissa.geometry.Rotation
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,73," ""a {0}x{1} matrix cannot be a rotation matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,74,"une matrice {0}x{1} ne peut pas \u00e9tre une matrice de rotation"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,75," ""the closest orthogonal matrix has a negative determinant {0}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,76,"la matrice orthogonale la plus proche a un d\u00e9terminant n\u00e9gatif {0}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,77," ""unable to orthogonalize matrix in {0} iterations"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,78,"impossible de rendre la matrice orthogonale en {0} it\u00e9rations"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,80,/ org.spaceroots.mantissa.linalg;.SingularMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,81," ""singular matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,82,"matrice singuli\u00e8re"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,84,/ org.spaceroots.mantissa.ode.AdaptiveStepsizeIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,85," ""minimal step size ({0}) reached, integration needs {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,86,"pas minimal ({0}) atteint, l''int\u00e9gration n\u00e9cessite {1}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,88,"/ org.spaceroots.mantissa.ode.GraggBulirschStoerIntegrator,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,89,"/ org.spaceroots.mantissa.ode.RungeKuttaFehlbergIntegrator,"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,90,/ org.spaceroots.mantissa.ode.RungeKuttaIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,91," ""dimensions mismatch: ODE problem has dimension {0},"""
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,92," "" state vector has dimension {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,93,"incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"""
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,94," "" et le vecteur d''\u00e9tat ({1})"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,95," ""too small integration interval: length = {0}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,96,"intervalle d''int\u00e9gration trop petit : {0}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,98,/ org.spaceroots.mantissa.optimization.DirectSearchOptimizer
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,99," ""none of the {0} start points lead to convergence"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,100,"aucun des {0} points de d\u00e9part n''aboutit \u00e0 une convergence""  },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,102,/ org.spaceroots.mantissa.random.CorrelatedRandomVectorGenerator
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,103," ""dimension mismatch {0} != {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,104,"dimensions incompatibles {0} != {1}"" },"
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,106,/ org.spaceroots.mantissa.random.NotPositiveDefiniteMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,107," ""not positive definite matrix"","
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,108,"matrice non d\u00e9finie positive"" }"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,21,mport java.math.BigInteger;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,22,mport java.util.Arrays;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,24,** This class implements polynomials with one unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,26, <p>This is an abstract class that only declares general methods but
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,27, does not hold the coefficients by themselves. Specific subclasses
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,28, are used to handle exact rational coefficients or approximate real
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,29, coefficients. This design is taken from the various java.awt.geom
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,30," classes (Point2D, Rectangle2D ...)</p>"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,32, <p>The methods implemented deal mainly with the polynomials algebra
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,33," (addition, multiplication ...) but the analysis aspects are also"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,34," considered (value of the polynom for a given unknown,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,35, derivative).</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,37, <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,39, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,40, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,43,ublic abstract class Polynomial implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,45,** Check if the instance is the null polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,46, @return true if the polynomial is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,48,ublic abstract boolean isZero();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,50,** Check if the instance is the constant unit polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,51, @return true if the polynomial is the constant unit polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,53,ublic abstract boolean isOne();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,55,** Check if the instance is the identity polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,56, @return true if the polynomial is the identity polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,58,ublic abstract boolean isIdentity();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,60,** Get the polynomial degree.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,61, @return degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,63,ublic abstract int getDegree();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,65,** Negate the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,66, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,68,ublic abstract Polynomial negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,70,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,71, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,72, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,74,ublic abstract Polynomial multiply(RationalNumber r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,76,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,77, @param l constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,78, @return a new Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,80,ublic abstract Polynomial multiply(long l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,82,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,83, @param i constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,84, @return a new Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,86,ublic Polynomial multiply(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,87,eturn multiply(new RationalNumber(i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,90,** Divide the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,91, @param l constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,92, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,93, @exception ArithmeticException if the constant is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,95,ublic Polynomial divide(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,96,eturn divide(new RationalNumber(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,99,** Divide the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,100, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,101, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,102, @exception ArithmeticException if the constant is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,104,ublic Polynomial divide(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,105,eturn multiply(r.invert());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,108,** Divide the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,109, @param i constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,110, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,111, @exception ArithmeticException if the constant is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,113,ublic Polynomial divide(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,114,eturn divide(new RationalNumber(i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,117,** Get the value of the polynomial for a specified unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,118, @param x value of the unknown
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,119, @return value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,121,ublic abstract double valueAt(double x);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,123,** Get the derivative of the instance with respect to the unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,124, The derivative of a n degree polynomial is a n-1 degree polynomial of
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,125, the same type.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,126, @return a new polynomial which is the derivative of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,128,ublic abstract Polynomial getDerivative();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,130,** This class implements polynomials with one unknown and rational
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,131, coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,133," <p>In addition to classical algebra operations, euclidian"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,134, division and remainder are handled.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,137,ublic static class Rational extends Polynomial {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,139,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,140, Build a null polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,142,ublic Rational() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,143, = new RationalNumber[] { RationalNumber.ZERO };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,146,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,147, Build a constant polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,148, @param value constant value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,150,ublic Rational(long value) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,151,his(new RationalNumber(value));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,154,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,155, Build a constant polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,156, @param value constant value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,158,ublic Rational(RationalNumber value) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,159, = new RationalNumber[] { value };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,162,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,163, Build a first degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,164, @param a1 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,165, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,167,"ublic Rational(long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,168,"his(new RationalNumber(a1), new RationalNumber(a0));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,171,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,172, Build a first degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,173, @param a1 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,174, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,176,"ublic Rational(RationalNumber a1, RationalNumber a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,177,f (! a1.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,178," = new RationalNumber[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,179, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,180, = new RationalNumber[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,184,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,185, Build a second degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,186, @param a2 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,187, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,188, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,190,"ublic Rational(long a2, long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,191,"his(new RationalNumber(a2),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,192,"ew RationalNumber(a1),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,193,ew RationalNumber(a0));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,196,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,197, Build a second degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,198, @param a2 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,199, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,200, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,202,"ublic Rational(RationalNumber a2, RationalNumber a1, RationalNumber a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,203,f (! a2.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,204," = new RationalNumber[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,205, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,206,f (! a1.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,207," = new RationalNumber[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,208, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,209, = new RationalNumber[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,214,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,215, Build a third degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,216, @param a3 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,217, @param a2 second degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,218, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,219, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,221,"ublic Rational(long a3, long a2, long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,222,"his(new RationalNumber(a3),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,223,"ew RationalNumber(a2),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,224,"ew RationalNumber(a1),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,225,ew RationalNumber(a0));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,228,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,229, Build a third degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,230, @param a3 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,231, @param a2 second degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,232, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,233, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,235,"ublic Rational(RationalNumber a3, RationalNumber a2,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,236,"ationalNumber a1, RationalNumber a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,237,f (! a3.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,238," = new RationalNumber[] { a0, a1, a2, a3 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,239, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,240,f (! a2.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,241," = new RationalNumber[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,242, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,243,f (! a1.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,244," = new RationalNumber[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,245, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,246, = new RationalNumber[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,252,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,253, Build a polynomial from its coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,254," @param a coefficients array, the a[0] array element is the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,255, constant term while the a[a.length-1] element is the leeding
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,256," degree coefficient. The array is copied in a new array, so it"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,257, can be changed once the constructor as returned.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,259,ublic Rational(RationalNumber[] a) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,261,/ remove null high degree coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,262,nt i = a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,263,hile ((i > 0) && (a[i].isZero())) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,264,-i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,267,/ copy the remaining coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,268,his.a = new RationalNumber[i + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,269,"ystem.arraycopy(a, 0, this.a, 0, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,273,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,274, Build a one term polynomial from one coefficient and the corresponding degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,275, @param c coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,276, @param degree degree associated with the coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,278,"ublic Rational(RationalNumber c, int degree) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,280,f (c.isZero() || degree < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,281, = new RationalNumber[] { RationalNumber.ZERO };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,282, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,283, = new RationalNumber[degree + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,284,"rrays.fill(a, 0, degree, RationalNumber.ZERO);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,285,[degree] = c;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,290,** Check if the instance is the null polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,291, @return true if the polynomial is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,293,ublic boolean isZero() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,294,eturn (a.length == 1) && a[0].isZero();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,297,** Check if the instance is the constant unit polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,298, @return true if the polynomial is the constant unit polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,300,ublic boolean isOne() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,301,eturn (a.length == 1) && a[0].isOne();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,304,** Check if the instance is the identity polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,305, @return true if the polynomial is the identity polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,307,ublic boolean isIdentity() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,308,eturn (a.length == 2) && a[0].isZero() && a[1].isOne();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,311,** Get the polynomial degree.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,312, @return degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,314,ublic int getDegree() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,315,eturn a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,318,** Get the coefficients of the polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,319," @return a copy of the coefficients array, the array"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,320, element at index 0 is the constant term while the element at
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,321, index a.length-1 is the leading degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,323,ublic RationalNumber[] getCoefficients() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,324,eturn (RationalNumber[]) a.clone();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,327,** Add a polynomial to the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,328, @param p polynomial to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,329, @return a new polynomial which is the sum of the instance and p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,331,ublic Rational add(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,333,/ identify the lowest degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,334,"nt lowLength  = Math.min(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,335,"nt highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,337,/ build the coefficients array
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,338,ationalNumber[] newA = new RationalNumber[highLength];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,339,or (int i = 0; i < lowLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,340,ewA[i] = a[i].add(p.a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,342,"ystem.arraycopy((a.length < p.a.length) ? p.a : a,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,343,"owLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,345,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,349,** Subtract a polynomial from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,350, @param p polynomial to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,351, @return a new polynomial which is the difference the instance minus p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,353,ublic Rational subtract(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,355,/ identify the lowest degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,356,"nt lowLength  = Math.min(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,357,"nt highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,359,/ build the coefficients array
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,360,ationalNumber[] newA = new RationalNumber[highLength];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,361,or (int i = 0; i < lowLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,362,ewA[i] = a[i].subtract(p.a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,364,f (a.length < p.a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,365,or (int i = lowLength; i < highLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,366,ewA[i] = p.a[i].negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,368, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,369,"ystem.arraycopy(a, lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,372,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,376,** Negate the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,377, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,379,ublic Polynomial negate() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,380,ationalNumber[] newA = new RationalNumber[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,381,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,382,ewA[i] = a[i].negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,384,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,387,** Multiply the instance by a polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,388, @param p polynomial to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,389, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,391,ublic Rational multiply(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,393,ationalNumber[] newA = new RationalNumber[a.length + p.a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,395,or (int i = 0; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,396,ewA[i] = RationalNumber.ZERO;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,397,"or (int j = Math.max(0, i + 1 - p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,398," < Math.min(a.length, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,399,+j) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,400,ewA[i] = newA[i].add(a[j].multiply(p.a[i-j]));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,404,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,408,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,409, @param l constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,410, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,412,ublic Polynomial multiply(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,413,eturn multiply(new RationalNumber(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,416,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,417, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,418, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,420,ublic Polynomial multiply(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,422,f (r.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,423,eturn new Rational(new RationalNumber[] { RationalNumber.ZERO });
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,426,f (r.isOne()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,427,eturn this;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,430,ationalNumber[] newA = new RationalNumber[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,431,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,432,ewA[i] = a[i].multiply(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,434,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,438,** Get the value of the polynomial for a specified unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,439, @param x value of the unknown
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,440, @return value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,442,ublic double valueAt(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,443,ouble y = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,444,or (int i = a.length - 1; i >= 0; --i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,445, = y * x + a[i].doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,447,eturn y;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,450,** Get the derivative of the instance with respect to the unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,451, The derivative of a n degree polynomial is a n-1 degree polynomial of
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,452, the same type.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,453, @return a new polynomial which is the derivative of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,455,ublic Polynomial getDerivative() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,456,f (a.length == 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,457,eturn new Rational();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,459,ationalNumber[] newA = new RationalNumber[a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,460,or (int i = 1; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,461,ewA[i - 1] = a[i].multiply(i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,463,eturn new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,466,** Perform the euclidian division of two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,467, @param dividend numerator polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,468, @param divisor  denominator polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,469, @return an object containing the quotient and the remainder of the division
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,471,"ublic static DivisionResult euclidianDivision(Rational dividend,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,472,ational divisor) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,474,ational quotient  = new Rational(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,475,ational remainder = dividend;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,477,nt divisorDegree   = divisor.getDegree();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,478,nt remainderDegree = remainder.getDegree();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,479,hile ((! remainder.isZero()) && (remainderDegree >= divisorDegree)) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,481,ationalNumber c =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,482,emainder.a[remainderDegree].divide(divisor.a[divisorDegree]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,483,"ational monomial = new Rational(c, remainderDegree - divisorDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,485,emainder = remainder.subtract(monomial.multiply(divisor));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,486,uotient  = quotient.add(monomial);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,488,emainderDegree = remainder.getDegree();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,492,"eturn new DivisionResult(quotient, remainder);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,496,** Get the Least Common Multiple of the coefficients denominators.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,497, This number is the smallest integer by which we should multiply
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,498, the instance to get a polynomial whose coefficients are all integers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,499, @return the Least Common Multiple of the coefficients denominators
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,501,ublic BigInteger getDenominatorsLCM() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,503,igInteger lcm = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,505,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,506,ationalNumber newCoeff = a[i].multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,507,f (! newCoeff.isInteger()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,508,cm = lcm.multiply(newCoeff.getDenominator());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,512,eturn lcm;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,516,** Returns a string representation of the polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,518, <p>The representation is user oriented. Terms are displayed lowest
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,519," degrees first. The multiplications signs, coefficients equals to"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,520," one and null terms are not displayed (except if the polynomial is 0,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,521, in which case the 0 constant term is displayed). Addition of terms
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,522, with negative coefficients are replaced by subtraction of terms
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,523, with positive coefficients except for the first displayed term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,524," (i.e. we display <code>-3</code> for a constant negative polynomial,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,525, but <code>1 - 3 x + x^2</code> if the negative coefficient is not
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,526, the first one displayed).</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,528, @return a string representation of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,531,ublic String toString() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,533,tringBuffer s = new StringBuffer();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,534,f (a[0].isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,535,f (a.length == 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,536,"eturn ""0"";"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,538, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,539,.append(a[0].toString());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,542,or (int i = 1; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,544,f (! a[i].isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,546,f (s.length() > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,547,f (a[i].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,548,".append("" - "");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,549, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,550,".append("" + "");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,552, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,553,f (a[i].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,554,".append(""-"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,558,ationalNumber absAi = RationalNumber.abs(a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,559,f (! absAi.isOne()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,560,.append(absAi.toString());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,561,.append(' ');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,564,".append(""x"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,565,f (i > 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,566,.append('^');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,567,.append(Integer.toString(i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,573,eturn s.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,577,** Coefficients array. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,578,rotected RationalNumber[] a;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,580,rivate static final long serialVersionUID = -794133890636181115L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,584,** This class stores the result of the euclidian division of two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,585," This class is a simple placeholder, it does not provide any"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,586, processing method
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,587, @see Polynomial.Rational#euclidianDivision
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,589,ublic static class DivisionResult {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,591,** The quotient of the division. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,592,ublic final Rational quotient;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,594,** The remainder of the division. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,595,ublic final Rational remainder;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,597,** Simple constructor. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,598,"ublic DivisionResult(Rational quotient, Rational remainder) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,599,his.quotient  = quotient;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,600,his.remainder = remainder;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,605,** This class implements polynomials with one unknown and real
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,606, coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,608,ublic static class Double extends Polynomial {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,610,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,611, Build a null polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,613,ublic Double() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,614, = new double[] { 0.0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,617,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,618, Build a constant polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,619, @param value constant value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,621,ublic Double(long value) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,622,his((double) value);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,625,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,626, Build a constant polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,627, @param value constant value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,629,ublic Double(double value) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,630, = new double[] { value };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,633,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,634, Build a first degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,635, @param a1 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,636, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,638,"ublic Double(long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,639,"his((double) a1, (double) a0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,642,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,643, Build a first degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,644, @param a1 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,645, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,647,"ublic Double(double a1, double a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,648,f (a1 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,649," = new double[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,650, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,651, = new double[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,655,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,656, Build a second degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,657, @param a2 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,658, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,659, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,661,"ublic Double(long a2, long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,662,"his((double) a2, (double) a1, (double) a0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,665,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,666, Build a second degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,667, @param a2 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,668, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,669, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,671,"ublic Double(double a2, double a1, double a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,672,f (a2 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,673," = new double[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,674, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,675,f (a1 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,676," = new double[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,677, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,678, = new double[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,683,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,684, Build a third degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,685, @param a3 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,686, @param a2 second degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,687, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,688, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,690,"ublic Double(long a3, long a2, long a1, long a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,691,"his((double) a3, (double) a2, (double) a1, (double) a0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,694,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,695, Build a third degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,696, @param a3 leeding degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,697, @param a2 second degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,698, @param a1 first degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,699, @param a0 constant term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,701,"ublic Double(double a3, double a2, double a1, double a0) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,702,f (a3 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,703," = new double[] { a0, a1, a2, a3 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,704, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,705,f (a2 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,706," = new double[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,707, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,708,f (a1 != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,709," = new double[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,710, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,711, = new double[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,717,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,718, Build a polynomial from its coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,719," @param a coefficients array, the a[0] array element is the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,720, constant term while the a[a.length-1] element is the leeding
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,721," degree coefficient. The array is copied in a new array, so it"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,722, can be changed once the constructor as returned.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,724,ublic Double(double[] a) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,726,/ remove null high degree coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,727,nt i = a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,728,hile ((i > 0) && (a[i] == 0)) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,729,-i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,732,/ copy the remaining coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,733,his.a = new double[i + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,734,"ystem.arraycopy(a, 0, this.a, 0, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,738,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,739, Build a one term polynomial from one coefficient and the corresponding degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,740, @param c coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,741, @param degree degree associated with the coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,743,"ublic Double(double c, int degree) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,744,f ((c == 0) || degree < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,745, = new double[] { 0.0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,746, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,747, = new double[degree + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,748,"rrays.fill(a, 0, degree, 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,749,[degree] = c;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,753,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,754, Build a {@link Polynomial.Double Polynomial.Double} from a
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,755, {@link Polynomial.Rational Polynomial.Rational}
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,756, @param r a rational polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,758,ublic Double(Rational r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,759,/ convert the coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,760, = new double[r.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,761,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,762,[i] = r.a[i].doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,766,** Check if the instance is the null polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,767, @return true if the polynomial is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,769,ublic boolean isZero() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,770,eturn (a.length == 1) && (a[0] == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,773,** Check if the instance is the constant unit polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,774, @return true if the polynomial is the constant unit polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,776,ublic boolean isOne() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,777,eturn (a.length == 1) && ((a[0] - 1.0) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,780,** Check if the instance is the identity polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,781, @return true if the polynomial is the identity polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,783,ublic boolean isIdentity() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,784,eturn (a.length == 2) && (a[0] == 0) && ((a[1] - 1.0) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,787,** Get the polynomial degree.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,788, @return degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,790,ublic int getDegree() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,791,eturn a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,794,** Get the coefficients of the polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,795," @return a copy of the coefficients array, the array"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,796, element at index 0 is the constant term while the element at
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,797, index a.length-1 is the leading degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,799,ublic double[] getCoefficients() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,800,eturn (double[]) a.clone();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,803,** Add a polynomial to the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,804, @param p polynomial to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,805, @return a new polynomial which is the sum of the instance and p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,807,ublic Double add(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,809,/ identify the lowest degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,810,"nt lowLength  = Math.min(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,811,"nt highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,813,/ build the coefficients array
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,814,ouble[] newA = new double[highLength];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,815,or (int i = 0; i < lowLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,816,ewA[i] = a[i] + p.a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,818,"ystem.arraycopy((a.length < p.a.length) ? p.a : a,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,819,"owLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,821,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,825,** Subtract a polynomial from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,826, @param p polynomial to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,827, @return a new polynomial which is the difference the instance minus p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,829,ublic Double subtract(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,831,/ identify the lowest degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,832,"nt lowLength  = Math.min(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,833,"nt highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,835,/ build the coefficients array
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,836,ouble[] newA = new double[highLength];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,837,or (int i = 0; i < lowLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,838,ewA[i] = a[i] - p.a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,840,f (a.length < p.a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,841,or (int i = lowLength; i < highLength; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,842,ewA[i] = -p.a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,844, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,845,"ystem.arraycopy(a, lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,848,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,852,** Negate the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,853, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,855,ublic Polynomial negate() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,856,ouble[] newA = new double[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,857,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,858,ewA[i] = -a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,860,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,863,** Multiply the instance by a polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,864, @param p polynomial to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,865, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,867,ublic Double multiply(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,869,ouble[] newA = new double[a.length + p.a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,871,or (int i = 0; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,872,ewA[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,873,"or (int j = Math.max(0, i + 1 - p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,874," < Math.min(a.length, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,875,+j) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,876,ewA[i] += a[j] * p.a[i-j];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,880,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,884,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,885, @param l constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,886, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,888,ublic Polynomial multiply(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,889,eturn multiply((double) l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,892,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,893, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,894, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,896,ublic Polynomial multiply(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,897,eturn multiply(r.doubleValue());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,900,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,901, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,902, @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,904,ublic Polynomial multiply(double r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,906,f (r == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,907,eturn Double.valueOf(new double[] { 0.0 });
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,910,ouble[] newA = new double[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,911,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,912,ewA[i] = a[i] * r;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,914,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,918,** Get the value of the polynomial for a specified unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,919, @param x value of the unknown
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,920, @return value of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,922,ublic double valueAt(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,923,ouble y = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,924,or (int i = a.length - 1; i >= 0; --i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,925, = y * x + a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,927,eturn y;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,930,** Get the derivative of the instance with respect to the unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,931, The derivative of a n degree polynomial is a n-1 degree polynomial of
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,932, the same type.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,933, @return a new polynomial which is the derivative of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,935,ublic Polynomial getDerivative() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,936,f (a.length == 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,937,eturn Double.valueOf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,939,ouble[] newA = new double[a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,940,or (int i = 1; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,941,ewA[i - 1] = a[i] * i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,943,eturn Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,946,** Returns a string representation of the polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,948, <p>The representation is user oriented. Terms are displayed lowest
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,949," degrees first. The multiplications signs, coefficients equals to"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,950," one and null terms are not displayed (except if the polynomial is 0,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,951, in which case the 0 constant term is displayed). Addition of terms
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,952, with negative coefficients are replaced by subtraction of terms
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,953, with positive coefficients except for the first displayed term
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,954," (i.e. we display <code>-3</code> for a constant negative polynomial,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,955, but <code>1 - 3 x + x^2</code> if the negative coefficient is not
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,956, the first one displayed).</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,958, @return a string representation of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,961,ublic String toString() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,963,tringBuffer s = new StringBuffer();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,964,f (a[0] == 0.0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,965,f (a.length == 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,966,"eturn ""0"";"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,968, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,969,.append(java.lang.Double.toString(a[0]));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,972,or (int i = 1; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,974,f (a[i] != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,976,f (s.length() > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,977,f (a[i] < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,978,".append("" - "");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,979, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,980,".append("" + "");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,982, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,983,f (a[i] < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,984,".append(""-"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,988,ouble absAi = Math.abs(a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,989,f ((absAi - 1) != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,990,.append(java.lang.Double.toString(absAi));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,991,.append(' ');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,994,".append(""x"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,995,f (i > 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,996,.append('^');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,997,.append(Integer.toString(i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1003,eturn s.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1007,** Coefficients array. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1008,rotected double[] a;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1010,rivate static final long serialVersionUID = -4210522025715687648L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,21,mport java.math.BigInteger;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,24, This class implements fractions of polynomials with one unknown and
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,25, rational coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,26, <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,33,ublic class PolynomialFraction implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,36, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,37, Build a constant null fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,39,ublic PolynomialFraction() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,40,"his(new Polynomial.Rational(RationalNumber.ZERO),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,41,ew Polynomial.Rational(RationalNumber.ONE));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,45, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,46, Build a fraction from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,47, @param numerator numerator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,48, @param denominator denominator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,49, @exception ArithmeticException if the denominator is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,51,"ublic PolynomialFraction(long numerator, long denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,52,"his(new Polynomial.Rational(numerator),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,53,ew Polynomial.Rational(denominator));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,57, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,58, Build a fraction from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,59, @param numerator numerator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,60, @param denominator denominator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,61, @exception ArithmeticException if the denominator is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,63,"ublic PolynomialFraction(BigInteger numerator, BigInteger denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,64,"his(new Polynomial.Rational(new RationalNumber(numerator)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,65,ew Polynomial.Rational(new RationalNumber(denominator)));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,69, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,70, Build a fraction from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,71, @param numerator numerator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,72, @param denominator denominator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,73, @exception ArithmeticException if the denominator is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,75,"ublic PolynomialFraction(RationalNumber numerator,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,76,ationalNumber denominator) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,77,"his(new Polynomial.Rational(numerator),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,78,ew Polynomial.Rational(denominator));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,82, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,83, Build a fraction from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,84, @param numerator numerator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,85, @param denominator denominator of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,86, @exception ArithmeticException if the denominator is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,88,"ublic PolynomialFraction(Polynomial.Rational numerator,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,89,olynomial.Rational denominator) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,91,f (denominator.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,92,"hrow new ArithmeticException(""null denominator"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,95, = numerator;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,96, = denominator;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,98,ationalNumber[] a = q.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,99,f (a[a.length - 1].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,100, = (Polynomial.Rational) p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,101, = (Polynomial.Rational) q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,104,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,108,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,109, Build a fraction from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,110, @param l value of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,112,ublic PolynomialFraction(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,113,"his(l, 1l);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,117, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,118, Build a fraction from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,119, @param i value of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,121,ublic PolynomialFraction(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,122,"his(i, BigInteger.ONE);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,125,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,126, Build a fraction from a single rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,127, @param r value of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,129,ublic PolynomialFraction(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,130,"his(r.getNumerator(), r.getDenominator());"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,133,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,134, Build a fraction from a single Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,135, @param p value of the fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,137,ublic PolynomialFraction(Polynomial.Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,138,"his(p, new Polynomial.Rational(1l));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,141,** Negate the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,142, @return a new polynomial fraction opposite to the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,144,ublic PolynomialFraction negate() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,145,"eturn new PolynomialFraction((Polynomial.Rational) p.negate(), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,148,** Add a polynomial fraction to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,149, @param f polynomial fraction to add.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,150, @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,152,ublic PolynomialFraction add(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,153,"eturn new PolynomialFraction(p.multiply(f.q).add(f.p.multiply(q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,154,.multiply(f.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,157,** Subtract a fraction from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,158, @param f polynomial fraction to subtract.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,159, @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,161,ublic PolynomialFraction subtract(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,162,"eturn new PolynomialFraction(p.multiply(f.q).subtract(f.p.multiply(q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,163,.multiply(f.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,166,** Multiply the instance by a polynomial fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,167, @param f polynomial fraction to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,168, @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,170,ublic PolynomialFraction multiply(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,171,olynomialFraction product =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,172,"ew PolynomialFraction(p.multiply(f.p), q.multiply(f.q));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,173,roduct.simplify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,174,eturn product;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,177,** Divide the instance by a polynomial fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,178, @param f polynomial fraction to divide by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,179, @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,180, @exception ArithmeticException if f is null
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,182,ublic PolynomialFraction divide(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,184,f (f.p.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,185,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,188,olynomial.Rational newP = p.multiply(f.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,189,olynomial.Rational newQ = q.multiply(f.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,191,ationalNumber[] a = newQ.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,192,f (a[a.length - 1].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,193,ewP = (Polynomial.Rational) newP.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,194,ewQ = (Polynomial.Rational) newQ.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,197,"olynomialFraction result = new PolynomialFraction(newP, newQ);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,198,esult.simplify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,199,eturn result;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,203,** Invert the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,204, @return the inverse of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,205, @exception ArithmeticException if the instance is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,207,ublic PolynomialFraction invert() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,209,f (p.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,210,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,213,ationalNumber[] a = p.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,214,olynomialFraction inverse =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,215,a[a.length - 1].isNegative())
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,216," new PolynomialFraction((Polynomial.Rational) q.negate(),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,217,Polynomial.Rational) p.negate())
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,218," new PolynomialFraction(q, p);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,219,nverse.simplify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,220,eturn inverse;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,224,** Simplify a fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,225," If the denominator polynom is a constant polynom, then"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,226, simplification involves merging this constant in the rational
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,227, coefficients of the numerator in order to replace the denominator
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,228," by the constant 1. If the degree of the denominator is non null,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,229, then simplification involves both removing common polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,230, factors (by euclidian division) and replacing rational
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,231, coefficients by integer coefficients (multiplying both numerator
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,232, and denominator by the proper value). The signs of both the
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,233, numerator and the denominator are adjusted in order to have a
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,234, positive leeding degree term in the denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,236,rivate void simplify() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,238,olynomial.Rational a = p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,239,olynomial.Rational b = q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,240,f (a.getDegree() < b.getDegree()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,241,olynomial.Rational tmp = a;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,242, = b;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,243, = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,246,olynomial.DivisionResult res =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,247,"olynomial.Rational.euclidianDivision(a, b);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,248,hile (res.remainder.getDegree() != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,249, = b;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,250, = res.remainder;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,251,"es = Polynomial.Rational.euclidianDivision(a, b);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,254,f (res.remainder.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,255,/ there is a common factor we can remove
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,256," = Polynomial.Rational.euclidianDivision(p, b).quotient;"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,257," = Polynomial.Rational.euclidianDivision(q, b).quotient;"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,260,f (q.getDegree() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,261,f (! q.isOne()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,262, = (Polynomial.Rational) p.divide(q.getCoefficients()[0]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,263, = new Polynomial.Rational(1l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,265, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,267,igInteger lcm = p.getDenominatorsLCM();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,268,f (lcm.compareTo(BigInteger.ONE) != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,269, = (Polynomial.Rational) p.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,270, = (Polynomial.Rational) q.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,273,cm = q.getDenominatorsLCM();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,274,f (lcm.compareTo(BigInteger.ONE) != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,275, = (Polynomial.Rational) p.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,276, = (Polynomial.Rational) q.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,281,f (q.getCoefficients()[q.getDegree()].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,282, = (Polynomial.Rational) p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,283, = (Polynomial.Rational) q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,289, Get the numerator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,290, @return the numerator
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,292,ublic Polynomial.Rational getNumerator() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,293,eturn p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,297, Get the denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,298, @return the denominator (leeding coefficient is always positive)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,300,ublic Polynomial.Rational getDenominator() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,301,eturn q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,304,ublic String toString() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,305,f (p.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,306,"eturn ""0"";"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,307, else if (q.isOne()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,308,eturn p.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,309, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,311,tringBuffer s = new StringBuffer();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,313,tring pString = p.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,314,f (pString.indexOf(' ') > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,315,.append('(');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,316,.append(pString);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,317,.append(')');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,318, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,319,.append(pString);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,322,.append('/');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,324,tring qString = q.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,325,f (qString.indexOf(' ') > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,326,.append('(');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,327,.append(qString);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,328,.append(')');
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,329, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,330,.append(qString);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,333,eturn s.toString();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,338,** Numerator. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,339,rivate Polynomial.Rational p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,341,** Denominator. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,342,rivate Polynomial.Rational q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,344,rivate static final long serialVersionUID = 6033909492898954748L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,21,mport java.math.BigInteger;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,24, This class implements reduced rational numbers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,25, <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,27, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,28, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,32,ublic class RationalNumber implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,34,** Zero as a rational numer. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,35,ublic static final RationalNumber ZERO = new RationalNumber(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,37,** One as a rational numer. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,38,ublic static final RationalNumber ONE  = new RationalNumber(1l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,41, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,42, Build a null rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,44,ublic RationalNumber() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,45, = BigInteger.ZERO;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,46, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,49,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,50, Build a rational number from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,51, @param numerator numerator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,52, @param denominator denominator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,53, @exception ArithmeticException if the denominator is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,55,"ublic RationalNumber(long numerator, long denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,57,f (denominator == 0l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,58,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,61, = BigInteger.valueOf(numerator);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,62, = BigInteger.valueOf(denominator);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,64,f (q.signum() < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,65, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,66, = q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,69,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,73,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,74, Build a rational number from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,75, @param numerator numerator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,76, @param denominator denominator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,77, @exception ArithmeticException if the denominator is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,79,"ublic RationalNumber(BigInteger numerator, BigInteger denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,81,f (denominator.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,82,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,85, = numerator;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,86, = denominator;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,88,f (q.signum() < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,89, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,90, = q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,93,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,97,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,98, Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,99, @param l value of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,101,ublic RationalNumber(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,102, = BigInteger.valueOf(l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,103, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,106,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,107, Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,108, @param i value of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,110,ublic RationalNumber(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,111, = i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,112, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,115,** Negate the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,116," @return a new rational number, opposite to the isntance"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,118,ublic RationalNumber negate() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,119,"eturn new RationalNumber(p.negate(), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,122,** Add an integer to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,123, @param l integer to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,124, @return a new rational number which is the sum of the instance and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,126,ublic RationalNumber add(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,127,eturn add(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,130,** Add an integer to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,131, @param l integer to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,132, @return a new rational number which is the sum of the instance and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,134,ublic RationalNumber add(BigInteger l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,135,"eturn new RationalNumber(p.add(q.multiply(l)), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,138,** Add a rational number to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,139, @param r rational number to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,140, @return a new rational number which is the sum of the instance and r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,142,ublic RationalNumber add(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,143,"eturn new RationalNumber(p.multiply(r.q).add(r.p.multiply(q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,144,.multiply(r.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,147,** Subtract an integer from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,148, @param l integer to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,149, @return a new rational number which is the difference the instance minus l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,151,ublic RationalNumber subtract(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,152,eturn subtract(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,155,** Subtract an integer from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,156, @param l integer to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,157, @return a new rational number which is the difference the instance minus l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,159,ublic RationalNumber subtract(BigInteger l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,160,"eturn new RationalNumber(p.subtract(q.multiply(l)), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,163,** Subtract a rational number from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,164, @param r rational number to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,165, @return a new rational number which is the difference the instance minus r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,167,ublic RationalNumber subtract(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,168,"eturn new RationalNumber(p.multiply(r.q).subtract(r.p.multiply(q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,169,.multiply(r.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,172,** Multiply the instance by an integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,173, @param l integer to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,174, @return a new rational number which is the produc of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,176,ublic RationalNumber multiply(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,177,eturn multiply(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,180,** Multiply the instance by an integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,181, @param l integer to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,182, @return a new rational number which is the produc of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,184,ublic RationalNumber multiply(BigInteger l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,185,"eturn new RationalNumber(p.multiply(l), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,188,** Multiply the instance by a rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,189, @param r rational number to multiply the instance with
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,190, @return a new rational number which is the product of the instance and r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,192,ublic RationalNumber multiply(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,193,"eturn new RationalNumber(p.multiply(r.p), q.multiply(r.q));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,196,** Divide the instance by an integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,197, @param l integer to divide by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,198, @return a new rational number which is the quotient of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,199, @exception ArithmeticException if l is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,201,ublic RationalNumber divide(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,202,eturn divide(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,205,** Divide the instance by an integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,206, @param l integer to divide by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,207, @return a new rational number which is the quotient of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,208, @exception ArithmeticException if l is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,210,ublic RationalNumber divide(BigInteger l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,212,f (l.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,213,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,216,f (l.signum() > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,217,"eturn new RationalNumber(p, q.multiply(l));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,220,"eturn new RationalNumber(p.negate(), q.multiply(l.negate()));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,224,** Divide the instance by a rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,225, @param r rational number to divide by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,226, @return a new rational number which is the quotient of the instance by r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,227, @exception ArithmeticException if r is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,229,ublic RationalNumber divide(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,231,f (r.p.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,232,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,235,igInteger newP = p.multiply(r.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,236,igInteger newQ = q.multiply(r.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,238,"eturn (newQ.signum() < 0) ? new RationalNumber(newP.negate(),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,239,ewQ.negate())
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,240," new RationalNumber(newP, newQ);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,244,** Invert the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,245, @return the inverse of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,246, @exception ArithmeticException if the instance is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,248,ublic RationalNumber invert() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,250,f (p.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,251,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,254,"eturn (q.signum() < 0) ? new RationalNumber(q.negate(), p.negate())"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,255," new RationalNumber(q, p);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,259,** Simplify a rational number by removing common factors.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,261,rivate void simplify() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,262,f (p.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,263, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,264, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,265,igInteger gcd = p.gcd(q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,266, = p.divide(gcd);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,267, = q.divide(gcd);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,271,** Get the numerator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,272, @return the signed numerator
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,274,ublic BigInteger getNumerator() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,275,eturn p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,278,** Get the denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,279, @return the denominator (always positive)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,281,ublic BigInteger getDenominator() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,282,eturn q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,285,** Check if the number is zero.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,286, @return true if the number is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,288,ublic boolean isZero() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,289,eturn p.signum() == 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,292,** Check if the number is one.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,293, @return true if the number is one
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,295,ublic boolean isOne() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,296,eturn (p.compareTo(BigInteger.ONE) == 0)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,297,& (q.compareTo(BigInteger.ONE) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,300,** Check if the number is integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,301, @return true if the number is an integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,303,ublic boolean isInteger() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,304,eturn q.compareTo(BigInteger.ONE) == 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,307,** Check if the number is negative.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,308, @return true if the number is negative
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,310,ublic boolean isNegative() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,311,eturn p.signum() < 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,314,** Get the absolute value of a rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,315, @param r rational number from which we want the absolute value
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,316, @return a new rational number which is the absolute value of r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,318,ublic static RationalNumber abs(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,319,"eturn new RationalNumber(r.p.abs(), r.q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,322,** Return the <code>double</code> value of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,323, @return the double value of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,325,ublic double doubleValue() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,326,igInteger[] result = p.divideAndRemainder(q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,327,eturn result[0].doubleValue()
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,328, (result[1].doubleValue() / q.doubleValue());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,331,** Check if the instance is equal to another rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,332, Equality here is having the same value.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,333, @return true if the object is a rational number which has the
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,334, same value as the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,336,ublic boolean equals(Object o) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,337,f (o instanceof RationalNumber) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,338,ationalNumber r = (RationalNumber) o;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,339,eturn (p.compareTo(r.p) == 0) && (q.compareTo(r.q) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,341,eturn false;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,344,** Returns a hash code value for the object.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,345, The hash code value is computed from the reduced numerator and
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,346," denominator, hence equal rational numbers have the same hash code,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,347, as required by the method specification.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,348, @return a hash code value for this object.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,350,ublic int hashCode() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,351,eturn p.hashCode() ^ q.hashCode();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,354,** Returns a string representation of the rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,355, The representation is reduced: there is no common factor left
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,356, between the numerator and the denominator. The '/' character and
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,357, the denominator are displayed only if the denominator is not
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,358, one. The sign is on the numerator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,359, @return string representation of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,361,ublic String toString() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,362,"eturn p + ((q.compareTo(BigInteger.ONE) == 0) ? """" : (""/"" + q));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,365,** Numerator. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,366,rivate BigInteger p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,368,** Denominator. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,369,rivate BigInteger q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,371,rivate static final long serialVersionUID = -324954393137577531L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,18,ackage org.spaceroots.mantissa.functions;
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,20,mport org.spaceroots.mantissa.MantissaException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,22,** This class represents exceptions thrown by sample iterators.
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,29,ublic class ExhaustedSampleException
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,30,xtends MantissaException {
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,33, @param size size of the sample
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,35,ublic ExhaustedSampleException(int size) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,36,"uper(""sample contains only {0} elements"","
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,37,ew String[] { Integer.toString(size) });
False,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,src/mantissa/src/org/spaceroots/mantissa/functions/ExhaustedSampleException.java,40,rivate static final long serialVersionUID = -1490493298938282440L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,18,ackage org.spaceroots.mantissa.functions;
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,20,mport org.spaceroots.mantissa.MantissaException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,22,** This class represents exceptions thrown by scalar functions.
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,29,ublic class FunctionException
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,30,xtends MantissaException {
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,33, Build an exception by translating and formating a message
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,34, @param specifier format specifier (to be translated)
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,35, @param parts to insert in the format (no translation)
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,37,"ublic FunctionException(String specifier, String[] parts) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,38,"uper(specifier, parts);"
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,41,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,42, Build an exception by translating the specified message
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,43, @param message message to translate
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,45,ublic FunctionException(String message) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,46,uper(message);
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,49,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,50, Build an exception from a cause
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,51, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,53,ublic FunctionException(Throwable cause) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,54,uper(cause);
False,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,src/mantissa/src/org/spaceroots/mantissa/functions/FunctionException.java,57,rivate static final long serialVersionUID = 1455885104381976115L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,23,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,25,** This class is a simple wrapper allowing to iterate over a
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,26, SampledFunction.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,28, <p>The basic implementation of the iteration interface does not
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,29," perform any transformation on the sample, it only handles a loop"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,30, over the underlying sampled function.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,32, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,34, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,35, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,38,ublic class BasicSampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,39,"mplements SampledFunctionIterator, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,41,** Underlying sampled function. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,42,rivate final SampledFunction function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,44,** Next sample element. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,45,rivate int next;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,47,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,48, Build an instance from a SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,49, @param function smapled function over which we want to iterate
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,51,ublic BasicSampledFunctionIterator(SampledFunction function) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,52,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,53,ext          = 0;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,56,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,57,eturn next < function.size();
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,60,ublic ScalarValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,61,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,62,f (next >= function.size()) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,63,hrow new ExhaustedSampleException(function.size());
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,66,nt current = next++;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,67,eturn function.samplePointAt(current);
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIterator.java,71,rivate static final long serialVersionUID = -9106690005598356403L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,24,** This interface represents scalar functions of one real variable.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,26, <p>This interface should be implemented by all scalar functions
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,27, that can be evaluated at any point. This does not imply that an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,28," explicit definition is available, a function given by an implicit"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,29, function that should be numerically solved for each point for
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,30, example is considered a computable function.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,32, <p>The {@link ComputableFunctionSampler} class can be used to
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,33, transform classes implementing this interface into classes
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,34, implementing the {@link SampledFunction} interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,36, <p>Several numerical algorithms (Gauss-Legendre integrators for
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,37," example) need to choose themselves the evaluation points, so they"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,38, can handle only objects that implement this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,40, @see org.spaceroots.mantissa.quadrature.scalar.ComputableFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,41, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,43, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,44, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,47,ublic interface ComputableFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,49,** Get the value of the function at the specified abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,50, @param x current abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,51, @return function value
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,52, @exception FunctionException if something goes wrong
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,54,ublic double valueAt(double x)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,55,hrows FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,24,** This class is a wrapper allowing to sample a
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,25, {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,27, <p>The sample produced is a regular sample. It can be specified by
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,28, several means :
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,29, <ul>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,30,   <li> from an initial point a step and a number of points</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,31,   <li> from a range and a number of points</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,32,   <li> from a range and a step between points.</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,33, </ul>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,34," In the latter case, the step can optionaly be adjusted in order to"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,35, have the last point exactly at the upper bound of the range.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,37," <p>The sample points are computed on demand, they are not"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,38, stored. This allow to use this method for very large sample with
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,39, little memory overhead. The drawback is that if the same sample
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,40," points are going to be requested several times, they will be"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,41," recomputed each time. In this case, the user should consider"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,42, storing the points by some other means.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,44, @see ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,46, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,47, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,50,ublic class ComputableFunctionSampler
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,51,"mplements SampledFunction, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,53,** Underlying computable function. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,54,rivate ComputableFunction function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,56,** Beginning abscissa. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,57,rivate double begin;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,59,** Step between points. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,60,rivate double step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,62,** Total number of points. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,63,rivate int n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,66, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,68, Build a sample from an {@link ComputableFunction}. Beware of the
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,69, classical off-by-one problem !  If you want to have a sample like
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,70," this : 0.0, 0.1, 0.2 ..., 1.0, then you should specify step = 0.1"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,71, and n = 11 (not n = 10).
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,73, @param begin beginning of the range (will be the abscissa of the
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,74, first point)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,75, @param step step between points
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,76, @param n number of points
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,79,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,80,"ouble begin, double step, int n) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,81,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,82,his.begin    = begin;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,83,his.step     = step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,84,his.n        = n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,88, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,89, Build a sample from an {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,91, @param range abscissa range (from <code>range [0]</code> to
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,92, <code>range [1]</code>)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,93, @param n number of points
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,95,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,96,"ouble[] range, int n) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,97,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,98,egin         = range[0];
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,99,tep          = (range[1] - range[0]) / (n - 1);
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,100,his.n        = n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,104, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,105, Build a sample from an {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,107, @param range abscissa range (from <code>range [0]</code> to
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,108, <code>range [1]</code>)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,109, @param step step between points
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,110," @param adjustStep if true, the step is reduced in order to have"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,111," the last point of the sample exactly at <code>range [1]</code>,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,112, if false the last point will be between <code>range [1] -
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,113, step</code> and <code>range [1]</code> */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,114,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,115,"ouble[] range, double step,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,116,oolean adjustStep) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,117,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,118,egin         = range [0];
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,119,f (adjustStep) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,120,         = (int) Math.ceil((range[1] - range[0]) / step);
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,121,his.step = (range[1] - range[0]) / (n - 1);
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,122, else {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,123,         = (int) Math.floor((range[1] - range[0]) / step);
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,124,his.step = step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,128,ublic int size() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,129,eturn n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,132,ublic ScalarValuedPair samplePointAt(int index)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,133,"hrows ArrayIndexOutOfBoundsException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,135,f (index < 0 || index >= n) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,136,hrow new ArrayIndexOutOfBoundsException();
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,139,ouble x = begin + index * step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,140,"eturn new ScalarValuedPair(x, function.valueAt(x));"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSampler.java,144,rivate static final long serialVersionUID = -5127043442851795719L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,24,** This interface represent sampled scalar functions.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,26," <p>A function sample is an ordered set of points of the form (x, y)"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,27, where x is the abscissa of the point and y is the function value at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,28, x. It is typically a function that has been computed by external
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,29, means or the result of measurements.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,31, <p>The {@link ComputableFunctionSampler} class can be used to
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,32, transform classes implementing the {@link ComputableFunction}
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,33, interface into classes implementing this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,35, <p>Sampled functions cannot be directly handled by integrators
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,36, implementing the {@link
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,37, org.spaceroots.mantissa.quadrature.scalar.SampledFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,38, SampledFunctionIntegrator}. These integrators need a {@link
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,39, SampledFunctionIterator} object to iterate over the
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,40, sample.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,42, @see SampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,43, @see ComputableFunctionSampler
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,44, @see ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,46, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,47, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,50,ublic interface SampledFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,52,** Get the number of points in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,53, @return number of points in the sample
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,55,ublic int size();
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,57,** Get the abscissa and value of the sample at the specified index.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,58," @param index index in the sample, should be between 0 and"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,59, {@link #size} - 1
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,60, @return abscissa and value of the sample at the specified index
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,61, @exception ArrayIndexOutOfBoundsException if the index is wrong
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,62, @exception FunctionException if an eventual underlying function
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,63, throws one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,65,ublic ScalarValuedPair samplePointAt(int index)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,66,"hrows ArrayIndexOutOfBoundsException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,23,** This interface provides iteration services over scalar functions
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,24, samples.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,26, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,32,ublic interface SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,34,** Check if the iterator can provide another point.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,35, @return true if the iterator can provide another point.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,37,ublic boolean hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,39,** Get the next point of a sampled function.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,40, @return the next point of the sampled function
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,41, @exception ExhaustedSampleException if the sample has been exhausted
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,42, @exception FunctionException if the underlying function throws one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,44,ublic ScalarValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunctionIterator.java,45,"hrows ExhaustedSampleException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,22,"** This class represents an (x, f(x)) pair for scalar functions."
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,24, <p>A scalar function is a function of one scalar parameter x whose
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,25, value is a scalar. This class is used has a simple placeholder to
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,26, contain both an abscissa and the value of the function at this
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,27, abscissa.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,29, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,30, @see org.spaceroots.mantissa.functions.vectorial.VectorialValuedPair
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,36,ublic class ScalarValuedPair
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,37,mplements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,40, Build an instance from its coordinates
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,41, @param x abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,42, @param y ordinate (value of the function)
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,44,"ublic ScalarValuedPair(double x, double y) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,45,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,46,his.y = y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,49,** Copy-constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,50, @param p point to copy
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,52,ublic ScalarValuedPair(ScalarValuedPair p) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,53, = p.x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,54, = p.y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,58, Getter for the abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,59, @return value of the abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,61,ublic double getX() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,62,eturn x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,66, Getter for the ordinate.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,67, @return value of the ordinate
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,69,ublic double getY() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,70,eturn y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,74, Setter for the abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,75, @param x new value for the abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,77,ublic void setX(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,78,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,82, Setter for the ordinate.
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,83, @param y new value for the ordinate
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,85,ublic void setY(double y) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,86,his.y = y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,89,** Abscissa of the point. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,90,rivate double x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,92,"** Scalar ordinate of the point, y = f (x). */"
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,93,rivate double y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPair.java,95,rivate static final long serialVersionUID = 1884346552569300794L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,23,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,25,** This class is a wrapper allowing to iterate over a
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,26, SampledFunction.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,28, <p>The basic implementation of the iteration interface does not
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,29," perform any transformation on the sample, it only handles a loop"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,30, over the underlying sampled function.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,32, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,34, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,35, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,38,ublic class BasicSampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,39,"mplements SampledFunctionIterator, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,41,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,42, Build an instance from a SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,43, @param function smapled function over which we want to iterate
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,45,ublic BasicSampledFunctionIterator(SampledFunction function) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,46,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,47,ext          = 0;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,50,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,51,eturn function.getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,54,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,55,eturn next < function.size();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,58,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,59,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,61,f (next >= function.size()) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,62,hrow new ExhaustedSampleException(function.size());
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,65,nt current = next++;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,66,eturn function.samplePointAt(current);
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,70,** Underlying sampled function. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,71,rivate final SampledFunction function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,73,** Next sample element. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,74,rivate int next;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIterator.java,76,rivate static final long serialVersionUID = -4386278658288500627L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,24,** This interface represents vectorial functions of one real variable.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,26, <p>This interface should be implemented by all vectorial functions
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,27, that can be evaluated at any point. This does not imply that an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,28," explicit definition is available, a function given by an implicit"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,29, function that should be numerically solved for each point for
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,30, example is considered a computable function.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,32, <p>The {@link ComputableFunctionSampler} class can be used to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,33, transform classes implementing this interface into classes
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,34, implementing the {@link SampledFunction} interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,36, <p>Several numerical algorithms (Gauss-Legendre integrators for
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,37," example) need to choose themselves the evaluation points, so they"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,38, can handle only objects that implement this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,40, @see org.spaceroots.mantissa.quadrature.vectorial.ComputableFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,41, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,43, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,44, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,47,ublic interface ComputableFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,48,** Get the dimension of the vectorial values of the function.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,49, @return dimension
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,51,ublic int getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,53,** Get the value of the function at the specified abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,54, @param x current abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,55, @return function value
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,56, @exception FunctionException if something goes wrong
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,58,ublic double[] valueAt(double x)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,59,hrows FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,24,** This class is a wrapper allowing to sample a
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,25, {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,27, <p>The sample produced is a regular sample. It can be specified by
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,28, several means :
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,29, <ul>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,30,   <li> from an initial point a step and a number of points</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,31,   <li> from a range and a number of points</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,32,   <li> from a range and a step between points.</li>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,33, </ul>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,34," In the latter case, the step can optionaly be adjusted in order to"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,35, have the last point exactly at the upper bound of the range.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,37," <p>The sample points are computed on demand, they are not"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,38, stored. This allow to use this method for very large sample with
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,39, little memory overhead. The drawback is that if the same sample
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,40," points are going to be requested several times, they will be"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,41," recomputed each time. In this case, the user should consider"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,42, storing the points by some other means.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,44, @see ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,46, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,47, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,50,ublic class ComputableFunctionSampler
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,51,"mplements SampledFunction, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,54, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,56, Build a sample from an {@link ComputableFunction}. Beware of the
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,57, classical off-by-one problem !  If you want to have a sample like
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,58," this : 0.0, 0.1, 0.2 ..., 1.0, then you should specify step = 0.1"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,59, and n = 11 (not n = 10).
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,61, @param begin beginning of the range (will be the abscissa of the
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,62, first point)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,63, @param step step between points
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,64, @param n number of points
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,67,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,68,"ouble begin, double step, int n) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,69,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,70,his.begin    = begin;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,71,his.step     = step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,72,his.n        = n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,76, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,77, Build a sample from an {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,79, @param range abscissa range (from <code>range [0]</code> to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,80, <code>range [1]</code>)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,81, @param n number of points
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,83,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,84,"ouble[] range, int n) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,85,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,86,egin         = range[0];
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,87,tep          = (range[1] - range[0]) / (n - 1);
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,88,his.n        = n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,92, Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,93, Build a sample from an {@link ComputableFunction}.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,95, @param range abscissa range (from <code>range [0]</code> to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,96, <code>range [1]</code>)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,97, @param step step between points
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,98," @param adjustStep if true, the step is reduced in order to have"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,99," the last point of the sample exactly at <code>range [1]</code>,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,100, if false the last point will be between <code>range [1] -
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,101, step</code> and <code>range [1]</code> */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,102,"ublic ComputableFunctionSampler(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,103,"ouble[] range, double step,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,104,oolean adjustStep) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,105,his.function = function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,106,egin         = range[0];
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,107,f (adjustStep) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,108,    = (int) Math.ceil((range[1] - range[0]) / step);
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,109,his.step = (range[1] - range[0]) / (n - 1);
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,110, else {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,111,    = (int) Math.floor((range[1] - range[0]) / step);
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,112,his.step = step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,116,ublic int size() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,117,eturn n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,120,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,121,eturn function.getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,124,ublic VectorialValuedPair samplePointAt(int index)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,125,"hrows ArrayIndexOutOfBoundsException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,127,f (index < 0 || index >= n) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,128,hrow new ArrayIndexOutOfBoundsException();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,131,ouble x = begin + index * step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,132,"eturn new VectorialValuedPair (x, function.valueAt(x));"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,136,** Underlying computable function. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,137,rivate ComputableFunction function;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,139,** Beginning abscissa. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,140,rivate double begin;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,142,** Step between points. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,143,rivate double step;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,145,** Total number of points. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,146,rivate int n;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSampler.java,148,rivate static final long serialVersionUID = 1368582688313212821L;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,24,** This interface represent sampled vectorial functions.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,26," <p>A function sample is an ordered set of points of the form (x, y)"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,27, where x is the abscissa of the point and y is the function value at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,28, x. It is typically a function that has been computed by external
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,29, means or the result of measurements.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,31, <p>The {@link ComputableFunctionSampler} class can be used to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,32, transform classes implementing the {@link ComputableFunction}
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,33, interface into classes implementing this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,35, <p>Sampled functions cannot be directly handled by integrators
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,36, implementing the {@link
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,37, org.spaceroots.mantissa.quadrature.vectorial.SampledFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,38, SampledFunctionIntegrator}. These integrators need a {@link
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,39, SampledFunctionIterator} object to iterate over the
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,40, sample.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,42, @see SampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,43, @see ComputableFunctionSampler
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,44, @see ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,46, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,47, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,50,ublic interface SampledFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,52,** Get the number of points in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,53, @return number of points in the sample
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,55,ublic int size();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,57,** Get the dimension of the vectorial values of the function.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,58, @return dimension
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,60,ublic int getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,62,** Get the abscissa and value of the sample at the specified index.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,63," @param index index in the sample, should be between 0 and"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,64, {@link #size} - 1
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,65, @return abscissa and value of the sample at the specified index
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,66, @exception ArrayIndexOutOfBoundsException if the index is wrong
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,67, @exception FunctionException if an eventual underlying function
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,68, throws one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,70,ublic VectorialValuedPair samplePointAt(int index)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,71,"hrows ArrayIndexOutOfBoundsException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,23,** This interface provides iteration services over vectorial functions
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,24, samples.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,26, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,32,ublic interface SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,34,** Get the dimension of the vectorial values of the function.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,35, @return dimension
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,37,ublic int getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,39,** Check if the iterator can provide another point.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,40, @return true if the iterator can provide another point.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,42,ublic boolean hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,44,** Get the next point of a sampled function.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,45, @return the next point of the sampled function
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,46, @exception ExhaustedSampleException if the sample has been exhausted
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,47, @exception FunctionException if the underlying function throws one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,49,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunctionIterator.java,50,"hrows ExhaustedSampleException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,22,"** This class represents an (x, f(x)) pair for vectorial functions."
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,24, <p>A vectorial function is a function of one vectorial parameter x whose
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,25, value is a vector. This class is used has a simple immutable placeholder to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,26, contain both an abscissa and the value of the function at this
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,27, abscissa.</p>
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,29, @see SampledFunction
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,30, @see org.spaceroots.mantissa.functions.vectorial.VectorialValuedPair
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,36,ublic class VectorialValuedPair
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,37,mplements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,40, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,41, Build an instance from its coordinates
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,42, @param x abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,43, @param y ordinate (value of the function)
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,45,"ublic VectorialValuedPair(double x, double[] y) {"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,46,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,47,his.y = (double[]) y.clone();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,50,** Abscissa of the point. */
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,51,ublic final double x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,53,"** Vectorial ordinate of the point, y = f (x). */"
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,54,ublic final double[] y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,56,rivate static final long serialVersionUID = -7397116933564410103L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,20,** This class implements diagonal matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,22, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,23, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,27,ublic class DiagonalMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,28,xtends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,31," This constructor builds a diagonal matrix of specified order, all"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,32, elements on the diagonal being ones (so this is an identity matrix).
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,33, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,35,ublic DiagonalMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,36,"his(order, 1.0);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,40, This constructor builds a diagonal matrix of specified order and
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,41, set all diagonal elements to the same value.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,42, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,43, @param value value for the diagonal elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,45,"ublic DiagonalMatrix(int order, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,46,uper(order);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,47,or (int index = 0; index < order * order; index += order + 1) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,48,ata[index] = value;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,52,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,53, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,54, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,55, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,57,"ublic DiagonalMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,58,"uper(order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,61,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,62, @param d diagonal matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,64,ublic DiagonalMatrix(DiagonalMatrix d) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,65,uper(d);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,68,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,69,eturn new DiagonalMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,72,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,73,f (i != j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,74,"hrow new ArrayIndexOutOfBoundsException(""cannot set elements"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,75," "" out of diagonal in a"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,76," "" diagonal matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,78,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,81,ublic double getDeterminant(double epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,82,ouble determinant = data[0];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,83,or (int index = columns + 1; index < columns * columns; index += columns + 1) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,84,eterminant *= data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,86,eturn determinant;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,89,ublic SquareMatrix getInverse(double epsilon)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,90,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,92,iagonalMatrix inv = new DiagonalMatrix (columns);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,94,or (int index = 0; index < columns * columns; index += columns + 1) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,95,f (Math.abs(data[index]) < epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,96,hrow new SingularMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,98,nv.data[index] = 1.0 / data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,101,eturn inv;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,105,"ublic Matrix solve(Matrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,106,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,108,atrix result = b.duplicate();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,110,or (int i = 0; i < columns; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,111,ouble diag = data[i * (columns + 1)];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,112,f (Math.abs(diag) < epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,113,hrow new SingularMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,115,ouble inv = 1.0 / diag;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,117,onNullRange range = result.getRangeForRow(i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,118,or (int index = i * b.columns + range.begin;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,119,ndex < i * b.columns + range.end;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,120,+index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,121,esult.data[index] = inv * b.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,125,eturn result;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,129,ublic NonNullRange getRangeForRow(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,130,"eturn new NonNullRange(i, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,133,ublic NonNullRange getRangeForColumn(int j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,134,"eturn new NonNullRange(j, j + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,137,rivate static final long serialVersionUID = -2965166085913895323L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,20,** This class represents matrices of the most general type.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,22, <p>This class is the basic implementation of matrices to use when
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,23, nothing special is known about the structure of the matrix.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,25, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,26, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,30,ublic class GeneralMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,31,xtends Matrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,33,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,34, Build a matrix with null elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,35, @param rows number of rows of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,36, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,38,"ublic GeneralMatrix(int rows, int columns) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,39,"uper(rows, columns);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,42,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,43, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,44, @param rows number of rows of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,45, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,46, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,48,"ublic GeneralMatrix(int rows, int columns, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,49,"uper(rows, columns, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,52,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,53, @param m matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,55,ublic GeneralMatrix(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,56,uper(m);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,59,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,60,eturn new GeneralMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,63,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,64, This method adds a matrix to the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,65, @param m matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,66, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,68,ublic void selfAdd(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,70,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,71,f ((rows != m.rows) || (columns != m.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,72,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,73, m.rows + 'x' + m.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,74," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,75, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,76," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,79,/ addition loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,80,or (int index = 0; index < rows * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,81,ata[index] += m.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,86,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,87, This method substracts a matrix from the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,88, @param m matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,89, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,91,ublic void selfSub(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,93,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,94,f ((rows != m.rows) || (columns != m.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,95,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,96, m.rows + 'x' + m.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,97," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,98, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,99," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,102,/ substraction loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,103,or (int index = 0; index < rows * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,104,ata[index] -= m.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,109,rotected NonNullRange getRangeForRow(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,110,"eturn new NonNullRange(0, columns);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,113,rotected NonNullRange getRangeForColumn(int j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,114,"eturn new NonNullRange(0, rows);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,117,rivate static final long serialVersionUID = 4350328622456299819L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,20,** This class implements general square matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,22, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,23, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,27,ublic class GeneralSquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,28,xtends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,31," This constructor builds a square matrix of specified order, all"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,32, elements beeing zeros.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,33, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,35,ublic GeneralSquareMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,36,uper(order);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,37,ermutations     = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,38,venPermutations = true;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,39,ower            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,40,pper            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,43,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,44, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,45, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,46, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,48,"ublic GeneralSquareMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,49,"uper(order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,50,ermutations     = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,51,venPermutations = true;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,52,ower            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,53,pper            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,56,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,57, @param s square matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,59,ublic GeneralSquareMatrix(GeneralSquareMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,60,uper(s);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,62,f (s.permutations != null) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,63,ermutations     = (int[]) s.permutations.clone();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,64,venPermutations = s.evenPermutations;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,65,ower            = new LowerTriangularMatrix(s.lower);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,66,pper            = new UpperTriangularMatrix(s.upper);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,67, else {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,68,ermutations     = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,69,venPermutations = true;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,70,ower            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,71,pper            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,76,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,77,eturn new GeneralSquareMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,80,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,81,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,82,ermutations     = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,83,venPermutations = true;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,84,ower            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,85,pper            = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,88,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,89, This method adds a matrix to the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,90, @param s square matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,91, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,93,ublic void selfAdd(SquareMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,95,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,96,f ((rows != s.rows) || (columns != s.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,97,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,98, s.rows + 'x' + s.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,99," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,100, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,101," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,104,/ addition loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,105,or (int index = 0; index < rows * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,106,ata[index] += s.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,111,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,112, This method substracts a matrix from the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,113, @param s square matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,114, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,116,ublic void selfSub(SquareMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,118,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,119,f ((rows != s.rows) || (columns != s.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,120,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,121, s.rows + 'x' + s.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,122," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,123, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,124," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,127,/ substraction loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,128,or (int index = 0; index < rows * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,129,ata[index] -= s.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,134,ublic double getDeterminant(double epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,135,ry {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,136,f (permutations == null)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,137,omputeLUFactorization(epsilon);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,138,ouble d = upper.getDeterminant(epsilon);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,139,eturn evenPermutations ? d : -d;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,140, catch (SingularMatrixException e) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,141,eturn 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,145,"ublic Matrix solve(Matrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,146,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,147,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,148,f (b.getRows() != rows) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,149,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,152,f (permutations == null) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,153,omputeLUFactorization(epsilon);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,156,/ apply the permutations to the second member
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,157,ouble[] permData = new double[b.data.length];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,158,nt bCols = b.getColumns();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,159,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,160,onNullRange range = b.getRangeForRow(permutations[i]);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,161,or (int j = range.begin; j < range.end; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,162,ermData[i * bCols + j] = b.data[permutations[i] * bCols + j];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,165,"atrix permB = MatrixFactory.buildMatrix(b.getRows(), bCols, permData);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,167,/ solve the permuted system
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,168,"eturn upper.solve(lower.solve(permB, epsilon), epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,172,rotected NonNullRange getRangeForRow(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,173,"eturn new NonNullRange(0, columns);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,176,rotected NonNullRange getRangeForColumn(int j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,177,"eturn new NonNullRange(0, rows);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,180,rivate void computeLUFactorization(double epsilon)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,181,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,182,/ build a working copy of the matrix data
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,183,ouble[] work = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,184,or (int index = 0; index < work.length; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,185,ork[index] = data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,188,/ initialize the permutations table to identity
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,189,ermutations = new int[rows];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,190,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,191,ermutations[i] = i;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,193,venPermutations = true;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,195,or (int k = 0; k < rows; ++k) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,197,/ find the maximal element in the column
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,198,ouble maxElt = Math.abs(work[permutations[k] * columns + k]);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,199,nt    jMax   = k;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,200,or (int i = k + 1; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,201,ouble curElt = Math.abs(work[permutations[i] * columns + k]);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,202,f (curElt > maxElt) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,203,axElt = curElt;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,204,Max   = i;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,208,f (maxElt < epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,209,hrow new SingularMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,212,f (k != jMax) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,213,/ do the permutation to have a large enough diagonal element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,214,nt tmp            = permutations[k];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,215,ermutations[k]    = permutations[jMax];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,216,ermutations[jMax] = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,217,venPermutations   = ! evenPermutations;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,220,ouble inv = 1.0 / work[permutations[k] * columns + k];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,222,/ compute the contribution of the row to the triangular matrices
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,223,or (int i = k + 1; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,224,ouble factor = inv * work[permutations[i] * columns + k];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,226,/ lower triangular matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,227,ork[permutations[i] * columns + k] = factor;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,229,/ upper triangular matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,230,nt index1 = permutations[i] * columns + k;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,231,nt index2 = permutations[k] * columns + k;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,232,or (int j = k + 1; j < columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,233,ork[++index1] -= factor * work[++index2];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,238,/ build the matrices
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,239,ouble[] lowerData = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,240,ouble[] upperData = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,242,nt index = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,243,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,244,nt workIndex = permutations[i] * columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,245,nt j         = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,247,/ lower part
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,248,hile (j++ < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,249,owerData[index]   = work[workIndex++];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,250,pperData[index++] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,253,/ diagonal
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,254,owerData[index]   = 1.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,255,pperData[index++] = work[workIndex++];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,257,/ upper part
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,258,hile (j++ < columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,259,owerData[index]   = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,260,pperData[index++] = work[workIndex++];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,264,"ower = new LowerTriangularMatrix(rows, lowerData);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,265,"pper = new UpperTriangularMatrix(rows, upperData);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,269,rivate int[]                 permutations;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,270,rivate boolean               evenPermutations;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,271,rivate LowerTriangularMatrix lower;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,272,rivate UpperTriangularMatrix upper;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,274,rivate static final long serialVersionUID = -506293526695298279L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,20,** This class implements lower triangular matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,22, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,23, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,27,ublic class LowerTriangularMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,28,xtends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,31," This constructor builds a lower triangular matrix of specified order, all"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,32, elements being zeros.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,33, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,35,ublic LowerTriangularMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,36,uper(order);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,40, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,41, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,42, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,44,"ublic LowerTriangularMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,45,"uper(order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,48,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,49, @param l lower triangular matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,51,ublic LowerTriangularMatrix(LowerTriangularMatrix l) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,52,uper(l);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,55,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,56,eturn new LowerTriangularMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,59,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,60,f (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,61,"hrow new ArrayIndexOutOfBoundsException(""cannot set elements"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,62," "" above diagonal of a"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,63," "" lower triangular matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,65,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,68,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,69, This method adds a matrix to the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,70, @param l lower triangular matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,71, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,73,ublic void selfAdd(LowerTriangularMatrix l) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,75,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,76,f ((rows != l.rows) || (columns != l.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,77,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,78, l.rows + 'x' + l.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,79," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,80, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,81," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,84,/ addition loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,85,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,86,or (int index = i * columns; index < i * (columns + 1) + 1; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,87,ata[index] += l.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,93,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,94, This method substract a matrix from the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,95, @param l lower triangular matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,96, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,98,ublic void selfSub(LowerTriangularMatrix l) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,100,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,101,f ((rows != l.rows) || (columns != l.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,102,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,103, l.rows + 'x' + l.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,104," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,105, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,106," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,109,/ substraction loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,110,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,111,or (int index = i * columns; index < i * (columns + 1) + 1; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,112,ata[index] -= l.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,118,ublic double getDeterminant(double epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,119,ouble determinant = data[0];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,120,or (int index = columns + 1; index < columns * columns; index += columns + 1) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,121,eterminant *= data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,123,eturn determinant;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,126,"ublic Matrix solve(Matrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,127,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,128,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,129,f (b.getRows () != rows) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,130,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,133,/ prepare the data storage
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,134,nt bRows  = b.getRows();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,135,nt bCols  = b.getColumns();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,137,ouble[] resultData = new double[bRows * bCols];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,138,nt resultIndex     = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,139,nt lowerElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,140,nt upperElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,141,nt minJ            = columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,142,nt maxJ            = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,144,/ solve the linear system
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,145,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,146,ouble diag = data[i * (columns + 1)];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,147,f (Math.abs(diag) < epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,148,hrow new SingularMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,150,ouble inv = 1.0 / diag;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,152,onNullRange range = b.getRangeForRow(i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,153,"inJ = Math.min(minJ, range.begin);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,154,"axJ = Math.max(maxJ, range.end);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,156,nt j = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,157,hile (j < minJ) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,158,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,159,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,160,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,163,/ compute the possibly non null elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,164,nt bIndex = i * bCols + minJ;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,165,hile (j < maxJ) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,167,/ compute the current element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,168,nt index1 = i * columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,169,nt index2 = j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,170,ouble value = b.data[bIndex];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,171,hile (index1 < i * (columns + 1)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,172,alue -= data[index1] * resultData[index2];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,173,+index1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,174,ndex2 += bCols;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,176,alue *= inv;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,177,esultData[resultIndex] = value;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,179,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,180,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,181,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,182,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,183, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,184,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,187,+bIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,188,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,189,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,193,hile (j < bCols) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,194,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,195,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,196,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,201,"eturn MatrixFactory.buildMatrix(bRows, bCols, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,202,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,206,ublic NonNullRange getRangeForRow(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,207,"eturn new NonNullRange(0, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,210,ublic NonNullRange getRangeForColumn(int j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,211,"eturn new NonNullRange(j, rows);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,214,rivate static final long serialVersionUID = 3592505328858227281L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,22,** This class factor all services common to matrices.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,24," <p>This class is the base class of all matrix implementations, it"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,25, is also the base class of the {@link SquareMatrix} class which adds
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,26, methods specific to square matrices.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,28, <p>This class both handles the storage of matrix elements and
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,29," implements the classical operations on matrices (addition,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,30," substraction, multiplication, transposition). It relies on two"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,31, protected methods ({@link #getRangeForRow} and {@link
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,32, #getRangeForColumn}) to get tight loop bounds for matrices with
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,33, known structures full of zeros. These methods should be
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,34, implemented by derived classes to provide information about their
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,35, specific shape to the general algorithms implemented by this
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,36, abstract class.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,43,ublic abstract class Matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,44,mplements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,45,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,46, Build a matrix with null elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,47, @param rows number of rows of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,48, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,50,"rotected Matrix(int rows, int columns) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,51,/ sanity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,52,f (rows <= 0 || columns <= 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,53,"hrow new IllegalArgumentException(""cannot build a matrix"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,54," "" with negative or null dimension"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,57,his.rows    = rows;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,58,his.columns = columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,59,ata = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,60,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,61,ata[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,66,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,67, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,68, @param rows number of rows of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,69, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,70, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,72,"ublic Matrix(int rows, int columns, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,73,/ sanity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,74,f (rows <= 0 || columns <= 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,75,"hrow new IllegalArgumentException(""cannot build a matrix"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,76," "" with negative or null dimension"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,79,his.rows    = rows;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,80,his.columns = columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,81,his.data    = (data == null) ? null : (double[]) data.clone();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,85,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,86, @param m matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,88,rotected Matrix(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,89,ows    = m.rows;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,90,olumns = m.columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,91,ata    = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,92,"ystem.arraycopy(m.data, 0, data, 0, m.data.length);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,95,** Polymorphic copy operator.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,96, This method build a new object of the same type of the
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,97, instance. It is somewhat similar to the {@link Object#clone}
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,98," method, except that it has public access, it doesn't throw any"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,99, specific exception and it returns a Matrix.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,100,@see Object#clone
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,102,ublic abstract Matrix duplicate();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,104,** Get the number of rows of the matrix.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,105, @return number of rows
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,106, @see #getColumns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,108,ublic int getRows() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,109,eturn rows;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,112,** Get the number of columns of the matrix.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,113, @return number of columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,114, @see #getRows
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,116,ublic int getColumns() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,117,eturn columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,120,** Get a matrix element.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,121," @param i row index, from 0 to rows - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,122," @param j column index, from 0 to cols - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,123, @return value of the element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,124, @exception ArrayIndexOutOfBoundsException if the indices are wrong
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,125, @see #setElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,127,"ublic double getElement(int i, int j) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,128,f (i < 0 || i >= rows || j < 0 || j >= columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,129,"hrow new IllegalArgumentException(""cannot get element ("""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,130," i + "", "" + j + "") from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,131, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,132," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,134,eturn data[i * columns + j];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,137,** Set a matrix element.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,138," @param i row index, from 0 to rows - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,139," @param j column index, from 0 to cols - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,140, @param value value of the element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,141, @exception ArrayIndexOutOfBoundsException if the indices are wrong
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,142, @see #getElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,144,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,145,f (i < 0 || i >= rows || j < 0 || j >= columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,146,"hrow new IllegalArgumentException(""cannot set element ("""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,147," i + "", "" + j + "") in a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,148, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,149," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,151,ata[i * columns + j] = value;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,154,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,155, This method adds a matrix to the instance. It returns a new
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,156, matrix and does not modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,157, @param m matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,158, @return a new matrix containing the result
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,159, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,161,ublic Matrix add(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,163,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,164,f ((rows != m.rows) || (columns != m.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,165,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,166, m.rows + 'x' + m.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,167," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,168, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,169," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,172,ouble[] resultData    = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,173,nt      resultIndex   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,174,nt      lowerElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,175,nt      upperElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,177,/ external loop through the rows
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,178,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,179,/ compute the indices of the internal loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,180,"onNullRange r = NonNullRange.reunion(getRangeForRow(i),"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,181,.getRangeForRow(i));
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,183,/ assign the zeros before the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,184,nt j = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,185,hile (j < r.begin) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,186,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,187,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,188,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,191,/ compute the possibly non null elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,192,hile (j < r.end) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,194,/ compute the current element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,195,esultData[resultIndex] = data[resultIndex] + m.data[resultIndex];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,197,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,198,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,199,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,200,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,201, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,202,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,205,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,206,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,210,/ assign the zeros after the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,211,hile (j < columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,212,esultData[resultIndex++] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,213,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,214,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,218,"eturn MatrixFactory.buildMatrix(rows, columns, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,219,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,223,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,224, This method substracts a matrix from the instance. It returns a new
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,225, matrix and does not modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,226, @param m matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,227, @return a new matrix containing the result
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,228, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,230,ublic Matrix sub(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,232,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,233,f ((rows != m.rows) || (columns != m.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,234,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,235, m.rows + 'x' + m.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,236," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,237, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,238," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,241,ouble[] resultData    = new double[rows * columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,242,nt      resultIndex   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,243,nt      lowerElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,244,nt      upperElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,246,/ external loop through the rows
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,247,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,248,/ compute the indices of the internal loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,249,"onNullRange r = NonNullRange.reunion(getRangeForRow(i),"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,250,.getRangeForRow(i));
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,252,/ assign the zeros before the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,253,nt j = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,254,hile (j < r.begin) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,255,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,256,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,257,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,260,/ compute the possibly non null elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,261,hile (j < r.end) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,263,/ compute the current element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,264,esultData[resultIndex] = data[resultIndex] - m.data[resultIndex];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,266,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,267,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,268,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,269,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,270, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,271,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,274,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,275,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,279,/ assign the zeros after the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,280,hile (j < columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,281,esultData[resultIndex++] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,282,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,283,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,287,"eturn MatrixFactory.buildMatrix(rows, columns, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,288,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,292,** Multiply the instance by a matrix.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,293, This method multiplies the instance by a matrix. It returns a new
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,294, matrix and does not modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,295, @param m matrix by which to multiply
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,296, @return a new matrix containing the result
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,297, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,299,ublic Matrix mul(Matrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,301,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,302,f (columns != m.rows) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,303,"hrow new IllegalArgumentException(""cannot multiply a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,304, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,305," "" matrix by a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,306, m.rows + 'x' + m.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,307," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,310,ouble[] resultData = new double[rows * m.columns];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,311,nt resultIndex     = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,312,nt lowerElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,313,nt upperElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,315,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,316,or (int j = 0; j < m.columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,317,ouble value = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,319,/ compute the tighter possible indices of the internal loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,320,"onNullRange r = NonNullRange.intersection(getRangeForRow(i),"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,321,.getRangeForColumn(j));
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,323,f (r.begin < r.end) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,324,nt k    = r.begin;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,325,nt idx  = i * columns + k;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,326,nt midx = k * m.columns + j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,327,hile (k++ < r.end) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,328,alue += data[idx++] * m.data[midx];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,329,idx  += m.columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,332,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,333,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,334,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,335,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,336, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,337,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,342,/ store the element value
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,343,esultData[resultIndex++] = value;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,348,"eturn MatrixFactory.buildMatrix(rows, m.columns, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,349,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,353,** Multiply the instance by a scalar.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,354, This method multiplies the instance by a scalar. It returns a new
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,355, matrix and does not modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,356, @param a scalar by which to multiply
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,357, @return a new matrix containing the result
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,358, @see #selfMul(double)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,360,ublic Matrix mul(double a) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,361,atrix copy = duplicate();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,362,opy.selfMul(a);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,363,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,366,** Multiply the instance by a scalar.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,367, This method multiplies the instance by a scalar.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,368, It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,369, @param a scalar by which to multiply
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,370, @see #mul(double)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,372,ublic void selfMul(double a) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,373,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,374,onNullRange r = getRangeForRow(i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,375,"or (int j = r.begin, index = i * columns + r.begin; j < r.end; ++j) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,376,ata[index++] *= a;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,382,** Compute the transpose of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,383, This method transposes the instance. It returns a new
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,384, matrix and does not modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,385, @return a new matrix containing the result
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,387,ublic Matrix getTranspose() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,389,ouble[] resultData    = new double[columns * rows];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,390,nt      resultIndex   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,391,nt      upperElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,392,nt      lowerElements = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,394,or (int i = 0; i < columns; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,395,/ compute the indices of the internal loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,396,onNullRange range = getRangeForColumn(i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,398,nt j     = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,399,nt index = i;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,401,/ assign the zeros before the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,402,hile (j < range.begin) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,403,esultData[resultIndex++] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,404,ndex += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,405,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,408,/ compute the possibly non null elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,409,hile (j < range.end) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,410,esultData[resultIndex] = data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,412,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,413,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,414,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,415,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,416, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,417,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,420,ndex += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,421,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,422,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,426,/ assign the zeros after the non null range
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,427,hile (j < rows) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,428,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,429,+resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,430,+j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,435,"eturn MatrixFactory.buildMatrix(columns, rows, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,436,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,440,** Set a range to the non null part covered by a row.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,441, @param i index of the row
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,442, @return range of non nul elements in the specified row
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,443, @see #getRangeForColumn
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,445,rotected abstract NonNullRange getRangeForRow(int i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,447,** Set a range to the non null part covered by a column.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,448, @param j index of the column
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,449, @return range of non nul elements in the specified column
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,450, @see #getRangeForRow
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,452,rotected abstract NonNullRange getRangeForColumn(int j);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,454,ublic String toString() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,455,"tring separator = System.getProperty(""line.separator"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,457,tringBuffer buf = new StringBuffer();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,458,or (int index = 0; index < rows * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,459,f (index > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,460,f (index % columns == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,461,uf.append(separator);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,462, else {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,463,uf.append(' ');
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,466,uf.append(Double.toString(data[index]));
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,469,eturn buf.toString();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,473,** number of rows of the matrix. */
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,474,rotected final int rows;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,476,** number of columns of the matrix. */
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,477,rotected final int columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,479,** array of the matrix elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,480," the elements are stored in a one dimensional array, row after row"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,482,rotected final double[] data;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,20,** This class is a factory for the linear algebra package.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,22, <p>This class is devoted to building the right type of matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,23, according to the structure of the non null elements.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,25," <p>This is a utility class, no instance of this class should be"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,26," built, so the constructor is explicitly made private.</p>"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,33,ublic class MatrixFactory {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,34,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,35," Since the class is a utility class with only static methods, the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,36, constructor is made private to prevent creating instances of this
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,37, class.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,39,rivate MatrixFactory() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,42,** Build a matrix of the right subtype.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,43, Build the right subtype of matrix according to the structure of
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,44, the non null elements of the instance. Note that the information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,45, provided does not allow to build instances of the {@link
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,46, SymetricalMatrix} class. When the data corresponding to a
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,47," symetrical matrix is given, this method can only build an"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,48, instance of the {@link GeneralSquareMatrix} class.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,49, @param rows number of row of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,50, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,51, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,52, @param lowerElements number of non null elements in the lower triangle
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,53, @param upperElements number of non null elements in the upper triangle
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,54, @return a matrix containing the instance
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,56,"ublic static Matrix buildMatrix(int rows, int columns, double[] data,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,57,"nt lowerElements, int upperElements) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,58,f (rows == columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,59,f (lowerElements == 0 && upperElements == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,60,"eturn new DiagonalMatrix(rows, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,61, else if (lowerElements == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,62,"eturn new UpperTriangularMatrix(rows, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,63, else if (upperElements == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,64,"eturn new LowerTriangularMatrix(rows, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,65, else {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,66,"eturn new GeneralSquareMatrix(rows, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,69,"eturn new GeneralMatrix(rows, columns, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,72,** Build a matrix of the right subtype.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,73, Build the right subtype of matrix according to the dimensions.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,74, @param rows number of row of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,75, @param columns number of columns of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,76, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,77, @return a matrix containing the instance
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,79,"ublic static Matrix buildMatrix(int rows, int columns, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,80,f (rows == columns) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,81,"eturn new GeneralSquareMatrix(rows, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,src/mantissa/src/org/spaceroots/mantissa/linalg/MatrixFactory.java,83,"eturn new GeneralMatrix(rows, columns, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,22,** This class represents range of non null elements for rows or
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,23, columns of matrices.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,25, <p>This class is used to reduce the computation loops by avoiding
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,26," using elements that are known to be zeros. For full matrices, the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,27, range simply spans from 0 to the order of the matrix. For lower and
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,28," upper triangular matrices, its width will depend on the index of"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,29," the row or column considered. For diagonal matrices, the range is"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,30, reduced to one index.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,32, <p>The indices provided by the class correspond to the elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,33, that are non-null only according to the <emph>structure</emph> of
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,34, the matrix. The real value of the element is not
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,35, considered. Consider for example the following lower triangular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,36, matrix :</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,38, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,39,   1 0 0 0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,40,   2 8 0 0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,41,   0 5 3 0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,42,   3 2 4 4
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,43, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,45," <p>The third rows begins with zero, but this is not a consequence"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,46," of the lower triangular structure, it is only a"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,47," coincidence. Therefore, the range (in row/columns count)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,48," corresponding to third row will span from 0 to 2, not from 1 to 2.</p>"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,50, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,51, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,54,lass NonNullRange
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,55,mplements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,57,** Index in row/column count of the first non-null element. */
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,58,ublic final int begin;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,60,** Index in row/column count after the last non-null element. */
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,61,ublic final int end;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,63,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,64, @param begin index in row/column count of the first non-null element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,65, @param end index in row/column count after the last non-null element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,67,"ublic NonNullRange(int begin, int end)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,69,his.begin = begin;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,70,his.end   = end;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,73,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,74, @param range range to copy.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,76,ublic NonNullRange(NonNullRange range) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,77,egin = range.begin;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,78,nd   = range.end;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,81,** Build the intersection of two ranges.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,82, @param first first range to consider
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,83, @param second second range to consider
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,85,"ublic static NonNullRange intersection(NonNullRange first,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,86,onNullRange second) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,87,"eturn new NonNullRange(Math.max(first.begin, second.begin),"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,88,"ath.min(first.end, second.end));"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,91,** Build the reunion of two ranges.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,92, @param first first range to consider
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,93, @param second second range to consider
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,95,"ublic static NonNullRange reunion(NonNullRange first,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,96,onNullRange second) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,97,"eturn new NonNullRange(Math.min(first.begin, second.begin),"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,98,"ath.max(first.end, second.end));"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,101,rivate static final long serialVersionUID = 8175301560126132666L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,20,mport org.spaceroots.mantissa.MantissaException;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,22,** This class represent exceptions thrown by some matrix operations.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,29,ublic class SingularMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,30,xtends MantissaException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,33, Build an exception with a default message
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,35,ublic SingularMatrixException() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,36,"uper(""singular matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SingularMatrixException.java,39,rivate static final long serialVersionUID = 7531357987468317564L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,20,** This class factor all services common to square matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,22, <p>This class is the base class of all square matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,23, implementations. It extends the {@link Matrix} class with methods
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,24, specific to square matrices.</p>
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,26, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,27, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,31,ublic abstract class SquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,32,xtends Matrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,33,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,34, Build a matrix with null elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,35, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,37,rotected SquareMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,38,"uper(order, order);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,41,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,42, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,43, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,44, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,46,"rotected SquareMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,47,"uper(order, order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,50,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,51, @param m matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,53,rotected SquareMatrix(SquareMatrix m) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,54,uper(m);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,57,** Get the determinant of the matrix.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,58, @param epsilon threshold on matrix elements below which the
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,59, matrix is considered singular (this is used by the derived
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,60, classes that use a factorization to compute the determinant)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,61, @return the determinant of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,63,ublic abstract double getDeterminant(double epsilon);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,65,** Invert the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,66, @param epsilon threshold on matrix elements below which the
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,67, matrix is considered singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,68, @return the inverse matrix of the instance
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,69, @exception SingularMatrixException if the matrix is singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,71,ublic SquareMatrix getInverse(double epsilon)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,72,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,73,"eturn solve(new DiagonalMatrix (columns), epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,77,** Solve the <tt>A.X = B</tt> equation.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,78, @param b second term of the equation
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,79, @param epsilon threshold on matrix elements below which the
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,80, matrix is considered singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,81," @return a matrix X such that <tt>A.X = B</tt>, where A is the instance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,82, @exception SingularMatrixException if the matrix is singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,84,"ublic abstract Matrix solve(Matrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,85,hrows SingularMatrixException;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,87,** Solve the <tt>A.X = B</tt> equation.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,88, @param b second term of the equation
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,89, @param epsilon threshold on matrix elements below which the
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,90, matrix is considered singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,91," @return a matrix X such that <tt>A.X = B</tt>, where A is the instance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,92, @exception SingularMatrixException if the matrix is singular
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,94,"ublic SquareMatrix solve(SquareMatrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,95,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,96,"eturn (SquareMatrix) solve((Matrix) b, epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,20,** This class implements symetrical matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,22, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,23, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,27,ublic class SymetricalMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,28,xtends GeneralSquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,31," This constructor builds a symetrical matrix of specified order, all"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,32, elements beeing zeros.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,33, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,35,ublic SymetricalMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,36,uper(order);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,40, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,41, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,42, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,44,"ublic SymetricalMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,45,"uper(order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,48,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,49, @param s square matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,51,ublic SymetricalMatrix(SymetricalMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,52,uper(s);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,55,** Build the symetrical matrix resulting from the product w.A.At.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,56, @param w multiplicative factor (weight)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,57, @param a base vector used to compute the symetrical contribution
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,59,"ublic SymetricalMatrix(double w, double[] a) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,60,"uper(a.length, new double[a.length * a.length]);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,62,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,63,nt indexU = i * (columns + 1);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,64,nt indexL = indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,66,ouble factor = w * a[i];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,67,ata[indexU] = factor * a[i];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,69,or (int j = i + 1; j < columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,70,+indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,71,ndexL += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,72,ata[indexU] = factor * a[j];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,73,ata[indexL] = data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,79,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,80,eturn new SymetricalMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,83,** Set a matrix element.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,84," On symetrical matrices, setting separately elements outside of"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,85," the diagonal is forbidden, so this method throws an"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,86, ArrayIndexOutOfBoundsException in this case. The {@link
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,87, #setElementAndSymetricalElement} can be used to set both elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,88, simultaneously.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,89," @param i row index, from 0 to rows - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,90," @param j column index, from 0 to cols - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,91, @param value value of the element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,92, @exception ArrayIndexOutOfBoundsException if the indices are wrong
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,93, @see #setElementAndSymetricalElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,94, @see Matrix#getElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,96,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,97,f (i != j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,98,"hrow new ArrayIndexOutOfBoundsException(""cannot separately set"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,99," "" elements out of diagonal"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,100," "" in a symetrical matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,102,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,105,** Set both a matrix element and its symetrical element.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,106, @param i row index of first element (column index of second
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,107," element), from 0 to order - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,108, @param j column index of first element (row index of second
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,109," element), from 0 to order - 1"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,110, @param value value of the elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,111, @exception ArrayIndexOutOfBoundsException if the indices are wrong
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,112, @see #setElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,113, @see Matrix#getElement
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,115,"ublic void setElementAndSymetricalElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,116,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,117,f (i != j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,118,"uper.setElement(j, i, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,122,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,123, This method adds a matrix to the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,124, @param s symetrical matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,125, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,127,ublic void selfAdd(SymetricalMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,129,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,130,f ((rows != s.rows) || (columns != s.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,131,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,132, s.rows + 'x' + s.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,133," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,134, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,135," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,138,/ addition loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,139,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,140,nt indexU = i * (columns + 1);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,141,nt indexL = indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,143,ata[indexU] += s.data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,145,or (int j = i + 1; j < columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,146,+indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,147,ndexL += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,148,ata[indexU] += s.data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,149,ata[indexL]  = data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,155,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,156, This method substracts a matrix from the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,157, @param s symetrical matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,158, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,160,ublic void selfSub(SymetricalMatrix s) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,162,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,163,f ((rows != s.rows) || (columns != s.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,164,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,165, s.rows + 'x' + s.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,166," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,167, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,168," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,171,/ substraction loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,172,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,173,nt indexU = i * (columns + 1);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,174,nt indexL = indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,176,ata[indexU] -= s.data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,178,or (int j = i + 1; j < columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,179,+indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,180,ndexL += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,181,ata[indexU] -= s.data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,182,ata[indexL] = data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,188,** Add the symetrical matrix resulting from the product w.A.At to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,189, This method can be used to build progressively the matrices of
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,190, least square problems. The instance is modified.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,191, @param w multiplicative factor (weight)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,192, @param a base vector used to compute the symetrical contribution
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,193, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,195,"ublic void selfAddWAAt(double w, double[] a) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,196,f (rows != a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,197,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,198, a.length + 'x' + a.length
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,199," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,200, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,201," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,204,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,205,nt indexU = i * (columns + 1);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,206,nt indexL = indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,208,ouble factor   = w * a[i];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,209,ata[indexU] += factor * a[i];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,211,or (int j = i + 1; j < columns; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,212,+indexU;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,213,ndexL += columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,214,ata[indexU] += factor * a[j];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,215,ata[indexL]  = data[indexU];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,221,rivate static final long serialVersionUID = -2083829252075519221L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,20,** This class implements upper triangular matrices of linear algebra.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,22, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,23, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,27,ublic class UpperTriangularMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,28,xtends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,30,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,31," This constructor builds a upper triangular matrix of specified order, all"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,32, elements being zeros.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,33, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,35,ublic UpperTriangularMatrix(int order) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,36,uper(order);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,40, Build a matrix with specified elements.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,41, @param order order of the matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,42, @param data table of the matrix elements (stored row after row)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,44,"ublic UpperTriangularMatrix(int order, double[] data) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,45,"uper(order, data);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,48,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,49, @param u upper triangular matrix to copy
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,51,ublic UpperTriangularMatrix(UpperTriangularMatrix u) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,52,uper(u);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,55,ublic Matrix duplicate() {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,56,eturn new UpperTriangularMatrix(this);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,59,"ublic void setElement(int i, int j, double value) {"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,60,f (i > j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,61,"hrow new ArrayIndexOutOfBoundsException(""cannot set elements"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,62," "" below diagonal of a"""
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,63," "" upper triangular matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,65,"uper.setElement(i, j, value);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,68,** Add a matrix to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,69, This method adds a matrix to the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,70, @param u upper triangular matrix to add
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,71, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,73,ublic void selfAdd(UpperTriangularMatrix u) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,75,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,76,f ((rows != u.rows) || (columns != u.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,77,"hrow new IllegalArgumentException(""cannot add a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,78, u.rows + 'x' + u.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,79," "" matrix to a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,80, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,81," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,84,/ addition loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,85,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,86,or (int index = i * (columns + 1); index < (i + 1) * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,87,ata[index] += u.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,93,** Substract a matrix from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,94, This method substract a matrix from the instance. It does modify the instance.
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,95, @param u upper triangular matrix to substract
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,96, @exception IllegalArgumentException if there is a dimension mismatch
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,98,ublic void selfSub(UpperTriangularMatrix u) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,100,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,101,f ((rows != u.rows) || (columns != u.columns)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,102,"hrow new IllegalArgumentException(""cannot substract a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,103, u.rows + 'x' + u.columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,104," "" matrix from a """
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,105, rows + 'x' + columns
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,106," "" matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,109,/ substraction loop
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,110,or (int i = 0; i < rows; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,111,or (int index = i * (columns + 1); index < (i + 1) * columns; ++index) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,112,ata[index] -= u.data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,118,ublic double getDeterminant(double epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,119,ouble determinant = data[0];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,120,or (int index = columns + 1; index < columns * columns; index += columns + 1) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,121,eterminant *= data[index];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,123,eturn determinant;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,126,"ublic Matrix solve(Matrix b, double epsilon)"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,127,hrows SingularMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,128,/ validity check
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,129,f (b.getRows() != rows) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,130,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,133,/ prepare the data storage
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,134,nt bRows  = b.getRows();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,135,nt bCols  = b.getColumns();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,137,ouble[] resultData = new double[bRows * bCols];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,138,nt resultIndex     = bRows * bCols - 1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,139,nt lowerElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,140,nt upperElements   = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,141,nt minJ            = columns;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,142,nt maxJ            = 0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,144,/ solve the linear system
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,145,or (int i = rows - 1; i >= 0; --i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,146,ouble diag = data[i * (columns + 1)];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,147,f (Math.abs(diag) < epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,148,hrow new SingularMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,150,ouble inv = 1.0 / diag;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,152,onNullRange range = b.getRangeForRow(i);
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,153,"inJ = Math.min(minJ, range.begin);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,154,"axJ = Math.max(maxJ, range.end);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,156,nt j = bCols - 1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,157,hile (j >= maxJ) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,158,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,159,-resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,160,-j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,163,/ compute the possibly non null elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,164,nt bIndex = i * bCols + maxJ - 1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,165,hile (j >= minJ) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,167,/ compute the current element
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,168,nt index1 = (i + 1) * columns - 1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,169,nt index2 = (bRows - 1) * bCols + j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,170,ouble value = b.data[bIndex];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,171,hile (index1 >= i * (columns + 1)) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,172,alue -= data[index1] * resultData[index2];
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,173,-index1;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,174,ndex2 -= bCols;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,176,alue *= inv;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,177,esultData[resultIndex] = value;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,179,/ count the affected upper and lower elements
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,180,/ (in order to deduce the shape of the resulting matrix)
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,181,f (j < i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,182,+lowerElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,183, else if (i < j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,184,+upperElements;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,187,-bIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,188,-resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,189,-j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,193,hile (j >= 0) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,194,esultData[resultIndex] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,195,-resultIndex;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,196,-j;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,201,"eturn MatrixFactory.buildMatrix(bRows, bCols, resultData,"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,202,"owerElements, upperElements);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,206,ublic NonNullRange getRangeForRow(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,207,"eturn new NonNullRange (i, columns);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,210,ublic NonNullRange getRangeForColumn(int j) {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,211,"eturn new NonNullRange (0, j + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,214,rivate static final long serialVersionUID = -197266611942032237L;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,23,** This interface represents an integrator for scalar functions.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,25, <p>The classes which are devoted to integrate scalar functions
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,26, should implement this interface. The functions which can be handled
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,27, should implement the {@link
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,28, org.spaceroots.mantissa.functions.scalar.ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,29, ComputableFunction} interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,31, @see org.spaceroots.mantissa.functions.scalar.ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,33, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,34, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,38,ublic interface ComputableFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,39,** Integrate a function over a defined range.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,40, @param f function to integrate
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,41, @param a first bound of the range (can be lesser or greater than b)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,42, @param b second bound of the range (can be lesser or greater than a)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,43, @return value of the integral over the range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,44, @exception FunctionException if the underlying function throws one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,46,"ublic double integrate(ComputableFunction f, double a, double b)"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/ComputableFunctionIntegrator.java,47,hrows FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,22,mport org.spaceroots.mantissa.functions.scalar.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,24,** This class implements an enhanced Simpson-like integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,26, <p>A traditional Simpson integrator is based on a quadratic
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,27, approximation of the function on three equally spaced points. This
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,28, integrator does the same thing but can handle non-equally spaced
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,29," points. If it is used on a regular sample, it behaves exactly as a"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,30, traditional Simpson integrator.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,37,ublic class EnhancedSimpsonIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,38,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,39,ublic double integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,40,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,42,nhancedSimpsonIntegratorSampler sampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,43, new EnhancedSimpsonIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,44,ouble sum = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,46,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,47,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,48,um = sampler.nextSamplePoint().getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,50, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegrator.java,53,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.scalar.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,24,** This class implements an enhanced Simpson integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,26, <p>A traditional Simpson integrator is based on a quadratic
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,27, approximation of the function on three equally spaced points. This
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,28, integrator does the same thing but can handle non-equally spaced
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,29," points. If it is used on a regular sample, it behaves exactly as a"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,30, traditional Simpson integrator.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,32, @see EnhancedSimpsonIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,34, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,35, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,39,ublic class EnhancedSimpsonIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,40,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,42,** Underlying sampled function iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,43,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,45,** Next point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,46,rivate ScalarValuedPair next;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,48,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,49,rivate double sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,51,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,52, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,53, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,55,ublic EnhancedSimpsonIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,56,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,58,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,60,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,61,ext = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,63,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,64,um = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,68,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,69,eturn iter.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,72,ublic ScalarValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,73,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,74,/ performs one step of an enhanced Simpson scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,75,calarValuedPair previous = next;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,76,calarValuedPair current  = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,78,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,79,ext = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,81,ouble h1 = current.getX() - previous.getX();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,82,ouble h2 = next.getX()    - current.getX();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,83,ouble cP = (h1 + h2) * (2 * h1 - h2) / (6 * h1);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,84,ouble cC = (h1 + h2) * (h1 + h2) * (h1 + h2) / (6 * h1 * h2);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,85,ouble cN = (h1 + h2) * (2 * h2 - h1) / (6 * h2);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,87,um += cP * previous.getY() + cC * current.getY() + cN * next.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,89, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,90,/ we have an incomplete step at the end of the sample
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,91,/ we use a trapezoid scheme for this last step
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,92,um += 0.5 * (current.getX() - previous.getX()) * (previous.getY() + current.getY());
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,93,"eturn new ScalarValuedPair(current.getX(), sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/EnhancedSimpsonIntegratorSampler.java,96,"eturn new ScalarValuedPair(next.getX(), sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,22,mport org.spaceroots.mantissa.functions.scalar.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,24,** This class implements a Riemann integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,26, <p>A Riemann integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,36, @see TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,43,ublic class RiemannIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,44,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,45,ublic double integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,46,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,48,iemannIntegratorSampler sampler = new RiemannIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,49,ouble sum = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,51,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,52,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,53,um = sampler.nextSamplePoint().getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,55, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegrator.java,58,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.scalar.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,24,** This class implements a Riemann integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,26, <p>A Riemann integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,36, @see RiemannIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,43,ublic class RiemannIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,44,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,46,** Underlying sample iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,47,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,49,** Current point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,50,rivate ScalarValuedPair current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,52,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,53,rivate double sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,55,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,56, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,57, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,59,ublic RiemannIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,60,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,62,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,64,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,65,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,67,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,68,um = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,72,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,73,eturn iter.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,76,ublic ScalarValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,77,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,78,/ performs one step of a Riemann scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,79,calarValuedPair previous = current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,80,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,81,um    += (current.getX() - previous.getX()) * previous.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/RiemannIntegratorSampler.java,83,"eturn new ScalarValuedPair(current.getX(), sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,20,mport org.spaceroots.mantissa.functions.scalar.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,24,** This interface represents an integrator for scalar samples.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,26, <p>The classes which are devoted to integrate scalar samples
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,27, should implement this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,29, @see org.spaceroots.mantissa.functions.scalar.SampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,30, @see ComputableFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,37,ublic interface SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,38,** Integrate a sample over its overall range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,39, @param iter iterator over the sample to integrate
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,40, @return value of the integral over the sample range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,41, @exception ExhaustedSampleException if the sample does not have
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,42, enough points for the integration scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,43, @exception FunctionException if the underlying sampled function throws one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,45,ublic double integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/SampledFunctionIntegrator.java,46,"hrows ExhaustedSampleException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,22,mport org.spaceroots.mantissa.functions.scalar.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,24,** This class implements a trapezoid integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,26, <p>A trapezoid integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,27, function is linear over the integration step.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,29, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,30, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,34,ublic class TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,35,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,36,ublic double integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,37,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,39,rapezoidIntegratorSampler sampler = new TrapezoidIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,40,ouble sum = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,42,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,43,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,44,um = sampler.nextSamplePoint().getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,46, catch (ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegrator.java,49,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.scalar.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,24,** This class implements a trapezoid integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,26, <p>A trapezoid integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,36, @see TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,43,ublic class TrapezoidIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,44,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,46,** Underlying sample iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,47,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,49,** Current point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,50,rivate ScalarValuedPair current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,52,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,53,rivate double sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,55,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,56, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,57, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,59,ublic TrapezoidIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,60,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,62,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,64,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,65,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,67,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,68,um = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,72,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,73,eturn iter.hasNext ();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,76,ublic ScalarValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,77,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,78,/ performs one step of a trapezoid scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,79,calarValuedPair previous = current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,80,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,81,um    += 0.5
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,82, (current.getX() - previous.getX())
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,83, (previous.getY() + current.getY());
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/TrapezoidIntegratorSampler.java,85,"eturn new ScalarValuedPair(current.getX(), sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,20,mport org.spaceroots.mantissa.functions.vectorial.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,23,** This interface represents an integrator for vectorial functions.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,25, <p>The classes which are devoted to integrate vectorial functions
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,26, should implement this interface. The functions which can be handled
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,27, should implement the {@link
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,28, org.spaceroots.mantissa.functions.vectorial.ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,29, ComputableFunction} interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,31, @see org.spaceroots.mantissa.functions.vectorial.ComputableFunction
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,33, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,34, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,38,ublic interface ComputableFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,39,** Integrate a function over a defined range.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,40, @param f function to integrate
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,41, @param a first bound of the range (can be lesser or greater than b)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,42, @param b second bound of the range (can be lesser or greater than a)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,43, @return value of the integral over the range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,44, @exception FunctionException if the underlying function throws one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,46,"ublic double[] integrate(ComputableFunction f, double a, double b)"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/ComputableFunctionIntegrator.java,47,hrows FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,22,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,24,** This class implements an enhanced Simpson-like integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,26, <p>A traditional Simpson integrator is based on a quadratic
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,27, approximation of the function on three equally spaced points. This
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,28, integrator does the same thing but can handle non-equally spaced
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,29," points. If it is used on a regular sample, it behaves exactly as a"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,30, traditional Simpson integrator.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,37,ublic class EnhancedSimpsonIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,38,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,39,ublic double[] integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,40,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,42,nhancedSimpsonIntegratorSampler sampler =
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,43,ew EnhancedSimpsonIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,44,ouble[] sum = null;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,46,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,47,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,48,um = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,50, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,53,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.vectorial.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,24,** This class implements an enhanced Simpson integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,26, <p>A traditional Simpson integrator is based on a quadratic
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,27, approximation of the function on three equally spaced points. This
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,28, integrator does the same thing but can handle non-equally spaced
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,29," points. If it is used on a regular sample, it behaves exactly as a"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,30, traditional Simpson integrator.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,32, @see EnhancedSimpsonIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,34, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,35, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,39,ublic class EnhancedSimpsonIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,40,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,42,** Underlying sample iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,43,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,45,** Next point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,46,rivate VectorialValuedPair next;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,48,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,49,rivate double[] sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,51,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,52, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,53, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,55,ublic EnhancedSimpsonIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,56,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,58,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,60,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,61,ext = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,63,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,64,um = new double[iter.getDimension()];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,65,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,66,um[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,71,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,72,eturn iter.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,75,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,76,eturn iter.getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,79,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,80,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,81,/ performs one step of an enhanced Simpson scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,82,ectorialValuedPair previous = next;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,83,ectorialValuedPair current  = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,85,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,86,ext = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,88,ouble h1 = current.x - previous.x;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,89,ouble h2 = next.x    - current.x;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,90,ouble cP = (h1 + h2) * (2 * h1 - h2) / (6 * h1);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,91,ouble cC = (h1 + h2) * (h1 + h2) * (h1 + h2) / (6 * h1 * h2);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,92,ouble cN = (h1 + h2) * (2 * h2 - h1) / (6 * h2);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,94,ouble[] pY = previous.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,95,ouble[] cY = current.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,96,ouble[] nY = next.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,97,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,98,um [i] += cP * pY[i] + cC * cY[i] + cN * nY[i];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,101, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,102,/ we have an incomplete step at the end of the sample
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,103,/ we use a trapezoid scheme for this last step
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,104,ouble halfDx = 0.5 * (current.x - previous.x);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,105,ouble[] pY = previous.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,106,ouble[] cY = current.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,107,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,108,um [i] += halfDx * (pY[i] + cY[i]);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,110,"eturn new VectorialValuedPair(current.x, sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,113,"eturn new VectorialValuedPair(next.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,20,mport org.spaceroots.mantissa.functions.vectorial.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,23,** This class implements a Gauss-Legendre integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,25, <p>Gauss-Legendre integrators are efficient integrators that can
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,26, accurately integrate functions with few functions evaluations. A
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,27, Gauss-Legendre integrator using an n-points quadrature formula can
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,28, integrate exactly 2n-1 degree polynoms.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,30, <p>These integrators evaluate the function on n carefully chosen
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,31, points in each step interval. These points are not evenly
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,32, spaced. The function is <emph>never</emph> evaluated at the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,33," boundary points, which means it can be undefined at these"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,34, points.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,36, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,37, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,41,ublic class GaussLegendreIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,42,mplements ComputableFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,43,** Build a Gauss-Legendre integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,45, <p>A Gauss-Legendre integrator is a formula like:
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,46, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,47,    int (f) from -1 to +1 = Sum (ai * f(xi))
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,48, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,49, </p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,51, <p>The coefficients of the formula are computed as follow:
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,52, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,53,   let n be the desired number of points
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,54,   the xi are the roots of the degree n Legendre polynomial
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,55,   the ai are the integrals int (Li^2) from -1 to +1
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,56,   where Li (x) = Prod (x-xk)/(xi-xk) for k != i
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,57, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,58, </p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,60, <p>A formula in n points can integrate exactly polynoms of degree
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,61, up to 2n-1.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,63, @param minPoints minimal number of points desired
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,64, @param rawStep raw integration step (the precise step will be
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,65, adjusted in order to have an integer number of steps in the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,66, integration range).
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,68,"ublic GaussLegendreIntegrator(int minPoints, double rawStep) {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,69,f (minPoints <= 2) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,70,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,71," 1.0, -1.0 / Math.sqrt (3.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,72," 1.0,  1.0 / Math.sqrt (3.0) }"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,74, else if (minPoints <= 3) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,75,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,76," 5.0 / 9.0, -Math.sqrt (0.6) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,77," 8.0 / 9.0,             0.0  },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,78," 5.0 / 9.0,  Math.sqrt (0.6) }"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,80, else if (minPoints <= 4) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,81,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,82," (90.0 - 5.0 * Math.sqrt (30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,83,"Math.sqrt ((15.0 + 2.0 * Math.sqrt (30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,84," (90.0 + 5.0 * Math.sqrt (30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,85,"Math.sqrt ((15.0 - 2.0 * Math.sqrt (30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,86," (90.0 + 5.0 * Math.sqrt (30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,87,"ath.sqrt ((15.0 - 2.0 * Math.sqrt (30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,88," (90.0 - 5.0 * Math.sqrt (30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,89,ath.sqrt ((15.0 + 2.0 * Math.sqrt (30.0)) / 35.0) }
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,91, else {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,92,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,93," (322.0 - 13.0 * Math.sqrt (70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,94,"Math.sqrt ((35.0 + 2.0 * Math.sqrt (70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,95," (322.0 + 13.0 * Math.sqrt (70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,96,"Math.sqrt ((35.0 - 2.0 * Math.sqrt (70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,97," 128.0 / 225.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,98,".0 },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,99," (322.0 + 13.0 * Math.sqrt (70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,100,"ath.sqrt ((35.0 - 2.0 * Math.sqrt (70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,101," (322.0 - 13.0 * Math.sqrt (70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,102,ath.sqrt ((35.0 + 2.0 * Math.sqrt (70.0)) / 63.0) }
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,106,his.rawStep = rawStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,110,** Get the number of functions evaluation per step.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,111, @return number of function evaluation per step
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,113,ublic int getEvaluationsPerStep() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,114,eturn weightedRoots.length;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,117,"ublic double[] integrate(ComputableFunction f, double a, double b)"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,118,hrows FunctionException {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,120,/ swap the integration bounds if they are not in ascending order
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,121,f (b < a) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,122,ouble tmp = b;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,123,          = a;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,124,          = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,127,/ adjust the integration step according to the bounds
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,128,ong   n     = Math.round(0.5 + (b - a) / rawStep);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,129,ouble step  = (b - a) / n;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,131,/ integrate over all elementary steps
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,132,ouble halfStep = step / 2.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,133,ouble midPoint = a + halfStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,135,ouble[] sum = new double[f.getDimension()];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,136,or (int k = 0; k < sum.length; ++k) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,137,um[k] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,140,or (long i = 0; i < n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,141,or (int j = 0; j < weightedRoots.length; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,142,ouble[] value = f.valueAt(midPoint + halfStep * weightedRoots[j][1]);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,143,or (int k = 0; k < sum.length; ++k) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,144,um[k] += weightedRoots[j][0] * value[k];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,147,idPoint += step;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,150,or (int k = 0; k < sum.length; ++k) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,151,um [k] *= halfStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,154,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,158,ouble[][] weightedRoots;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegrator.java,160,ouble rawStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,22,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,24,** This class implements a Riemann integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,26, <p>A Riemann integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,36, @see TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,43,ublic class RiemannIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,44,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,46,ublic double[] integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,47,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,49,iemannIntegratorSampler sampler = new RiemannIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,50,ouble[] sum = null;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,52,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,53,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,54,um = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,56, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,59,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.vectorial.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,24,** This class implements a Riemann integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,26, <p>A Riemann integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,36, @see RiemannIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,43,ublic class RiemannIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,44,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,46,** Underlying sample iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,47,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,49,** Current point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,50,rivate VectorialValuedPair current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,52,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,53,rivate double[] sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,55,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,56, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,57, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,59,ublic RiemannIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,60,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,62,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,64,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,65,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,67,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,68,um = new double[iter.getDimension()];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,69,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,70,um[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,75,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,76,eturn iter.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,79,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,80,eturn iter.getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,83,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,84,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,86,/ performs one step of a Riemann scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,87,ectorialValuedPair previous = current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,88,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,89,ouble step =  (current.x - previous.x);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,90,ouble[] pY = previous.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,91,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,92,um[i] += step * pY[i];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,95,"eturn new VectorialValuedPair (current.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,20,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,24,** This interface represents an integrator for vectorial samples.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,26, <p>The classes which are devoted to integrate vectorial samples
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,27, should implement this interface.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,29, @see org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,30, @see ComputableFunctionIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,33, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,37,ublic interface SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,39,** Integrate a sample over its overall range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,40, @param iter iterator over the sample to integrate
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,41, @return value of the integral over the sample range
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,42, @exception ExhaustedSampleException if the sample does not have
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,43, enough points for the integration scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,44, @exception FunctionException if the underlying sampled function throws one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,46,ublic double[] integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/SampledFunctionIntegrator.java,47,"hrows ExhaustedSampleException, FunctionException;"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,22,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,24,** This class implements a trapezoid integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,26, <p>A trapezoid integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,27, function is linear over the integration step.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,29, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,30, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,34,ublic class TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,35,mplements SampledFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,36,ublic double[] integrate(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,37,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,39,rapezoidIntegratorSampler sampler =
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,40,ew TrapezoidIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,41,ouble[] sum = null;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,43,ry {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,44,hile (true) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,45,um = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,47, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,50,eturn sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,20,mport org.spaceroots.mantissa.functions.vectorial.*;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,22,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,24,** This class implements a trapezoid integrator as a sample.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,26, <p>A trapezoid integrator is a very simple one that assumes the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,27, function is constant over the integration step. Since it is very
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,28," simple, this algorithm needs very small steps to achieve high"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,29," accuracy, and small steps lead to numerical errors and"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,30, instabilities.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,32, <p>This algorithm is almost never used and has been included in
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,33, this package only as a simple template for more useful
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,34, integrators.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,36, @see TrapezoidIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,43,ublic class TrapezoidIntegratorSampler
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,44,mplements SampledFunctionIterator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,46,** Underlying sample iterator. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,47,rivate SampledFunctionIterator iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,49,** Current point. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,50,rivate VectorialValuedPair current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,52,** Current running sum. */
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,53,rivate double[] sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,55,** Constructor.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,56, Build an integrator from an underlying sample iterator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,57, @param iter iterator over the base function
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,59,ublic TrapezoidIntegratorSampler(SampledFunctionIterator iter)
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,60,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,62,his.iter = iter;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,64,/ get the first point
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,65,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,67,/ initialize the sum
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,68,um = new double[iter.getDimension()];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,69,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,70,um[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,75,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,76,eturn iter.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,79,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,80,eturn iter.getDimension();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,83,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,84,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,86,/ performs one step of a trapezoid scheme
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,87,ectorialValuedPair previous = current;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,88,urrent = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,90,ouble halfDx = 0.5 * (current.x - previous.x);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,91,ouble[] pY = previous.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,92,ouble[] cY = current.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,93,or (int i = 0; i < sum.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,94,um[i] += halfDx * (pY[i] + cY[i]);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,97,"eturn new VectorialValuedPair (current.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,20,** This class compute basic statistics on a scalar sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,21, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,22, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,24,ublic class ScalarSampleStatistics {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,26,** Number of sample points. */
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,27,rivate int n;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,29,** Minimal value in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,30,rivate double min;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,32,** Maximal value in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,33,rivate double max;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,35,** Sum of the sample values. */
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,36,rivate double sum;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,38,** Sum of the squares of the sample values. */
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,39,rivate double sum2;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,41,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,42, Build a new empty instance
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,44,ublic ScalarSampleStatistics() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,45,    = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,46,in  = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,47,ax  = min;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,48,um  = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,49,um2 = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,52,** Add one point to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,53, @param x value of the sample point
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,55,ublic void add(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,57,f (n++ == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,58,in  = x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,59,ax  = x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,60,um  = x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,61,um2 = x * x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,62, else {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,64,f (x < min) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,65,in = x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,66, else if (x > max) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,67,ax = x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,70,um  += x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,71,um2 += x * x;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,77,** Add all points of an array to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,78, @param points array of points
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,80,ublic void add(double[] points) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,81,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,82,dd(points[i]);
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,86,** Add all the points of another sample to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,87, @param s sample to add
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,89,ublic void add(ScalarSampleStatistics s) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,91,f (s.n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,92,/ nothing to add
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,93,eturn;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,96,f (n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,97,    = s.n;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,98,in  = s.min;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,99,ax  = s.max;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,100,um  = s.sum;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,101,um2 = s.sum2;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,102, else {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,104, += s.n;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,106,f (s.min < min) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,107,in = s.min;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,108, else if (s.max > max) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,109,ax = s.max;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,112,um  += s.sum;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,113,um2 += s.sum2;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,119,** Get the number of points in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,120, @return number of points in the sample
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,122,ublic int size() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,123,eturn n;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,126,** Get the minimal value in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,127, @return minimal value in the sample
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,129,ublic double getMin() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,130,eturn min;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,133,** Get the maximal value in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,134, @return maximal value in the sample
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,136,ublic double getMax() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,137,eturn max;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,140,** Get the mean value of the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,141, @return mean value of the sample
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,143,ublic double getMean() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,144,eturn (n == 0) ? 0 : (sum / n);
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,147,** Get the standard deviation of the underlying probability law.
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,148, This method estimate the standard deviation considering that the
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,149, data available are only a <em>sample</em> of all possible
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,150, values. This value is often called the sample standard deviation
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,151, (as opposed to the population standard deviation).
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,152, @return standard deviation of the underlying probability law
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,154,ublic double getStandardDeviation() {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,155,f (n < 2) {
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,156,eturn 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/ScalarSampleStatistics.java,158,eturn Math.sqrt((n * sum2 - sum * sum) / (n * (n - 1)));
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,20,mport org.spaceroots.mantissa.linalg.SymetricalMatrix;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,22,** This class compute basic statistics on a scalar sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,23, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,24, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,26,ublic class VectorialSampleStatistics {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,28,** Dimension of the vectors to handle. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,29,rivate int dimension;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,31,** Number of sample points. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,32,rivate int n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,34,** Indices of the minimal values occurrence in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,35,rivate int[] minIndices;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,37,** Minimal value in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,38,rivate double[] min;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,40,** Maximal value in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,41,rivate double[] max;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,43,** Indices of the maximal values occurrence in the sample. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,44,rivate int[] maxIndices;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,46,** Sum of the sample values. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,47,rivate double[] sum;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,49,** Sum of the squares of the sample values. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,50,rivate double[] sum2;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,52,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,53, Build a new empty instance
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,55,ublic VectorialSampleStatistics() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,56,imension  = -1;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,57,          = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,58,in        = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,59,inIndices = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,60,ax        = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,61,axIndices = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,62,um        = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,63,um2       = null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,66,** Add one point to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,67, @param x value of the sample point
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,68, @exception IllegalArgumentException if there is a dimension
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,69, mismatch between this point and the ones already added (this
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,70, cannot happen when the instance is empty)
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,72,ublic void add(double[] x) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,74,f (n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,76,imension  = x.length;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,77,inIndices = new int[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,78,axIndices = new int[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,79,in        = (double[]) x.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,80,ax        = (double[]) x.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,81,um        = (double[]) x.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,82,um2       = new double[dimension * (dimension + 1) / 2];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,84,nt k = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,85,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,86,or (int j = 0; j <= i; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,87,um2[k++] = x[i] * x[j];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,91, else {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,92,nt k = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,93,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,95,f (x[i] < min[i]) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,96,in[i]        = x[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,97,inIndices[i] = n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,98, else if (x[i] > max[i]) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,99,ax[i]        = x[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,100,axIndices[i] = n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,103,um[i] += x[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,104,or (int j = 0; j <= i; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,105,um2[k++] += x[i] * x[j];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,111,+n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,115,** Add all points of an array to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,116, @param points array of points
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,117, @exception IllegalArgumentException if there is a dimension
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,118, mismatch between these points and the ones already added (this
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,119, cannot happen when the instance is empty)
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,121,ublic void add(double[][] points) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,122,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,123,dd(points[i]);
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,127,** Add all the points of another sample to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,128, @param s samples to add
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,129, @exception IllegalArgumentException if there is a dimension
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,130, mismatch between this sample points and the ones already added
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,131, (this cannot happen when the instance is empty)
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,133,ublic void add(VectorialSampleStatistics s) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,135,f (s.n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,136,/ nothing to add
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,137,eturn;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,140,f (n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,142,imension = s.dimension;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,143,in        = (double[]) s.min.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,144,inIndices = (int[])    s.minIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,145,ax        = (double[]) s.max.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,146,axIndices = (int[])    s.maxIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,147,um        = (double[]) s.sum.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,148,um2       = (double[]) s.sum2.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,150, else {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,151,nt k = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,153,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,155,f (s.min[i] < min[i]) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,156,in[i]        = s.min[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,157,inIndices[i] = n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,158, else if (s.max[i] > max[i]) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,159,ax[i]        = s.max[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,160,axIndices[i] = n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,163,um[i] += s.sum[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,164,or (int j = 0; j <= i; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,165,um2[k] += s.sum2[k];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,166,+k;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,173, += s.n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,177,** Get the number of points in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,178, @return number of points in the sample
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,180,ublic int size() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,181,eturn n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,184,** Get the minimal value in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,185, <p>Since all components of the sample vector can reach their
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,186," minimal value at different times, this vector should be"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,187, considered as gathering all minimas of all components. The index
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,188, of the sample at which the minimum was encountered can be
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,189, retrieved with the {@link #getMinIndices getMinIndices}
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,190, method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,191, @return minimal value in the sample (a new array is created
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,192," at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,193, @see #getMinIndices
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,195,ublic double[] getMin() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,196,eturn (double[]) min.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,199,** Get the indices at which the minimal value occurred in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,200, @return a vector reporting at which occurrence each component of
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,201, the sample reached its minimal value (a new array is created
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,202," at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,203, @see #getMin
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,205,ublic int[] getMinIndices() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,206,eturn (int[]) minIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,209,** Get the maximal value in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,210, <p>Since all components of the sample vector can reach their
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,211," maximal value at different times, this vector should be"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,212, considered as gathering all maximas of all components. The index
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,213, of the sample at which the maximum was encountered can be
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,214, retrieved with the {@link #getMaxIndices getMaxIndices}
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,215, method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,216, @return maximal value in the sample (a new array is created
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,217," at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,218, @see #getMaxIndices
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,220,ublic double[] getMax() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,221,eturn (double[]) max.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,224,** Get the indices at which the maximal value occurred in the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,225, @return a vector reporting at which occurrence each component of
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,226, the sample reached its maximal value (a new array is created
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,227," at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,228, @see #getMax
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,230,ublic int[] getMaxIndices() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,231,eturn (int[]) maxIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,234,** Get the mean value of the sample.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,235, @return mean value of the sample or an empty array
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,236, if the sample is empty (a new array is created
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,237," at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,239,ublic double[] getMean() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,240,f (n == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,241,eturn new double[0];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,243,ouble[] mean = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,244,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,245,ean[i] = sum[i] / n;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,247,eturn mean;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,250,** Get the covariance matrix of the underlying law.
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,251, This method estimate the covariance matrix considering that the
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,252, data available are only a <em>sample</em> of all possible
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,253, values. This value is the sample covariance matrix (as opposed
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,254, to the population covariance matrix).
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,255," @param covariance placeholder where to store the matrix, if null"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,256, a new matrix will be allocated
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,257, @return covariance matrix of the underlying or null if the
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,258, sample has less than 2 points (reference to covariance if it was
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,259," non-null, reference to a new matrix otherwise)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,261,ublic SymetricalMatrix getCovarianceMatrix(SymetricalMatrix covariance) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,263,f (n < 2) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,264,eturn null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,267,f (covariance == null) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,268,ovariance = new SymetricalMatrix(dimension);
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,271,ouble c = 1.0 / (n * (n - 1));
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,272,nt k = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,273,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,274,or (int j = 0; j <= i; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,275,ouble e = c * (n * sum2[k] - sum[i] * sum[j]);
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,276,"ovariance.setElementAndSymetricalElement(i, j, e);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,277,+k;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,281,eturn covariance;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,23,** This class implements the Brent algorithm to compute the roots of
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,24, a function in an interval.
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,26, This class is basically a translation in Java of a fortran
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,27, implementation found at netlib (<a
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,28," href=""http://www.netlib.org/fmm/zeroin.f"">zeroin.f</a>)."
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,30, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,31, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,35,ublic class BrentSolver implements RootsFinder {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,37,** IEEE 754 epsilon . */
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,38,"rivate static final double epsilon = Math.pow(2.0, -52);"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,40,** Root found. */
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,41,rivate double root;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,43,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,44, Build a Brent solver
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,46,ublic BrentSolver() {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,47,oot = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,50,** Solve a function in a given interval known to contain a root.
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,51, @param function function for which a root should be found
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,52, @param checker checker for the convergence of the function
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,53, @param maxIter maximal number of iteration allowed
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,54, @param x0 abscissa of the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,55, @param f0 value of the function the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,56, @param x1 abscissa of the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,57, @param f1 value of the function the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,58, @return true if a root has been found in the given interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,60,"ublic boolean findRoot(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,61,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,62,"nt maxIter,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,63,"ouble x0, double f0, double x1, double f1)"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,64,hrows FunctionException {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,66,ouble a  = x0;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,67,ouble fa = f0;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,68,ouble b  = x1;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,69,ouble fb = f1;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,71,ouble c  = a;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,72,ouble fc = fa;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,74,ouble d  = b - a;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,75,ouble e  = d;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,77,ouble tolS;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,78,or (int iter = 0; iter < maxIter; ++iter) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,80,f (Math.abs(fc) < Math.abs(fb)) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,81,/ invert points
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,82,  = b;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,83,  = c;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,84,  = a;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,85,a = fb;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,86,b = fc;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,87,c = fa;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,90,olS = 2 * epsilon * Math.abs(b);
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,91,ouble xm = 0.5 * (c - b);
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,93,/ convergence test
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,94,"ouble xLow, fLow, xHigh, fHigh;"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,95,f (b < c) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,96,Low   = b;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,97,Low   = fb;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,98,High  = c;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,99,High  = fc;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,100, else {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,101,Low   = c;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,102,Low   = fc;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,103,High  = b;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,104,High  = fb;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,107,"witch (checker.converged(xLow, fLow, xHigh, fHigh)) {"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,108,ase ConvergenceChecker.LOW :
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,109,oot = xLow;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,110,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,111,ase ConvergenceChecker.HIGH :
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,112,oot = xHigh;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,113,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,114,efault :
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,115,f ((Math.abs(xm) < tolS) || (Math.abs(fb) < Double.MIN_VALUE)) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,116,oot = b;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,117,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,121,f ((Math.abs(e) < tolS) || (Math.abs(fa) <= Math.abs(fb))) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,122,/ use bisection method
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,123, = xm;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,124, = d;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,125, else {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,126,/ use secant method
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,127,"ouble p, q, r, s;"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,128, = fb / fa;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,129,"f (Math.abs(a - c) < epsilon * Math.max(Math.abs(a), Math.abs(c))) {"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,130,/ linear interpolation using only b and c points
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,131, = 2.0 * xm * s;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,132, = 1.0 - s;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,133, else {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,134,"/ inverse quadratic interpolation using a, b and c points"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,135, = fa / fc;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,136, = fb / fc;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,137, = s * (2.0 * xm * q * (q - r) - (b - a) * (r - 1.0));
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,138, = (q - 1.0) * (r - 1.0) * (s - 1.0);
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,141,/ signs adjustment
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,142,f (p > 0.0) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,143, = -q;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,144, else {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,145, = -p;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,148,/ is interpolation acceptable ?
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,149,f (((2.0 * p) < (3.0 * xm * q - Math.abs(tolS * q)))
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,151,p < Math.abs(0.5 * e * q))) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,152, = d;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,153, = p / q;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,154, else {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,155,"/ no, we need to fall back to bisection"
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,156, = xm;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,157, = d;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,161,/ complete step
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,162,  = b;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,163,a = fb;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,164, += ((Math.abs(d) > tolS) ? d : (xm > 0.0 ? tolS : -tolS));
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,165,b = function.valueAt(b);
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,167,f (fb * fc > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,168,  = a;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,169,c = fa;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,170,  = b - a;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,171,  = d;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,176,/ we have exceeded the maximal number of iterations
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,177,eturn false;
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,181,** Get the abscissa of the root.
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,182, @return abscissa of the root
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,184,ublic double getRoot() {
False,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,src/mantissa/src/org/spaceroots/mantissa/roots/BrentSolver.java,185,eturn root;
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,20,** This interface specifies methods to check if a root-finding
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,21, algorithm has converged.
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,23, Deciding if convergence has been reached is a problem-dependent
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,24, issue. The user should provide a class implementing this interface
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,25, to allow the root-finding algorithm to stop its search according to
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,26, the problem at hand.
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,33,ublic interface ConvergenceChecker {
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,35,** Indicator for no convergence. */
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,36,ublic static final int NONE = 0;
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,38,** Indicator for convergence on the lower bound of the interval. */
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,39,ublic static final int LOW  = 1;
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,41,** Indicator for convergence on the higher bound of the interval. */
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,42,ublic static final int HIGH = 2;
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,44,** Check if the root-finding algorithm has converged on the interval.
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,45, The interval defined by the arguments contains one root (if there
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,46, was at least one in the initial interval given by the user to the
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,47," root-finding algorithm, of course)"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,48, @param xLow abscissa of the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,49, @param fLow value of the function the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,50, @param xHigh abscissa of the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,51, @param fHigh value of the function the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,52," @return convergence indicator, must be one of {@link #NONE},"
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,53, {@link #LOW} or {@link #HIGH}
False,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,src/mantissa/src/org/spaceroots/mantissa/roots/ConvergenceChecker.java,55,"ublic int converged (double xLow, double fLow, double xHigh, double fHigh);"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,23,** This interface specifies root-finding methods for scalar
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,24, functions.
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,26, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,27, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,31,ublic interface RootsFinder {
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,33,** Solve a function in a given interval known to contain a root.
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,34, @param function function for which a root should be found
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,35, @param checker checker for the convergence of the function
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,36, @param maxIter maximal number of iteration allowed
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,37, @param x0 abscissa of the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,38, @param f0 value of the function the lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,39, @param x1 abscissa of the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,40, @param f1 value of the function the higher bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,41, @return true if a root has been found in the given interval
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,43,"ublic boolean findRoot(ComputableFunction function,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,44,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,45,"nt maxIter,"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,46,"ouble x0, double f0, double x1, double f1)"
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,47,hrows FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,49,** Get the abscissa of the root.
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,50, @return abscissa of the root
False,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,src/mantissa/src/org/spaceroots/mantissa/roots/RootsFinder.java,52,ublic double getRoot();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,21,mport java.util.Iterator;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,24, This class dispatch data between an array and several domain objects.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,26, This class handles all the burden of mapping each domain object it
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,27, handles to a slice of a single array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,29, @see ArraySliceMappable
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,31, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,32, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,36,ublic class ArrayMapper {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,38,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,39, Build an empty array mapper
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,41,ublic ArrayMapper() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,42,omainObjects = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,43,ize          = 0;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,44,nternalData  = null;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,47,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,48, Build an array mapper managing one object. Other objects can be
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,49, added later using the {@link #manageMappable manageMappable}
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,50, method. This call is equivalent to build the mapper with the
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,51, default constructor and adding the object.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,52, @param object domain object to handle
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,54,ublic ArrayMapper(ArraySliceMappable object) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,56,omainObjects = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,57,"omainObjects.add(new ArrayMapperEntry(object, 0));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,59,ize = object.getStateDimension();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,61,nternalData = new double [size];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,65,** Take a new domain object into account.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,66, @param object domain object to handle
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,68,ublic void manageMappable(ArraySliceMappable object) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,70,"omainObjects.add(new ArrayMapperEntry(object, size));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,72,ize += object.getStateDimension();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,74,f (internalData != null) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,75,nternalData = new double [size];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,80,** Get the data array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,81, @return copy of the data array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,83,ublic double[] getDataArray() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,84,f (internalData == null) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,85,nternalData = new double [size];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,87,eturn (double[]) internalData.clone();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,90,** Map data from the internal array to the domain objects.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,92,ublic void updateObjects() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,93,f (internalData == null) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,94,nternalData = new double [size];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,96,pdateObjects(internalData);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,99,** Map data from the specified array to the domain objects.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,100, @param data flat array holding the data to dispatch
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,102,ublic void updateObjects(double[] data) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,103,or (Iterator iter = domainObjects.iterator(); iter.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,104,rrayMapperEntry entry = (ArrayMapperEntry) iter.next();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,105,"ntry.object.mapStateFromArray(entry.offset, data);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,109,** Map data from the domain objects to the internal array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,111,ublic void updateArray() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,112,f (internalData == null) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,113,nternalData = new double [size];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,115,pdateArray(internalData);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,118,** Map data from the domain objects to the specified array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,119, @param data flat array where to put the data
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,121,ublic void updateArray(double[] data) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,122,or (Iterator iter = domainObjects.iterator(); iter.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,123,rrayMapperEntry entry = (ArrayMapperEntry) iter.next();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,124,"ntry.object.mapStateToArray(entry.offset, data);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,128,** Container for all handled objects. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,129,rivate ArrayList domainObjects;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,131,** Total number of scalar elements handled.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,132, (size of the array)
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,134,rivate int size;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,136,** Flat array holding all data.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,137, This is null as long as nobody uses it (lazy creation)
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,139,rivate double[] internalData;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,21, This class is a simple container for an offset and an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,22, {@link ArraySliceMappable} object.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,29,lass ArrayMapperEntry {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,31,** Mappable object. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,32,ublic final ArraySliceMappable object;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,34,** Offset from start of array. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,35,ublic final int offset;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,37,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,38, @param object mappable object
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,39, @param offset offset from start of array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,41,"ublic ArrayMapperEntry(ArraySliceMappable object, int offset) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,42,his.object = object;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapperEntry.java,43,his.offset = offset;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,20,** This interface is used to map objects to and from simple arrays.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,22, <p> Lots of mathematical algorithms are generic ones which can
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,23, process the data from domain objects despite they ignore what
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,24," this data represent. As an example, the same algorithm can"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,25, integrate either the orbit evolution of a spacecraft under a
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,26, specified force model or the electrical characteristics of a
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,27, circuit after a switch is opened.  </p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,29, <p> The approach of the Mantissa library is to define an interface
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,30, for each such algorithm to represent the type of problem they can
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,31, handle ({@link
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,32, org.spaceroots.mantissa.ode.FirstOrderDifferentialEquations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,33," FirstOrderDifferentialEquations} for an ODE integrators, {@link"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,34, org.spaceroots.mantissa.estimation.EstimationProblem
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,35," EstimationProblem} for least squares estimators, ...). Furthermore,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,36, the state data that is handled by these algorithms is often a
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,37," mixture of data coming from several domain objects (the orbit,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,38," plus the aerodynamical coefficients of the spacecraft, plus the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,39," characteristics of the thrusters, plus ...). Therefore, the user"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,40, needs to gather and dispatch data between different objects
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,41, representing different levels of abstraction.  </p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,43, <p> This interface is designed to copy data back and forth between
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,44, existing objects during the iterative processing of these
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,45, algorithms and avoid the cost of recreating the objects.  </p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,47, <p> The nominal way to use this interface is to have the domain
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,48, objects implement it (either directly or using inheritance to add
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,49, this feature to already existing objects) and to create one class
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,50, that implements the problem interface (for example {@link
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,51, org.spaceroots.mantissa.ode.FirstOrderDifferentialEquations}) and
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,52, uses the {@link ArrayMapper} class to dispatch the data to and from
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,53, the domain objects.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,55, @see ArrayMapper
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,57, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,58, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,62,ublic interface ArraySliceMappable {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,64,** Get the dimension of the object.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,65, @return dimension of the object
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,67,ublic int getStateDimension();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,69,** Reinitialize internal state from the specified array slice data.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,70, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,71, @param array array holding the data to extract
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,73,"ublic void mapStateFromArray(int start, double[] array);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,75,** Store internal state data into the specified array slice.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,76, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,77, @param array array where data should be stored
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArraySliceMappable.java,79,"ublic void mapStateToArray(int start, double[] array);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,20,** This class represents an interval on the real line.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,22, <p>This class allows to perform simple interval operations like
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,23, point inclusion tests and intersection operations.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,25, <p>There is no distinction between open and closed intervals
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,26, because real numbers cannot be represented exactly.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,28, @see IntervalsList
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,29, @author Luc Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,30, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,32,ublic class Interval {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,34,"** Build the [0, 0] interval."
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,36,ublic Interval() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,37,nf = 0;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,38,up = 0;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,41,** Build an interval with the given bounds.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,42," <p>The given bounds do not need to be ordered, they will be"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,43, reordered by the constructor.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,44, @param a first bound
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,45, @param b second bound
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,47,"ublic Interval(double a, double b) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,48,f (a <= b) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,49,nf = a;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,50,up = b;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,51, else {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,52,nf = b;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,53,up = a;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,57,** Copy-constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,58, @param i interval to copy
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,60,ublic Interval(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,61,nf = i.inf;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,62,up = i.sup;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,65,** Get the lower bound of the interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,66, @return lower bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,68,ublic double getInf() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,69,eturn inf;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,72,** Get the upper bound of the interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,73, @return upper bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,75,ublic double getSup() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,76,eturn sup;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,79,** Get the length of the interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,80, @return length of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,82,ublic double getLength() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,83,eturn sup - inf;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,86,** Check if the interval contains a point.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,87, @param x point to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,88, @return true if the interval contains x
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,90,ublic boolean contains(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,91,eturn (inf <= x) && (x <= sup);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,94,** Check if the interval contains another interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,95, @param i interval to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,96, @return true if i is completely included in the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,98,ublic boolean contains(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,99,eturn (inf <= i.inf) && (i.sup <= sup);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,102,** Check if an interval intersects the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,103, @param i interval to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,104, @return true if i intersects the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,106,ublic boolean intersects(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,107,eturn (inf <= i.sup) && (i.inf <= sup);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,110,** Add an interval to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,111, <p>This method expands the instance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,112, <p>This operation is <strong>not</strong> a union operation. If
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,113, the instance and the interval are disjoints (i.e. if {@link
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,114," #intersects intersects(i)} would return <code>false</code>), then"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,115, the hole between the intervals is filled in.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,116, @param i interval to add to the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,118,ublic void addToSelf(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,119,"nf = Math.min(inf, i.inf);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,120,"up = Math.max(sup, i.sup);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,123,** Add two intervals.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,124, <p>This operation is <strong>not</strong> a union operation. If
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,125, the intervals are disjoints (i.e. if {@link
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,126," #intersects i1.intersects(i2)} would return <code>false</code>), then"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,127, the hole between the intervals is filled in.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,128, @param i1 first interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,129, @param i2 second interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,130, @return a new interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,132,"ublic static Interval add(Interval i1, Interval i2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,133,nterval copy = new Interval(i1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,134,opy.addToSelf(i2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,135,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,138,** Intersects the instance with an interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,139," <p>This method reduces the instance, it could even become empty"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,140, if the interval does not intersects the instance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,141, @param i interval with which the instance should be intersected
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,143,ublic void intersectSelf(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,144,"nf = Math.max(inf, i.inf);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,145,"up = Math.max(Math.min(sup, i.sup), inf);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,148,** Intersect two intervals.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,149, @param i1 first interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,150, @param i2 second interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,151, @return a new interval which is the intersection of i1 with i2
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,153,"ublic static Interval intersection(Interval i1, Interval i2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,154,nterval copy = new Interval(i1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,155,opy.intersectSelf(i2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,156,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,159,** Lower bound of the interval. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,160,rivate double inf;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,162,** Upper bound of the interval. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,src/mantissa/src/org/spaceroots/mantissa/utilities/Interval.java,163,rivate double sup;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,21,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,22,mport java.util.Iterator;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,24,** This class represents an intervals list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,25, <p>An interval list represent a list of contiguous regions on the
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,26," real line. All intervals of the list are disjoints to each other,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,27, they are stored in ascending order.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,28, <p>The class supports the main set operations like union and
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,29, intersection.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,30, @see Interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,31, @author Luc Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,32, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,34,ublic class IntervalsList {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,36,** Build an empty intervals list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,38,ublic IntervalsList() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,39,ntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,42,** Build an intervals list containing only one interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,43, @param a first bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,44, @param b second bound of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,46,"ublic IntervalsList(double a, double b) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,47,ntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,48,"ntervals.add(new Interval(a, b));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,51,** Build an intervals list containing only one interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,52, @param i interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,54,ublic IntervalsList(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,55,ntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,56,ntervals.add(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,59,** Build an intervals list containing two intervals.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,60, @param i1 first interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,61, @param i2 second interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,63,"ublic IntervalsList(Interval i1, Interval i2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,64,ntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,65,f (i1.intersects(i2)) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,66,"ntervals.add(new Interval(Math.min(i1.getInf(), i2.getInf()),"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,67,"ath.max(i1.getSup(), i2.getSup())));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,68, else  if (i1.getSup () < i2.getInf()) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,69,ntervals.add(i1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,70,ntervals.add(i2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,71, else {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,72,ntervals.add(i2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,73,ntervals.add(i1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,77,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,78, <p>The copy operation is a deep copy: the underlying intervals
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,79, are independant of the instances of the copied list.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,80, @param list intervals list to copy
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,82,ublic IntervalsList(IntervalsList list) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,83,ntervals = new ArrayList(list.intervals.size());
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,84,or (Iterator iterator = list.intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,85,ntervals.add(new Interval((Interval) iterator.next()));
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,89,** Check if the instance is empty.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,90, @return true if the instance is empty
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,92,ublic boolean isEmpty() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,93,eturn intervals.isEmpty();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,96,** Check if the instance is connected.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,97, <p>An interval list is connected if it contains only one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,98, interval.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,99, @return true is the instance is connected
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,101,ublic boolean isConnex() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,102,eturn intervals.size() == 1;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,105,** Get the lower bound of the list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,106, @return lower bound of the list or Double.NaN if the list does
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,107, not contain any interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,109,ublic double getInf() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,110,eturn intervals.isEmpty()
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,111, Double.NaN : ((Interval) intervals.get(0)).getInf();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,114,** Get the upper bound of the list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,115, @return upper bound of the list or Double.NaN if the list does
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,116, not contain any interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,118,ublic double getSup() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,119,eturn intervals.isEmpty()
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,120, Double.NaN : ((Interval) intervals.get(intervals.size() - 1)).getSup();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,123,** Get the number of intervals of the list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,124, @return number of intervals in the list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,126,ublic int getSize() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,127,eturn intervals.size();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,130,** Get an interval from the list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,131, @param i index of the interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,132, @return interval at index i
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,134,ublic Interval getInterval(int i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,135,eturn (Interval) intervals.get(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,138,** Get the ordered list of disjoints intervals.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,139, @return list of disjoints intervals in ascending order
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,141,ublic List getIntervals() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,142,eturn intervals;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,145,** Check if the list contains a point.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,146, @param x point to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,147, @return true if the list contains x
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,149,ublic boolean contains(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,150,or (Iterator iterator = intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,151,f (((Interval) iterator.next()).contains(x)) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,152,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,155,eturn false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,158,** Check if the list contains an interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,159, @param i interval to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,160, @return true if i is completely included in the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,162,ublic boolean contains(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,163,or (Iterator iterator = intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,164,f (((Interval) iterator.next()).contains(i)) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,165,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,168,eturn false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,171,** Check if an interval intersects the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,172, @param i interval to check
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,173, @return true if i intersects the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,175,ublic boolean intersects(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,176,or (Iterator iterator = intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,177,f (((Interval) iterator.next()).intersects(i)) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,178,eturn true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,181,eturn false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,184,** Add an interval to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,185, <p>This method expands the instance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,186, <p>This operation is a union operation. The number of intervals
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,187, in the list can decrease if the interval fills some holes between
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,188, existing intervals in the list.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,189, @param i interval to add to the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,191,ublic void addToSelf(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,193,ist    newIntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,194,ouble  inf          = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,195,ouble  sup          = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,196,oolean pending      = false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,197,oolean processed    = false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,198,or (Iterator iterator = intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,199,nterval local = (Interval) iterator.next();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,201,f (local.getSup() < i.getInf()) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,202,ewIntervals.add(local);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,203, else if (local.getInf() < i.getSup()) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,204,f (! pending) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,205,"nf     = Math.min(local.getInf(), i.getInf());"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,206,ending   = true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,207,rocessed = true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,209,"up = Math.max(local.getSup(), i.getSup());"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,210, else {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,211,f (pending) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,212,"ewIntervals.add(new Interval(inf, sup));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,213,ending   = false;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,214, else if (! processed) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,215,ewIntervals.add(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,217,rocessed = true;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,218,ewIntervals.add(local);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,222,f (pending) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,223,"ewIntervals.add(new Interval(inf, sup));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,224, else if (! processed) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,225,ewIntervals.add(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,228,ntervals = newIntervals;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,232,** Add an intervals list and an interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,233, @param list intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,234, @param i interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,235, @return a new intervals list which is the union of list and i
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,237,"ublic static IntervalsList add(IntervalsList list, Interval i) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,238,ntervalsList copy = new IntervalsList(list);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,239,opy.addToSelf(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,240,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,243,** Remove an interval from the list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,244, <p>This method reduces the instance. This operation is defined in
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,245," terms of points set operation. As an example, if the [2, 3]"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,246," interval is subtracted from the list containing only the [0, 10]"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,247," interval, the result will be the [0, 2] U [3, 10] intervals"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,248, list.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,249, @param i interval to remove
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,251,ublic void subtractFromSelf(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,252,"ouble a = Math.min(getInf(), i.getInf());"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,253,"ouble b = Math.max(getSup(), i.getSup());"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,254,"ntersectSelf(new IntervalsList(new Interval(a - 1.0, i.getInf()),"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,255,"ew Interval(i.getSup(), b + 1.0)));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,258,** Remove an interval from a list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,259, @param list intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,260, @param i interval to remove
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,261, @return a new intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,263,"ublic static IntervalsList subtract(IntervalsList list, Interval i) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,264,ntervalsList copy = new IntervalsList(list);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,265,opy.subtractFromSelf(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,266,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,269,** Intersects the instance and an interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,270, @param i interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,272,ublic void intersectSelf(Interval i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,273,ist newIntervals = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,274,or (Iterator iterator = intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,275,nterval local = (Interval) iterator.next();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,276,f (local.intersects(i)) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,277,"ewIntervals.add(Interval.intersection(local, i));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,280,ntervals = newIntervals;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,283,** Intersect a list and an interval.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,284, @param list intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,285, @param i interval
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,286, @return the intersection of list and i
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,288,"ublic static IntervalsList intersection(IntervalsList list, Interval i) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,289,ntervalsList copy = new IntervalsList(list);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,290,opy.intersectSelf(i);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,291,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,294,** Add an intervals list to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,295, <p>This method expands the instance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,296, <p>This operation is a union operation. The number of intervals
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,297, in the list can decrease if the list fills some holes between
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,298, existing intervals in the instance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,299, @param list intervals list to add to the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,301,ublic void addToSelf(IntervalsList list) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,302,or (Iterator iterator = list.intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,303,ddToSelf((Interval) iterator.next());
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,307,** Add two intervals lists.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,308, @param list1 first intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,309, @param list2 second intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,310, @return a new intervals list which is the union of list1 and list2
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,312,"ublic static IntervalsList add(IntervalsList list1, IntervalsList list2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,313,ntervalsList copy = new IntervalsList(list1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,314,opy.addToSelf(list2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,315,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,318,** Remove an intervals list from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,319, @param list intervals list to remove
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,321,ublic void subtractFromSelf(IntervalsList list) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,322,or (Iterator iterator = list.intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,323,ubtractFromSelf((Interval) iterator.next());
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,327,** Remove an intervals list from another one.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,328, @param list1 intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,329, @param list2 intervals list to remove
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,330, @return a new intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,332,"ublic static IntervalsList subtract(IntervalsList list1, IntervalsList list2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,333,ntervalsList copy = new IntervalsList(list1);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,334,opy.subtractFromSelf(list2);
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,335,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,338,** Intersect the instance and another intervals list.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,339, @param list list to intersect with the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,341,ublic void intersectSelf(IntervalsList list) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,342,"ntervals = intersection(this, list).intervals;"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,345,** Intersect two intervals lists.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,346, @param list1 first intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,347, @param list2 second intervals list
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,348, @return a new list which is the intersection of list1 and list2
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,350,"ublic static IntervalsList intersection(IntervalsList list1, IntervalsList list2) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,351,ntervalsList list = new IntervalsList();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,352,or (Iterator iterator = list2.intervals.iterator(); iterator.hasNext();) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,353,"ist.addToSelf(intersection(list1, (Interval) iterator.next()));"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,355,eturn list;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,358,** The list of intervals. */
False,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,src/mantissa/src/org/spaceroots/mantissa/utilities/IntervalsList.java,359,rivate List intervals;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,21, Wrapper class around an array in order to have it implement the
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,22, {@link ArraySliceMappable} interface.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,29,ublic class MappableArray
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,30,mplements ArraySliceMappable {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,33, Build a mappable array from its dimension
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,34, @param dimension dimension of the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,36,ublic MappableArray(int dimension) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,37,nternalArray = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,38,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,39,nternalArray[i] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,43,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,44, Build a mappable array from an existing array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,45, @param array array to use
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,47,ublic MappableArray(double[] array) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,48,nternalArray = (double[]) array.clone();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,51,** Get the array stored in the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,52, @return array stored in the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,54,ublic double[] getArray () {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,55,eturn (double[]) internalArray.clone();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,58,** Get the dimension of the internal array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,59, @return dimension of the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,61,ublic int getStateDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,62,eturn internalArray.length;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,65,** Reinitialize internal state from the specified array slice data.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,66, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,67, @param array array holding the data to extract
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,69,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,70,"ystem.arraycopy(array, start, internalArray, 0, internalArray.length);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,73,** Store internal state data into the specified array slice.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,74, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,75, @param array array where data should be stored
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,77,"ublic void mapStateToArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,78,"ystem.arraycopy(internalArray, 0, array, start, internalArray.length);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,81,** Internal array holding all data.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,83,ouble[] internalArray;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,21, Wrapper class around a scalar in order to have it implement the
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,22, {@link ArraySliceMappable} interface.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,24, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,25, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,29,ublic class MappableScalar
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,30,mplements ArraySliceMappable {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,33, Build a mappable scalar
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,35,ublic MappableScalar() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,36,alue = 0;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,40, Build a mappable scalar from its initial value
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,41, @param value initial value of the scalar
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,43,ublic MappableScalar(double value) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,44,his.value = value;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,47,** Get the value stored in the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,48, @return value stored in the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,50,ublic double getValue () {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,51,eturn value;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,54,** Set the value stored in the instance.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,55, @param value value to store in the instance
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,57,ublic void setValue (double value) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,58,his.value = value;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,61,** Get the dimension of the internal array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,62, @return dimension of the array (always 1 for this class)
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,64,ublic int getStateDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,65,eturn 1;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,68,** Reinitialize internal state from the specified array slice data.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,69, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,70, @param array array holding the data to extract
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,72,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,73,alue = array[start];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,76,** Store internal state data into the specified array slice.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,77, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,78, @param array array where data should be stored
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,80,"ublic void mapStateToArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,81,rray[start] = value;
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,84,** Internal scalar.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableScalar.java,86,ouble value;
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,18,ackage org.spaceroots.mantissa;
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,25,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,27,"estSuite suite= new TestSuite(""org.spaceroots.mantissa"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,29,uite.addTest(org.spaceroots.mantissa.linalg.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,30,uite.addTest(org.spaceroots.mantissa.functions.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,31,uite.addTest(org.spaceroots.mantissa.roots.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,32,uite.addTest(org.spaceroots.mantissa.fitting.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,33,uite.addTest(org.spaceroots.mantissa.quadrature.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,34,uite.addTest(org.spaceroots.mantissa.utilities.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,35,uite.addTest(org.spaceroots.mantissa.algebra.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/AllTests.java,37,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.algebra"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,28,uite.addTest(RationalNumberTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,29,uite.addTest(PolynomialRationalTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,30,uite.addTest(PolynomialDoubleTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,31,uite.addTest(PolynomialFractionTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/AllTests.java,33,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,22,ublic class PolynomialDoubleTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,25,ublic PolynomialDoubleTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,29,ublic void testConstructors() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,31,"olynomial.Double p = new Polynomial.Double(1.0, 3.0, -5.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,32,ouble[] a = p.getCoefficients();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,33,"ssertEquals(a.length, 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,34,"ssertEquals(-5.0, a[0], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,35,"ssertEquals(3.0,  a[1], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,36,"ssertEquals(1.0,  a[2], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,37,"ssertEquals(p.getDegree(), 2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,39,"ssertEquals(1, new Polynomial.Double(0.0, 3.0, 5.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,40,"ssertEquals(0, new Polynomial.Double(0.0, 0.0, 5.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,41,"ssertEquals(0, new Polynomial.Double(0.0, 0.0, 0.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,42,"ssertEquals(1, new Polynomial.Double(3.0, 5.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,43,"ssertEquals(0, new Polynomial.Double(0.0, 5.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,44,"ssertEquals(0, new Polynomial.Double(0.0, 0.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,45,"ssertEquals(0, new Polynomial.Double(5.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,46,"ssertEquals(0, new Polynomial.Double(0.0).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,50,ublic void testConversion() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,51,"olynomial.Rational r = new Polynomial.Rational(1l, 3l, -5l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,52," = (Polynomial.Rational) r.multiply(new RationalNumber(1l, 2l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,53,olynomial.Double p = new Polynomial.Double(r);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,54,"heckPolynomial(p, ""-2.5 + 1.5 x + 0.5 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,57,ublic void testString() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,58,"olynomial.Double p = new Polynomial.Double(1.0, 3.0, -5.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,59,"heckPolynomial(p, ""-5.0 + 3.0 x + x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,60,"heckPolynomial(new Polynomial.Double(3.0, -2.0, 0.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,61,"-2.0 x + 3.0 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,62,"heckPolynomial(new Polynomial.Double(3.0, -2.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,63,"1.0 - 2.0 x + 3.0 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,64,"heckPolynomial(new Polynomial.Double(3.0,  2.0, 0.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,65,"2.0 x + 3.0 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,66,"heckPolynomial(new Polynomial.Double(3.0,  2.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,67,"1.0 + 2.0 x + 3.0 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,68,"heckPolynomial(new Polynomial.Double(3.0,  0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,69,"1.0 + 3.0 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,70,"heckPolynomial(new Polynomial.Double(0.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,71,"0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,74,ublic void testAddition() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,76,"olynomial.Double p1 = new Polynomial.Double(1.0, -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,77,"olynomial.Double p2 = new Polynomial.Double(0.0, -1.0, 2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,78,ssertTrue(p1.add(p2).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,80,2 = p1.add(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,81,"heckPolynomial(p2, ""-4.0 + 2.0 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,83,"1 = new Polynomial.Double(2.0, -4.0, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,84,"2 = new Polynomial.Double(-2.0, 3.0, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,85,1 = p1.add(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,86,"ssertEquals(1, p1.getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,87,"heckPolynomial(p1, ""-x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,91,ublic void testSubtraction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,93,"olynomial.Double p1 = new Polynomial.Double(1.0, -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,94,ssertTrue(p1.subtract(p1).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,96,"olynomial.Double p2 = new Polynomial.Double(6.0, -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,97,2 = p2.subtract(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,98,"heckPolynomial(p2, ""5.0 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,100,"1 = new Polynomial.Double(2.0, -4.0, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,101,"2 = new Polynomial.Double(2.0, 3.0, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,102,1 = p1.subtract(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,103,"ssertEquals(1, p1.getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,104,"heckPolynomial(p1, ""2.0 - 7.0 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,108,ublic void testMultiplication() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,110,"olynomial.Double p1 = new Polynomial.Double(2.0, -3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,111,"olynomial.Double p2 = new Polynomial.Double(1.0, 2.0, 3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,112,"heckPolynomial(p1.multiply(p2), ""-9.0 + x^2 + 2.0 x^3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,114,"1 = new Polynomial.Double(1.0, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,115,2 = p1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,116,or (int i = 2; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,117,2 = p2.multiply(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,118,"heckPolynomial(p2, ""x^"" + i);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,123,"ublic void checkPolynomial(Polynomial.Double p, String reference) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,124,"ssertEquals(reference, p.toString());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,127,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,128,eturn new TestSuite(PolynomialDoubleTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,22,ublic class PolynomialFractionTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,25,ublic PolynomialFractionTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,29,ublic void testNullDenominator() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,30,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,31,"ew PolynomialFraction(1l, 0l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,32,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,33, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,34, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,35,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,39,ublic void testToString() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,40,"heckValue(new PolynomialFraction(1l, 2l),  ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,41,"heckValue(new PolynomialFraction(-1l, 2l), ""-1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,42,"heckValue(new PolynomialFraction(1l, -2l), ""-1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,43,"heckValue(new PolynomialFraction(-1l, -2l), ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,44,"heckValue(new PolynomialFraction(0l, 500l), ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,45,"heckValue(new PolynomialFraction(-12l), ""-12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,46,"heckValue(new PolynomialFraction(12l), ""12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,49,ublic void testSimplification() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,50,"heckValue(new PolynomialFraction(2l, 4l), ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,51,"heckValue(new PolynomialFraction(307692l, 999999l), ""4/13"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,52,"heckValue(new PolynomialFraction(999999l, 307692l), ""13/4"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,55,ublic void testInvert() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,57,"olynomialFraction f = new PolynomialFraction(2l, 4l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,58,= f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,59,"heckValue(f, ""2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,60, = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,61,"heckValue(f, ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,63, = new PolynomialFraction(120l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,64, = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,65,"heckValue(f, ""1/120"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,67," = new PolynomialFraction(0l, 4l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,68,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,69, = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,70,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,71, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,72, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,73,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,76," = new PolynomialFraction(307692l, 999999l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,77,olynomialFraction fInverse = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,78,"heckValue(fInverse, ""13/4"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,79,"heckValue(f, ""4/13"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,83,ublic void testAddition() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,85,"olynomialFraction f1 = new PolynomialFraction(4l, 6l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,86,1 = f1.add(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,87,"heckValue(f1, ""4/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,89,"heckValue(new PolynomialFraction(17l, 3l).add(new PolynomialFraction(-17l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,90,"0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,91,"heckValue(new PolynomialFraction(2l, 3l).add(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,92,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,93,"heckValue(new PolynomialFraction(1l, 6l).add(new PolynomialFraction(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,94,"1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,95,"heckValue(new PolynomialFraction(4l, 5l).add(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,96,"1/20"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,97,"heckValue(new PolynomialFraction(-3l, 4l).add(new PolynomialFraction(4l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,98,"1/20"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,102,ublic void testSubtraction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,104,"olynomialFraction f1 = new PolynomialFraction(4l, 6l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,105,"heckValue(f1.subtract(f1), ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,107,"heckValue(new PolynomialFraction(7l, 3l).subtract(new PolynomialFraction(-7l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,108,"14/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,110,"heckValue(new PolynomialFraction(3l, 4l).subtract(new PolynomialFraction(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,111,"1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,112,"heckValue(new PolynomialFraction(3l, 4l).subtract(new PolynomialFraction(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,113,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,114,"heckValue(new PolynomialFraction(-3l, 4l).subtract(new PolynomialFraction(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,115,"-17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,116,"heckValue(new PolynomialFraction(-3l, 4l).subtract(new PolynomialFraction(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,117,"-1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,119,"heckValue(new PolynomialFraction(2l, 3l).subtract(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,120,"-1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,121,"heckValue(new PolynomialFraction(-2l, 3l).subtract(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,122,"-17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,123,"heckValue(new PolynomialFraction(2l, 3l).subtract(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,124,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,125,"heckValue(new PolynomialFraction(-2l, 3l).subtract(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,126,"1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,128,"heckValue(new PolynomialFraction(1l, 6l).subtract(new PolynomialFraction(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,129,"-1/6"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,130,"heckValue(new PolynomialFraction(1l, 2l).subtract(new PolynomialFraction(1l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,131,"1/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,135,ublic void testMultiplication() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,137,"olynomialFraction f = new PolynomialFraction(2l, 3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,138,"heckValue(f.multiply(new PolynomialFraction(9l,4l)), ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,140,"heckValue(new PolynomialFraction(1l, 2l).multiply(new PolynomialFraction(0l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,141,"0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,142,"heckValue(new PolynomialFraction(4l, 15l).multiply(new PolynomialFraction(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,143,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,144,"heckValue(new PolynomialFraction(-4l, 15l).multiply(new PolynomialFraction(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,145,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,146,"heckValue(new PolynomialFraction(4l, 15l).multiply(new PolynomialFraction(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,147,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,148,"heckValue(new PolynomialFraction(-4l, 15l).multiply(new PolynomialFraction(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,149,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,153,ublic void testDivision() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,155,"olynomialFraction f = new PolynomialFraction(2l, 3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,157,"heckValue(f.divide(new PolynomialFraction(4l,9l)), ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,159,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,160,"ew PolynomialFraction(1l, 2l).divide(new PolynomialFraction(0l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,161,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,162, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,163, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,164,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,167,"heckValue(new PolynomialFraction(4l, 15l).divide(new PolynomialFraction(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,168,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,169,"heckValue(new PolynomialFraction(-4l, 15l).divide(new PolynomialFraction(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,170,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,171,"heckValue(new PolynomialFraction(4l, 15l).divide(new PolynomialFraction(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,172,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,173,"heckValue(new PolynomialFraction(-4l, 15l).divide(new PolynomialFraction(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,174,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,178,ublic void testEuclidianDivision() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,179,"heckValue(new PolynomialFraction(new Polynomial.Rational(1l, 0l, -1l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,180,"ew Polynomial.Rational(2l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,181,"-1/2 + 1/2 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,182,"heckValue(new PolynomialFraction(new Polynomial.Rational(1l, 3l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,183,"ew Polynomial.Rational(2l, 10l, 12l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,184,"(1 + x)/(6 + 2 x)"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,187,"rivate void checkValue(PolynomialFraction f, String reference) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,188,ssertTrue(f.toString().equals(reference));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,191,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,192,eturn new TestSuite(PolynomialFractionTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,20,mport java.math.BigInteger;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,24,ublic class PolynomialRationalTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,27,ublic PolynomialRationalTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,31,ublic void testZero() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,32,ssertTrue(new Polynomial.Rational().isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,35,ublic void testConstructors() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,37,"olynomial.Rational p = new Polynomial.Rational(1l, 3l, -5l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,38,ationalNumber[]  a = p.getCoefficients();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,39,"ssertEquals(a.length, 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,40,"ssertEquals(new RationalNumber(-5l), a[0]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,41,"ssertEquals(new RationalNumber(3l), a[1]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,42,"ssertEquals(new RationalNumber(1l), a[2]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,43,"ssertEquals(2, p.getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,45,"ssertEquals(1, new Polynomial.Rational(0l, 3l, 5l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,46,"ssertEquals(0, new Polynomial.Rational(0l, 0l, 5l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,47,"ssertEquals(0, new Polynomial.Rational(0l, 0l, 0l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,48,"ssertEquals(1, new Polynomial.Rational(3l, 5l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,49,"ssertEquals(0, new Polynomial.Rational(0l, 5l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,50,"ssertEquals(0, new Polynomial.Rational(0l, 0l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,51,"ssertEquals(0, new Polynomial.Rational(5l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,52,"ssertEquals(0, new Polynomial.Rational(0l).getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,56,ublic void testString() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,58,"olynomial.Rational p = new Polynomial.Rational(1l, 3l, -5l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,59,"heckPolynomial(p, ""-5 + 3 x + x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,61,"heckPolynomial(new Polynomial.Rational(3l, -2l, 0l), ""-2 x + 3 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,62,"heckPolynomial(new Polynomial.Rational(3l, -2l, 1l), ""1 - 2 x + 3 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,63,"heckPolynomial(new Polynomial.Rational(3l,  2l, 0l), ""2 x + 3 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,64,"heckPolynomial(new Polynomial.Rational(3l,  2l, 1l), ""1 + 2 x + 3 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,65,"heckPolynomial(new Polynomial.Rational(3l,  0l, 1l), ""1 + 3 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,66,"heckPolynomial(new Polynomial.Rational(0l), ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,70,ublic void testAddition() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,72,"olynomial.Rational p1 = new Polynomial.Rational(1l, -2l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,73,"olynomial.Rational p2 = new Polynomial.Rational(0l, -1l, 2l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,74,ssertTrue(p1.add(p2).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,76,2 = p1.add(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,77,"heckPolynomial(p2, ""-4 + 2 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,79,"1 = new Polynomial.Rational(2l, -4l, 1l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,80,"2 = new Polynomial.Rational(-2l, 3l, -1l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,81,1 = p1.add(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,82,"ssertEquals(1, p1.getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,83,"heckPolynomial(p1, ""-x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,87,ublic void testSubtraction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,89,"olynomial.Rational p1 = new Polynomial.Rational(1l, -2l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,90,ssertTrue(p1.subtract(p1).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,92,"olynomial.Rational p2 = new Polynomial.Rational(6l, -2l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,93,2 = p2.subtract(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,94,"heckPolynomial(p2, ""5 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,96,"1 = new Polynomial.Rational(2l, -4l, 1l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,97,"2 = new Polynomial.Rational(2l, 3l, -1l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,98,1 = p1.subtract(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,99,"ssertEquals(1, p1.getDegree());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,100,"heckPolynomial(p1, ""2 - 7 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,104,ublic void testMultiplication() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,106,"olynomial.Rational p1 = new Polynomial.Rational(2l, -3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,107,"olynomial.Rational p2 = new Polynomial.Rational(1l, 2l, 3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,108,"heckPolynomial(p1.multiply(p2), ""-9 + x^2 + 2 x^3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,110,"1 = new Polynomial.Rational(1l, 0l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,111,2 = p1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,112,or (int i = 2; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,113,2 = p2.multiply(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,114,"heckPolynomial(p2, ""x^"" + i);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,119,ublic void testLCM() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,120,"olynomial.Rational p = new Polynomial.Rational(new RationalNumber(2l, 5l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,121,"ew RationalNumber(-1l, 6l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,122,"ew RationalNumber(3l, 4l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,123,"heckPolynomial(p, ""3/4 - 1/6 x + 2/5 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,124,igInteger lcm = p.getDenominatorsLCM();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,125,"ssertEquals(BigInteger.valueOf(60l), lcm);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,126, = (Polynomial.Rational) p.multiply(lcm);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,127,"heckPolynomial(p, ""45 - 10 x + 24 x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,130,ublic void testEuclidianDivision() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,131,"olynomial.Rational p = new Polynomial.Rational(4l, 6l, -3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,132,"olynomial.Rational q = new Polynomial.Rational(3l, 2l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,133,"olynomial.DivisionResult res = Polynomial.Rational.euclidianDivision(p, q);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,134,"heckPolynomial(res.quotient,  ""10/9 + 4/3 x"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,135,"heckPolynomial(res.remainder, ""-47/9"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,138,"ublic void checkPolynomial(Polynomial.Rational p, String reference) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,139,"ssertEquals(reference, p.toString());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,142,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,143,eturn new TestSuite(PolynomialRationalTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,18,ackage org.spaceroots.mantissa.algebra;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,22,ublic class RationalNumberTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,25,ublic RationalNumberTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,29,ublic void testNullDenominator() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,30,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,31,"ew RationalNumber(1l, 0l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,32,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,33, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,34, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,35,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,39,ublic void testToString() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,40,"heckValue(new RationalNumber(1l, 2l),  ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,41,"heckValue(new RationalNumber(-1l, 2l), ""-1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,42,"heckValue(new RationalNumber(1l, -2l), ""-1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,43,"heckValue(new RationalNumber(-1l, -2l), ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,44,"heckValue(new RationalNumber(0l, 500l), ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,45,"heckValue(new RationalNumber(-12l), ""-12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,46,"heckValue(new RationalNumber(12l), ""12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,49,ublic void testSimplification() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,50,"heckValue(new RationalNumber(2l, 4l), ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,51,"heckValue(new RationalNumber(307692l, 999999l), ""4/13"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,52,"heckValue(new RationalNumber(999999l, 307692l), ""13/4"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,55,ublic void testInvert() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,57,"ationalNumber f = new RationalNumber(2l, 4l).invert();"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,58,"heckValue(f, ""2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,59, = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,60,"heckValue(f, ""1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,62, = new RationalNumber(120l).invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,63,"heckValue(f, ""1/120"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,65," = new RationalNumber(0l, 4l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,66,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,67,.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,68,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,69, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,70, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,71,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,74," = new RationalNumber(307692l, 999999l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,75,ationalNumber fInverse = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,76,"heckValue(fInverse, ""13/4"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,77,"heckValue(f, ""4/13"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,81,ublic void testAddition() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,83,"ationalNumber f1 = new RationalNumber(4l, 6l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,84,1 = f1.add(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,85,"heckValue(f1, ""4/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,87,"heckValue(new RationalNumber(17l, 3l).add(new RationalNumber(-17l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,88,"0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,89,"heckValue(new RationalNumber(2l, 3l).add(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,90,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,91,"heckValue(new RationalNumber(1l, 6l).add(new RationalNumber(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,92,"1/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,93,"heckValue(new RationalNumber(4l, 5l).add(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,94,"1/20"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,95,"heckValue(new RationalNumber(-3l, 4l).add(new RationalNumber(4l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,96,"1/20"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,100,ublic void testSubtraction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,102,"ationalNumber f1 = new RationalNumber(4l, 6l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,103,1 = f1.subtract(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,104,"heckValue(f1, ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,106,"heckValue(new RationalNumber(7l, 3l).subtract(new RationalNumber(-7l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,107,"14/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,109,"heckValue(new RationalNumber(3l, 4l).subtract(new RationalNumber(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,110,"1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,111,"heckValue(new RationalNumber(3l, 4l).subtract(new RationalNumber(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,112,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,113,"heckValue(new RationalNumber(-3l, 4l).subtract(new RationalNumber(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,114,"-17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,115,"heckValue(new RationalNumber(-3l, 4l).subtract(new RationalNumber(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,116,"-1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,118,"heckValue(new RationalNumber(2l, 3l).subtract(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,119,"-1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,120,"heckValue(new RationalNumber(-2l, 3l).subtract(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,121,"-17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,122,"heckValue(new RationalNumber(2l, 3l).subtract(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,123,"17/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,124,"heckValue(new RationalNumber(-2l, 3l).subtract(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,125,"1/12"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,127,"heckValue(new RationalNumber(1l, 6l).subtract(new RationalNumber(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,128,"-1/6"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,129,"heckValue(new RationalNumber(1l, 2l).subtract(new RationalNumber(1l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,130,"1/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,134,ublic void testMultiplication() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,136,"ationalNumber f = new RationalNumber(2l, 3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,137," = f.multiply(new RationalNumber(9l,4l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,138,"heckValue(f, ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,140,"heckValue(new RationalNumber(1l, 2l).multiply(new RationalNumber(0l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,141,"0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,142,"heckValue(new RationalNumber(4l, 15l).multiply(new RationalNumber(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,143,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,144,"heckValue(new RationalNumber(-4l, 15l).multiply(new RationalNumber(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,145,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,146,"heckValue(new RationalNumber(4l, 15l).multiply(new RationalNumber(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,147,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,148,"heckValue(new RationalNumber(-4l, 15l).multiply(new RationalNumber(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,149,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,153,ublic void testDivision() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,155,"ationalNumber f = new RationalNumber(2l, 3l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,156," = f.divide(new RationalNumber(4l,9l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,157,"heckValue(f, ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,159,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,160,"ew RationalNumber(1l, 2l).divide(new RationalNumber(0l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,161,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,162, catch (ArithmeticException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,163, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,164,"ail(""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,167,"heckValue(new RationalNumber(4l, 15l).divide(new RationalNumber(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,168,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,169,"heckValue(new RationalNumber(-4l, 15l).divide(new RationalNumber(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,170,"-2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,171,"heckValue(new RationalNumber(4l, 15l).divide(new RationalNumber(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,172,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,173,"heckValue(new RationalNumber(-4l, 15l).divide(new RationalNumber(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,174,"2/3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,178,"rivate void checkValue(RationalNumber f, String reference) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,179,ssertTrue(f.toString().equals(reference));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,182,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,183,eturn new TestSuite(RationalNumberTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,18,ackage org.spaceroots.mantissa.functions;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.functions"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,28,uite.addTest(org.spaceroots.mantissa.functions.scalar.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,29,uite.addTest(org.spaceroots.mantissa.functions.vectorial.AllTests.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/AllTests.java,31,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.functions.scalar"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,28,uite.addTest(ScalarValuedPairTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,29,uite.addTest(ComputableFunctionSamplerTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,30,uite.addTest(BasicSampledFunctionIteratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/AllTests.java,32,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,23,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,25,ublic class BasicSampledFunctionIteratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,26,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,28,ublic BasicSampledFunctionIteratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,29,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,32,ublic void testIteration()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,33,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,35,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,36,"ew BasicSampledFunctionIterator(new Function(0.0, 0.1, 10));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,38,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,39,ssertTrue(iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,40,calarValuedPair pair = iter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,41,ssertTrue(Math.abs(pair.getX() - 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,42,ssertTrue(Math.abs(pair.getY() + 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,47,ublic void testExhausted()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,48,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,50,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,51,"ew BasicSampledFunctionIterator(new Function(0.0, 0.1, 10));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,53,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,54,ssertTrue(iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,55,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,58,ssertTrue(! iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,60,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,61,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,62,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,63, catch(ExhaustedSampleException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,64,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,66,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,70,ublic void testUnderlyingException()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,71,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,73,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,74,ew BasicSampledFunctionIterator(new ExceptionGeneratingFunction());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,76,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,77,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,78,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,79, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,80,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,82,ssertTrue(! exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,84,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,85,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,86,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,87, catch (FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,88,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,90,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,94,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,95,eturn new TestSuite(BasicSampledFunctionIteratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,98,rivate static class Function
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,99,mplements SampledFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,101,rivate static final long serialVersionUID = -5071329620086891960L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,102,rivate double begin;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,103,rivate double step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,104,rivate int    n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,106,"ublic Function(double begin, double step, int n) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,107,his.begin = begin;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,108,his.step  = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,109,his.n     = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,112,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,113,eturn n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,116,ublic ScalarValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,117,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,119,f (i < 0 || i >= n) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,120,"hrow new FunctionException(""outside of range"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,123,ouble x = begin + i * step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,124,"eturn new ScalarValuedPair(x, -x);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,129,rivate static class ExceptionGeneratingFunction
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,130,mplements SampledFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,132,rivate static final long serialVersionUID = 1417147976215668305L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,133,rivate boolean fireException = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,135,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,136,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,139,ublic ScalarValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,140,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,141,f (fireException) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,142,"hrow new FunctionException(""boom"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,144,ireException = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,145,"eturn new ScalarValuedPair(0.0, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,24,ublic class ComputableFunctionSamplerTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,27,ublic ComputableFunctionSamplerTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,31,ublic void testBeginStepNumber()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,32,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,34,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,35,"ew ComputableFunctionSampler(new Function(0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,36,".0, 0.099, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,38,ssertTrue(sampler.size() == 11);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,39,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()  - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,40,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()  - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,41,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()  - 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,42,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()  + 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,43,ssertTrue(Math.abs(sampler.samplePointAt(10).getX() - 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,44,ssertTrue(Math.abs(sampler.samplePointAt(10).getY() + 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,48,ublic void testRangeNumber()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,49,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,51,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,52,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,53,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,54,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,55,"ew ComputableFunctionSampler(new Function(0.0, 1.0), range, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,57,ssertTrue(sampler.size() == 11);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,58,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()  - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,59,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()  - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,60,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()  - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,61,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,62,ssertTrue(Math.abs(sampler.samplePointAt(10).getX() - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,63,ssertTrue(Math.abs(sampler.samplePointAt(10).getY() + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,67,ublic void testRangeStepNoAdjust()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,68,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,70,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,71,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,72,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,73,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,74,"ew ComputableFunctionSampler(new Function(0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,75,"ange, 0.083, false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,77,ssertTrue(sampler.size() == 12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,78,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()  - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,79,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()  - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,80,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()  - 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,81,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()  + 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,82,ssertTrue(Math.abs(sampler.samplePointAt(11).getX() - 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,83,ssertTrue(Math.abs(sampler.samplePointAt(11).getY() + 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,87,ublic void testRangeStepAdjust()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,88,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,90,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,91,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,92,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,93,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,94,"ew ComputableFunctionSampler(new Function(0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,95,"ange, 0.083, true);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,97,ssertTrue(sampler.size() == 13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,98,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()  - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,99,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()  - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,100,ssertTrue(Math.abs(sampler.samplePointAt(6).getX()  - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,101,ssertTrue(Math.abs(sampler.samplePointAt(6).getY()  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,102,ssertTrue(Math.abs(sampler.samplePointAt(12).getX() - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,103,ssertTrue(Math.abs(sampler.samplePointAt(12).getY() + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,107,ublic void testOutOfRange()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,108,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,110,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,111,"ew ComputableFunctionSampler(new Function(0.0, 1.0), 0.0, 1.0, 10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,113,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,114,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,115,ampler.samplePointAt(-1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,116, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,117,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,119,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,121,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,122,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,123,ampler.samplePointAt(10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,124, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,125,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,127,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,131,ublic void testUnderlyingException() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,133,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,134,"ew ComputableFunctionSampler(new ExceptionGeneratingFunction(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,135,".0, 0.1, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,137,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,138,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,139,ampler.samplePointAt(2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,140, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,141,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,143,ssertTrue(! exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,145,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,146,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,147,ampler.samplePointAt(8);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,148, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,149,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,151,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,155,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,156,eturn new TestSuite(ComputableFunctionSamplerTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,159,rivate static class Function
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,160,mplements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,162,rivate static final long serialVersionUID = -7173012970400285826L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,163,rivate double min;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,164,rivate double max;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,166,"ublic Function(double min, double max) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,167,his.min = min;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,168,his.max = max;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,171,ublic double valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,172,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,174,f (x < min || x > max) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,175,"hrow new FunctionException(""outside of range"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,178,eturn -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,184,rivate static class ExceptionGeneratingFunction
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,185,mplements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,186,rivate static final long serialVersionUID = 7853080602731012102L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,187,ublic double valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,188,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,189,f (x < 0.5) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,190,eturn -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,192,"hrow new FunctionException(""upper half range exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,18,ackage org.spaceroots.mantissa.functions.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,22,ublic class ScalarValuedPairTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,25,ublic ScalarValuedPairTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,29,ublic void testConstructor() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,30,"calarValuedPair pair = new ScalarValuedPair(1.2, -8.4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,31,ssertTrue(Math.abs(pair.getX() - 1.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,32,ssertTrue(Math.abs(pair.getY() + 8.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,35,ublic void testCopyConstructor() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,37,"calarValuedPair pair1 = new ScalarValuedPair(1.2, -8.4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,38,calarValuedPair pair2 = new ScalarValuedPair(pair1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,40,ssertTrue(Math.abs(pair2.getX() - pair1.getX()) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,41,ssertTrue(Math.abs(pair2.getY() - pair1.getY()) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,42,ssertTrue(Math.abs(pair2.getX() - 1.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,43,ssertTrue(Math.abs(pair2.getY() + 8.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,47,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ScalarValuedPairTest.java,48,eturn new TestSuite(ScalarValuedPairTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.functions.vectorial"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,28,uite.addTest(VectorialValuedPairTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,29,uite.addTest(ComputableFunctionSamplerTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,30,uite.addTest(BasicSampledFunctionIteratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/AllTests.java,32,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,21,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,23,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,25,ublic class BasicSampledFunctionIteratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,26,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,28,ublic BasicSampledFunctionIteratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,29,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,32,ublic void testIteration()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,33,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,35,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,36,"ew BasicSampledFunctionIterator(new Function(0.0, 0.1, 10));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,38,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,39,ssertTrue(iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,40,ectorialValuedPair pair = iter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,41,ssertTrue(Math.abs(pair.x    - 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,42,ssertTrue(Math.abs(pair.y[0] + 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,43,ssertTrue(Math.abs(pair.y[1] + 0.2 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,48,ublic void testExhausted()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,49,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,51,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,52,"ew BasicSampledFunctionIterator(new Function(0.0, 0.1, 10));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,54,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,55,ssertTrue(iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,56,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,59,ssertTrue(! iter.hasNext());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,61,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,62,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,63,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,64, catch(ExhaustedSampleException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,65,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,67,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,71,ublic void testUnderlyingException()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,72,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,74,asicSampledFunctionIterator iter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,75,ew BasicSampledFunctionIterator(new ExceptionGeneratingFunction());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,77,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,78,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,79,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,80, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,81,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,83,ssertTrue(! exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,85,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,86,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,87,ter.nextSamplePoint();
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,88, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,89,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,91,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,95,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,96,eturn new TestSuite(BasicSampledFunctionIteratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,99,rivate static class Function
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,100,mplements SampledFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,102,rivate static final long serialVersionUID = -6049535144225908344L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,103,rivate double   begin;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,104,rivate double   step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,105,rivate int      n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,106,rivate double[] values;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,108,"ublic Function(double begin, double step, int n) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,109,his.begin  = begin;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,110,his.step   = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,111,his.n      = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,112,alues      = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,115,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,116,eturn n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,119,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,120,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,123,ublic VectorialValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,124,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,126,f (i < 0 || i >= n) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,127,"hrow new FunctionException(""outside of range"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,130,ouble x = begin + i * step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,131,alues[0] = -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,132,alues[1] = 2.0 * values[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,133,"eturn new VectorialValuedPair(x, values);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,138,rivate static class ExceptionGeneratingFunction
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,139,mplements SampledFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,141,rivate static final long serialVersionUID = 3750401068561053681L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,142,rivate boolean fireException = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,144,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,145,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,148,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,149,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,152,ublic VectorialValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,153,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,154,f (fireException) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,155,"hrow new FunctionException(""boom"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,157,ireException = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,158,"eturn new VectorialValuedPair(0.0, new double[] { 0, 1 });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,24,ublic class ComputableFunctionSamplerTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,27,ublic ComputableFunctionSamplerTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,31,ublic void testBeginStepNumber()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,32,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,34,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,35,"ew ComputableFunctionSampler(new Function(0.0, 1.0), 0.0, 0.099, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,37,ssertTrue(sampler.size() == 11);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,38,ssertTrue(sampler.getDimension() == 2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,39,ssertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,40,ssertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,41,ssertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,42,ssertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,43,ssertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,44,ssertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,45,ssertTrue(Math.abs(sampler.samplePointAt(10).x    - 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,46,ssertTrue(Math.abs(sampler.samplePointAt(10).y[0] + 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,47,ssertTrue(Math.abs(sampler.samplePointAt(10).y[1] + 1.980) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,51,ublic void testRangeNumber()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,52,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,54,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,55,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,56,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,57,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,58,"ew ComputableFunctionSampler(new Function (0.0, 1.0), range, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,60,ssertTrue(sampler.size() == 11);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,61,ssertTrue(sampler.getDimension() == 2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,62,ssertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,63,ssertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,64,ssertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,65,ssertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,66,ssertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,67,ssertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,68,ssertTrue(Math.abs(sampler.samplePointAt(10).x    - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,69,ssertTrue(Math.abs(sampler.samplePointAt(10).y[0] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,70,ssertTrue(Math.abs(sampler.samplePointAt(10).y[1] + 2.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,74,ublic void testRangeStepNoAdjust()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,75,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,77,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,78,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,79,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,80,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,81,"ew ComputableFunctionSampler(new Function(0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,82,"ange, 0.083, false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,84,ssertTrue(sampler.size() == 12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,85,ssertTrue(sampler.getDimension() == 2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,86,ssertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,87,ssertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,88,ssertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,89,ssertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,90,ssertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,91,ssertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 0.830) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,92,ssertTrue(Math.abs(sampler.samplePointAt(11).x    - 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,93,ssertTrue(Math.abs(sampler.samplePointAt(11).y[0] + 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,94,ssertTrue(Math.abs(sampler.samplePointAt(11).y[1] + 1.826) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,98,ublic void testRangeStepAdjust()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,99,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,101,ouble[] range = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,102,ange[0] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,103,ange[1] = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,104,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,105,"ew ComputableFunctionSampler(new Function(0.0, 1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,106,"ange, 0.083, true);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,108,ssertTrue(sampler.size() == 13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,109,ssertTrue(sampler.getDimension() == 2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,110,ssertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,111,ssertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,112,ssertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,113,ssertTrue(Math.abs(sampler.samplePointAt(6).x     - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,114,ssertTrue(Math.abs(sampler.samplePointAt(6).y[0]  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,115,ssertTrue(Math.abs(sampler.samplePointAt(6).y[1]  + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,116,ssertTrue(Math.abs(sampler.samplePointAt(12).x    - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,117,ssertTrue(Math.abs(sampler.samplePointAt(12).y[0] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,118,ssertTrue(Math.abs(sampler.samplePointAt(12).y[1] + 2.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,122,ublic void testOutOfRange()
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,123,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,125,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,126,"ew ComputableFunctionSampler(new Function(0.0, 1.0), 0.0, 1.0, 10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,128,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,129,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,130,ampler.samplePointAt(-1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,131, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,132,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,134,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,136,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,137,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,138,ampler.samplePointAt(10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,139, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,140,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,142,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,146,ublic void testUnderlyingException() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,148,omputableFunctionSampler sampler =
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,149,"ew ComputableFunctionSampler(new ExceptionGeneratingFunction(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,150,".0, 0.1, 11);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,152,oolean exceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,153,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,154,ampler.samplePointAt(2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,155, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,156,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,158,ssertTrue(! exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,160,xceptionOccurred = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,161,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,162,ampler.samplePointAt(8);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,163, catch(FunctionException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,164,xceptionOccurred = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,166,ssertTrue(exceptionOccurred);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,170,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,171,eturn new TestSuite(ComputableFunctionSamplerTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,174,rivate static class Function
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,175,mplements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,176,rivate double   min;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,177,rivate double   max;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,178,rivate double[] values;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,180,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,181,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,184,"ublic Function(double min, double max) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,185,his.min = min;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,186,his.max = max;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,187,alues   = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,190,ublic double[] valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,191,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,193,f (x < min || x > max) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,194,"hrow new FunctionException(""outside of range"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,197,alues[0] = -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,198,alues[1] = -2.0 * x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,199,eturn values;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,203,rivate static final long serialVersionUID = -1859103913610458563L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,207,rivate static class ExceptionGeneratingFunction
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,208,mplements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,210,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,211,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,214,ublic double[] valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,215,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,216,f (x < 0.5) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,217,ouble[] res = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,218,es[0] = -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,219,es[1] = -2.0 * x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,220,eturn res;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,222,"hrow new FunctionException(""upper half range exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,225,rivate static final long serialVersionUID = 2849780376767626912L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,18,ackage org.spaceroots.mantissa.functions.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,22,ublic class VectorialValuedPairTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,25,ublic VectorialValuedPairTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,29,ublic void testConstructor() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,30,ouble[] tab = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,31,ab[0] = -8.4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,32,ab[1] = -3.2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,33,"ectorialValuedPair pair = new VectorialValuedPair(1.2, tab);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,34,ssertTrue(Math.abs(pair.x    - 1.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,35,ssertTrue(Math.abs(pair.y[0] + 8.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,36,ssertTrue(Math.abs(pair.y[1] + 3.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,39,ublic void testCopyConstructor() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,40,ouble[] tab = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,41,ab[0] = -8.4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,42,ab[1] = -3.2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,43,"ectorialValuedPair pair1 = new VectorialValuedPair(1.2, tab);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,44,"ectorialValuedPair pair2 = new VectorialValuedPair(pair1.x,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,45,air1.y);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,46,ssertTrue(Math.abs(pair2.x    - pair1.x)    < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,47,ssertTrue(Math.abs(pair2.y[0] - pair1.y[0]) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,48,ssertTrue(Math.abs(pair2.y[1] - pair1.y[1]) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,49,ssertTrue(Math.abs(pair2.x    - 1.2)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,50,ssertTrue(Math.abs(pair2.y[0] + 8.4)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,51,ssertTrue(Math.abs(pair2.y[1] + 3.2)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,54,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,55,eturn new TestSuite(VectorialValuedPairTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.linalg"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,28,uite.addTest(NonNullRangeTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,29,uite.addTest(GeneralMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,30,uite.addTest(DiagonalMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,31,uite.addTest(LowerTriangularMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,32,uite.addTest(UpperTriangularMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,33,uite.addTest(GeneralSquareMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,34,uite.addTest(SymetricalMatrixTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,35,uite.addTest(MatrixFactoryTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/AllTests.java,37,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,22,ublic class DiagonalMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,25,ublic DiagonalMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,29,ublic void testConstantDiagonal() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,30,"heckMatrix(new DiagonalMatrix(5, 2.7), 2.7);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,33,ublic void testNoSetOutsideOfDiagonal() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,35,iagonalMatrix d = new DiagonalMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,37,or (int i = 0; i < d.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,38,or (int j = 0; j < d.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,39,f (i == j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,40,".setElement(i, j, 2.7);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,41, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,42,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,43,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,44,".setElement(i, j, -1.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,45, catch (ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,46,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,48,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,53,"heckMatrix(d, 2.7);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,57,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,58,"iagonalMatrix d1 = new DiagonalMatrix(7, 4.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,59,iagonalMatrix d2 = new DiagonalMatrix(d1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,61,or (int i = 0; i < d1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,62,"1.setElement(i, i, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,65,ssertTrue(d2.getRows() == d1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,66,ssertTrue(d2.getColumns() == d1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,68,"heckMatrix(d2, 4.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,72,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,73,"iagonalMatrix d1 = new DiagonalMatrix(6, -8.8);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,75,atrix d2 = d1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,76,ssertTrue(d2 instanceof DiagonalMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,78,or (int i = 0; i < d1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,79,"1.setElement(i, i, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,82,ssertTrue(d2.getRows() == d1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,83,ssertTrue(d2.getColumns() == d1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,85,"heckMatrix(d2, -8.8);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,89,ublic void testTranspose() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,91,"iagonalMatrix d = new DiagonalMatrix(5, 3.4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,93,atrix transposed = d.getTranspose();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,94,ssertTrue(transposed instanceof DiagonalMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,96,"heckMatrix(transposed, 3.4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,100,ublic void testDeterminant() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,102,ouble expected;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,104,xpected = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,105,or (int k = 1; k < 10; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,106,xpected *= 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,107,"iagonalMatrix d = new DiagonalMatrix(k, 2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,108,ssertTrue(Math.abs(d.getDeterminant(1.0e-10) - expected) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,111,xpected = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,112,or (int k = 1; k < 10; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,113,xpected *= k;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,114,iagonalMatrix d = new DiagonalMatrix(k);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,115,or (int i = 0; i < k; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,116,".setElement(i, i, i + 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,118,ssertTrue(Math.abs(d.getDeterminant(1.0e-10) - expected) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,123,ublic void testSolve()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,124,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,126,iagonalMatrix d = new DiagonalMatrix(6);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,127,or (int i = 0; i < d.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,128,".setElement(i, i, i + 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,131,"eneralMatrix b = new GeneralMatrix(6, 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,132,or (int i = 0; i < b.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,133,".setElement(i, 0, i + 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,134,".setElement(i, 1, (i + 1.0) * (i + 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,135,".setElement(i, 2, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,138,"atrix result = d.solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,140,ssertTrue(result.getRows() == b.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,141,ssertTrue(result.getColumns() == b.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,143,or (int i = 0; i < result.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,144,"ssertTrue(Math.abs(result.getElement(i, 0) - 1.0)       < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,145,"ssertTrue(Math.abs(result.getElement(i, 1) - (i + 1.0)) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,146,"ssertTrue(Math.abs(result.getElement(i, 2) - 0.0)       < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,149,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,150,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,151,".setElement(3, 3, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,152,".solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,153, catch (SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,154,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,156,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,160,ublic void testInverse()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,161,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,163,iagonalMatrix d = new DiagonalMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,164,or (int i = 0; i < d.getRows (); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,165,".setElement(i, i, i + 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,168,atrix inverse = d.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,169,ssertTrue(inverse instanceof DiagonalMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,171,or (int i = 0; i < inverse.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,172,"ssertTrue(Math.abs(inverse.getElement(i, i) - 1.0 / (i + 1.0)) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,177,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,178,eturn new TestSuite(DiagonalMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,181,"ublic void checkMatrix(Matrix d, double value) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,182,or (int i = 0; i < d.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,183,or (int j = 0; j < d.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,184,ouble expected = (i == j) ? value : 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,185,"ssertTrue(Math.abs(d.getElement(i, j) - expected) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,22,ublic class GeneralMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,25,ublic GeneralMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,29,ublic void testDimensions() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,30,"eneralMatrix m = new GeneralMatrix(3, 4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,31,ssertTrue(m.getRows() == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,32,ssertTrue(m.getColumns() == 4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,35,ublic void testInvalidDimensions() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,36,oolean gotIt;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,38,otIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,39,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,40,"ew GeneralMatrix(0, 2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,41, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,42,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,44,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,46,otIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,47,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,48,"ew GeneralMatrix(1, -3, null);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,49, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,50,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,52,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,56,ublic void testElements() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,57,"atrix m = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,59,"heckMatrix(m, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,63,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,64,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,66,eneralMatrix m2 = new GeneralMatrix(m1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,68,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,69,or (int j = 0; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,70,"1.setElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,74,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,75,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,77,"heckMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,81,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,82,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,84,atrix m2 = m1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,85,ssertTrue(m2 instanceof GeneralMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,87,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,88,or (int j = 0; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,89,"1.setElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,93,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,94,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,96,"heckMatrix (m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,100,ublic void testAddKO() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,101,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,102,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,103,"ew GeneralMatrix(2, 3).add(new GeneralMatrix(3, 2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,104, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,105,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,107,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,110,ublic void testAddOK() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,112,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,114,"atrix m2 = buildMatrix(m1.getRows(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,115,"1.getColumns(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,116,"ew BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,118,atrix m3 = m1.add(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,120,"heckMatrix(m3, new BilinearPattern(101, 0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,124,ublic void testSelfAdd() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,126,"eneralMatrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,128,"atrix m2 = buildMatrix(m1.getRows(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,129,"1.getColumns(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,130,"ew BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,132,1.selfAdd(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,134,"heckMatrix(m1, new BilinearPattern(101, 0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,138,ublic void testSubKO() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,139,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,140,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,141,"ew GeneralMatrix(2, 3).sub(new GeneralMatrix(3, 2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,142, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,143,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,145,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,148,ublic void testSubOK() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,150,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,152,"atrix m2 = buildMatrix(m1.getRows(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,153,"1.getColumns(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,154,"ew BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,156,atrix m3 = m1.sub(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,158,"heckMatrix(m3, new BilinearPattern(-99, 0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,162,ublic void testSelfSub() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,164,"eneralMatrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,166,"atrix m2 = buildMatrix(m1.getRows(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,167,"1.getColumns(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,168,"ew BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,170,1.selfSub(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,172,"heckMatrix(m1, new BilinearPattern(-99, 0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,176,ublic void testMulMKO() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,177,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,178,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,179,"ew GeneralMatrix(2, 3).mul(new GeneralMatrix(2, 3));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,180, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,181,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,183,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,186,ublic void testMulMOK() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,188,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,190,"atrix m2 = buildMatrix(m1.getColumns(), 4, new BilinearPattern(2, -1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,192,atrix m3 = m1.mul(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,194,"heckMatrix(m3, new ComplexPattern(m1.getColumns()));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,198,ublic void testMulD() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,200,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,202,atrix m2 = m1.mul(2.5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,204,"heckMatrix(m2, new BilinearPattern(2.5, 0.025));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,208,ublic void testSelfMul() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,210,"atrix m = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,212,.selfMul(2.5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,214,"heckMatrix(m, new BilinearPattern(2.5, 0.025));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,218,ublic void testTranspose() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,220,"atrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,222,atrix m2 = m1.getTranspose();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,224,ssertTrue(m1.getRows() == m2.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,225,ssertTrue(m1.getColumns() == m2.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,227,"heckMatrix(m2, new BilinearPattern(0.01, 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,231,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,232,eturn new TestSuite(GeneralMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,235,rivate interface ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,236,"ublic double value(int i, int j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,239,rivate static class BilinearPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,240,"ublic BilinearPattern(double coeffI, double coeffJ) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,241,his.coeffI = coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,242,his.coeffJ = coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,244,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,245,eturn coeffI * i + coeffJ * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,247,rivate final double coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,248,rivate final double coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,251,rivate static class ComplexPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,252,ublic ComplexPattern(int p) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,253,his.p = p;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,255,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,256,eturn p * ((2 * i - 0.01 *j) * (p - 1) / 2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,257, i* j
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,258, (p - 1) * (2 * p - 1) / 300.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,260,rivate final int p;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,263,"ublic GeneralMatrix buildMatrix(int rows, int columns,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,264,ilinearPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,265,"eneralMatrix m = new GeneralMatrix(rows, columns);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,267,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,268,or (int j = 0; j < m.getColumns(); ++j){
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,269,".setElement(i, j, pattern.value(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,273,eturn m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,277,"ublic void checkMatrix(Matrix m, ElementPattern pattern) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,278,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,279,or (int j = 0; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,280,"ssertTrue(Math.abs(m.getElement(i, j) - pattern.value(i, j))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,281, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,22,ublic class GeneralSquareMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,25,ublic GeneralSquareMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,29,ublic void testDimensions() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,30,eneralSquareMatrix m = new GeneralSquareMatrix(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,31,ssertTrue(m.getRows() == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,32,ssertTrue(m.getColumns() == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,35,ublic void testInvalidDimensions() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,36,oolean gotIt;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,38,otIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,39,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,40,ew GeneralSquareMatrix(0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,41, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,42,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,44,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,46,otIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,47,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,48,"ew GeneralSquareMatrix(-3, null);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,49, catch(IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,50,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,52,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,56,ublic void testElements() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,57,"atrix m = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,59,"heckMatrix(m, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,63,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,64,"eneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,66,eneralSquareMatrix m2 = new GeneralSquareMatrix(m1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,68,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,69,or (int j = 0; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,70,"1.setElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,74,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,75,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,77,"heckMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,81,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,82,"eneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,84,atrix m2 = m1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,85,ssertTrue(m2 instanceof GeneralSquareMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,87,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,88,or (int j = 0; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,89,"1.setElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,93,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,94,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,96,"heckMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,100,ublic void testSelfAdd() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,101,"eneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,103,"eneralSquareMatrix m2 = buildMatrix(5, new BilinearPattern(2, -0.03));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,106,1.selfAdd(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,108,"heckMatrix(m1, new BilinearPattern(3, -0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,112,ublic void testSelfSub() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,113,"eneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,115,"eneralSquareMatrix m2 = buildMatrix(5, new BilinearPattern(2, -0.03));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,118,1.selfSub(m2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,120,"heckMatrix(m1, new BilinearPattern(-1, 0.04));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,124,ublic void testDeterminant() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,126,eneralSquareMatrix m1 = buildProblem1().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,127,ssertTrue(Math.abs(m1.getDeterminant(1.0e-10) - 6.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,129,eneralSquareMatrix m2 = buildProblem2().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,130,ssertTrue(Math.abs(m2.getDeterminant(1.0e-10) + 0.9999999) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,132,eneralSquareMatrix m3 = buildProblem3().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,133,ssertTrue(Math.abs(m3.getDeterminant(1.0e-10) - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,137,ublic void testSolve()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,138,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,140,inearProblem p;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,141,atrix result;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,143, = buildProblem1();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,144,"esult = p.a.solve(p.b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,145,"heckSolve(p, result);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,147, = buildProblem2();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,148,"esult = p.a.solve(p.b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,149,"heckSolve(p, result);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,151,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,152, = buildProblem3();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,153,"esult = p.a.solve(p.b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,154,"ail(""got "" + result + "", should have caught an exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,155, catch(SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,156,/ expected
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,157, catch(Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,158,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,163,ublic void testInverse()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,164,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,166,"quareMatrix a, inverse;"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,168, = buildProblem1().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,169,nverse = a.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,170,"heckMatrix(a.mul(inverse), new IdentityPattern());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,172, = buildProblem2().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,173,nverse = a.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,174,"heckMatrix(a.mul(inverse), new IdentityPattern());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,176,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,177, = buildProblem3().a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,178,nverse = a.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,179,"ail(""got "" + inverse + "", should have caught an exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,180, catch(SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,181,/ expected
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,182, catch(Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,183,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,188,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,189,eturn new TestSuite(GeneralSquareMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,192,rivate interface ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,193,"ublic double value(int i, int j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,196,rivate static class BilinearPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,197,"ublic BilinearPattern(double coeffI, double coeffJ) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,198,his.coeffI = coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,199,his.coeffJ = coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,201,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,202,eturn coeffI * i + coeffJ * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,204,rivate final double coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,205,rivate final double coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,208,rivate static class IdentityPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,209,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,210,eturn (i == j) ? 1.0 : 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,214,"ublic GeneralSquareMatrix buildMatrix(int order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,215,lementPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,216,eneralSquareMatrix m = new GeneralSquareMatrix(order);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,218,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,219,or (int j = 0; j < m.getColumns(); ++j){
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,220,".setElement(i, j, pattern.value(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,224,eturn m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,228,"ublic void checkMatrix(Matrix m, ElementPattern pattern) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,229,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,230,or (int j = 0; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,231,"ssertTrue(Math.abs(m.getElement(i, j) - pattern.value(i, j))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,232, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,237,rivate static class LinearProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,238,ublic GeneralSquareMatrix a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,239,ublic Matrix              x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,240,ublic Matrix              b;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,241,"ublic LinearProblem(GeneralSquareMatrix a, Matrix x, Matrix b) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,242,his.a = a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,243,his.x = x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,244,his.b = b;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,248,rivate LinearProblem buildProblem1() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,250,eneralSquareMatrix a = new GeneralSquareMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,252,".setElement(0, 0,   2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,253,".setElement(0, 1,   1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,254,".setElement(0, 2,   0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,255,".setElement(0, 3,   4.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,257,".setElement(1, 0,  -4.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,258,".setElement(1, 1,  -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,259,".setElement(1, 2,   3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,260,".setElement(1, 3,  -7.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,262,".setElement(2, 0,   4.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,263,".setElement(2, 1,   1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,264,".setElement(2, 2,  -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,265,".setElement(2, 3,   8.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,267,".setElement(3, 0,   0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,268,".setElement(3, 1,  -3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,269,".setElement(3, 2, -12.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,270,".setElement(3, 3,  -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,272,"eneralMatrix x = new GeneralMatrix(4, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,274,".setElement(0, 0,  3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,275,".setElement(1, 0,  4.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,276,".setElement(2, 0, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,277,".setElement(3, 0, -2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,279,"eneralMatrix b = new GeneralMatrix(4, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,281,".setElement(0, 0,  2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,282,".setElement(1, 0, -9.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,283,".setElement(2, 0,  2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,284,".setElement(3, 0,  2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,286,"eturn new LinearProblem(a, x, b);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,290,rivate LinearProblem buildProblem2()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,293,ouble epsilon = 1.0e-7;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,295,eneralSquareMatrix a = new GeneralSquareMatrix(2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,297,".setElement(0, 0, epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,298,".setElement(0, 1, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,300,".setElement(1, 0, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,301,".setElement(1, 1, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,303,"eneralMatrix x = new GeneralMatrix(2, 2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,305,".setElement(0, 0, 1.0 + epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,306,".setElement(1, 0, 1.0 - epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,308,".setElement(0, 1, epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,309,".setElement(1, 1, 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,311,"eneralMatrix b = new GeneralMatrix(2, 2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,313,".setElement(0, 0, 1.0 + epsilon * epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,314,".setElement(1, 0, 2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,316,".setElement(0, 1, 1.0 + epsilon * epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,317,".setElement(1, 1, 1.0 + epsilon);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,319,"eturn new LinearProblem(a, x, b);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,323,rivate LinearProblem buildProblem3 ()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,326,eneralSquareMatrix a = new GeneralSquareMatrix(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,328,".setElement(0, 0,  1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,329,".setElement(0, 1,  2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,330,".setElement(0, 1, -3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,332,".setElement(1, 0,  2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,333,".setElement(1, 1,  1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,334,".setElement(1, 1,  3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,336,".setElement(2, 0, -3.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,337,".setElement(2, 1,  0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,338,".setElement(2, 1, -9.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,340,"eneralMatrix x = new GeneralMatrix(3, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,341,"eneralMatrix b = new GeneralMatrix(3, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,343,"eturn new LinearProblem(a, x, b);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,347,"rivate void checkSolve(LinearProblem p, Matrix result)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,350,atrix residual = p.a.mul(result).sub(p.b);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,351,or (int i = 0; i < residual.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,352,or (int j = 0; j < residual.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,353,"ssertTrue(Math.abs(residual.getElement(i, j)) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,357,or (int i = 0; i < result.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,358,or (int j = 0; j < result.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,359,"ssertTrue(Math.abs(result.getElement(i, j) - p.x.getElement(i, j))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,360, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,22,ublic class LowerTriangularMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,25,ublic LowerTriangularMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,29,ublic void testNoSetOutsideOfLowerTriangle() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,31,owerTriangularMatrix l = new LowerTriangularMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,33,or (int i = 0; i < l.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,34,or (int j = 0; j < l.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,36,f (i >= j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,37,".setElement(i, j, i + 0.1 * j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,38, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,39,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,40,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,41,".setElement(i, j, -1.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,42, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,43,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,45,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,50,"heckMatrix(l, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,54,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,56,"owerTriangularMatrix l1 = buildMatrix(4, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,58,owerTriangularMatrix l2 = new LowerTriangularMatrix (l1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,60,"heckMatrix (l2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,64,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,66,"owerTriangularMatrix l1 = buildMatrix(4, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,68,atrix l2 = l1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,69,ssertTrue(l2 instanceof LowerTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,71,"heckMatrix(l2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,75,ublic void testTranspose() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,77,"owerTriangularMatrix l = buildMatrix(7, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,79,atrix transposed = l.getTranspose();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,80,ssertTrue(transposed instanceof UpperTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,82,or (int i = 0; i < transposed.getRows(); ++i){
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,83,or (int j = 0; j < transposed.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,84,ouble expected = (i > j) ? 0.0 : (j + 0.1 * i);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,85,"ssertTrue(Math.abs(transposed.getElement(i, j) - expected) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,91,ublic void testSelfAdd() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,92,"owerTriangularMatrix l1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,94,"owerTriangularMatrix l2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,96,1.selfAdd(l2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,98,"heckMatrix(l1, new BilinearPattern(5, -0.6));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,101,ublic void testSelfSub() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,102,"owerTriangularMatrix l1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,104,"owerTriangularMatrix l2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,106,1.selfSub(l2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,108,"heckMatrix(l1, new BilinearPattern(1, 0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,111,ublic void testDeterminant() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,113,"owerTriangularMatrix l = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,114,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,115,eturn (i == j) ? 2.0 : 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,119,"ssertTrue(Math.abs(l.getDeterminant(1.0e-10) - Math.pow(2.0, l.getRows()))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,120, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,124,ublic void testSolve()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,125,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,127,"owerTriangularMatrix l = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,128,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,129,eturn 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,133,"eneralMatrix b = new GeneralMatrix(l.getRows(), 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,134,or (int i = 0; i < b.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,135,".setElement(i, 0, i + 1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,136,".setElement(i, 1, (i + 1.0) * (i + 2.0) / 2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,137,".setElement(i, 2, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,140,"atrix result = l.solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,142,ssertTrue(result.getRows() == b.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,143,ssertTrue(result.getColumns() == b.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,145,or (int i = 0; i < result.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,146,"ssertTrue(Math.abs(result.getElement(i, 0) - 1.0)       < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,147,"ssertTrue(Math.abs(result.getElement(i, 1) - (i + 1.0)) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,148,"ssertTrue(Math.abs(result.getElement(i, 2) - 0.0)       < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,151,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,152,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,153,".setElement(3, 3, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,154,".solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,155, catch(SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,156,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,158,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,162,ublic void testInverse()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,163,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,165,"owerTriangularMatrix l = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,166,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,167,eturn 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,171,atrix inverse = l.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,172,ssertTrue(inverse instanceof LowerTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,174,"heckMatrix(inverse, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,175,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,176,eturn (i == j) ? 1.0 : ((i == j + 1) ? -1.0 : 0.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,182,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,183,eturn new TestSuite(LowerTriangularMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,186,ublic interface ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,187,"ublic double value(int i, int j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,190,rivate static class BilinearPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,191,"ublic BilinearPattern(double coeffI, double coeffJ) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,192,his.coeffI = coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,193,his.coeffJ = coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,195,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,196,eturn coeffI * i + coeffJ * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,198,rivate final double coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,199,rivate final double coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,202,"ublic LowerTriangularMatrix buildMatrix(int order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,203,lementPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,204,owerTriangularMatrix m = new LowerTriangularMatrix(order);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,206,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,207,or (int j = 0; j <= i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,208,".setElement(i, j, pattern.value(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,212,eturn m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,216,"ublic void checkMatrix(Matrix m, ElementPattern pattern) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,217,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,218,or (int j = 0; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,219,"ouble expected = (j <= i) ? pattern.value(i, j) : 0.0;"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,220,"ssertTrue(Math.abs(m.getElement(i, j) - expected) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,22,ublic class MatrixFactoryTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,25,ublic MatrixFactoryTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,29,ublic void testInvalidDimensions() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,30,oolean gotIt;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,32,otIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,33,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,34,"atrixFactory.buildMatrix(0, 2, null, 1, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,35, catch (IllegalArgumentException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,36,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,38,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,42,ublic void testDiagonal() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,43,"atrix m = MatrixFactory.buildMatrix(3, 3, null, 0, 0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,44,ssertTrue(m instanceof DiagonalMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,47,ublic void testLowerTriangular() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,48,"atrix m = MatrixFactory.buildMatrix(3, 3, null, 1, 0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,49,ssertTrue(m instanceof LowerTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,52,ublic void testUpperTriangular() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,53,"atrix m = MatrixFactory.buildMatrix(3, 3, null, 0, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,54,ssertTrue(m instanceof UpperTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,57,ublic void testSquare() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,58,"atrix m = MatrixFactory.buildMatrix(3, 3, null, 1, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,59,ssertTrue(m instanceof GeneralSquareMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,62,ublic void testGeneral() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,63,"atrix m = MatrixFactory.buildMatrix(3, 4, null, 0, 0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,64,ssertTrue(m instanceof GeneralMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,67,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/MatrixFactoryTest.java,68,eturn new TestSuite(MatrixFactoryTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,22,ublic class NonNullRangeTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,25,ublic NonNullRangeTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,29,ublic void testPublicAttributes() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,30,"onNullRange r = new NonNullRange(2, 7);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,31,ssertTrue(r.begin == 2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,32,ssertTrue(r.end   == 7);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,35,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,36,"onNullRange r1 = new NonNullRange(2, 7);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,37,onNullRange r2 = new NonNullRange(r1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,38,ssertTrue(r2.begin == r1.begin);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,39,ssertTrue(r1.end   == r1.end);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,42,ublic void testIntersection() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,43,"onNullRange r1 = new NonNullRange(-4, 8);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,44,"onNullRange r2 = new NonNullRange(3, 12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,45,"onNullRange r3 = NonNullRange.intersection(r1, r2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,46,ssertTrue(r3.begin == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,47,ssertTrue(r3.end   == 8);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,50,ublic void testReunion() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,51,"onNullRange r1 = new NonNullRange(-4, 8);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,52,"onNullRange r2 = new NonNullRange(3, 12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,53,"onNullRange r3 = NonNullRange.reunion(r1, r2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,54,ssertTrue(r3.begin == -4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,55,ssertTrue(r3.end   == 12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,58,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/NonNullRangeTest.java,59,eturn new TestSuite(NonNullRangeTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,22,ublic class SymetricalMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,25,ublic SymetricalMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,29,ublic void testBuildWAAt() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,31,"ouble[] a = { 1.0, 2.0, 3.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,32,"ymetricalMatrix s = new SymetricalMatrix(0.99, a);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,34,"heckMatrix(s, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,35,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,36,eturn 0.99 * (i + 1) * (j + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,42,ublic void testNoSetOutsideOfDiagonal() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,44,ymetricalMatrix s = new SymetricalMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,46,or (int i = 0; i < s.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,47,or (int j = 0; j < s.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,48,f (i == j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,49,".setElement(i, j, 0.5);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,50, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,51,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,52,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,53,.setElement
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,54,"i, j, -1.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,55, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,56,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,58,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,63,"heckMatrix(s, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,64,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,65,eturn (i == j) ? 0.5 : 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,71,ublic void testSetElementAndSymetricalElement() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,72,ymetricalMatrix s = new SymetricalMatrix(5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,73,".setElementAndSymetricalElement(1, 2, 3.4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,74,"ssertTrue(Math.abs(s.getElement(1, 2) - 3.4) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,75,"ssertTrue(Math.abs(s.getElement(2, 1) - 3.4) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,78,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,79,"ymetricalMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,80,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,81,eturn i * i + j * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,85,ymetricalMatrix m2 = new SymetricalMatrix(m1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,87,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,88,or (int j = i; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,89,"1.setElementAndSymetricalElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,93,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,94,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,96,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,97,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,98,eturn i * i + j * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,104,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,105,"ymetricalMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,106,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,107,eturn i * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,111,atrix m2 = m1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,112,ssertTrue(m2 instanceof SymetricalMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,114,or (int i = 0; i < m1.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,115,or (int j = i; j < m1.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,116,"1.setElementAndSymetricalElement(i, j, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,120,ssertTrue(m2.getRows() == m1.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,121,ssertTrue(m2.getColumns() == m1.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,123,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,124,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,125,eturn i * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,131,ublic void testSelfAdd() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,132,"ouble[] a1 = { 2.0, 4.0, 8.0, 16.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,133,"ymetricalMatrix s1 = new SymetricalMatrix(0.5, a1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,135,"ouble[] a2 = { 3.0, 9.0, 27.0, 81.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,136,"ymetricalMatrix s2 = new SymetricalMatrix(1.0, a2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,138,1.selfAdd(s2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,140,"heckMatrix(s1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,141,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,142,"eturn 0.5 * Math.pow(2.0, i + 1) * Math.pow(2.0, j + 1)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,143," Math.pow(3.0, i + 1) * Math.pow(3.0, j + 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,148,ublic void testSelfSub() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,149,"ouble[] a1 = { 2.0, 4.0, 8.0, 16.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,150,"ymetricalMatrix s1 = new SymetricalMatrix(0.5, a1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,152,"ouble[] a2 = { 3.0, 9.0, 27.0, 81.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,153,"ymetricalMatrix s2 = new SymetricalMatrix(1.0, a2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,155,1.selfSub(s2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,157,"heckMatrix(s1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,158,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,159,"eturn 0.5 * Math.pow(2.0, i + 1) * Math.pow(2.0, j + 1)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,160," Math.pow(3.0, i + 1) * Math.pow(3.0, j + 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,165,ublic void testSelfAddWAAt() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,167,ymetricalMatrix s = new SymetricalMatrix(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,169,"ouble[] a1 = { 1.0, 2.0, 3.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,170,".selfAddWAAt(1.0, a1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,172,"ouble[] a2 = { 0.1, 0.2, 0.3 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,173,".selfAddWAAt(2.0, a2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,175,"heckMatrix(s, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,176,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,177,eturn 1.02 * (i + 1) * (j + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,183,ublic void testSingular()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,184,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,185,ymetricalMatrix s = new SymetricalMatrix(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,187,"ouble[] a1 = { 1.0, 2.0, 3.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,188,".selfAddWAAt(1.0, a1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,190,"ouble[] a2 = { 0.1, 0.2, 0.3 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,191,".selfAddWAAt(2.0, a2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,193,"atrix b = new GeneralMatrix(3, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,194,".setElement(0, 0,  6.12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,195,".setElement(1, 0, 12.24);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,196,".setElement(2, 0, 18.36);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,198,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,199,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,200,".solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,201, catch(SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,202,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,204,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,208,ublic void testSolve()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,209,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,210,ymetricalMatrix s = new SymetricalMatrix(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,212,"ouble[] a1 = { 1.0, 2.0, 3.0 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,213,".selfAddWAAt(1.0, a1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,215,"ouble[] a2 = { 0.1, 0.2, 0.3 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,216,".selfAddWAAt(2.0, a2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,218,"ouble[] a3 = { 1.2, -3.0, 2.1 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,219,".selfAddWAAt(3.0, a3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,221,"ouble[] a4 = { 0.4, 0.1, 3.1 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,222,".selfAddWAAt(2.0, a4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,224,"atrix b = new GeneralMatrix(3, 1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,225,".setElement(0, 0, 10.08);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,226,".setElement(1, 0, 10.26);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,227,".setElement(2, 0, 42.57);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,229,"atrix x = s.solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,231,"heckMatrix (x, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,232,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,233,eturn 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,237,ssertTrue(Math.abs(s.getDeterminant(1.0e-10) - 782.846532) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,241,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,242,eturn new TestSuite(SymetricalMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,245,ublic interface ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,246,"ublic double value(int i, int j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,249,"ublic SymetricalMatrix buildMatrix(int order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,250,lementPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,251,ymetricalMatrix m = new SymetricalMatrix(order);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,253,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,254,or (int j = i; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,255,".setElementAndSymetricalElement(i, j, pattern.value(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,259,eturn m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,263,"ublic void checkMatrix(Matrix m, ElementPattern pattern) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,264,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,265,or (int j = 0; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,266,"ssertTrue(Math.abs(m.getElement(i, j) - pattern.value(i, j))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/SymetricalMatrixTest.java,267, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,18,ackage org.spaceroots.mantissa.linalg;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,22,ublic class UpperTriangularMatrixTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,25,ublic UpperTriangularMatrixTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,29,ublic void testNoSetOutsideOfUpperTriangle() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,31,pperTriangularMatrix u = new UpperTriangularMatrix(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,33,or (int i = 0; i < u.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,34,or (int j = 0; j < u.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,35,f (i <= j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,36,".setElement(i, j, i + 0.1 * j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,37, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,38,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,39,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,40,".setElement(i, j, -1.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,41, catch(ArrayIndexOutOfBoundsException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,42,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,44,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,49,"heckMatrix(u, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,53,ublic void testCopy() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,55,"pperTriangularMatrix u1 = buildMatrix(4, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,57,pperTriangularMatrix u2 = new UpperTriangularMatrix(u1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,59,"heckMatrix(u2, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,63,ublic void testDuplicate() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,65,"pperTriangularMatrix u1 = buildMatrix(4, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,67,atrix u2 = u1.duplicate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,68,ssertTrue(u2 instanceof UpperTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,70,"heckMatrix(u2, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,74,ublic void testTranspose() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,76,"pperTriangularMatrix u = buildMatrix(7, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,78,atrix transposed = u.getTranspose();
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,79,ssertTrue(transposed instanceof LowerTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,81,or (int i = 0; i < transposed.getRows(); ++i){
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,82,or (int j = 0; j < transposed.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,83,ouble expected = (i < j) ? 0.0 : (j + 0.1 * i);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,84,"ssertTrue(Math.abs(transposed.getElement(i, j) - expected) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,90,ublic void testSelfAdd() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,91,"pperTriangularMatrix u1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,93,"pperTriangularMatrix u2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,95,1.selfAdd(u2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,97,"heckMatrix(u1, new BilinearPattern(5, -0.6));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,100,ublic void testSelfSub() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,101,"pperTriangularMatrix u1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,103,"pperTriangularMatrix u2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,105,1.selfSub(u2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,107,"heckMatrix(u1, new BilinearPattern(1, 0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,110,ublic void testDeterminant() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,112,"pperTriangularMatrix u = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,113,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,114,eturn (i == j) ? 2.0 : 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,118,"ssertTrue(Math.abs(u.getDeterminant(1.0e-10) - Math.pow(2.0, u.getRows()))"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,119, 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,123,ublic void testSolve()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,124,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,126,nt rows = 7;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,127,"pperTriangularMatrix u = buildMatrix(rows, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,128,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,129,eturn 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,133,"eneralMatrix b = new GeneralMatrix(rows, 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,134,or (int i = 0; i < rows; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,135,".setElement(i, 0, rows - i);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,136,".setElement(i, 1, (rows - i) * (rows + 1 - i) / 2.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,137,".setElement(i, 2, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,140,"atrix result = u.solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,142,ssertTrue(result.getRows() == b.getRows());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,143,ssertTrue(result.getColumns() == b.getColumns());
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,145,or (int i = 0; i < result.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,146,"ssertTrue(Math.abs(result.getElement(i, 0) - 1.0)        < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,147,"ssertTrue(Math.abs(result.getElement(i, 1) - (rows - i)) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,148,"ssertTrue(Math.abs(result.getElement(i, 2) - 0.0)        < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,151,oolean gotIt = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,152,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,153,".setElement(3, 3, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,154,".solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,155, catch(SingularMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,156,otIt = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,158,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,162,ublic void testInverse()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,163,hrows SingularMatrixException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,165,"pperTriangularMatrix u = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,166,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,167,eturn 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,171,atrix inverse = u.getInverse(1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,172,ssertTrue(inverse instanceof UpperTriangularMatrix);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,174,"heckMatrix(inverse, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,175,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,176,eturn (i == j) ? 1.0 : ((i == j - 1) ? -1.0 : 0.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,182,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,183,eturn new TestSuite(UpperTriangularMatrixTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,186,ublic interface ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,187,"ublic double value(int i, int j);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,190,rivate static class BilinearPattern implements ElementPattern {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,191,"ublic BilinearPattern(double coeffI, double coeffJ) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,192,his.coeffI = coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,193,his.coeffJ = coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,195,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,196,eturn coeffI * i + coeffJ * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,198,rivate final double coeffI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,199,rivate final double coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,202,"ublic UpperTriangularMatrix buildMatrix(int order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,203,lementPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,204,pperTriangularMatrix m = new UpperTriangularMatrix (order);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,206,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,207,or (int j = i; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,208,".setElement(i, j, pattern.value(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,212,eturn m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,216,"ublic void checkMatrix(Matrix m, ElementPattern pattern) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,217,or (int i = 0; i < m.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,218,or (int j = 0; j < m.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,219,"ouble expected = (i <= j) ? pattern.value(i, j) : 0.0;"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,220,"ssertTrue(Math.abs(m.getElement(i, j) - expected) < 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,18,ackage org.spaceroots.mantissa.quadrature;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,23,ublic class AllTests
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,25,ublic static Test suite ()
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,27,"estSuite suite= new TestSuite (""org.spaceroots.mantissa.quadrature"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,28,uite.addTest (org.spaceroots.mantissa.quadrature.scalar.AllTests.suite ());
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,29,uite.addTest (org.spaceroots.mantissa.quadrature.vectorial.AllTests.suite ());
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/AllTests.java,30,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.quadrature.scalar"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,28,uite.addTest(GaussLegendreIntegratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/AllTests.java,30,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.quadrature.vectorial"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,28,uite.addTest(GaussLegendreIntegratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/AllTests.java,30,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,18,ackage org.spaceroots.mantissa.quadrature.vectorial;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,20,mport org.spaceroots.mantissa.functions.vectorial.ComputableFunction;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,23,mport java.util.Random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,25,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,27,ublic class GaussLegendreIntegratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,28,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,30,ublic GaussLegendreIntegratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,31,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,34,ublic void testExactIntegration()
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,35,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,36,andom random = new Random(86343623467878363l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,37,nt order = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,38,hile (true) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,39,"aussLegendreIntegrator integrator = new GaussLegendreIntegrator(order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,40,.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,41,nt availableOrder = integrator.getEvaluationsPerStep();
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,42,f (availableOrder < order) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,43,/ we have tested all available orders
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,44,eturn;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,47,/ an order n Gauss-Legendre integrator integrates
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,48,/ 2n-1 degree polynoms exactly
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,49,or (int degree = 0; degree <= 2 * availableOrder - 1; ++degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,50,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,51,"olynom p = new Polynom(degree, random, 100.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,52,"ouble[] s0 = integrator.integrate(p, -5.0, 15.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,53,"ouble[] s1 = p.exactIntegration(-5.0, 15.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,54,or (int j = 0; j < p.getDimension(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,55,ssertTrue(Math.abs(s0[j] - s1[j]) < 1.0e-12 * (1.0 + Math.abs(s0[j])));
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,60,+order;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,65,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,66,eturn new TestSuite(GaussLegendreIntegratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,69,rivate static class Polynom implements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,70,"ublic Polynom (int degree, Random random, double max) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,71,oeffs0 = new double[degree + 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,72,oeffs1 = new double[degree + 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,73,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,74,oeffs0[i] = 2.0 * max * (random.nextDouble() - 0.5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,75,oeffs1[i] = 2.0 * max * (random.nextDouble() - 0.5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,79,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,80,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,83,ublic double[] valueAt(double t)
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,84,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,85,ouble[] y = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,86,[0] = coeffs0[coeffs0.length - 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,87,or (int i = coeffs0.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,88,[0] = y[0] * t + coeffs0[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,90,[1] = coeffs1 [coeffs1.length - 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,91,or (int i = coeffs1.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,92,[1] = y[1] * t + coeffs1[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,94,eturn y;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,97,"ublic double[] exactIntegration(double a, double b)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,98,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,99,ouble[] res = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,100,ouble yb = coeffs0[coeffs0.length - 1] / coeffs0.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,101,ouble ya = yb;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,102,or (int i = coeffs0.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,103,b = yb * b + coeffs0[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,104,a = ya * a + coeffs0[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,106,es[0] = yb * b - ya * a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,107,b = coeffs1[coeffs1.length - 1] / coeffs1.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,108,a = yb;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,109,or (int i = coeffs1.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,110,b = yb * b + coeffs1[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,111,a = ya * a + coeffs1[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,113,es[1] = yb * b - ya * a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,114,eturn res;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,117,rivate double[] coeffs0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,118,rivate double[] coeffs1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,120,rivate static final long serialVersionUID = -8032020368915042278L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.random"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,28,uite.addTest(ScalarSampleStatisticsTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,29,uite.addTest(VectorialSampleStatisticsTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,30,uite.addTest(UniformRandomGeneratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,31,uite.addTest(GaussianRandomGeneratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,32,uite.addTest(UncorrelatedRandomVectorGeneratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,33,uite.addTest(CorrelatedRandomVectorGeneratorTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/AllTests.java,34,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,22,ublic class ScalarSampleStatisticsTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,25,ublic ScalarSampleStatisticsTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,27,oints = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,30,ublic void testBasicStats() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,32,calarSampleStatistics sample = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,33,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,34,ample.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,37,"ssertEquals(points.length, sample.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,38,"ssertEquals(-5.0, sample.getMin(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,39,"ssertEquals(10.4, sample.getMax(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,40,"ssertEquals( 3.0, sample.getMean(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,41,"ssertEquals( 3.920034013457876, sample.getStandardDeviation(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,42,.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,46,ublic void testAddSample() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,48,calarSampleStatistics all  = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,49,calarSampleStatistics even = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,50,calarSampleStatistics odd  = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,51,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,52,ll.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,53,f (i % 2 == 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,54,ven.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,55, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,56,dd.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,60,ven.add(odd);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,62,"ssertEquals(all.size(), even.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,63,"ssertEquals(all.getMin(), even.getMin(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,64,"ssertEquals(all.getMax(), even.getMax(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,65,"ssertEquals(all.getMean(), even.getMean(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,66,"ssertEquals(all.getStandardDeviation(), even.getStandardDeviation(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,67,.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,71,ublic void testAddArray() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,73,calarSampleStatistics loop   = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,74,calarSampleStatistics direct = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,75,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,76,oop.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,78,irect.add(points);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,80,"ssertEquals(loop.size(), direct.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,81,"ssertEquals(loop.getMin(), direct.getMin(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,82,"ssertEquals(loop.getMax(), direct.getMax(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,83,"ssertEquals(loop.getMean(), direct.getMean(), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,84,"ssertEquals(loop.getStandardDeviation(), direct.getStandardDeviation(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,85,.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,89,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,90,"oints = new double[] {1.0, 4.2, -5, 4.0, 2.9, 10.4, 0.0, 4.1, 4.2, 4.2};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,93,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,94,oints = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,97,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,98,eturn new TestSuite(ScalarSampleStatisticsTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,101,rivate double[] points;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.roots"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,28,uite.addTest(BrentSolverTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/AllTests.java,30,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,20,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,24,ublic class BrentSolverTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,27,ublic BrentSolverTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,31,ublic void testAlefeldPotraShi()
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,32,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,34,estProblem[] problems = TestProblem.getAPSProblems();
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,35,rentSolver solver     = new BrentSolver();
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,37,or (int i = 0; i < problems.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,38,estProblem p = problems[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,39,ouble tol = 1.0e-10 * Math.abs(p.getExpectedRoot());
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,40,"ssertTrue(solver.findRoot(p, new Checker(tol), 1000,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,41,".getA(), p.valueAt(p.getA()),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,42,".getB(), p.valueAt(p.getB())));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,43,"ssertTrue(p.checkResult(solver.getRoot(), tol));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,48,rivate static class Checker implements ConvergenceChecker {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,50,rivate double tolerance;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,52,ublic Checker (double tolerance) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,53,his.tolerance = tolerance;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,56,"ublic int converged (double xLow, double fLow,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,57,"ouble xHigh, double fHigh) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,58,eturn (Math.abs(xHigh - xLow) <= tolerance)
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,59, ((Math.abs(fLow) <= Math.abs(fHigh))
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,60, ConvergenceChecker.LOW
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,61, ConvergenceChecker.HIGH)
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,62, ConvergenceChecker.NONE;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,67,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,68,eturn new TestSuite(BrentSolverTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,18,ackage org.spaceroots.mantissa.roots;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,22,mport java.util.ArrayList;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,24,** This class implement a reference problem for junit tests. */
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,25,ublic abstract class TestProblem implements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,27,rivate double a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,28,rivate double b;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,29,rivate double expectedRoot;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,31,"rotected TestProblem(double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,32,his.a            = a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,33,his.b            = b;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,34,his.expectedRoot = expectedRoot;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,37,ublic double getA() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,38,eturn a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,41,ublic double getB() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,42,eturn b;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,45,ublic double getExpectedRoot() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,46,eturn expectedRoot;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,49,"ublic boolean checkResult(double foundRoot, double tol) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,50,eturn Math.abs(foundRoot - expectedRoot) <= tol;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,53,"** Get the reference problems from G. E. Alefeld, F. A. Potra and Y. Shi. */"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,54,ublic static TestProblem[] getAPSProblems() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,56,rrayList problems = new ArrayList();
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,58,/ problem 1
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,59,"roblems.add(new APSProblem1(Math.PI / 2, Math.PI, 1.8954942670340));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,61,/ problems 2 to 11
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,62,ouble[] roots2To11 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,63,".0229153472731,  6.6837535608081, 11.238701655002, 19.676000080623,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,64,"9.828227326505,  41.906116195289,  55.953595800143, 71.985665586588,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,65,"0.008868539167, 110.02653274833"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,67,"or (int k = 0, n = 1; n <= 10; ++n) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,68,"roblems.add(new APSProblems2To11(1.0e-9 + n * n,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,69,"n+1) * (n+1) - 1.0e-9,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,70,oots2To11[k++]));
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,73,/ problems 12 to 14
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,74,"roblems.add(new APSProblems12To14( -40, -9.0, 31.0, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,75,"roblems.add(new APSProblems12To14(-100, -9.0, 31.0, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,76,"roblems.add(new APSProblems12To14(-200, -9.0, 31.0, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,78,/ problems 15 to 17
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,79,"nt[] n15 = { 4, 6, 8, 10, 12 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,80,ouble[] roots15 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,81,".66874030497642, 0.76472449133173, 0.81776543395794,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,82,".85133992252078, 0.87448527222117"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,84,or (int k = 0; k < n15.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,85,"roblems.add(new APSProblems15To17(n15[k], 0.2, 0.0, 5.0, roots15[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,88,"nt[] n16 = { 4, 6, 8, 10, 12 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,89,or (int k = 0; k < n16.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,90,"roblems.add(new APSProblems15To17(n16[k], 1.0, 0.0, 5.0, 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,93,"nt[] n17 = { 8, 10, 12, 14 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,94,or (int k = 0; k < n17.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,95,"roblems.add(new APSProblems15To17(n17[k], 1.0, -0.95, 4.05, 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,98,/ problem 18
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,99,"roblems.add(new APSProblem18(0.0, 1.5, 0.52359877559830));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,101,/ problem 19
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,102,"nt[] n19 = { 1, 2, 3, 4, 5, 20, 40, 60, 80, 100 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,103,ouble[] roots19 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,104,".42247770964124,   0.30669941048320,   0.22370545765466,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,105,".17171914751951,   0.13825715505682,   3.4657359020854e-2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,106,".7328679513999e-2, 1.1552453009332e-2, 8.6643397569993e-3,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,107,.9314718055995e-3
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,109,or (int k = 0; k < n19.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,110,"roblems.add(new APSProblem19(n19[k], 0.0, 1.0, roots19[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,113,/ problem 20
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,114,"nt[] n20 = { 5, 10, 20 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,115,ouble[] roots20 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,116,".8402551840622e-2, 9.9000099980005e-3, 2.4937500390620e-3"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,118,or (int k = 0; k < n20.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,119,"roblems.add(new APSProblem20(n20[k], 0.0, 1.0, roots20[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,122,/ problem 21
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,123,"nt[] n21 = { 2, 5, 10, 15, 20 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,124,ouble[] roots21 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,125,".5, 0.34595481584824, 0.24512233375331,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,126,".19554762353657, 0.16492095727644"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,128,or (int k = 0; k < n21.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,129,"roblems.add(new APSProblem21(n21[k], 0.0, 1.0, roots21[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,132,/ problem 22
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,133,"nt[] n22 = { 1, 2, 4, 5, 8, 15, 20 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,134,ouble[] roots22 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,135,".27550804099948,   0.13775402049974,   1.0305283778156e-2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,136,".6171081789041e-3, 4.1087291849640e-4, 2.5989575892908e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,137,.6685951221853e-6
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,139,or (int k = 0; k < n22.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,140,"roblems.add(new APSProblem22(n22[k], 0.0, 1.0, roots22[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,143,/ problem 23
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,144,"nt[] n23 = { 1, 5, 10, 15, 20 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,145,ouble[] roots23 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,146,".40105813754155, 0.51615351875793, 0.53952222690842,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,147,".54818229434066, 0.55270466667849"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,149,or (int k = 0; k < n23.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,150,"roblems.add(new APSProblem23(n23[k], 0.0, 1.0, roots23[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,153,/ problem 24
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,154,"nt[] n24 = { 2, 5, 15, 20 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,155,or (int k = 0; k < n24.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,156,"roblems.add(new APSProblem24(n24[k], 0.01, 1, 1.0 / n24[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,159,/ problem 25
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,160,nt[] n25 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,161,",  3,  4,  5,  6,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,162,",  9, 11, 13, 15,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,163,"7, 19, 21, 23, 25,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,164,"7, 29, 31, 33"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,166,or (int k = 0; k < n25.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,167,"roblems.add(new APSProblem25(n25[k], 1.0, 100.0, n25[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,170,/ problem 26
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,171,"roblems.add(new APSProblem26(-1.0, 4.0, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,173,/ problem 27
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,174,nt[] n27 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,175,",  2,  3,  4,  5,  6,  7,  8,  9,  10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,176,"1, 12, 13, 14, 15, 16, 17, 18, 19,  20,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,177,"1, 22, 23, 24, 25, 26, 27, 28, 29,  30,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,178,"1, 32, 33, 34, 35, 36, 37, 38, 39,  40"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,180,or (int k = 0; k < n27.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,181,"roblems.add(new APSProblem27(n27[k], -10000.0, Math.PI / 2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,182,.62380651896161));
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,185,/ problem 28
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,186,nt[] n28 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,187,"0,  21,  22,  23,  24,  25,  26,  27,  28,   29,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,188,"0,  31,  32,  33,  34,  35,  36,  37,  38,   39, 40,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,189,"00, 200, 300, 400, 500, 600, 700, 800, 900, 1000 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,190,ouble[] roots28 = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,191,".9051305594220e-5, 5.6367155339937e-5, 5.3916409455592e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,192,".1669892394942e-5, 4.9603096699145e-5, 4.7695285287639e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,193,".5928793239949e-5, 4.4288479195665e-5, 4.2761290257883e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,194,".1335913915954e-5, 4.0002497338020e-5, 3.8752419296207e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,195,".7578103559958e-5, 3.6472865219959e-5, 3.5430783356532e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,196,".4446594929961e-5, 3.3515605877800e-5, 3.2633616249437e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,197,".1796856858426e-5, 3.1001935436965e-5, 3.0245790670210e-5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,198,".2277994232462e-5, 6.1695393904409e-6, 4.1198585298293e-6,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,199,".0924623877272e-6, 2.4752044261050e-6, 2.0633567678513e-6,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,200,".7690120078154e-6, 1.5481615698859e-6, 1.3763345366022e-6,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,201,.2388385788997e-6
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,203,or (int k = 0; k < n28.length; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,204,"roblems.add(new APSProblem28(n28[k], -10000.0, 10000.0, roots28[k]));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,207,eturn (TestProblem[]) problems.toArray(new TestProblem[problems.size()]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,211,rivate static class APSProblem1 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,212,rivate static final long serialVersionUID = -186095948802525864L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,213,"ublic APSProblem1(double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,214,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,216,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,217,eturn Math.sin(x) - x / 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,221,rivate static class APSProblems2To11 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,222,rivate static final long serialVersionUID = -1284328672006328516L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,223,"ublic APSProblems2To11(double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,224,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,226,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,227,ouble f = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,228,or (int i = 1; i <= 20; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,229,ouble n = 2.0 * i - 5.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,230,ouble d = x - i * i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,231, += n * n / (d * d * d);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,233,eturn -2 * f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,237,rivate static class APSProblems12To14 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,238,rivate static final long serialVersionUID = 3371996034561221313L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,239,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,240,"ublic APSProblems12To14(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,241,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,242,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,244,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,245,eturn n * x * Math.exp(-x);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,249,rivate static class APSProblems15To17 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,250,rivate static final long serialVersionUID = -5460543876513796612L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,251,rivate int    n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,252,rivate double u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,253,"ublic APSProblems15To17(int n, double u,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,254,"ouble a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,255,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,256,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,257,his.u = u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,259,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,260,"eturn Math.pow(x, n) - u;"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,264,rivate static class APSProblem18 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,265,rivate static final long serialVersionUID = 6762799934117390438L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,266,"ublic APSProblem18(double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,267,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,269,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,270,eturn Math.sin(x) - 0.5;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,274,rivate static class APSProblem19 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,275,rivate static final long serialVersionUID = 4962041891152128524L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,276,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,277,"ublic APSProblem19(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,278,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,279,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,281,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,282,eturn 2.0 * x * Math.exp(-n) - 2.0 *Math.exp(-n * x) + 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,286,rivate static class APSProblem20 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,287,rivate static final long serialVersionUID = -7391954140799812791L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,288,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,289,rivate int oPoMn2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,290,"ublic APSProblem20(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,291,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,292,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,293,nt oMn =  1 - n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,294,PoMn2 = 1 + oMn * oMn;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,296,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,297,ouble v = 1.0 - n * x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,298,eturn oPoMn2 * x - v * v;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,302,rivate static class APSProblem21 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,303,rivate static final long serialVersionUID = -4160028543895639114L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,304,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,305,"ublic APSProblem21(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,306,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,307,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,309,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,310,"eturn x * x - Math.pow(1 - x, n);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,314,rivate static class APSProblem22 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,315,rivate static final long serialVersionUID = 3807046732154081146L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,316,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,317,rivate int oPoMn4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,318,"ublic APSProblem22(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,319,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,320,his.n   = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,321,nt oMn  = 1 - n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,322,nt oMn2 = oMn * oMn;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,323,PoMn4   = 1 + oMn2 * oMn2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,325,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,326,ouble oMnx  = 1 - n * x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,327,ouble oMnx2 = oMnx * oMnx;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,328,eturn oPoMn4 * x - oMnx2 * oMnx2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,332,rivate static class APSProblem23 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,333,rivate static final long serialVersionUID = -486669213837396921L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,334,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,335,"ublic APSProblem23(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,336,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,337,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,339,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,340,"eturn (x - 1.0) * Math.exp(-n * x) + Math.pow(x, n);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,344,rivate static class APSProblem24 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,345,rivate static final long serialVersionUID = -628275471717968182L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,346,rivate int n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,347,"ublic APSProblem24(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,348,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,349,his.n = n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,351,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,352,eturn (n * x - 1.0) / ((n - 1) * x);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,356,rivate static class APSProblem25 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,357,rivate static final long serialVersionUID = 5207170686914959073L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,358,rivate double u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,359,rivate double v;;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,360,"ublic APSProblem25(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,361,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,362, = 1.0 / n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,363," = Math.pow(n, u);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,365,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,366,"eturn Math.pow(x, u) - v;"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,370,rivate static class APSProblem26 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,371,rivate static final long serialVersionUID = 1063884352586457076L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,373,"ublic APSProblem26(double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,374,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,376,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,377,f (x == 0.0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,378,eturn 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,380,eturn x / Math.exp(1 / (x * x));
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,383,/ this is a very special case since there is a wide range around
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,384,/ the true root (which is 0) for which |f(x)| is smaller than the
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,385,/ smallest representable positive number (according to IEEE 754):
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,386,/    f(0.03762210865...) = 2^-1024
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,387,/    f(0.03764056462...) = 2^-1023
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,388,/    f(0.03765904777...) = 2^-1022
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,389,/    f(0.03767755816...) = 2^-1021
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,390,/ any root between -0.03768 and +0.03768 should be considered good
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,391,"ublic boolean checkResult(double foundRoot, double tol) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,392,eturn Math.abs(foundRoot) <= 0.03768;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,397,rivate static class APSProblem27 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,398,rivate static final long serialVersionUID = -3549158218723499035L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,399,rivate double u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,400,"ublic APSProblem27(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,401,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,402, = n / 20.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,404,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,405,f (x >= 0.0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,406,eturn (x / 1.5 + Math.sin(x) - 1.0) * u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,408,eturn -u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,412,rivate static class APSProblem28 extends TestProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,413,rivate static final long serialVersionUID = -8198306839874267863L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,414,rivate double threshold;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,415,rivate static final double yHigh= Math.exp(1.0) - 1.859;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,416,rivate int    u;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,417,"ublic APSProblem28(int n, double a, double b, double expectedRoot) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,418,"uper(a, b, expectedRoot);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,419,hreshold = 0.002 / (1 + n);
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,420,         = (n + 1) * 500;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,422,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,423,f (x >= threshold) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,424,eturn yHigh;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,425, else if (x >= 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,426,eturn Math.exp(u * x) - 1.859;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,427, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,428,eturn -0.859;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,26,"estSuite suite = new TestSuite(""org.spaceroots.mantissa.utilities"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,28,uite.addTest(ArrayMapperTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,29,uite.addTest(MappableArrayTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,30,uite.addTest(MappableScalarTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,31,uite.addTest(IntervalTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,32,uite.addTest(IntervalsListTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/AllTests.java,34,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,22,ublic class ArrayMapperTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,25,ublic ArrayMapperTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,27,apper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,28,1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,29,2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,30,3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,33,ublic void testDimensionCheck() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,34,nt size = b1.getStateDimension();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,35,ize += b2.getStateDimension();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,36,ize += b3.getStateDimension();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,37,ssertTrue(mapper.getDataArray().length == size);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,40,ublic void testUpdateObjects() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,42,ouble[] data = new double [7];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,43,or (int i = 0; i < 7; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,44,ata [i] = i * 0.1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,47,apper.updateObjects(data);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,49,ssertTrue(Math.abs(b1.getElement(0) - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,51,ssertTrue(Math.abs(b2.getElement(0) - 0.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,52,ssertTrue(Math.abs(b2.getElement(1) - 0.3) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,53,ssertTrue(Math.abs(b2.getElement(2) - 0.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,54,ssertTrue(Math.abs(b2.getElement(3) - 0.1) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,56,ssertTrue(Math.abs(b3.getElement(0) - 0.6) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,57,ssertTrue(Math.abs(b3.getElement(1) - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,61,ublic void testUpdateArray() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,63,"1.setElement(0,  0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,65,"2.setElement(0, 40.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,66,"2.setElement(1, 30.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,67,"2.setElement(2, 20.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,68,"2.setElement(3, 10.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,70,"3.setElement(0, 60.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,71,"3.setElement(1, 50.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,73,apper.updateArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,75,ouble[] data = mapper.getDataArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,76,or (int i = 0; i < 7; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,77,ssertTrue(Math.abs(data [i] - i * 10.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,82,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,84,1 = new DomainObject(1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,85,2 = new DomainObject(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,86,3 = new DomainObject(2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,88,apper = new ArrayMapper();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,89,apper.manageMappable(b1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,90,apper.manageMappable(b2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,91,apper.manageMappable(b3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,95,ublic void tearOff() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,97,1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,98,2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,99,3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,101,apper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,105,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,106,eturn new TestSuite(ArrayMapperTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,109,rivate static class DomainObject implements ArraySliceMappable {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,111,rivate double[] data;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,113,ublic DomainObject(int size) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,114,ata = new double [size];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,117,ublic int getStateDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,118,eturn data.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,121,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,122,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,123,ata [data.length - 1 - i] = array [start + i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,127,"ublic void mapStateToArray(int start, double[] array) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,128,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,129,rray [start + i] = data [data.length - 1 - i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,133,ublic double getElement(int i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,134,eturn data [i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,137,"ublic void setElement(int i, double value) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,138,ata [i] = value;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,143,rivate DomainObject b1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,144,rivate DomainObject b2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,145,rivate DomainObject b3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,147,rivate ArrayMapper mapper;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,22,ublic class IntervalTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,25,ublic IntervalTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,29,ublic void test1() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,30,"heck(new Interval(-10.0, 10.0), new Interval(11.0, 12.0), 2.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,31,"rue, false, false,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,32,"ew Interval(-10.0, 12.0), new Interval(11.0, 11.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,35,ublic void test2() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,36,"heck(new Interval(-10.0, 10.0), new Interval(9.0, 12.0), 50.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,37,"alse, false, true,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,38,"ew Interval(-10.0, 12.0), new Interval(9.0, 10.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,41,ublic void test3() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,42,"heck(new Interval(-10.0, 10.0), new Interval(-12.0, -11.0), 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,43,"rue, false, false,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,44,"ew Interval(-12.0, 10.0), new Interval(-10.0, -10.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,47,ublic void test4() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,48,"heck(new Interval(-10.0, 10.0), new Interval(-4.0, 5.0), 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,49,"rue, true, true,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,50,"ew Interval(-10.0, 10.0), new Interval(-4.0, 5.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,53,ublic void test5() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,54,"heck(new Interval(-10.0, 10.0), new Interval(-10.0, 10.0), 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,55,"rue, true, true,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,56,"ew Interval(-10.0, 10.0), new Interval(-10.0, 10.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,59,"rivate void check(Interval i1, Interval i2, double x,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,60,"oolean b1, boolean b2, boolean b3,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,61,"nterval add, Interval inter) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,63,ssertTrue(i1.contains(x)    ^ (!b1));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,64,ssertTrue(i1.contains(i2)   ^ (!b2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,65,ssertTrue(i1.intersects(i2) ^ (!b3));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,67,"ssertEquals(add.getInf(), Interval.add(i1, i2).getInf(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,68,"ssertEquals(add.getSup(), Interval.add(i1, i2).getSup(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,69,"ssertEquals(inter.getInf(), Interval.intersection(i1, i2).getInf(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,70,"ssertEquals(inter.getSup(), Interval.intersection(i1, i2).getSup(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,72,nterval ia = new Interval(i1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,73,a.addToSelf(i2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,74,"ssertEquals(add.getInf(), ia.getInf(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,75,"ssertEquals(add.getSup(), ia.getSup(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,77,nterval ib = new Interval(i1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,78,b.intersectSelf(i2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,79,"ssertEquals(inter.getInf(), ib.getInf(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,80,"ssertEquals(inter.getSup(), ib.getSup(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,84,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalTest.java,85,eturn new TestSuite(IntervalTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,20,mport java.util.Iterator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,24,ublic class IntervalsListTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,27,ublic IntervalsListTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,31,ublic void testAddBetween() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,32,ntervalsList il =
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,33,"ew IntervalsList (new Interval(10, 20), new Interval(50, 60));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,34,"l.addToSelf(new Interval(30, 40));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,35,heckEquals(new Interval[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,36,"ew Interval(10, 20),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,37,"ew Interval(30, 40),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,38,"ew Interval(50, 60)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,39,", il);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,42,ublic void testAddReducingLastHole() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,43,ntervalsList il =
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,44,"ew IntervalsList (new Interval(10, 20), new Interval(50, 60));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,45,"l.addToSelf(new Interval(30, 55));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,46,heckEquals(new Interval[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,47,"ew Interval(10, 20),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,48,"ew Interval(30, 60)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,49,", il);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,52,ublic void test1() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,54,"ntervalsList list1 = new IntervalsList(-2.0, -1.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,55,"ntervalsList list2 = new IntervalsList(new Interval(-0.9, -0.8));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,56,"heck(list1, list2, 2.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,57,"rue, false, 1, true, false, 1, false,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,58,"ew Interval[] { new Interval(-2.0, -1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,59,"ew Interval(-0.9, -0.8) },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,60,ew Interval[0]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,62,"ist2.addToSelf(new Interval(1.0, 3.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,63,"heck(list1, list2, 2.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,64,"rue, false, 1, false, false, 2, false,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,65,"ew Interval[] { new Interval(-2.0, -1.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,66,"ew Interval(-0.9, -0.8),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,67,"ew Interval( 1.0,  3.0) },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,68,ew Interval[0]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,70,"ist1.addToSelf(new Interval(-1.2, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,71,"heck(list1, list2, -1.1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,72,"rue, false, 1, false, false, 2, true,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,73,"ew Interval[] { new Interval(-2.0,  0.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,74,"ew Interval( 1.0,  3.0) },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,75,"ew Interval[] { new Interval(-0.9, -0.8) });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,77,"ntervalsList list = new IntervalsList(new Interval(-10.0, -8.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,78,"ist.addToSelf(new Interval(-6.0, -4.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,79,"ist.addToSelf(new Interval(-0.85, 1.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,80,ist1.addToSelf(list);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,81,"heck(list1, list2, 0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,82,"alse, false, 3, false, false, 2, true,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,83,"ew Interval[] { new Interval(-10.0, -8.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,84,"ew Interval( -6.0, -4.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,85,"ew Interval( -2.0,  3.0) },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,86,"ew Interval[] { new Interval( -0.9, -0.8),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,87,"ew Interval(  1.0,  1.2) });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,91,"rivate void check(IntervalsList l1, IntervalsList l2, double x,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,92,"oolean b1, boolean b2, int i1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,93,"oolean b3, boolean b4, int i2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,94,"oolean b5, Interval[] add, Interval[] inter) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,95,ssertTrue(l1.isConnex()     ^ (!b1));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,96,ssertTrue(l1.isEmpty()      ^ (!b2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,97,"ssertEquals(i1, l1.getIntervals().size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,98,ssertTrue(l2.isConnex()     ^ (!b3));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,99,ssertTrue(l2.isEmpty()      ^ (!b4));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,100,"ssertEquals(i2, l2.getIntervals().size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,101,ssertTrue(l1.contains(x)    ^ (!b5));
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,102,"heckEquals(add,   IntervalsList.add(l1, l2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,103,"heckEquals(inter, IntervalsList.intersection(l1, l2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,106,"rivate void checkEquals(Interval[] sa, IntervalsList sb) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,107,"ssertEquals(sa.length, sb.getIntervals().size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,108,terator iterB = sb.getIntervals().iterator();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,109,or (int i = 0; i < sa.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,110,nterval ib = (Interval) iterB.next();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,111,"ssertEquals(sa[i].getInf(), ib.getInf(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,112,"ssertEquals(sa[i].getSup(), ib.getSup(), 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,116,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/IntervalsListTest.java,117,eturn new TestSuite(IntervalsListTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,22,ublic class MappableArrayTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,25,ublic MappableArrayTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,27,rray1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,28,rray2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,29,rray3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,30,apper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,33,ublic void testDimensionCheck() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,34,ssertTrue(mapper.getDataArray().length == 9);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,37,ublic void testUpdateObjects() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,39,ouble[] data = new double [mapper.getDataArray().length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,40,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,41,ata [i] = i * 0.1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,44,apper.updateObjects(data);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,46,ouble[] a1 = array1.getArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,47,ssertTrue(Math.abs(a1[0] - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,48,ssertTrue(Math.abs(a1[1] - 0.1) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,49,ssertTrue(Math.abs(a1[2] - 0.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,50,ssertTrue(Math.abs(a1[3] - 0.3) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,52,ouble[] a2 = array2.getArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,53,ssertTrue(Math.abs(a2[0] - 0.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,54,ssertTrue(Math.abs(a2[1] - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,56,ouble[] a3 = array3.getArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,57,ssertTrue(Math.abs(a3[0] - 0.6) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,58,ssertTrue(Math.abs(a3[1] - 0.7) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,59,ssertTrue(Math.abs(a3[2] - 0.8) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,63,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,64,eturn new TestSuite(MappableArrayTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,67,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,69,rray1 = new MappableArray(4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,70,rray2 = new MappableArray(new double[2]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,71,rray3 = new MappableArray(new double[3]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,73,apper = new ArrayMapper();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,74,apper.manageMappable(array1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,75,apper.manageMappable(array2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,76,apper.manageMappable(array3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,80,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,81,rray1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,82,rray2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,83,rray3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,84,apper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,87,rivate MappableArray array1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,88,rivate MappableArray array2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,89,rivate MappableArray array3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,90,rivate ArrayMapper   mapper;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,18,ackage org.spaceroots.mantissa.utilities;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,22,ublic class MappableScalarTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,25,ublic MappableScalarTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,27,apper  = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,28,calar1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,29,calar2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,30,calar3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,33,ublic void testDimensionCheck() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,34,ssertTrue(mapper.getDataArray().length == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,37,ublic void testUpdateObjects() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,39,ouble[] data = new double [mapper.getDataArray().length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,40,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,41,ata [i] = i * 0.1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,44,apper.updateObjects(data);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,46,ssertTrue(Math.abs(scalar1.getValue() - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,47,ssertTrue(Math.abs(scalar2.getValue() - 0.1) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,48,ssertTrue(Math.abs(scalar3.getValue() - 0.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,52,ublic void testUpdateArray() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,54,calar1.setValue(00.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,55,calar2.setValue(10.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,56,calar3.setValue(20.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,58,apper.updateArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,60,ouble[] data = mapper.getDataArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,61,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,62,ssertTrue(Math.abs(data [i] - i * 10.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,67,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,68,eturn new TestSuite(MappableScalarTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,71,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,73,calar1 = new MappableScalar();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,74,calar2 = new MappableScalar(2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,75,calar3 = new MappableScalar(-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,77,apper = new ArrayMapper();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,78,apper.manageMappable(scalar1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,79,apper.manageMappable(scalar2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,80,apper.manageMappable(scalar3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,84,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,86,calar1 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,87,calar2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,88,calar3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,90,apper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,94,rivate MappableScalar scalar1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,95,rivate MappableScalar scalar2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,96,rivate MappableScalar scalar3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,98,rivate ArrayMapper mapper;

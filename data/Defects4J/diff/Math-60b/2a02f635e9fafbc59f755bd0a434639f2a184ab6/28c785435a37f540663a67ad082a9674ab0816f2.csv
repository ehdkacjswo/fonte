is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,59,* Provide the bisection algorithm for solving for zeros of real univariate
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,60,* functions.  It will only search for one zero in the given interval.  The
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,61,* function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,63,* @author Brent Worden
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,65,public class BisectionSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68,* @param f function to solve.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,70,public BisectionSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,71,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,75,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,76,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,77,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,78,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,79,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,80,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,81,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,83,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,84,throws MathException {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,86,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,90,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,91,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,92,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,93,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,94,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,95,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,97,"public double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,98,clearResult();
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,100,double m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,101,double fm;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,102,double fmin;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,int i = 0;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,105,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,106,"m = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,107,fmin = f.value(min);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,108,fm = f.value(m);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,110,if (fm * fmin > 0.0) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,111,// max and m bracket the root.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,112,min = m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,113,fmin = fm;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,114,} else {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,115,// min and m bracket the root.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,116,max = m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,119,if (Math.abs(max - min) <= absoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,120,"m = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,121,"setResult(m, i);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,122,return m;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,124,++i;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,127,"throw new MathException(""Maximal iteration number exceeded"");"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,131,* Compute the midpoint of two values.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,132,* @param a first value.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,133,* @param b second value.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,134,* @return the midpoint.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,136,"public static double midpoint(double a, double b) {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,137,return (a + b) * .5;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,rivate UnivariateRealFunction f;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69,* @param f function to solve.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,71,"uper(100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,72,his.f = f;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,72,"super(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,75,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76," @see org.apache.commons.math.UnivariateRealSolver#solve(double, double)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,77,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,78,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,79,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,80,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,81,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,84,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,85,throws MathException {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,87,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,91,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,*  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,119,/          System.out.println(
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,120,"/              "" x0="""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,121,/                  + x0
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,122,"/                  + "" y0="""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,123,/                  + y0
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,124,"/                  + "" x1="""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,125,/                  + x1
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,126,"/                  + "" y1="""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,127,/                  + y1
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,128,"/                  + "" x2="""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,129,"/                  + x2+"" y2=""+y2);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,130,"/            System.out.println("" dx=""+dx+""   delta: ""+delta+""   olddelta: ""+oldDelta);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,133,"/                    System.out.println(""bisection"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,143,"/                    System.out.println(""linear"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,148,"/                    System.out.println(""invers quad"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,159,"/                System.out.println(""  p=""+p+"" p1=""+p1+"" qq: ""+(1.5 * dx * p1 - Math.abs(tolerance * p1)));"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,160,"/                System.out.println(""  p=""+p+"" q: ""+p1+"" ad=""+Math.abs(0.5 * oldDelta * p1));"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,166,"/                    System.out.println(""bisection fallback"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,181,1 = x1 + 0.5*tolerance;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,183,x1 = x1 + 0.5 * tolerance;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,183,1 = x1 - 0.5*tolerance;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,185,x1 = x1 - 0.5 * tolerance;
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,80," @param upperBound for numerical safety, b never is greater than this value."
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,82,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,83,*                   value.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,85,* @throws MathException if a root can not be bracketted.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,83,"ublic static double[] bracket(UnivariateFunction function,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,87,"public static double[] bracket(UnivariateRealFunction function,"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,86,ouble upperBound) {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,87,"eturn bracket( function, initial, lowerBound, upperBound, Integer.MAX_VALUE ) ;"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,90,double upperBound) throws MathException {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,91,"return bracket( function, initial, lowerBound, upperBound,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,92,Integer.MAX_VALUE ) ;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,98," @param upperBound for numerical safety, b never is greater than this value."
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,99," @param maximumIterations to guard against infinite looping, maximum number of iterations to perform"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,103,"* @param upperBound for numerical safety, b never is greater than this"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,104,*                   value.
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,105,"* @param maximumIterations to guard against infinite looping, maximum"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,106,*                          number of iterations to perform
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,108,* @throws MathException if a root can not be bracketted.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,102,"ublic static double[] bracket(UnivariateFunction function,"
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,110,"public static double[] bracket(UnivariateRealFunction function,"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,106,nt maximumIterations) {
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,114,int maximumIterations) throws MathException {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,116,a = function.evaluate(a);
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,117,b = function.evaluate(b);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,124,fa = function.value(a);
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,125,fb = function.value(b);
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,125," For a function, f, this method returns a root c that lies between a and"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,126," b, and satisfies f(c) = 0."
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,128, @param function the function
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,129, @param a lower (or upper) bound of a root
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,130, @param b upper (or lower) bound of a root
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,131, @return a root of f
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,133,"ublic static double bisection(UnivariateFunction function,"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,134,"ouble a,"
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,135,ouble b) {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,136,ouble m;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,137,ouble fm;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,138,ouble fa;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,140,f ( b < a ) {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,141,ouble xtemp = a ;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,142, = b ;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,143, = xtemp ;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,146,a = function.evaluate(a);
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,148,hile(Math.abs(a - b) > EPSILON) {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,149, = (a + b) * 0.5;  // midpoint
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,150,m = function.evaluate(m);
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,152,f(fm * fa > 0.0) {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,153,/ b and m bracket the root.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,154, = m;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,155,a = fm;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,156, else {
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,157,/ a and m bracket the root.
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,158, = m;
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,162,eturn (a + b) * 0.5;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,rivate UnivariateRealFunction f;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,71,* @param f function to solve.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,73,"uper(100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,74,his.f = f;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,74,"super(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,77,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78," @see org.apache.commons.math.UnivariateRealSolver#solve(double, double)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78,* Solve for a zero in the given interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,79,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,80,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,81,* @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,82,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,83,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,86,"public double solve(double min, double max, double initial)"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,87,throws MathException {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,89,"return solve(min, max);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,93,* Solve for a zero root in the given interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,94,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,95,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,96,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,97,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,98,*  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,91,f ((y0>0)== (y1>0)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,111,if ((y0 > 0) == (y1 > 0)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,120,"/                System.out.println(""Forced Bisection"");"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,123,"/ System.out.println(""delta="" + delta + "" olddelta="" + oldDelta);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,125,/ New approximation falls outside bracket. Fall back to bisection.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,143,// New approximation falls outside bracket.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,144,// Fall back to bisection.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,127,"/                    System.out.println(""Fallback Bisection"");"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,134,f ((y1>0) == (y2>0)) {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,152,if ((y1 > 0) == (y2 > 0)) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71, advised to use the default value supplied by the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,72,* advised to use the default value supplied by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,74, @param count
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,76,* @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,95, -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the expected
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,96," absolute value of your roots is of much smaller magnitude, set this to a smaller"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,97, value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,98," Solvers are advised to do a plausibility check with the relative accuracy, but"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,99, clients should not rely on this.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100,* -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,101,"* expected absolute value of your roots is of much smaller magnitude, set"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,102,* this to a smaller value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,104,* Solvers are advised to do a plausibility check with the relative
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,105,"* accuracy, but clients should not rely on this."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,101, @throws MathException if the accuracy can't be achieved by the solver or is
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,102, otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,108,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,109,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,120, This is used to stop iterations if the absolute accuracy can't be achieved
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,121, due to large values or short mantissa length.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,122, If this should be the primary criterium for convergence rather then a safety
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,123," measure, set the absolute accuracy to a ridiculously small value, like 1E-1000."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,130,* This is used to stop iterations if the absolute accuracy can't be
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,131,* achieved due to large values or short mantissa length.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,133,* If this should be the primary criterium for convergence rather then a
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,134,"* safety measure, set the absolute accuracy to a ridiculously small value,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,135,* like 1E-1000.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,125, @throws MathException if the accuracy can't be achieved by the solver or is
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,126, otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,138,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,139,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,128,ublic void setRelativeAccuracy(double Accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,141,public void setRelativeAccuracy(double accuracy) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,146, This is a safety guard and it shouldn't be necesary to change this in general.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,161,* This is a safety guard and it shouldn't be necesary to change this in
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,162,* general.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,148, @throws MathException if the accuracy can't be achieved by the solver or is
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,149, otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,165,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,166,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,151,ublic void setFunctionValueAccuracy(double Accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,168,public void setFunctionValueAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,68,/** Maximum absolute error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,71,/** Maximum relative error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74,/** Maximum error of function. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,77,/** Maximum number of iterations. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,80,/** Default maximum absolute error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,83,/** Default maximum relative error. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,86,/** Default maximum error of function. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,89,/** Default maximum number of iterations. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,92,/** Indicates where a root has been computed. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,95,/** The last computed root. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,99,/** The last iteration count. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,102,/** The function to solve. */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,103,protected UnivariateRealFunction f;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106,* Construct a solver with given iteration count and accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107,* @param f the function to solve.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,108,* @param defaultAbsoluteAccuracy maximum absolue error.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109,* @param defaultMaximalIterationCount maximum number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,112,"UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,116,super();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,118,this.f = f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,96,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,97," @see org.apache.commons.math.UnivariateRealSolver#solve(double, double)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,99,"ublic double solve(double min, double max) throws MathException {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,100,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,103,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,104," @see org.apache.commons.math.UnivariateRealSolver#solve(double, double, double)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106,"ublic double solve(double min, double max, double startValue)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,108,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,112, Get result of last solver run.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,113, @see org.apache.commons.math.UnivariateRealSolver#getResult()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,130,* Access the last computed root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,131,* @return the last computed root.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,132,* @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,138,// TODO: could this be an IllegalStateException instead?
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,123,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,124, @see org.apache.commons.math.UnivariateRealSolver#getIterationCount()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,144,* Access the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,145,* @return the last iteration count.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,146,* @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,153,// TODO: could this be an IllegalStateException instead?
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,137, @param iteratinCount the iteration count to set
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,161,* @param iterationCount the iteration count to set
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,152,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,153, @see org.apache.commons.math.UnivariateRealSolver#setAccuracy(double)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,177,* Set the absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,179,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,180,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,181,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,160,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,161, @see org.apache.commons.math.UnivariateRealSolver#getAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,189,* Get the actual absolute accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,191,* @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,167,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,168, @see org.apache.commons.math.UnivariateRealSolver#resetAbsoluteAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,198,* Reset the absolute accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,174,* Set maximum iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,175, @see org.apache.commons.math.UnivariateRealSolver#setMaximalIterationCount(int)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,205,* Set the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,207,* @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,181,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,182, @see org.apache.commons.math.UnivariateRealSolver#getMaximalIterationCount()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,214,* Get the upper limit for the number of iterations.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,216,* @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,188,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,189, @see org.apache.commons.math.UnivariateRealSolver#resetMaximalIterationCount()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,223,* Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,195,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,196, @see org.apache.commons.math.UnivariateRealSolver#setRelativeAccuracy(double)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,230,* Set the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,232,* @param accuracy the relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,233,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,234,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,202,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,203, @see org.apache.commons.math.UnivariateRealSolver#getRelativeAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,241,* Get the actual relative accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,242,* @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,209,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,210, @see org.apache.commons.math.UnivariateRealSolver#resetRelativeAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,249,* Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,216,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,217, @see org.apache.commons.math.UnivariateRealSolver#setFunctionValueAccuracy(double)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,256,* Set the function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,258,* @param accuracy the accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,259,* @throws MathException if the accuracy can't be achieved by the solver or
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,260,*         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,224,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,225, @see org.apache.commons.math.UnivariateRealSolver#getFunctionValueAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,* Get the actual function value accuracy.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269,* @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,231,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,232, @see org.apache.commons.math.UnivariateRealSolver#resetFunctionValueAccuracy()
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,276,* Reset the actual function accuracy to the default.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,57,mport org.apache.commons.math.analysis.UnivariateFunction;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,59,import org.apache.commons.math.analysis.UnivariateRealSolverFactory;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,nivariateFunction rootFindingFunction = new UnivariateFunction() {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,ublic double evaluate(double x) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,106,UnivariateRealFunction rootFindingFunction =
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,107,new UnivariateRealFunction() {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,114,return 0;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,118,return 0;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,110,/ bracket root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,111,"ouble[] bracket = RootFinding.bracket(rootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,112,"etInitialDomain(p), getDomainLowerBound(p),"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,etDomainUpperBound(p));
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,115,/ find root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,"ouble root = RootFinding.bisection(rootFindingFunction, bracket[0],"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,racket[1]);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,try {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,// bracket root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124,"double[] bracket = RootFinding.bracket(rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,125,"getInitialDomain(p), getDomainLowerBound(p),"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,126,getDomainUpperBound(p));
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,// find root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,double root = UnivariateRealSolverFactory.solve(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,130,"rootFindingFunction, bracket[0], bracket[1]);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,119,eturn root;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,132,return root;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,133,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,134,// this should never happen.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,135,return Double.NaN;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,63,public final class BisectionSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,67,public BisectionSolverTest(String name) {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,68,super(name);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,74,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,75,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,76,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,78,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,79,"result = solver.solve(3, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,80,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,82,"result = solver.solve(1, 4);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,83,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,89,public void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,90,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,91,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,93,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,94,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,95,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,97,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,98,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,100,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,101,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,103,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,104,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,106,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,107,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,109,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,110,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,112,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,113,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,115,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,116,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,118,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,119,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,121,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,122,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,124,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,125,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"

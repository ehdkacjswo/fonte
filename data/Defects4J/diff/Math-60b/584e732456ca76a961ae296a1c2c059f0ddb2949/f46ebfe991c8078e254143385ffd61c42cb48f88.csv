is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,153,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,154,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,155,public RealMatrix multiply(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,156,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,157,try {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,158,return multiply((SparseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,159,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,161,// safety check
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,162,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,164,final int outCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,165,"final DenseRealMatrix out = new DenseRealMatrix(rowDimension, outCols);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,166,for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,167,iterator.advance();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,168,final double value = iterator.value();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,169,final int key      = iterator.key();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,170,final int i        = key / columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,171,final int k        = key % columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,172,for (int j = 0; j < outCols; ++j) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,173,"out.addToEntry(i, j, value * m.getEntry(k, j));"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,177,return out;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,183,* Returns the result of postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,185,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,186,* @return     this * m
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,187,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,188,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,190,public SparseRealMatrix multiply(SparseRealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,192,// safety check
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,193,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,195,final int outCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,196,"SparseRealMatrix out = new SparseRealMatrix(rowDimension, outCols);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,197,for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,198,iterator.advance();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,199,final double value = iterator.value();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,200,final int key      = iterator.key();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,201,final int i        = key / columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,202,final int k        = key % columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,203,for (int j = 0; j < outCols; ++j) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,204,"final int rightKey = m.computeKey(k, j);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,205,if (m.entries.containsKey(rightKey)) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,206,"final int outKey = out.computeKey(i, j);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,207,final double outValue =
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,208,out.entries.get(outKey) + value * m.entries.get(rightKey);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,209,if (outValue == 0.0) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,210,out.entries.remove(outKey);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,211,} else {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,212,"out.entries.put(outKey, outValue);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,218,return out;
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,19,mport org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,20,mport org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,23,import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,24,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,199,"assertClose(""inverse multiply"", m.multiply(new DenseRealMatrix(testDataInv)), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,200,entryTolerance);

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,62,mport org.apache.commons.math.stat.DescriptiveStatistics;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,62,import org.apache.commons.math.stat.SummaryStatistics;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,84, @version $Revision: 1.12 $ $Date: 2004/01/15 05:22:08 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,84,* @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,126,escriptiveStatistics getSampleStats() throws IllegalStateException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,126,SummaryStatistics getSampleStats() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,mport org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,import org.apache.commons.math.stat.SummaryStatistics;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,95, @version $Revision: 1.13 $ $Date: 2004/01/15 05:22:08 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,95,* @version $Revision: 1.14 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,104,escriptiveStatistics sampleStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,104,SummaryStatistics sampleStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,ampleStats = new StorelessDescriptiveStatisticsImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,sampleStats = SummaryStatistics.newInstance();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,escriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,SummaryStatistics stats = SummaryStatistics.newInstance();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,escriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,SummaryStatistics stats = (SummaryStatistics)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,239,(double)((DescriptiveStatistics)binStats.get(0)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,239,((double)((SummaryStatistics)binStats.get(0)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243,(double)((DescriptiveStatistics)binStats.get(i)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243,((double)((SummaryStatistics)binStats.get(i)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,escriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,SummaryStatistics stats = (SummaryStatistics)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,298,ublic DescriptiveStatistics getSampleStats() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,298,public SummaryStatistics getSampleStats() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,81, @version $Revision: 1.10 $ $Date: 2004/01/15 05:22:08 $
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,81,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,243, @deprecated use {@link #setValuesFileURL(URL)} to be removed before 0.1 release
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,58,import org.apache.commons.math.stat.univariate.moment.GeometricMean;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,59,import org.apache.commons.math.stat.univariate.moment.Kurtosis;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,60,import org.apache.commons.math.stat.univariate.moment.Mean;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,61,import org.apache.commons.math.stat.univariate.moment.Skewness;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,62,import org.apache.commons.math.stat.univariate.moment.Variance;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,63,import org.apache.commons.math.stat.univariate.rank.Max;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,64,import org.apache.commons.math.stat.univariate.rank.Min;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,66,import org.apache.commons.math.stat.univariate.summary.Sum;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,67,import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,68,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,61, Extends {@link AbstractStorelessDescriptiveStatistics} to include univariate statistics
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,62, that may require access to the full set of sample values.
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,63, @version $Revision: 1.2 $ $Date: 2004/01/18 03:45:02 $
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,71,* Abstract superclass for DescriptiveStatistics implementations.
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,73,* @version $Revision: 1.3 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,66,xtends AbstractStorelessDescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,68,** Percentile */
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,69,rotected Percentile percentile = new Percentile(50);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,76,extends DescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,75,uper();
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,82,ublic AbstractDescriptiveStatistics(int window) {
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,83,uper(window);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,88,public AbstractDescriptiveStatistics(int window)  {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,89,setWindowSize(window);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,93,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSum()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,95,public double getSum() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,96,return apply(new Sum());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,100,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSumsq()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,102,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,103,return apply(new SumOfSquares());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,107,* @see org.apache.commons.math.stat.DescriptiveStatistics#getMean()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,109,public double getMean() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,110,return apply(new Mean());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,114,* @see org.apache.commons.math.stat.DescriptiveStatistics#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,116,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,117,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,118,if (getN() > 0) {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,119,if (getN() > 1) {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,120,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,121,} else {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,122,stdDev = 0.0;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,125,return (stdDev);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,129,* @see org.apache.commons.math.stat.DescriptiveStatistics#getVariance()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,131,public double getVariance() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,132,return apply(new Variance());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,136,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSkewness()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,138,public double getSkewness() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,139,return apply(new Skewness());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,143,* @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosis()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,145,public double getKurtosis() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,146,return apply(new Kurtosis());
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,87, @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,150,* @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosisClass()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,152,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,153,int kClass = MESOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,155,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,156,if (kurtosis > 0) {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,157,kClass = LEPTOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,158,} else if (kurtosis < 0) {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,159,kClass = PLATYKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,161,return (kClass);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,165,* @see org.apache.commons.math.stat.DescriptiveStatistics#getMax()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,167,public double getMax() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,168,return apply(new Max());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,172,* @see org.apache.commons.math.stat.DescriptiveStatistics#getMin()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,174,public double getMin() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,175,return apply(new Min());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,179,* @see org.apache.commons.math.stat.DescriptiveStatistics#getGeometricMean()
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,181,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,182,return apply(new GeometricMean());
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,186,* @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile()
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,90,ercentile.setPercentile(p);
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,91,eturn apply(percentile);
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,189,return apply(new Percentile(p));
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,193,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,194,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,195,* have been added.
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,196,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,198,public String toString() {
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,199,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,200,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,201,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,202,"outBuffer.append(""min: "" + getMin() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,203,"outBuffer.append(""max: "" + getMax() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,204,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,205,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,206,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,207,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,208,return outBuffer.toString();
False,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,104, @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,221,* @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,236,* @see org.apache.commons.math.stat.DescriptiveStatistics#apply(UnivariateStatistic)
True,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,238,public abstract double apply(UnivariateStatistic stat);
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,63, @version $Revision: 1.3 $ $Date: 2004/01/18 03:45:02 $
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,65,* @version $Revision: 1.4 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,65,ublic abstract class DescriptiveStatistics implements Serializable{
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,67,"public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {"
False,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,198,ublic abstract int getN();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,200,public abstract long getN();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,286,* Apply the given statistic to the data associated with this set of statistics.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,287,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,288,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,290,public abstract double apply(UnivariateStatistic stat);
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,58,mport org.apache.commons.math.stat.univariate.*;
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,58,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,60,import org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,62, @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,64,* @version $Revision: 1.3 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,66,** A contractable double array is used.  memory is reclaimed when
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,67, the storage of the array becomes too empty.
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,68,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,69,protected int windowSize = INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,72,*  Stored data values
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,72, Construct a DescriptiveStatisticsImpl
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,77,* Construct a DescriptiveStatisticsImpl with infinite window
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,80,super();
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,85,* Construct a DescriptiveStatisticsImpl with finite window
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,87,public DescriptiveStatisticsImpl(int window) {
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,88,super(window);
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,89,eDA = new ContractableDoubleArray();
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,92,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,93,return windowSize;
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,112,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,114,public double[] getSortedValues() {
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,115,double[] sort = getValues();
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,116,Arrays.sort(sort);
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,117,return sort;
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,101, @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,128,* @see org.apache.commons.math.stat.DescriptiveStatistics#getN()
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,103,ublic int getN() {
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,130,public long getN() {
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,108, @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,135,* @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,128, @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,155,* @see org.apache.commons.math.stat.DescriptiveStatistics#clear()
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,131,uper.clear();
False,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,136, @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,162,* @see org.apache.commons.math.stat.DescriptiveStatistics#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,9,* are met:
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,57,*  Reporting interface for basic univariate statistics.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,59,* @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,61,public interface StatisticalSummary {
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,63,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,64,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,65,* @return The mean or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,67,public abstract double getMean();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,69,* Returns the variance of the available values.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,70,"* @return The variance, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,71,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,73,public abstract double getVariance();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,75,* Returns the standard deviation of the available values.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,76,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,77,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,79,public abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,81,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,82,* @return The max or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,84,public abstract double getMax();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,86,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,87,* @return The min or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,89,public abstract double getMin();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,91,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,92,* @return The number of available values
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,94,public abstract long getN();
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,96,* Returns the sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,97,* @return The sum or Double.NaN if no values have been added
True,src/java/org/apache/commons/math/stat/StatisticalSummary.java,src/java/org/apache/commons/math/stat/StatisticalSummary.java,99,public abstract double getSum();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,58,mport org.apache.commons.math.stat.univariate.*;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,59,mport org.apache.commons.math.util.FixedDoubleArray;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,63, Accumulates univariate statistics for values fed in
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,64, through the addValue() method.  Does not store raw data values.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,65, All data are represented internally as doubles.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,66," Integers, floats and longs can be added, but they will be converted"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,67, to doubles by addValue().
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,69, @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,71,ublic class StorelessDescriptiveStatisticsImpl extends AbstractStorelessDescriptiveStatistics implements Serializable {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,73,** fixed storage */
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,74,rivate FixedDoubleArray storage = null;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,76,** Creates new univariate with an infinite window */
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,77,ublic StorelessDescriptiveStatisticsImpl() {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,78,uper();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,82, Creates a new univariate with a fixed window
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,83, @param window Window Size
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,85,ublic StorelessDescriptiveStatisticsImpl(int window) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,86,uper(window);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,87,torage = new FixedDoubleArray(window);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,91,"  If windowSize is set to Infinite, moments"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,92,  are calculated using the following
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,93," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,94, recursive strategy
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,95, </a>.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,96," Otherwise, stat methods delegate to StatUtils."
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,97, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,99,ublic void addValue(double value) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,101,f (storage != null) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,102,* then all getters deligate to StatUtils
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,103, and this clause simply adds/rolls a value in the storage array
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,105,f (getWindowSize() == n) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,106,torage.addElementRolling(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,107, else {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,108,++;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,109,torage.addElement(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,112, else {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,113,* If the windowSize is infinite don't store any values and there
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,114, is no need to discard the influence of any single item.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,116,++;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,117,in.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,118,ax.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,119,um.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,120,umsq.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,121,umLog.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,122,eoMean.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,124,oment.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,125,/mean.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,126,/variance.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,127,/skewness.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,128,/kurtosis.increment(value);
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,133, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,134, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,135, have been added.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,136, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,138,ublic String toString() {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,139,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,140,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,141,"utBuffer.append(""n: "" + getN() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,142,"utBuffer.append(""min: "" + getMin() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,143,"utBuffer.append(""max: "" + getMax() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,144,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,145,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,146,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,147,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,148,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,152, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,154,ublic void clear() {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,155,uper.clear();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,156,f (getWindowSize() != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,157,torage = new FixedDoubleArray(getWindowSize());
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,162, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,163, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,164, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,166,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,168,f (storage != null) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,169,eturn stat.evaluate(
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,170,"torage.getValues(),"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,171,"torage.start(),"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,172,torage.getNumElements());
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,173, else if (stat instanceof StorelessUnivariateStatistic) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,174,eturn ((StorelessUnivariateStatistic) stat).getResult();
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,177,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,180,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,181, @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,183,ublic double[] getValues() {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,184,"hrow new UnsupportedOperationException(""Only Available with Finite Window"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,187,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,188, @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,190,ublic double[] getSortedValues() {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,191,"hrow new UnsupportedOperationException(""Only Available with Finite Window"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,194,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,195, @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,197,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,198,"hrow new UnsupportedOperationException(""Only Available with Finite Window"");"
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,201,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,202, @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,204,ublic double getPercentile(double p) {
False,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,205,"hrow new UnsupportedOperationException(""Only Available with Finite Window"");"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,9,* are met:
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,58,import org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,61,* Abstract factory class for univariate statistical summaries.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,63,* @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,65,"public abstract class SummaryStatistics implements Serializable, StatisticalSummary{"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,68,* Create an instance of a <code>SummaryStatistics</code>
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,69,* @return a new factory.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,71,"public static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,72,return newInstance(Class.forName(cls));
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,75,* Create an instance of a <code>DescriptiveStatistics</code>
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,76,* @return a new factory.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,78,"public static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,79,return (SummaryStatistics)cls.newInstance();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,83,* Create an instance of a <code>DescriptiveStatistics</code>
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,84,* @return a new factory.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,86,public static SummaryStatistics newInstance() {
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,87,SummaryStatistics factory = null;
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,88,try {
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,89,DiscoverClass dc = new DiscoverClass();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,90,factory = (SummaryStatistics) dc.newInstance(
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,91,"SummaryStatistics.class,"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,92,"""org.apache.commons.math.stat.SummaryStatisticsImpl"");"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,93,} catch(Exception ex) {
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,94,// ignore as default implementation will be used.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,96,return factory;
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,100,* Adds the value to the data to be summarized
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,101,* @param v the value to be added
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,103,public abstract void addValue(double v);
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,106,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,107,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,108,* @return The mean or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,110,public abstract double getMean();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,113,"* Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,114,* geometric mean </a> of the available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,115,"* @return The geometricMean, Double.NaN if no values have been added,"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,116,* or if the productof the available values is less than or equal to 0.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,118,public abstract double getGeometricMean();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,121,* Returns the variance of the available values.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,122,"* @return The variance, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,123,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,125,public abstract double getVariance();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,128,* Returns the standard deviation of the available values.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,129,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,130,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,132,public abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,135,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,136,* @return The max or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,138,public abstract double getMax();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,141,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,142,* @return The min or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,144,public abstract double getMin();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,147,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,148,* @return The number of available values
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,150,public abstract long getN();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,153,* Returns the sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,154,* @return The sum or Double.NaN if no values have been added
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,156,public abstract double getSum();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,159,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,160,* @return The sum of the squares or Double.NaN if no
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,161,* values have been added.
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,163,public abstract double getSumsq();
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,166,* Resets all statistics
True,src/java/org/apache/commons/math/stat/SummaryStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatistics.java,168,public abstract void clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,4, Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,57,mport org.apache.commons.math.stat.univariate.moment.FourthMoment;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,56,import org.apache.commons.math.stat.univariate.moment.SecondMoment;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,57,import org.apache.commons.math.stat.univariate.moment.FirstMoment;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,59,mport org.apache.commons.math.stat.univariate.moment.Kurtosis;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,61,mport org.apache.commons.math.stat.univariate.moment.Skewness;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,70," Provides a default {@link DescriptiveStatistics} implementation, including only statistics"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,71, that can be computed in one pass through the data without storing the full set of sample
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,72, data values.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,73, @version $Revision: 1.2 $ $Date: 2004/01/18 03:45:02 $
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,68,* Provides a default {@link SummaryStatistics} implementation.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,70,* @version $Revision: 1.1 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,75,ublic abstract class AbstractStorelessDescriptiveStatistics extends DescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,77,** hold the window size **/
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,78,rotected int windowSize = INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,72,public class SummaryStatisticsImpl extends SummaryStatistics {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,81,rotected int n = 0;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,75,protected long n = 0;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,83,"** FourthMoment is used in calculating mean, variance,skew and kurtosis */"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,84,rotected FourthMoment moment = null;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,77,/** FirstMoment is used to compute the mean */
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,78,protected FirstMoment firstMoment = null;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,80,/** SecondMoment is used to compute the variance */
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,81,protected SecondMoment secondMoment = null;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,110,** skewness of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,111,rotected Skewness skewness = null;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,113,** kurtosis of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,114,rotected Kurtosis kurtosis = null;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,117, Construct an AbstractStorelessDescriptiveStatistics
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,108,* Construct a SummaryStatistics
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,119,ublic AbstractStorelessDescriptiveStatistics() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,120,uper();
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,110,public SummaryStatisticsImpl() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,129,oment = new FourthMoment();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,130,ean = new Mean(moment);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,131,ariance = new Variance(moment);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,132,kewness = new Skewness(moment);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,133,urtosis = new Kurtosis(moment);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,117,secondMoment = new SecondMoment();
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,118,firstMoment = new FirstMoment();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,137, Construct an AbstractStorelessDescriptiveStatistics with a window
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,138, @param window The Window Size
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,122,* Add a value to the data
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,124,* @param value  the value to add
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,140,ublic AbstractStorelessDescriptiveStatistics(int window) {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,141,his();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,142,etWindowSize(window);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,126,public void addValue(double value) {
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,127,sum.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,128,sumsq.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,129,min.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,130,max.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,131,sumLog.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,132,geoMean.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,133,firstMoment.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,134,secondMoment.increment(value);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,135,n++;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,146, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,147, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,148, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,150,ublic abstract double apply(UnivariateStatistic stat);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,154," If windowSize is set to Infinite,"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,155, statistics are calculated using the following
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,156," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,157, recursive strategy
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,158, </a>.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,159, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,161,ublic abstract void addValue(double value);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,166,ublic int getN() {
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,141,public long getN() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,174,eturn apply(sum);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,149,return sum.getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,178, @see org.apache.commons.math.stat.Univariate#getSumsq()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,153,* Returns the sum of the squares of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,154,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,155,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,157,* @return The sum of squares
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,181,eturn apply(sumsq);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,160,return sumsq.getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,185, @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,164,* Returns the mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,165,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,166,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,168,* @return the mean
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,188,eturn apply(mean);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,171,return new Mean(firstMoment).getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,192, Returns the standard deviation for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,193, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,175,* Returns the standard deviation of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,176,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,177,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,179,* @return the standard deviation
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,208, Returns the variance of the values that have been added via West's
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,209, algorithm as described by
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,210," <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,211," J. G. Lewis 1979, <i>Communications of the ACM</i>,"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,212," vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,194,* Returns the variance of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,195,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,196,*  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,214, @return The variance of a set of values.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,215,         Double.NaN is returned for an empty
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,216,         set of values and 0.0 is returned for
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,217,         a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,198,* @return the variance
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,220,eturn apply(variance);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,224, Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,225," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,226, Equation (6) for k-Statistics</a>.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,227, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,228,         an empty set of values and 0.0 is returned for a
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,229,         &lt;= 2 value set.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,231,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,232,eturn apply(skewness);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,201,return new Variance(secondMoment).getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,236, Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,237," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,238, Equation (7) for k-Statistics</a>.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,205,* Returns the maximum of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,206,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,207,*  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,240, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,241,         an empty set of values and 0.0 is returned for a &lt;= 3
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,242,         value set.
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,244,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,245,eturn apply(kurtosis);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,249, @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosisClass()
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,251,ublic int getKurtosisClass() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,252,nt kClass = MESOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,254,ouble kurtosis = getKurtosis();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,255,f (kurtosis > 0) {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,256,Class = LEPTOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,257, else if (kurtosis < 0) {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,258,Class = PLATYKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,260,eturn (kClass);
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,264, @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,209,* @return the maximum
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,267,eturn apply(max);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,212,return max.getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,271, @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,216,* Returns the minimum of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,217,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,218,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,220,* @return the minimum
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,274,eturn apply(min);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,223,return min.getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,278, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,227,* Returns the geometric mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,228,* <p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,229,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,231,* @return the geometric mean
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,281,eturn apply(geoMean);
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,234,return geoMean.getResult();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,286, univariate statistics from values that
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,239,* summary statistics from values that
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,292,"utBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,245,"outBuffer.append(""SummaryStatistics:\n"");"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,298,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,299,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,304, @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,255,* Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,315,oment.clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,316,ean.clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,317,ariance.clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,318,kewness.clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,319,urtosis.clear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,323, @see org.apache.commons.math.stat.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,325,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,326,eturn windowSize;
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,330, @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,332,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,333,lear();
False,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,334,his.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,265,firstMoment.clear();
True,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,src/java/org/apache/commons/math/stat/SummaryStatisticsImpl.java,266,secondMoment.clear();
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,61, @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,61,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,359,"ouble t(double mu, DescriptiveStatistics sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,359,"double t(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,380,"ouble t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,380,"double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,409, @param sampleStats1 DescriptiveStatistics describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,410, @param sampleStats2 DescriptiveStatistics describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,409,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,410,* @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,414,"ouble tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,414,"double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,456, @param sampleStats1 DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,457, @param sampleStats2 DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,456,* @param sampleStats1 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,457,* @param sampleStats2 StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,463,"oolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,463,"boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,498, @param sampleStats DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,498,* @param sampleStats StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,503,"oolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,503,"boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,529, @param sampleStats DescriptiveStatistics describing sample data
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,529,* @param sampleStats StatisticalSummary describing sample data
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,533,"ouble tTest(double mu, DescriptiveStatistics sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,533,"double tTest(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,67, @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,67,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,258, @param sampleStats DescriptiveStatistics holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,258,* @param sampleStats StatisticalSummary holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"ublic double t(double mu, DescriptiveStatistics sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"public double t(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,275, @param sampleStats1 DescriptiveStatistics describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,276, @param sampleStats2 DescriptiveStatistics describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,275,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,276,* @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,"escriptiveStatistics sampleStats1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,escriptiveStatistics sampleStats2)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,"StatisticalSummary sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,StatisticalSummary sampleStats2)
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,299, @param sampleStats1 DescriptiveStatistics describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,300, @param sampleStats2 DescriptiveStatistics describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,299,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,300,* @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,305,"escriptiveStatistics sampleStats1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,306,escriptiveStatistics sampleStats2)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,305,"StatisticalSummary sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,306,StatisticalSummary sampleStats2)
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,323, @param sampleStats1 DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324, @param sampleStats2 DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,323,* @param sampleStats1 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324,* @param sampleStats2 StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,"escriptiveStatistics sampleStats1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"escriptiveStatistics sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,"StatisticalSummary sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"StatisticalSummary sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,344, @param sampleStats DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,344,* @param sampleStats StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,"escriptiveStatistics sampleStats,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,"StatisticalSummary sampleStats,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,363, @param sampleStats DescriptiveStatistics describing sample data
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,363,* @param sampleStats StatisticalSummary describing sample data
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,367,"ublic double tTest(double mu, DescriptiveStatistics sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,367,"public double tTest(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,67, @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,67,* @version $Revision: 1.12 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,71,tatic final long serialVersionUID = -803343206421984070L;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,71,static final long serialVersionUID = -803343206421984070L;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,74,rotected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,74,protected long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,63, @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,63,* @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,70,rotected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,70,protected long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,67, @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,67,* @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,83,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,83,private long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,61, @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,61,* @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,77,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,77,private long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62, @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,61,* Updating forumulas use West's algorithm as described in
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62,"* <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,63,"* J. G. Lewis 1979, <i>Communications of the ACM</i>,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,64,"* vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,66,* @version $Revision: 1.15 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,90,rotected int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,94,protected long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,67, @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,67,* @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,74,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,74,private long n = 0;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,67, @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,67,* @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,74,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,74,private long n = 0;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,mport org.apache.commons.math.stat.DescriptiveStatistics;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,64,mport org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,import org.apache.commons.math.stat.SummaryStatistics;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,69, @version $Revision: 1.10 $ $Date: 2004/01/15 05:22:08 $
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,68,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,153,escriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,152,SummaryStatistics stats = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,mport org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,import org.apache.commons.math.stat.SummaryStatistics;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,mport org.apache.commons.math.stat.DescriptiveStatistics;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,70,* @version $Revision: 1.9 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,escriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,407,SummaryStatistics u = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,mport org.apache.commons.math.stat.DescriptiveStatistics;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,62,mport org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,import org.apache.commons.math.stat.SummaryStatistics;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,67, @version $Revision: 1.11 $ $Date: 2004/01/15 07:31:44 $
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,66,* @version $Revision: 1.12 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,106,escriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,105,SummaryStatistics stats = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,117,tats = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,116,stats = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64,mport org.apache.commons.logging.*;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64,import org.apache.commons.logging.LogFactory;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,65,import org.apache.commons.logging.Log;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67, @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,68,* @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,ublic class CertifiedDataTest extends TestCase {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,rotected DescriptiveStatistics u = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,70,public class CertifiedDataTest extends TestCase  {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,SummaryStatistics u = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,108, = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,117,"oadStats(""data/Lew.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,116,"loadStats(""data/Lew.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,121,"oadStats(""data/Lottery.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,120,"loadStats(""data/Lottery.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,125,"oadStats(""data/PiDigits.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,124,"loadStats(""data/PiDigits.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,129,"oadStats(""data/Mavro.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,128,"loadStats(""data/Mavro.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,137,"oadStats(""data/NumAcc1.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,136,"loadStats(""data/NumAcc1.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151, = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,150,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,153,"oadStats(""data/Lew.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,152,"loadStats(""data/Lew.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,157,"oadStats(""data/Lottery.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,156,"loadStats(""data/Lottery.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,161,"oadStats(""data/PiDigits.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,160,"loadStats(""data/PiDigits.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,165,"oadStats(""data/Mavro.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,164,"loadStats(""data/Mavro.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,173,"oadStats(""data/NumAcc1.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,172,"loadStats(""data/NumAcc1.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,184,* @param statistical summary
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,186,rivate void loadStats(String resource) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,186,"private void loadStats(String resource, Object u) {"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,188,DescriptiveStatistics d = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,189,SummaryStatistics s = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,190,if (u instanceof DescriptiveStatistics) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,191,d = (DescriptiveStatistics) u;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,192,} else {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,193,s = (SummaryStatistics) u;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,190,.clear();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,196,"u.getClass().getDeclaredMethod(""clear"", null).invoke(u, null);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,219,.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,224,if (d != null) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,225,d.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,226,}  else {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,227,s.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,238,} catch (Exception ioe) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,239,"log.error(ioe.getMessage(), ioe);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,64, @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,64,* @version $Revision: 1.2 $ $Date: 2004/01/25 21:30:41 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,77,/** hold the window size **/
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,78,protected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;
False,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,152,ublic int getN() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,155,public long getN() {
False,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,186,uper.clear();
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,223,* @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,225,public synchronized void setWindowSize(int windowSize) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,226,this.windowSize = windowSize;
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,227,//Discard elements from the front of the list if the windowSize is less than
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,228,// the size of the list.
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,229,int extra = list.size() - windowSize;
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,230,for (int i = 0; i < extra; i++) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,231,list.remove(0);
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,235,public int getWindowSize() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,236,return windowSize;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66, @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66, @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66,* @version $Revision: 1.11 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,64, @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,64,* @version $Revision: 1.10 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,189,escriptiveStatistics sampleStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,189,SummaryStatistics sampleStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,192,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,193,torelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,192,SummaryStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,193,SummaryStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,224,escriptiveStatistics nullStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,225,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,226,ullStats =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,227,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229, catch (InstantiationException e6) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231,6.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232, catch (IllegalAccessException e6) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234,6.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,224,SummaryStatistics nullStats = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,252,escriptiveStatistics emptyStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,253,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,254,mptyStats =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,256,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,257, catch (InstantiationException e4) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,258,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,4.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260, catch (IllegalAccessException e4) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,262,4.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,242,SummaryStatistics emptyStats =SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,288,escriptiveStatistics tooShortStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,289,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,290,ooShortStats =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,291,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,292,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,293, catch (InstantiationException e3) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,294,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,295,3.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,296, catch (IllegalAccessException e3) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,297,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,298,3.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,268,SummaryStatistics tooShortStats = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,342,escriptiveStatistics oneSidedPStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,343,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,344,neSidedPStats =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,345,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,346,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,347, catch (InstantiationException e2) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,348,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,349,2.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,350, catch (IllegalAccessException e2) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,351,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,352,2.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,312,SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,421,escriptiveStatistics sampleStats1 = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,422,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,423,ampleStats1 =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,424,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,425,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,426, catch (InstantiationException e1) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,427,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,428,1.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,429, catch (IllegalAccessException e1) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,430,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,431,1.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,381,SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,437,escriptiveStatistics sampleStats2 = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,438,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,439,ampleStats2 =
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,440,escriptiveStatistics.newInstance(
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,441,torelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,442, catch (InstantiationException e) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,443,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,444,.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,445, catch (IllegalAccessException e) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,446,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,447,.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,387,SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,60, @version $Revision: 1.9 $ $Date: 2003/11/19 13:35:10 $
True,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,60,* @version $Revision: 1.10 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,56,mport org.apache.commons.math.stat.DescriptiveStatistics;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,57,mport org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,56,import org.apache.commons.math.stat.SummaryStatistics;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,66, @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,65,* @version $Revision: 1.2 $ $Date: 2004/01/25 21:30:41 $
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,99,torelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,98,SummaryStatistics u = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,118,torelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,117,SummaryStatistics u = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,125,"ssertTrue(""skew of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,126,ouble.isNaN(u.getSkewness() ) );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,127,"ssertTrue(""kurtosis of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,128,ouble.isNaN(u.getKurtosis() ) );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,141,"ssertTrue(""skew should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,142,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,143,"ssertTrue(""kurtosis should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,144,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,152,"ssertTrue(""skew should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,153,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,154,"ssertTrue(""kurtosis should be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,155,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,157,* n=3 */
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,158,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,159,"ssertTrue(""skew should not be zero (n = 3)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,160,.getSkewness() != 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,161,"ssertTrue(""kurtosis should be zero (n = 3)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,162,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,164,* n=4 */
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,165,.addValue(three);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,166,"ssertTrue(""kurtosis should not be zero (n = 4)"","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,167,.getKurtosis() != 0.0);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,172,torelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(10);
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,146,SummaryStatistics u = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,182,/ Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,183,/ of a discarded element
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,184,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,185,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,187,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,189,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,190,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,193,ublic void testRollingMinMax() {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,194,torelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(3);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,195,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,196,.addValue( 5.0 );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,197,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,198,.addValue( 4.0 ); // discarding min
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,199,"ssertEquals( ""min not expected"", 3.0,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,200,".getMin(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,201,.addValue(1.0);  // discarding max
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,202,"ssertEquals( ""max not expected"", 4.0,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,203,".getMax(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,207,torelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,158,SummaryStatistics u = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,235,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,236,escriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,238,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,239," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,240,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,241,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,242,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,245,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,246,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,247,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,248,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,60, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,60,* @version $Revision: 1.9 $ $Date: 2004/01/25 21:30:41 $

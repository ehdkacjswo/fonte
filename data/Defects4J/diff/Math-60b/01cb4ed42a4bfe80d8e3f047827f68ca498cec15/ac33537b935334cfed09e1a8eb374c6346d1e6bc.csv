is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,652,// org.apache.commons.math.stat.descriptive.moment.SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,18,package org.apache.commons.math.stat.descriptive.moment;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,22,import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,25,* <p>Computes the semivariance of a set of values with respect to a given cutoff value.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,26,* We define the <i>downside semivariance</i> of a set of values <code>x</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,27,* against the <i>cutoff value</i> <code>cutoff</code> to be <br/>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,28,* <code>&Sigma; (x[i] - target)<sup>2</sup> / df</code> <br/>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,29,* where the sum is taken over all <code>i</code> such that <code>x[i] < cutoff</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,30,* and <code>df</code> is the length of <code>x</code> (non-bias-corrected) or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,31,* one less than this number (bias corrected).  The <i>upside semivariance</i>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,32,"* is defined similarly, with the sum taken over values of <code>x</code> that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,33,* exceed the cutoff value.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,35,"* <p>The cutoff value defaults to the mean, bias correction defaults to <code>true</code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,36,"* and the ""variance direction"" (upside or downside) defaults to downside.  The variance direction"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,37,* and bias correction may be set using property setters or their values can provided as
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,38,"* parameters to {@link #evaluate(double[], double, Direction, boolean, int, int)}.</p>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,40,"* <p>If the input array is null, <code>evaluate</code> methods throw"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,41,"* <code>IllegalArgumentException.</code>  If the array has length 1, <code>0</code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,42,"* is returned, regardless of the value of the <code>cutoff.</code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,44,* <p><strong>Note that this class is not intended to be threadsafe.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,45,"* multiple threads access an instance of this class concurrently, and one or"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,46,"* more of these threads invoke property setters, external synchronization must"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,47,* be provided to ensure correct results.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,49,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,50,* @since 2.1
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,53,public class SemiVariance extends AbstractUnivariateStatistic implements Serializable {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,55,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,56,private static final long serialVersionUID = -2653430366886024994L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,59,* Determines whether or not bias correction is applied when computing the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,60,* value of the statisic.  True means that bias is corrected.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,62,private boolean biasCorrected = true;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,65,* Determines whether to calculate downside or upside SemiVariance.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,67,private Direction varianceDirection = Direction.DOWNSIDE;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,70,* The UPSIDE Direction is used to specify that the observations above the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,71,* cutoff point will be used to calculate SemiVariance.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,73,public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,76,* The DOWNSIDE Direction is used to specify that the observations below
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,77,* the cutoff point will be used to calculate SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,79,public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,82,* Constructs a SemiVariance with default (true) <code>biasCorrected</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,83,* property and default (Downside) <code>varianceDirection</code> property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,85,public SemiVariance() {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,89,* Constructs a SemiVariance with the specified <code>biasCorrected</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,90,* property and default (Downside) <code>varianceDirection</code> property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,92,* @param biasCorrected  setting for bias correction - true means
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,93,* bias will be corrected and is equivalent to using the argumentless
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,94,* constructor
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,96,public SemiVariance(final boolean biasCorrected) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,97,this.biasCorrected = biasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,102,* Constructs a SemiVariance with the specified <code>Direction</code> property
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,103,* and default (true) <code>biasCorrected</code> property
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,105,* @param direction  setting for the direction of the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,106,* to calculate
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,108,public SemiVariance(final Direction direction) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,109,this.varianceDirection = direction;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,114,* Constructs a SemiVariance with the specified <code>isBiasCorrected</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,115,* property and the specified <code>Direction</code> property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,117,* @param corrected  setting for bias correction - true means
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,118,* bias will be corrected and is equivalent to using the argumentless
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,119,* constructor
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,121,* @param direction  setting for the direction of the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,122,* to calculate
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,124,"public SemiVariance(final boolean corrected, final Direction direction) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,125,this.biasCorrected = corrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,126,this.varianceDirection = direction;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,131,"* Copy constructor, creates a new {@code SemiVariance} identical"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,132,* to the {@code original}
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,134,* @param original the {@code SemiVariance} instance to copy
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,136,public SemiVariance(final SemiVariance original) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,137,"copy(original, this);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,142,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,144,@Override
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,145,public SemiVariance copy() {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,146,SemiVariance result = new SemiVariance();
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,147,"copy(this, result);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,148,return result;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,153,* Copies source to dest.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,154,* <p>Neither source nor dest can be null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,156,* @param source SemiVariance to copy
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,157,* @param dest SemiVariance to copy to
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,158,* @throws NullPointerException if either source or dest is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,160,"public static void copy(final SemiVariance source, SemiVariance dest) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,161,dest.biasCorrected = source.biasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,162,dest.varianceDirection = source.varianceDirection;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,167,"* This method calculates {@link SemiVariance} for the entire array against the mean, using"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,168,* instance properties varianceDirection and biasCorrection.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,170,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,171,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,172,* @throws IllegalArgumentException if values is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,175,@Override
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,176,public double evaluate(final double[] values) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,177,if (values == null) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,178,"throw MathRuntimeException.createIllegalArgumentException(""input values array is null"");"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,180,"return evaluate(values, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,185,"* <p>Returns the {@link SemiVariance} of the designated values against the mean, using"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,186,* instance properties varianceDirection and biasCorrection.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,188,* <p>Returns <code>NaN</code> if the array is empty and throws
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,189,* <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,191,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,192,* @param start index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,193,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,194,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,195,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,198,@Override
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,199,"public double evaluate(final double[] values, final int start, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,200,"double m = (new Mean()).evaluate(values, start, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,201,"return evaluate(values, m, varianceDirection, biasCorrected, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,206,"* This method calculates {@link SemiVariance} for the entire array against the mean, using"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,207,* the current value of the biasCorrection instance property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,209,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,210,* @param direction the {@link Direction} of the semivariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,211,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,212,* @throws IllegalArgumentException if values is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,215,"public double evaluate(final double[] values, Direction direction) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,216,double m = (new Mean()).evaluate(values);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,217,"return evaluate (values, m, direction, biasCorrected, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,221,"* <p>Returns the {@link SemiVariance} of the designated values against the cutoff, using"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,222,* instance properties variancDirection and biasCorrection.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,224,* <p>Returns <code>NaN</code> if the array is empty and throws
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,225,* <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,227,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,228,* @param cutoff the reference point
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,229,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,230,* @throws IllegalArgumentException if values is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,232,"public double evaluate(final double[] values, final double cutoff) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,233,"return evaluate(values, cutoff, varianceDirection, biasCorrected, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,237,* <p>Returns the {@link SemiVariance} of the designated values against the cutoff in the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,238,"* given direction, using the current value of the biasCorrection instance property.</p>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,240,* <p>Returns <code>NaN</code> if the array is empty and throws
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,241,* <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,243,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,244,* @param cutoff the reference point
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,245,* @param direction the {@link Direction} of the semivariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,246,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,247,* @throws IllegalArgumentException if values is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,249,"public double evaluate(final double[] values, final double cutoff, final Direction direction) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,250,"return evaluate(values, cutoff, direction, biasCorrected, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,255,* <p>Returns the {@link SemiVariance} of the designated values against the cutoff
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,256,* in the given direction with the provided bias correction.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,258,* <p>Returns <code>NaN</code> if the array is empty and throws
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,259,* <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,261,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,262,* @param cutoff the reference point
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,263,* @param direction the {@link Direction} of the semivariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,264,* @param corrected the BiasCorrection flag
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,265,* @param start index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,266,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,267,* @return the SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,268,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,271,"public double evaluate (final double[] values, final double cutoff, final Direction direction,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,272,"final boolean corrected, final int start, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,274,"test(values, start, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,275,if (values.length == 0) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,276,return Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,277,} else {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,278,if (values.length == 1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,279,return 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,280,} else {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,281,final boolean booleanDirection = direction.getDirection();
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,283,double dev = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,284,double sumsq = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,285,for (int i = start; i < length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,286,if ((values[i] > cutoff) == booleanDirection) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,287,dev = values[i] - cutoff;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,288,sumsq += dev * dev;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,292,if (corrected) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,293,return sumsq / (length - 1.0);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,294,} else {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,295,return sumsq / length;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,302,* Returns true iff biasCorrected property is set to true.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,304,* @return the value of biasCorrected.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,306,public boolean isBiasCorrected() {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,307,return biasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,311,* Sets the biasCorrected property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,313,* @param biasCorrected new biasCorrected property value
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,315,public void setBiasCorrected(boolean biasCorrected) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,316,this.biasCorrected = biasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,320,* Returns the varianceDirection property.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,322,* @return the varianceDirection
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,324,public Direction getVarianceDirection () {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,325,return varianceDirection;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,329,* Sets the variance direction
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,331,* @param varianceDirection the direction of the semivariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,333,public void setVarianceDirection(Direction varianceDirection) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,334,this.varianceDirection = varianceDirection;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,338,* The direction of the semivariance - either upside or downside. The direction
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,339,"* is represented by boolean, with true corresponding to UPSIDE semivariance."
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,341,public enum Direction {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,343,* The UPSIDE Direction is used to specify that the observations above the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,344,* cutoff point will be used to calculate SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,346,"UPSIDE (true),"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,349,* The DOWNSIDE Direction is used to specify that the observations below
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,350,* the cutoff point will be used to calculate SemiVariance
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,352,DOWNSIDE (false);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,355,*   boolean value  UPSIDE <-> true
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,357,private boolean direction;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,360,* Create a Direction with the given value.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,362,* @param b boolean value representing the Direction. True corresponds to UPSIDE.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,364,Direction (boolean b) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,365,direction = b;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,369,* Returns the value of this Direction. True corresponds to UPSIDE.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,371,* @return true if direction is UPSIDE; false otherwise
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,373,boolean getDirection () {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java,374,return direction;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,18,package org.apache.commons.math.stat.descriptive.moment;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,21,import org.apache.commons.math.stat.StatUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,25,public class SemiVarianceTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,27,public void testInsufficientData() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,28,double[] nothing = null;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,29,SemiVariance sv = new SemiVariance();
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,30,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,31,sv.evaluate(nothing);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,32,"fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,33,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,36,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,37,sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,38,sv.evaluate(nothing);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,39,"fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,40,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,42,nothing = new double[] {};
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,43,assertTrue(Double.isNaN(sv.evaluate(nothing)));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,46,public void testSingleDown() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,47,SemiVariance sv = new SemiVariance();
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,48,double[] values = { 50.0d };
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,49,double singletest = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,50,"assertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,53,public void testSingleUp() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,54,SemiVariance sv = new SemiVariance(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,55,double[] values = { 50.0d };
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,56,double singletest = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,57,"assertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,60,public void testSample() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,61,"final double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,62,final int length = values.length;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,63,final double mean = StatUtils.mean(values); // 6.333...
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,64,final SemiVariance sv = new SemiVariance();  // Default bias correction is true
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,65,final double downsideSemiVariance = sv.evaluate(values); // Downside is the default
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,66,"assertEquals(TestUtils.sumSquareDev(new double[] {-2d, 2d, 4d, -2d, 3d, 5d}, mean) / (length - 1),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,67,"downsideSemiVariance, 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,69,sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,70,final double upsideSemiVariance = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,71,"assertEquals(TestUtils.sumSquareDev(new double[] {22d, 11d, 14d}, mean) / (length - 1),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,72,"upsideSemiVariance, 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,74,// Verify that upper + lower semivariance against the mean sum to variance
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,75,"assertEquals(StatUtils.variance(values), downsideSemiVariance + upsideSemiVariance, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,78,public void testPopulation() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,79,"double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,80,SemiVariance sv = new SemiVariance(false);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,82,double singletest = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,83,"assertEquals(19.556d, singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,85,sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,86,singletest = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,87,"assertEquals(36.222d, singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,90,public void testNonMeanCutoffs() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,91,"double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,92,SemiVariance sv = new SemiVariance(false); // Turn off bias correction - use df = length
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,94,"double singletest = sv.evaluate(values, 1.0d, SemiVariance.DOWNSIDE_VARIANCE, false, 0, values.length);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,95,"assertEquals(TestUtils.sumSquareDev(new double[] { -2d, -2d }, 1.0d) / values.length,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,96,"singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,98,"singletest = sv.evaluate(values, 3.0d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,99,"assertEquals(TestUtils.sumSquareDev(new double[] { 4d, 22d, 11d, 14d, 5d }, 3.0d) / values.length, singletest,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,100,0.01d);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,104,* Check that the lower + upper semivariance against the mean sum to the
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,105,* variance.
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,107,public void testVarianceDecompMeanCutoff() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,108,"double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,109,double variance = StatUtils.variance(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,110,SemiVariance sv = new SemiVariance(true); // Bias corrected
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,111,sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,112,final double lower = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,113,sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,114,final double upper = sv.evaluate(values);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,115,"assertEquals(variance, lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,119,* Check that upper and lower semivariances against a cutoff sum to the sum
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,120,* of squared deviations of the full set of values against the cutoff
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,121,* divided by df = length - 1 (assuming bias-corrected).
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,123,public void testVarianceDecompNonMeanCutoff() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,124,"double[] values = { -2.0d, 2.0d, 4.0d, -2.0d, 22.0d, 11.0d, 3.0d, 14.0d, 5.0d };"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,125,double target = 0;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,126,"double totalSumOfSquares = TestUtils.sumSquareDev(values, target);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,127,SemiVariance sv = new SemiVariance(true); // Bias corrected
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,128,sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,129,"double lower = sv.evaluate(values, target);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,130,sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,131,"double upper = sv.evaluate(values, target);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,132,"assertEquals(totalSumOfSquares / (values.length - 1), lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,135,public void testNoVariance() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,136,"final double[] values = {100d, 100d, 100d, 100d};"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,137,SemiVariance sv = new SemiVariance();
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,138,"assertEquals(0, sv.evaluate(values), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,139,"assertEquals(0, sv.evaluate(values, 100d), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,140,"assertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);"

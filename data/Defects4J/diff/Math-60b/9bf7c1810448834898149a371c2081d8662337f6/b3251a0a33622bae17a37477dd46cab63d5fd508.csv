is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65, @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65,* @version $Revision: 1.14 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,62, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,68, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,68,* @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,64, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,64,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,68, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,68,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,55,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,78, @version $Revision: 1.16 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,78,* @version $Revision: 1.17 $ $Date: 2003/11/15 16:01:35 $
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,98,"org.apache.commons.math.stat.distribution.DistributionFactoryImpl"");"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,98,"""org.apache.commons.math.distribution.DistributionFactoryImpl"");"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61, @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61,* @version $Revision: 1.15 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,67, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,67,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,68, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,68,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,68, @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,68,* @version $Revision: 1.11 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,63, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,63,* @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,69, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,69,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,68, @version $Revision: 1.7 $ $Date: 2003/11/14 22:25:28 $
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,68,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,54,package org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,64, @version $Revision: 1.8 $ $Date: 2003/11/14 22:25:28 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,64,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,61,mport org.apache.commons.math.stat.Univariate;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,61,import org.apache.commons.math.stat.DescriptiveStatistics;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:37 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,112, Returns a Univariate describing this distribution.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,112,* Returns a DescriptiveStatistics describing this distribution.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,118,nivariate getSampleStats() throws IllegalStateException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,118,DescriptiveStatistics getSampleStats() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,mport org.apache.commons.math.stat.Univariate;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65,mport org.apache.commons.math.stat.UnivariateImpl;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,import org.apache.commons.math.stat.DescriptiveStatistics;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65,import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:37 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,** List of Univariate objects characterizing the bins */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,/** List of DescriptiveStatistics objects characterizing the bins */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,101,nivariate sampleStats = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,101,DescriptiveStatistics sampleStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,ampleStats = new UnivariateImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,sampleStats = new StorelessDescriptiveStatisticsImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,172,nivariate stats = new UnivariateImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,172,DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,nivariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,(double)((Univariate)binStats.get(0)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,((double)((DescriptiveStatistics)binStats.get(0)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,(double)((Univariate)binStats.get(i)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,((double)((DescriptiveStatistics)binStats.get(i)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,237,nivariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,237,DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,269,ublic Univariate getSampleStats() {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,269,public DescriptiveStatistics getSampleStats() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,62, @version $Revision: 1.15 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,62,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,64,ublic abstract class AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,65,xtends AbstractUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,66,mplements StoreUnivariate {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,64,public abstract class AbstractDescriptiveStatistics
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,65,extends AbstractStorelessDescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,72, Create an AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,71,* Create an AbstractDescriptiveStatistics
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,74,ublic AbstractStoreUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,73,public AbstractDescriptiveStatistics() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,79, Create an AbstractStoreUnivariate with a specific Window
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,78,* Create an AbstractDescriptiveStatistics with a specific Window
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,82,ublic AbstractStoreUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,81,public AbstractDescriptiveStatistics(int window) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,87, @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,86,* @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,95, @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,94,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,109, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,108,* @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,115, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java,114,* @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,71, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,71,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,73,ublic abstract class AbstractUnivariate implements Univariate {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,73,public abstract class AbstractStorelessDescriptiveStatistics extends DescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,76,rotected int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,76,protected int windowSize = INFINITE_WINDOW;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,115, Construct an AbstractUnivariate
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,115,* Construct an AbstractStorelessDescriptiveStatistics
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,117,ublic AbstractUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,117,public AbstractStorelessDescriptiveStatistics() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,135, Construct an AbstractUnivariate with a window
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,135,* Construct an AbstractStorelessDescriptiveStatistics with a window
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,138,ublic AbstractUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,138,public AbstractStorelessDescriptiveStatistics(int window) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,247, @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,247,* @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosisClass()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,250,nt kClass = Univariate.MESOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,250,int kClass = MESOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,254,Class = Univariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,254,kClass = LEPTOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,256,Class = Univariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java,256,kClass = PLATYKURTIC;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,5, reserved.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,9, are met:
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,59, Applyable.java
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,61, TODO: add javadocs
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,63, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,65,ublic interface Applyable {
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,68, Applies a UnivariateStatistic object against this object
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,69, and returns the result.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,70, @param stat The stat to apply.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,71, @return The result value of the application.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,73,ouble apply(UnivariateStatistic stat);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,mport org.apache.commons.math.stat.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,57,mport org.apache.commons.math.stat.distribution.TDistribution;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,import org.apache.commons.math.distribution.DistributionFactory;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,57,import org.apache.commons.math.distribution.TDistribution;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,87, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,87,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,9,* are met:
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,56,import org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,59,* DescriptiveStatistics implements the Univariate interface
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,60,* but maintains the set of values which contribute to
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,61,* the values being returned.  This implementation of
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,62,* Univariate provides additional percentile functionality
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,63,* such as.  This additional functionality comes with
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,64,* a price of increased storage costs.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,65,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,67,public abstract class DescriptiveStatistics {
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,70,* Create an instance of a <code>DescriptiveStatistics</code>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,71,* @return a new factory.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,73,"public static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,74,return newInstance(Class.forName(cls));
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,77,* Create an instance of a <code>DescriptiveStatistics</code>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,78,* @return a new factory.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,80,"public static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,81,return (DescriptiveStatistics)cls.newInstance();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,85,* Create an instance of a <code>DescriptiveStatistics</code>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,86,* @return a new factory.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,88,public static DescriptiveStatistics newInstance() {
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,89,DescriptiveStatistics factory = null;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,90,try {
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,91,DiscoverClass dc = new DiscoverClass();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,92,factory = (DescriptiveStatistics) dc.newInstance(
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,93,"DescriptiveStatistics.class,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,94,"""org.apache.commons.math.stat.DescriptiveStatisticsImpl"");"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,95,} catch(Exception ex) {
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,96,// ignore as default implementation will be used.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,98,return factory;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,102,* This constant signals that a Univariate implementation
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,103,* takes into account the contributions of an infinite number of
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,104,"* elements.  In other words, if getWindow returns this"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,105,"* constant, there is, in effect, no ""window""."
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,107,public static final int INFINITE_WINDOW = -1;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,110,* A LEPTOKURTIC set has a positive kurtosis (a high peak)
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,112,public static int LEPTOKURTIC = 1;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,114,* A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,116,public static int MESOKURTIC = 0;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,118,"* A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,120,public static int PLATYKURTIC = -1;
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,123,* Adds the value to the set of numbers
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,124,* @param v the value to be added
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,126,public abstract void addValue(double v);
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,129,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,130,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,131,* @return The mean or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,133,public abstract double getMean();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,136,"* Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,137,* geometric mean </a> of the available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,138,"* @return The geometricMean, Double.NaN if no values have been added,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,139,* or if the productof the available values is less than or equal to 0.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,141,public abstract double getGeometricMean();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,144,* Returns the variance of the available values.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,145,"* @return The variance, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,146,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,148,public abstract double getVariance();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,151,* Returns the standard deviation of the available values.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,152,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,153,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,155,public abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,158,* Returns the skewness of the available values. Skewness is a
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,159,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,160,"* @return The skewness, Double.NaN if no values have been added"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,161,* or 0.0 for a value set &lt;=2.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,163,public abstract double getSkewness();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,166,* Returns the Kurtosis of the available values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,167,"* measure of the ""peakedness"" of a distribution"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,168,"* @return The kurtosis, Double.NaN if no values have been added, or 0.0"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,169,* for a value set &lt;=3.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,171,public abstract double getKurtosis();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,174,"* Returns the Kurtosis ""classification"" a distribution can be"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,175,"* leptokurtic (high peak), platykurtic (flat peak),"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,176,* or mesokurtic (zero kurtosis).
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,178,"* @return A static constant defined in this interface,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,179,"*         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,180,*         StoredDeviation.MESOKURTIC
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,182,public abstract int getKurtosisClass();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,185,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,186,* @return The max or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,188,public abstract double getMax();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,191,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,192,* @return The min or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,194,public abstract double getMin();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,197,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,198,* @return The number of available values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,200,public abstract int getN();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,203,* Returns the sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,204,* @return The sum or Double.NaN if no values have been added
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,206,public abstract double getSum();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,209,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,210,* @return The sum of the squares or Double.NaN if no
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,211,* values have been added.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,213,public abstract double getSumsq();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,216,* Resets all statistics and storage
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,218,public abstract void clear();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,221,* Univariate has the ability to return only measures for the
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,222,* last N elements added to the set of values.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,223,* @return The current window size or -1 if its Infinite.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,226,public abstract int getWindowSize();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,229,* WindowSize controls the number of values which contribute
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,230,"* to the values returned by Univariate.  For example, if"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,231,"* windowSize is set to 3 and the values {1,2,3,4,5}"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,232,* have been added <strong> in that order</strong>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,233,"* then the <i>available values</i> are {3,4,5} and all"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,234,* reported statistics will be based on these values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,235,* @param windowSize sets the size of the window.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,237,public abstract void setWindowSize(int windowSize);
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,240,* Returns the current set of values in an array of double primitives.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,241,* The order of addition is preserved.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,242,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,243,* stored data.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,245,* @return returns the current set of numbers in the order in which they
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,246,*         were added to this set
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,248,public abstract double[] getValues();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,251,"* Returns the current set of values in an array of double primitives,"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,252,* sorted in ascending order.  The returned array is a fresh
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,253,"* copy of the underlying data -- i.e., it is not a reference to the"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,254,* stored data.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,255,* @return returns the current set of
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,256,* numbers sorted in ascending order
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,258,public abstract double[] getSortedValues();
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,261,* Returns the element at the specified index
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,262,* @param index The Index of the element
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,263,* @return return the element at the specified index
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,265,public abstract double getElement(int index);
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,268,* Returns an estimate for the pth percentile of the stored values.
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,269,* This estimate follows the interpolation-adjusted defintion presented
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,270,"* <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,271,* <p/>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,272,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,273,* <li><code>0 &lt; p &lt; 100</code> (otherwise an
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,274,* <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,275,* <li>at least one value must be stored (returns <code>Double.NaN
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,276,*     </code> otherwise)</li>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,277,* </ul>
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,279,* @param p the requested percentile (scaled from 0 - 100)
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,280,* @return An estimate for the pth percentile of the stored data
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,281,* values
True,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/DescriptiveStatistics.java,283,public abstract double getPercentile(double p);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,56,import org.apache.commons.math.stat.univariate.*;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,60, @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,60,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,62,ublic class StoreUnivariateImpl extends AbstractStoreUnivariate {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,62,public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,70, Construct a StoreUnivariateImpl
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,70,* Construct a DescriptiveStatisticsImpl
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,72,ublic StoreUnivariateImpl() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,72,public DescriptiveStatisticsImpl() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,77, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,77,* @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,92, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,92,* @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,109,f (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java,109,if (windowSize != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,57, StoreUnivariate implements the Univariate interface
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,58, but maintains the set of values which contribute to
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,59, the values being returned.  This implementation of
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,60, Univariate provides additional percentile functionality
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,61, such as.  This additional functionality comes with
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,62, a price of increased storage costs.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,63, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,65,ublic interface StoreUnivariate extends Univariate {
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,68, Returns the current set of values in an array of double primitives.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,69, The order of addition is preserved.  The returned array is a fresh
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,70," copy of the underlying data -- i.e., it is not a reference to the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,71, stored data.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,73, @return returns the current set of numbers in the order in which they
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,74,         were added to this set
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,76,ouble[] getValues();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,79," Returns the current set of values in an array of double primitives,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,80, sorted in ascending order.  The returned array is a fresh
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,81," copy of the underlying data -- i.e., it is not a reference to the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,82, stored data.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,83, @return returns the current set of
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,84, numbers sorted in ascending order
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,86,ouble[] getSortedValues();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,89, Returns the element at the specified index
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,90, @param index The Index of the element
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,91, @return return the element at the specified index
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,93,ouble getElement(int index);
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,96, Returns an estimate for the pth percentile of the stored values.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,97, This estimate follows the interpolation-adjusted defintion presented
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,98," <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,99, <p/>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,100, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,101, <li><code>0 &lt; p &lt; 100</code> (otherwise an
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,102, <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,103, <li>at least one value must be stored (returns <code>Double.NaN
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,104,     </code> otherwise)</li>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,105, </ul>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,107, @param p the requested percentile (scaled from 0 - 100)
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,108, @return An estimate for the pth percentile of the stored data
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,109, values
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,111,ouble getPercentile(double p);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,9,* are met:
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,58,import org.apache.commons.math.stat.univariate.*;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,59,import org.apache.commons.math.util.FixedDoubleArray;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,63,* Accumulates univariate statistics for values fed in
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,64,* through the addValue() method.  Does not store raw data values.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,65,* All data are represented internally as doubles.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,66,"* Integers, floats and longs can be added, but they will be converted"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,67,* to doubles by addValue().
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,69,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,71,public class StorelessDescriptiveStatisticsImpl
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,72,extends AbstractStorelessDescriptiveStatistics
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,73,implements Serializable {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,75,/** fixed storage */
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,76,private FixedDoubleArray storage = null;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,78,/** Creates new univariate with an infinite window */
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,79,public StorelessDescriptiveStatisticsImpl() {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,80,super();
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,84,* Creates a new univariate with a fixed window
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,85,* @param window Window Size
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,87,public StorelessDescriptiveStatisticsImpl(int window) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,88,super(window);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,89,storage = new FixedDoubleArray(window);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,93,"*  If windowSize is set to Infinite, moments"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,94,*  are calculated using the following
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,95,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,96,* recursive strategy
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,97,* </a>.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,98,"* Otherwise, stat methods delegate to StatUtils."
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,99,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,101,public void addValue(double value) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,103,if (storage != null) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,104,/* then all getters deligate to StatUtils
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,105,* and this clause simply adds/rolls a value in the storage array
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,107,if (getWindowSize() == n) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,108,storage.addElementRolling(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,109,} else {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,110,n++;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,111,storage.addElement(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,114,} else {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,115,/* If the windowSize is infinite don't store any values and there
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,116,* is no need to discard the influence of any single item.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,118,n++;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,119,min.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,120,max.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,121,sum.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,122,sumsq.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,123,sumLog.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,124,geoMean.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,126,moment.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,127,//mean.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,128,//variance.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,129,//skewness.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,130,//kurtosis.increment(value);
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,135,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,136,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,137,* have been added.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,138,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,140,public String toString() {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,141,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,142,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,143,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,144,"outBuffer.append(""min: "" + getMin() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,145,"outBuffer.append(""max: "" + getMax() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,146,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,147,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,148,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,149,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,150,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,154,* @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,156,public void clear() {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,157,super.clear();
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,158,if (getWindowSize() != INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,159,storage = new FixedDoubleArray(getWindowSize());
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,164,* Apply the given statistic to this univariate collection.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,165,* @param stat the statistic to apply
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,166,* @return the computed value of the statistic.
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,168,public double apply(UnivariateStatistic stat) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,170,if (storage != null) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,171,return stat.evaluate(
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,172,"storage.getValues(),"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,173,"storage.start(),"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,174,storage.getNumElements());
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,175,} else if (stat instanceof StorelessUnivariateStatistic) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,176,return ((StorelessUnivariateStatistic) stat).getResult();
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,179,return Double.NaN;
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,182,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,183,* @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,185,public double[] getValues() {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,186,"throw new UnsupportedOperationException(""Only Available with Finite Window"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,189,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,190,* @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,192,public double[] getSortedValues() {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,193,"throw new UnsupportedOperationException(""Only Available with Finite Window"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,196,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,197,* @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,199,public double getElement(int index) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,200,"throw new UnsupportedOperationException(""Only Available with Finite Window"");"
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,203,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,204,* @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,206,public double getPercentile(double p) {
True,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java,207,"throw new UnsupportedOperationException(""Only Available with Finite Window"");"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,352, @param sampleStats Univariate holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,352,* @param sampleStats DescriptiveStatistics holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,356,"ouble t(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,356,"double t(double mu, DescriptiveStatistics sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,372, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,373, @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,372,* @param sampleStats1 DescriptiveStatistics describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,373,* @param sampleStats2 DescriptiveStatistics describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,377,"ouble t(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,377,"double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,406, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,407, @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,406,* @param sampleStats1 DescriptiveStatistics describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,407,* @param sampleStats2 DescriptiveStatistics describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,411,"ouble tTest(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,411,"double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,453, @param sampleStats1 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,454, @param sampleStats2 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,453,* @param sampleStats1 DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,454,* @param sampleStats2 DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,460,"oolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,460,"boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,495, @param sampleStats Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,495,* @param sampleStats DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,500,"oolean tTest(double mu, Univariate sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,500,"boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,526, @param sampleStats Univariate describing sample data
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,526,* @param sampleStats DescriptiveStatistics describing sample data
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,530,"ouble tTest(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,530,"double tTest(double mu, DescriptiveStatistics sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,57,mport org.apache.commons.math.stat.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,58,mport org.apache.commons.math.stat.distribution.TDistribution;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,59,mport org.apache.commons.math.stat.distribution.ChiSquaredDistribution;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,57,import org.apache.commons.math.distribution.DistributionFactory;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,58,import org.apache.commons.math.distribution.TDistribution;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,59,import org.apache.commons.math.distribution.ChiSquaredDistribution;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,239, @param sampleStats Univariate holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,239,* @param sampleStats DescriptiveStatistics holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,243,"ublic double t(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,243,"public double t(double mu, DescriptiveStatistics sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,254, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,255, @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,254,* @param sampleStats1 DescriptiveStatistics describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,255,* @param sampleStats2 DescriptiveStatistics describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,259,"ublic double t(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,259,"public double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,272, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,273, @param sampleStats2 Univariate describing data from the second sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,272,* @param sampleStats1 DescriptiveStatistics describing data from the first sample
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,273,* @param sampleStats2 DescriptiveStatistics describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,277,"ublic double tTest(Univariate sampleStats1, Univariate sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,277,"public double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,290, @param sampleStats1 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,291, @param sampleStats2 Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,290,* @param sampleStats1 DescriptiveStatistics describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,291,* @param sampleStats2 DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,297,"ublic boolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,297,"public boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,308, @param sampleStats Univariate describing sample data values
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,308,* @param sampleStats DescriptiveStatistics describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,"ublic boolean tTest(double mu, Univariate sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,"public boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324, @param sampleStats Univariate describing sample data
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324,* @param sampleStats DescriptiveStatistics describing sample data
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,328,"ublic double tTest(double mu, Univariate sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,328,"public double tTest(double mu, DescriptiveStatistics sampleStats)"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,58, Accumulates univariate statistics for values fed in
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,59, through the addValue() method. This interface defines the LCD interface
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,60, which all Univariate implementations must implement. <p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,61," A ""rolling"" capability is supported by all implementations with the following"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,62, contract: <p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,63, <i> Setting the windowSize property limits the domain of all statistics to
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,64, the last <code>windowSize</code> values added.</i><p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,65, We use the term <i>available values</i> throughout the API documentation
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,66," to refer to these values when the windowSize is set. For example, if the"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,67," windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,68," in that order</strong> then the <i>available values</i> are {3,4,5} and all"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,69, reported statistics will be based on these values<p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,70," The default windowSize is ""infinite"" -- i.e., all values added are included"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,71, in all computations.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,72, @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:18 $
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,74,ublic interface Univariate extends Applyable{
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76, A LEPTOKURTIC set has a positive kurtosis (a high peak)
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,78,ublic static int LEPTOKURTIC = 1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,80, A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,82,ublic static int MESOKURTIC = 0;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,84," A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,86,ublic static int PLATYKURTIC = -1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,89, Adds the value to the set of numbers
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,90, @param v the value to be added
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,92,oid addValue(double v);
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,95," Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,96, arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,97, @return The mean or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,99,ouble getMean();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,102," Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,103, geometric mean </a> of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,104," @return The geometricMean, Double.NaN if no values have been added,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,105, or if the productof the available values is less than or equal to 0.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,107,ouble getGeometricMean();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,110, Returns the variance of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,111," @return The variance, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,112, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,114,ouble getVariance();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,117, Returns the standard deviation of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,118," @return The standard deviation, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,119, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,121,ouble getStandardDeviation();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,124, Returns the skewness of the available values. Skewness is a
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,125, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,126," @return The skewness, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,127, or 0.0 for a value set &lt;=2.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,129,ouble getSkewness();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,132, Returns the Kurtosis of the available values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,133," measure of the ""peakedness"" of a distribution"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,134," @return The kurtosis, Double.NaN if no values have been added, or 0.0"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,135, for a value set &lt;=3.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,137,ouble getKurtosis();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,140," Returns the Kurtosis ""classification"" a distribution can be"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,141," leptokurtic (high peak), platykurtic (flat peak),"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,142, or mesokurtic (zero kurtosis).
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,144," @return A static constant defined in this interface,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,145,"         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,146,         StoredDeviation.MESOKURTIC
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,148,nt getKurtosisClass();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,151, Returns the maximum of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,152, @return The max or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,154,ouble getMax();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,157, Returns the minimum of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,158, @return The min or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,160,ouble getMin();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,163, Returns the number of available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,164, @return The number of available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,166,nt getN();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,169, Returns the sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,170, @return The sum or Double.NaN if no values have been added
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,172,ouble getSum();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,175, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,176, @return The sum of the squares or Double.NaN if no
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,177, values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,179,ouble getSumsq();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,182, Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,184,oid clear();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,187, This constant signals that a Univariate implementation
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,188, takes into account the contributions of an infinite number of
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,189," elements.  In other words, if getWindow returns this"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,190," constant, there is, in effect, no ""window""."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,192,tatic final int INFINITE_WINDOW = -1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,195, Univariate has the ability to return only measures for the
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,196, last N elements added to the set of values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,197, @return The current window size or -1 if its Infinite.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,200,nt getWindowSize();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,203, WindowSize controls the number of values which contribute
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,204," to the values returned by Univariate.  For example, if"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,205," windowSize is set to 3 and the values {1,2,3,4,5}"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,206, have been added <strong> in that order</strong>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,207," then the <i>available values</i> are {3,4,5} and all"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,208, reported statistics will be based on these values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,209, @param windowSize sets the size of the window.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,211,oid setWindowSize(int windowSize);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,58,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,59,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,60,mport org.apache.commons.math.util.FixedDoubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,64, Accumulates univariate statistics for values fed in
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,65, through the addValue() method.  Does not store raw data values.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,66, All data are represented internally as doubles.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,67," Integers, floats and longs can be added, but they will be converted"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,68, to doubles by addValue().
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70, @version $Revision: 1.25 $ $Date: 2003/11/14 22:22:18 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,72,ublic class UnivariateImpl
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,xtends AbstractUnivariate
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,"mplements Univariate, Serializable {"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,76,** fixed storage */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,rivate FixedDoubleArray storage = null;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,** Creates new univariate with an infinite window */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,ublic UnivariateImpl() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,81,uper();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85, Creates a new univariate with a fixed window
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,86, @param window Window Size
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,ublic UnivariateImpl(int window) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,89,uper(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,torage = new FixedDoubleArray(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,"  If windowSize is set to Infinite, moments"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,  are calculated using the following
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97, recursive strategy
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,98, </a>.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99," Otherwise, stat methods delegate to StatUtils."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,ublic void addValue(double value) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,104,f (storage != null) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,* then all getters deligate to StatUtils
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106, and this clause simply adds/rolls a value in the storage array
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,f (getWindowSize() == n) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,torage.addElementRolling(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,110, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,torage.addElement(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,116,* If the windowSize is infinite don't store any values and there
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117, is no need to discard the influence of any single item.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,119,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,in.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,ax.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,um.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,umsq.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,umLog.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,eoMean.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,oment.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,/mean.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,129,/variance.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,130,/skewness.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131,/kurtosis.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,137, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,138, have been added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,ublic String toString() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,144,"utBuffer.append(""n: "" + getN() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,"utBuffer.append(""min: "" + getMin() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146,"utBuffer.append(""max: "" + getMax() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,147,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,ublic void clear() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,158,uper.clear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,f (getWindowSize() != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,160,torage = new FixedDoubleArray(getWindowSize());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171,f (storage != null) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,"eturn stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173, else if (stat instanceof StorelessUnivariateStatistic) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174,eturn ((StorelessUnivariateStatistic) stat).getResult();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,eturn Double.NaN;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,59, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,59,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,55,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,60, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,60,* @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,55,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,60, @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,60,* @version $Revision: 1.14 $ $Date: 2003/11/15 16:01:39 $
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,54,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,61, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,61,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59,* @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,55,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,60, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,60,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,54,package org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,59, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,59,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,62,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,mport org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,62,import org.apache.commons.math.stat.DescriptiveStatistics;
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,68, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,68,* @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,150,nivariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,150,DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,65,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,mport org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,import org.apache.commons.math.stat.DescriptiveStatistics;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,nivariate u = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,62,mport org.apache.commons.math.stat.UnivariateImpl;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,import org.apache.commons.math.stat.DescriptiveStatistics;
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,62,import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,67, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,67,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,106,nivariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,106,DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,117,tats = new UnivariateImpl();
True,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,117,stats = new StorelessDescriptiveStatisticsImpl();
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,56,import java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,58,mport org.apache.commons.math.util.BeanTransformer;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,59,import org.apache.commons.beanutils.PropertyUtils;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,60,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,61,import org.apache.commons.math.util.NumberTransformer;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,61, This implementation of StoreUnivariate uses commons-beanutils to gather
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,64,* This implementation of DescriptiveStatistics uses commons-beanutils to gather
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,68,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:40 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,70, propertyName of the property to get from the bean
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,72,rivate String propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,73,* propertyName of the property to get from the bean
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,75,private String propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,75, Construct a BeanListUnivariate with specified
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,76, backing list
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,77, @param list Backing List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,79,ublic BeanListUnivariateImpl(List list) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,"his(list, null);"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,78,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,79,* backing list
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,* @param list Backing List
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,82,public BeanListUnivariateImpl(List list) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,83,"this(list, null);"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,84, Construct a BeanListUnivariate with specified
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,85, backing list and propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,86, @param list Backing List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,87, @param propertyName Bean propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,89,"ublic BeanListUnivariateImpl(List list, String propertyName) {"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,uper(list);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,91,etPropertyName(propertyName);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,87,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,88,* backing list and propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,89,* @param list Backing List
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,* @param propertyName Bean propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,92,"public BeanListUnivariateImpl(List list, String propertyName) {"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,93,super(list);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,94,setPropertyName(propertyName);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,95, @return propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,97,ublic String getPropertyName() {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,98,eturn propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,98,* @return propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,100,public String getPropertyName() {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,101,return propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,102, @param propertyName Name of Property
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,104,ublic void setPropertyName(String propertyName) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,105,his.propertyName = propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,etTransformer(new BeanTransformer(propertyName));
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,105,* @param propertyName Name of Property
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,107,public void setPropertyName(String propertyName) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,108,this.propertyName = propertyName;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,109,this.transformer = new NumberTransformer() {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,110, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,113,tring msg =
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,114,"The BeanListUnivariateImpl does not accept values "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115,"through the addValue method.  Because elements of this list "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"are JavaBeans, one must be sure to set the 'propertyName' "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,"property and add new Beans to the underlying list via the "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"addBean(Object bean) method"";"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,hrow new UnsupportedOperationException(msg);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,114,public double transform(final Object o) throws MathException {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115,try {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,return (
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,(Number) PropertyUtils.getProperty(
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"o,"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,getPropertyName()))
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,120,.doubleValue();
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,121,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,122,throw new MathException(
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,123,"""IllegalAccessException in Transformation: """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,124,"+ e.getMessage(),"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,125,e);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,126,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,127,throw new MathException(
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,128,"""InvocationTargetException in Transformation: """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,129,"+ e.getMessage(),"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,130,e);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,131,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,132,throw new MathException(
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,133,"""oSuchMethodException in Transformation: """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,134,"+ e.getMessage(),"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,135,e);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,123, Adds a bean to this list.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,125, @param bean Bean to add to the list
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,127,ublic void addObject(Object bean) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,128,ist.add(bean);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,142,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,144,public void addValue(double v) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,145,String msg =
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,146,"""The BeanListUnivariateImpl does not accept values """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,147,"+ ""through the addValue method.  Because elements of this list """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,148,"+ ""are JavaBeans, one must be sure to set the 'propertyName' """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,149,"+ ""property and add new Beans to the underlying list via the """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,150,"+ ""addBean(Object bean) method"";"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,151,throw new UnsupportedOperationException(msg);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,155,* Adds a bean to this list.
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,157,* @param bean Bean to add to the list
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,159,public void addObject(Object bean) {
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java,160,list.add(bean);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,111,toreUnivariate u = new BeanListUnivariateImpl( patientList );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,111,DescriptiveStatistics u = new BeanListUnivariateImpl( patientList );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,121,"toreUnivariate heartU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,121,"DescriptiveStatistics heartU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,131,"toreUnivariate ageU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,131,"DescriptiveStatistics ageU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66,* Test cases for the {@link DescriptiveStatistics} class.
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67,* @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:40 $
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,rotected Univariate u = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,protected DescriptiveStatistics u = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103, Test UnivariateImpl
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103,* Test StorelessDescriptiveStatistics
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107, = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,try {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,108,u = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,} catch (InstantiationException e) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,110,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,112,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,114,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,139, Test UnivariateImpl
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,147,* Test StorelessDescriptiveStatistics
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,143, = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151,u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,175, loads a Univariate off of a test file
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,183,* loads a DescriptiveStatistics off of a test file
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,60,import org.apache.commons.math.random.RandomData;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,61,import org.apache.commons.math.random.RandomDataImpl;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,64,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,66,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,69,public final class DescriptiveStatisticsTest extends TestCase {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,70,private double one = 1;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,71,private float two = 2;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,72,private int three = 3;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,73,private double mean = 2;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,74,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,75,private double sum = 8;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,76,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,77,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,78,private double n = 4;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,79,private double min = 1;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,80,private double max = 3;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,81,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,82,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,83,private int kClass = DescriptiveStatistics.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,84,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,86,public DescriptiveStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,87,super(name);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,90,public void setUp() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,93,public static Test suite() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,94,TestSuite suite = new TestSuite(DescriptiveStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,95,"suite.setName(""Descriptive Statistics Tests"");"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,96,return suite;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,99,/** test stats */
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,100,public void testStats() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,101,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,102,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,103,u.addValue(one);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,104,u.addValue(two);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,105,u.addValue(two);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,106,u.addValue(three);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,107,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,108,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,109,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,110,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,111,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,112,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,113,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,114,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,115,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,116,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,119,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,120,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,122,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,123,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,124,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,125,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,126,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,127,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,129,u.addValue(one);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,131,"assertTrue( ""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,132,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,133,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,134,"+ u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,135,"assertTrue( ""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,136,u.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,139,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,140,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,142,double[] testArray =
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,143,"{ 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,144,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,145,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,146,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,149,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,150,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,151,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,152,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,155,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,156,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,157,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,159,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,160,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,161,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,162,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,164,"//assertEquals( ""Product not expected"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,165,"//    24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,166,"assertEquals( ""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,167,"2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,169,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,170,// of a discarded element
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,171,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,172,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,174,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,176,"//assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,177,"//    u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,178,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,179,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,182,public void testAddValue() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,183,"double[] test1 = {5,4,3,2,1,0};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,184,"double[] test2 = {5,2,1,0,4,3};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,186,DescriptiveStatistics stats = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,187,stats.setWindowSize(12);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,189,for(int i = 0; i < test1.length; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,190,stats.addValue(test1[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,193,double[] test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,195,for(int i = 0; i < 6; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,196,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,197,"test3[i], test1[i],0.0);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,198,"System.out.println(test3[i] + "" ""+test1[i]);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,201,for(int i = 0; i < test2.length; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,202,stats.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,205,test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,207,for(int i = 6; i < 12; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,208,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,209,"test3[i], test2[i-6],0.0);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,210,"System.out.println(test3[i] + "" ""+test2[i-6]);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,213,for(int i = 0; i < test2.length; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,214,stats.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,217,test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,219,for(int i = 0; i < 6; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,220,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,221,"test3[i], test2[i],0.0);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,222,"System.out.println(test3[i] + "" ""+test2[i]);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,225,for(int i = 6; i < 12; i++){
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,226,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,227,"test3[i], test2[i-6],0.0);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,228,"System.out.println(test3[i] + "" ""+test2[i-6]);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,233,public void testGetSortedValues() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,234,"double[] test1 = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,235,"double[] test2 = {5,2,1,3,4,0};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,236,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,237,int[] testi = null;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,238,double[] test4 = null;
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,239,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,240,tstGetSortedValues(test1);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,241,tstGetSortedValues(test2);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,242,tstGetSortedValues(test3);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,243,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,244,"testi = rd.nextPermutation(10,6);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,245,test4 = new double[6];
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,246,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,247,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,249,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,251,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,252,"testi = rd.nextPermutation(10,5);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,253,test4 = new double[5];
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,254,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,255,test4[j] = (double) testi[j];
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,257,tstGetSortedValues(test4);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,263,private void tstGetSortedValues(double[] test) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,264,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,265,u.setWindowSize(test.length);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,266,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,267,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,269,double[] sorted = u.getSortedValues();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,270,if (sorted.length != test.length) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,271,"fail(""wrong length for sorted values array"");"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,273,for (int i = 0; i < sorted.length-1; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,274,if (sorted[i] > sorted[i+1]) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,275,"fail(""sorted values out of sequence"");"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,280,public void testPercentiles() {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,281,"double[] test = {5,4,3,2,1};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,282,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,283,u.setWindowSize(110);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,284,for (int i = 0; i < test.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,285,u.addValue(test[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,287,"assertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,288,"assertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,289,"assertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,290,try {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,291,double x = u.getPercentile(0);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,292,"fail(""expecting IllegalArgumentException for getPercentile(0)"");"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,293,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,296,try {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,297,double x = u.getPercentile(120);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,298,"fail(""expecting IllegalArgumentException for getPercentile(120)"");"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,299,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,303,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,304,"double[] test2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,305,for (int i = 0; i < test2.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,306,u.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,308,"assertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,309,"assertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,310,"assertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,312,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,313,double[] test3 = {1};
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,314,for (int i = 0; i < test3.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,315,u.addValue(test3[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,317,"assertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,318,"assertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,319,"assertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,321,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,322,RandomData rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,323,"int[] testi = rd.nextPermutation(100,100); // will contain 0-99"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,324,for (int j = 0; j < testi.length; j++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,325,"u.addValue((double) testi[j]);  //OK, laugh at me for the cast"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,327,for (int i = 1; i < 100; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,328,"assertEquals(""percentile "" + i,"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,329,"(double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,332,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,333,"double[] test4 = {1,2,3,4,100};"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,334,for (int i = 0; i < test4.length; i++) {
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,335,u.addValue(test4[i]);
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,337,"assertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,339,u.clear();
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,340,"assertTrue(""empty value set should return NaN"","
True,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java,341,Double.isNaN(u.getPercentile(50)));
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,58,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,63, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,64,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,65,ublic class ListUnivariateImpl
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,66,xtends AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,67,mplements StoreUnivariate {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,66,public class ListUnivariateImpl extends AbstractDescriptiveStatistics {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,80, @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,79,* @param list The list that will back this DescriptiveStatistics
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,88, @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,87,* @param list The list that will back this DescriptiveStatistics
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,98, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,97,* @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,109,f (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,108,if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,125, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,124,* @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,133,f (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,132,if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,140,alue = transformer.transform(list.get(calcIndex));
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,141, catch (Exception e) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,142,.printStackTrace();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,140,value = transformer.transform(list.get(calcIndex));
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,141,} catch (MathException e) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,142,// TODO Auto-generated catch block
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,143,e.printStackTrace();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,149, @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,150,* @see org.apache.commons.math.stat.DescriptiveStatistics#getN()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,154,f (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,155,if (windowSize != DescriptiveStatistics.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,167, @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,168,* @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,182, @see org.apache.commons.math.stat.Univariate#clear()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/ListUnivariateImpl.java,183,* @see org.apache.commons.math.stat.DescriptiveStatistics#clear()
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,84,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,84,private int kClass = DescriptiveStatistics.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,104,toreUnivariate u = new ListUnivariateImpl( externalList );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,104,DescriptiveStatistics u = new ListUnivariateImpl( externalList );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,126,toreUnivariate u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,126,DescriptiveStatistics u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,140,toreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,140,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,165,/ Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,165,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,67, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,67,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,85,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,85,private int kClass = DescriptiveStatistics.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,122,"toreUnivariate u = new ListUnivariateImpl(externalList,transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,122,"DescriptiveStatistics u = new ListUnivariateImpl(externalList,transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,144,"toreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,144,"DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList(),transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,220,/ Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,220,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62, @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62,* @version $Revision: 1.11 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,80,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,80,private int kClass = DescriptiveStatistics.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66,* @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,83,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,83,private int kClass = DescriptiveStatistics.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,101,toreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,101,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,toreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,140,toreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,140,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,toreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,169,/ Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,169,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,212,toreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,212,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,229,toreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,229,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,62, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,63,* @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,144,nivariate sampleStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,145,or (int i = 0; i < observed.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,145,DescriptiveStatistics sampleStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,146,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,147,sampleStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,148,} catch (InstantiationException e5) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,149,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,150,e5.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,151,} catch (IllegalAccessException e5) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,152,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,153,e5.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,155,for (int i = 0; i < observed.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,162,nivariateImpl nullStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,163,ry {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,172,DescriptiveStatistics nullStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,173,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,174,nullStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,175,} catch (InstantiationException e6) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,176,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,177,e6.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178,} catch (IllegalAccessException e6) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,180,e6.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,182,try {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178,nivariate emptyStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,ry {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,197,DescriptiveStatistics emptyStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,198,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,199,emptyStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,200,} catch (InstantiationException e4) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,202,e4.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,203,} catch (IllegalAccessException e4) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,204,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,205,e4.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,207,try {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,200,nivariate tooShortStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,ooShortStats.addValue(0d);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,DescriptiveStatistics tooShortStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,tooShortStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231,} catch (InstantiationException e3) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,e3.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234,} catch (IllegalAccessException e3) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,235,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,236,e3.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,238,tooShortStats.addValue(0d);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,219,nivariate oneSidedPStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,220,or (int i = 0; i < oneSidedP.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,258,DescriptiveStatistics oneSidedPStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,oneSidedPStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261,} catch (InstantiationException e2) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,262,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,263,e2.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,264,} catch (IllegalAccessException e2) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,265,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,266,e2.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,268,for (int i = 0; i < oneSidedP.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,nivariate sampleStats1 = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,256,or (int i = 0; i < sample1.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,304,DescriptiveStatistics sampleStats1 = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,305,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,306,sampleStats1 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,307,} catch (InstantiationException e1) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,308,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,309,e1.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,310,} catch (IllegalAccessException e1) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,311,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,312,e1.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,314,for (int i = 0; i < sample1.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,nivariate sampleStats2 = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,or (int i = 0; i < sample2.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,318,DescriptiveStatistics sampleStats2 = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,319,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,320,sampleStats2 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,321,} catch (InstantiationException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,322,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,323,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,324,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,325,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,326,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,328,for (int i = 0; i < sample2.length; i++) {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,54,package org.apache.commons.math.stat.univariate;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,56,import org.apache.commons.math.stat.DescriptiveStatistics;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,57,import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,61, Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,64,* Test cases for the {@link DescriptiveStatistics} class.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,63, @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,66,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,96,nivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,99,StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,115,nivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,118,StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,169,nivariateImpl u = new UnivariateImpl(10);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,172,StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(10);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,179,/ Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,182,// Now test rolling - StorelessDescriptiveStatistics should discount the contribution
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,191,nivariateImpl u = new UnivariateImpl(3);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,194,StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(3);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,204,nivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,207,StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,233,nivariate u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java,236,DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,57,mport org.apache.commons.beanutils.PropertyUtils;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,58,mport org.apache.commons.logging.LogFactory;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,57,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,62, @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,61,* @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:42 $
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,106,ublic double transform(final Object o) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,107,ouble d = Double.NaN;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,105,public double transform(final Object o) throws MathException {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,109, =
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,110,"(Number) PropertyUtils.getProperty(o, getPropertyName()))"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,111,doubleValue();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,107,"return ((Number) org.apache.commons.beanutils.PropertyUtils.getProperty(o, getPropertyName())).doubleValue();"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,113,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,114,"Property can not be accessed.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,109,"throw new MathException(""IllegalAccessException in Transformation: "" + e.getMessage(), e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,116,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,117,"Property accessor method threw an exception.  Using NaN."", e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,118,.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,111,"throw new MathException(""InvocationTargetException in Transformation: "" + e.getMessage(), e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,120,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,121,"Property accessor method does not exist.  Using NaN."", e);"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,113,"throw new MathException(""oSuchMethodException in Transformation: "" + e.getMessage(), e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/test/org/apache/commons/math/util/BeanTransformer.java,123,eturn d;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,57,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,62, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,63,* @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:42 $
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,99,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,100,"estUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,100,double value = Double.NaN;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,101,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,102,value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,103,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,104,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,105,e.printStackTrace();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,107,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,109,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,110,"estUtils.assertEquals(1.0, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,116,double value = Double.NaN;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,117,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,118,value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,119,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,120,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,121,e.printStackTrace();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,123,"TestUtils.assertEquals(1.0, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,119,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,120,"estUtils.assertEquals(Double.NaN, value, 1.0e-2);"
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,132,double value = Double.NaN;
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,133,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,134,value = b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,135,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,136,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,137,e.printStackTrace();
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,139,"TestUtils.assertEquals(Double.NaN, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,130,.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,149,try {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,150,b.transform(target);
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,151,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,152,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,153,e.printStackTrace();

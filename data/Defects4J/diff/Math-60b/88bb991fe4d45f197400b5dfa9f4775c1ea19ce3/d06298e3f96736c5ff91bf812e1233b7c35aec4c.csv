is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,17,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,20,* Cauchy Distribution.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,21,* Instances of CauchyDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,22,"* {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,24,* <p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,25,* References:<p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,26,* <ul>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,27,"* <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,28,* Cauchy Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,29,* </ul>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,30,* </p>
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,32,"* @version $Revision: 1.8 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $"
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,34,public interface CauchyDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,37,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,38,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,40,double getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,43,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,44,* @return scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,46,double getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,49,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,50,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,52,void setMedian(double median);
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,55,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,56,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,58,void setScale(double s);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,17,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,22,* Default implementation of
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,23,* {@link org.apache.commons.math.distribution.CauchyDistribution}.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,25,"* @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,27,public class CauchyDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,28,"implements CauchyDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,30,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,31,static final long serialVersionUID = 8589540077390120676L;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,33,/** The median of this distribution. */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,34,private double median = 0;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,36,/** The scale of this distribution. */
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,37,private double scale = 1;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,40,* Creates normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,41,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,43,public CauchyDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,"this(0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,48,* Create a cauchy distribution using the given median and scale.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,49,* @param median median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,50,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,52,"public CauchyDistributionImpl(double median, double s){"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,53,super();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,setMedian(median);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,setScale(s);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,59,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,60,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,63,public double cumulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64,return 0.5 + (Math.atan((x - median) / scale) / Math.PI);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,68,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,69,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,71,public double getMedian() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,72,return median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,76,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,77,* @return scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79,public double getScale() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,return scale;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,84,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,85,* that P(X &lt; x) = <code>p</code>.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,86,* <p>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,87,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,88,* <code>Double.POSITIVE_INFINITY</code> for p=1.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,91,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93,*         probability.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,95,public double inverseCumulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,96,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,97,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,98,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,99,"(""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,} else if (p == 0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,101,ret = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,102,} else  if (p == 1) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,103,ret = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,105,ret = median + scale * Math.tan(Math.PI * (p - .5));
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,107,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,111,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,112,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114,public void setMedian(double median) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,115,this.median = median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,119,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,120,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,121,* @throws IllegalArgumentException if <code>sd</code> is not positive.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123,public void setScale(double s) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124,if (s <= 0.0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,"""Scale must be positive."");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,scale = s;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,132,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,136,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,137,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,138,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,140,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,141,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,143,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,144,ret = -Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,145,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,146,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,149,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,153,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,154,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,157,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,158,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,161,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,162,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,164,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,165,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,166,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,167,ret = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,170,return ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,174,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,175,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,178,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,179,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,181,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,182,double ret;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,184,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,185,ret = getMedian() - getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,186,} else if (p > .5) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,187,ret = getMedian() + getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,188,} else {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,189,ret = getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,192,return ret;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,26,* <li>Cauchy</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,43, @version $Revision: 1.22 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,44,* @version $Revision: 1.22 $ $Date$
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,83,* Create a new cauchy distribution with the given median and scale.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,84,* @param median the median of the distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,85,* @param scale the scale
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,86,* @return a new cauchy distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,88,public CauchyDistribution createCauchyDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,89,"double median, double scale)"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,91,"return new CauchyDistributionImpl(median, scale);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,17,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,20,* Test cases for CauchyDistribution.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,21,* Extends ContinuousDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,22,* ContinuousDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,24,"* @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,26,public class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,29,* Constructor for CauchyDistributionTest.
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,30,* @param arg0
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,32,public CauchyDistributionTest(String arg0) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,33,super(arg0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,36,//-------------- Implementations for abstract methods -----------------------
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,38,/** Creates the default continuous distribution instance to use in tests. */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,39,public ContinuousDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,40,"return DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,43,/** Creates the default cumulative probability distribution test input values */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,44,public double[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,45,// quantiles computed using Mathematica
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,46,"return new double[] {-667.2485619d, -65.6230835d, -25.48302995d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,47,"-12.05887818d, -5.263135428d, 7.663135428d, 14.45887818d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,48,"27.88302995d, 68.0230835d, 669.6485619d};"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,51,/** Creates the default cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,52,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,53,"return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,54,"0.975d, 0.990d, 0.999d};"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,57,//---------------------------- Additional test cases -------------------------
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,59,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,60,"setInverseCumulativeTestPoints(new double[] {0.0, 1.0});"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,61,setInverseCumulativeTestValues(
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,62,"new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,63,verifyInverseCumulativeProbabilities();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,66,public void testMedian() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,67,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,68,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,69,distribution.setMedian(expected);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,70,"assertEquals(expected, distribution.getMedian(), 0.0);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,73,public void testScale() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,74,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,75,double expected = Math.random();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,76,distribution.setScale(expected);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,77,"assertEquals(expected, distribution.getScale(), 0.0);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,80,public void testSetScale() {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,81,CauchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,82,try {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,83,distribution.setScale(0.0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,84,"fail(""Can not have 0.0 scale."");"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,85,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,86,// success
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,89,try {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,90,distribution.setScale(-1.0);
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,91,"fail(""Can not have negative scale."");"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,92,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,93,// success
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22, @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:17 $
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22,* @version $Revision: 1.16 $ $Date$
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,321,public void testHypergeometricDistributionSmallPopulationSize() {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,322,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,323,"factory.createHypergeometricDistribution(5, 3, 10);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,324,"fail(""sample size larger than population size.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,325,} catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24, @version $Revision: 1.13 $ $Date: 2004/11/07 03:32:49 $
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,* @version $Revision: 1.13 $ $Date$
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,120,public void testPopulationSize() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,121,"HypergeometricDistribution dist = DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,122,try {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,123,dist.setPopulationSize(-1);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,124,"fail(""negative population size.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,125,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,128,dist.setPopulationSize(10);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,129,"assertEquals(10, dist.getPopulationSize());"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,2, Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,2,* Copyright 2004-2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,21, @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,21,* @version $Revision: 1.2 $ $Date$
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,105,oissonDistribution dist = new PoissonDistributionImpl(100);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,105,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(100);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,120,oissonDistribution dist = new PoissonDistributionImpl(
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,EFAULT_TEST_POISSON_PARAMETER);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,122,"ssertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,123,"ssertEquals(-1, dist.inverseCumulativeProbability(0d));"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,120,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,"assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,122,"assertEquals(-1, dist.inverseCumulativeProbability(0d));"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,125,public void testMean() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,126,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,127,try {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,128,dist.setMean(-1);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,129,"fail(""negative mean.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,130,} catch(IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,133,dist.setMean(10.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,134,"assertEquals(10.0, dist.getMean(), 0.0);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,46,"1.475884, 5.89343, 3.36493, 2.570582,"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,46,"-1.475884, 0.0, 5.89343, 3.36493, 2.570582,"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,52,"eturn new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,52,"return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.0d, 0.999d,"

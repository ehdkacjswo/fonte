is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,435,hild = child.getNext().getNext()) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,435,child = child.getNext()) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,459,ey = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,459,key = key.getNext()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,241,ropNameNode = propNameNode.getNext().getNext()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,241,propNameNode = propNameNode.getNext()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,ey != null; key = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,key != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,398,"ey, key.getNext(), map, n, t.getModule());"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,398,"key, key.getFirstChild(), map, n, t.getModule());"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,591,ap.removeChild(value);
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,19,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,111,/ Object literals are a list of key-value pairs.  All object
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,112,/ literals produced by the parser have an even number of
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,113,/ children.
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,114,reconditions.checkState(objectLiteral.getChildCount() % 2 == 0);
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,118,eyNode = keyNode.getNext().getNext()) {  // skip 2 for next key
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,120,ode valueNode = keyNode.getNext();
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,112,keyNode = keyNode.getNext()) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,113,Node valueNode = keyNode.getFirstChild();
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,107,Type == Token.OBJECTLIT)) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,108,// object literal keys
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,109,pType == Token.STRING ||
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,110,pType == Token.NUMBER)) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,215,reconditions.checkState(childCount == 0);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,215,Preconditions.checkState(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,216,childCount ==
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,217,((n.getParent() != null &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,218,n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,561,reconditions.checkState(childCount == 0);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,564,Preconditions.checkState(
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,565,childCount ==
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,566,((n.getParent() != null &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,567,"n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0),"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,568,n.getParent().toStringTree());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,572,reconditions.checkState(childCount % 2 == 0);
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,578,or (Node c = first; c != null; c = c.getNext().getNext()) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,584,for (Node c = first; c != null; c = c.getNext()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,596,"ddExpr(c.getNext(), 1);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,602,"addExpr(c.getFirstChild(), 1);"
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,398,or (int i = 1; i < depth && n.hasChildren(); i++) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,399, = n.getFirstChild();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,401,f (n.hasChildren()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,402,"lattenNameRef(alias, n.getFirstChild(), n, originalName);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,398,int nType = n.getType();
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,399,boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,400,boolean isObjKey = nType == Token.STRING || nType == Token.NUMBER;
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,401,Preconditions.checkState(isObjKey || isQName);
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,402,if (isQName) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,403,for (int i = 1; i < depth && n.hasChildren(); i++) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,404,n = n.getFirstChild();
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,406,if (n.hasChildren()) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,407,"flattenNameRef(alias, n.getFirstChild(), n, originalName);"
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,729,ode value = key.getNext();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,730,extKey = value.getNext();
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,735,Node value = key.getFirstChild();
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,736,nextKey = key.getNext();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,747,bjlit.removeChild(value);
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,753,value.detachFromParent();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,754,"bjlit.replaceChildAfter(key, refNode);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,761,"key.replaceChild(value, refNode);"
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,407,boolean isObjectLit = n.getType() == Token.OBJECTLIT;
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,409,f (!canMoveValue(child)) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,410,if (!canMoveValue(isObjectLit ? child.getFirstChild() : child)) {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,56,"eturn new ObjectLiteralPropertyDefinition(parent, n, n.getNext(),"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,56,"return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(),"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,309,iteral.removeChild(value);
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,430,hild = child.getNext().getNext();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,430,child = child.getNext();
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,211,} else if (parentType == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,212,decomposeObjectLiteralKeys(
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,213,"parent.getFirstChild(), child, state);"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,280,* Decompose an object literal.
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,281,* @param key The object literal key.
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,282,* @param stopNode A node after which to stop iterating.
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,284,private void decomposeObjectLiteralKeys(
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,285,"Node key, Node stopNode, DecompositionState state) {"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,286,if (key == null || key == stopNode) {
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,287,return;
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,289,"decomposeObjectLiteralKeys(key.getNext(), stopNode, state);"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,290,"decomposeSubExpressions(key.getFirstChild(), stopNode, state);"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,303,// Never try to decompose anobject literal key.
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,304,"Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));"
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,256,ype = getValueType(n.getNext());
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,256,type = getValueType(n.getFirstChild());
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,342,/ Verify that this node is a key in the object literal (odd numbered).
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,344,or (Node walker = parent.getFirstChild(); walker != n;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,345,alker = walker.getNext().getNext()) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,346,f (walker == null) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,347,eturn null;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,343,Preconditions.checkState(parent.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,350,Node greatGramps = gramps.getParent();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,362,ode greatGramps = gramps.getParent();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,377,ase Token.OBJECTLIT:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,378,/ OBJLIT (gramps)
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,379,/   STRING
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,380,/   OBJLIT (parent)
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,381,/     STRING (n)
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,382,ode key = gramps.getChildBefore(parent);
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,383,f (key.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,384,ame = getNameForObjLitKey(key);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,372,case Token.STRING:
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,373,// OBJLIT
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,374,//   STRING (gramps)
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,375,//     OBJLIT (parent)
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,376,//       STRING (n)
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,377,if (greatGramps != null &&
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,378,greatGramps.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,379,name = getNameForObjLitKey(gramps);
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,634,Node = aNode.getNext().getNext()) {
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,634,aNode = aNode.getNext()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,161,ey != null; key = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,161,key != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,ode value = key.getNext();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,Node value = key.getFirstChild();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,214,ey != null; key = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,214,key != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,216,ode value = key.getNext();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,216,Node value = key.getFirstChild();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,235,ase Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,235,case Token.STRING:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,237,eturn getStringValue(parent.getFirstChild());
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,237,return getStringValue(parent);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,295,ase Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,305,case Token.OBJECTLIT:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,306,// Return true only if all values are const.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,307,for (Node child = n.getFirstChild(); child != null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,308,child = child.getNext()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,309,"if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,310,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,313,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,515,if (checkForNewObjects) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,516,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,518,for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,519,if (checkForStateChangeHelper(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,520,"c.getFirstChild(), checkForNewObjects, compiler)) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,521,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,524,return false;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1516,f (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1517,nt index = 0;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1518,or (Node current = parent.getFirstChild();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1519,urrent != null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1520,urrent = current.getNext()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1521,f (current == node) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1522,eturn index % 2 == 0;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1524,ndex++;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1527,eturn false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1536,// TODO(nicksantos): What about NUMBER?
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1537,return node.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1538,parent.getType() == Token.OBJECTLIT;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,188,"topTracer(currentTracer, currentPassName);"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,189,tring passToCheck = currentPassName;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,190,urrentPassName = null;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,191,urrentTracer = null;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,189,String passToCheck = currentPassName;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,191,"stopTracer(currentTracer, currentPassName);"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,192,currentPassName = null;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,193,currentTracer = null;
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,165,ey != null; key = key.getNext().getNext()) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,166,ode value = key.getNext();
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,165,key != null; key = key.getNext()) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,166,Node value = key.getFirstChild();
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,510,ey = key.getNext().getNext()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,511,ode value = key.getNext();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,510,key = key.getNext()) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,511,Node value = key.getFirstChild();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,302,hild = child.getNext().getNext()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,302,child = child.getNext()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,333,ey = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,333,key = key.getNext()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,328,hild = child.getNext().getNext()) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,328,child = child.getNext()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,372,ey != null; key = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,372,key != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,294,or (Node n = objLitNode.getFirstChild(); n != null;
False,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,295, = n.getNext().getNext()) {
False,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,296,f (n.getString().equals(phRef.getName())) {
False,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,297,ode valueNode = n.getNext();
True,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,294,for (Node key = objLitNode.getFirstChild(); key != null;
True,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,295,key = key.getNext()) {
True,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,296,if (key.getString().equals(phRef.getName())) {
True,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,297,Node valueNode = key.getFirstChild();
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,83,ey = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,83,key = key.getNext()) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,21,import com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,69,| (NodeUtil.isString(node) && NodeUtil.isGet(node.getParent()));
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,70,|| (NodeUtil.isString(node) &&
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,71,(node.getParent().getType() == Token.OBJECTLIT ||
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,72,NodeUtil.isGet(node.getParent())));
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,181,ey = key.getNext().getNext()) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,181,key = key.getNext()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,361,ode value = key.getNext();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,362,ode next = value.getNext();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,361,Node value = key.getFirstChild();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,362,Node next = key.getNext();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,364,.removeChild(value);
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,368,ey = key.getNext().getNext();
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,367,key = key.getNext();
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,210,/ Object literals have their property name/value pairs as a flat
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,211,/ list as their children. We want every other node in order to get
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,212,/ only the property names.
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,213,oolean isKey = true;
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,217,f (isKey && child.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,213,if (child.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,220,sKey = !isKey;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1561,/ re-using value as the value of the object literal and advancing twice
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1562,alue = value.getFirstChild();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1563,alue = (value == null) ? null : value.getNext();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1564,hile (value != null) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1561,for (Node key = value.getFirstChild();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1562,key != null; key = key.getNext()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1563,Node propValue = key.getFirstChild();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1566,"alidator.expectCanAssignTo(t, value, getJSType(value), primitiveType,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1566,validator.expectCanAssignTo(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1567,"t, propValue, getJSType(propValue), primitiveType,"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1569,/ advancing twice
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1570,alue = value.getNext();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1571,alue = (value == null) ? null : value.getNext();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,678,ame = name.getNext().getNext()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,679,ode value = name.getNext();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,680,"cope = traverse(name, scope);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,678,name = name.getNext()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,679,Node value = name.getFirstChild();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,828,ey = (key == null) ? null : key.getNext();
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,643,ode.addChildToBack(transformAsString(el.getLeft()));
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,644,ode.addChildToBack(transform(el.getRight()));
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,643,Node key = transformAsString(el.getLeft());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,644,key.addChildToFront(transform(el.getRight()));
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,645,node.addChildToBack(key);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,348,public void testInlineFunctions28() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,349,"test(""var window = {}; function foo(){window.bar++; return 3;}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,350,"""var x = {y: alert(), z: foo(2)};"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,351,"""var window = {};"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,352,"""var JSCompiler_temp_const$$0 = alert();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,354,""" var JSCompiler_inline_result$$1;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,355,""" window.bar++;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,356,""" JSCompiler_inline_result$$1 = 3;}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,357,"""var x = {"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,358,"""  y: JSCompiler_temp_const$$0,"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,359,"""  z: JSCompiler_inline_result$$1"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,363,public void testInlineFunctions29() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,364,"test(""var window = {}; function foo(){window.bar++; return 3;}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,365,"""var x = {a: alert(), b: alert2(), c: foo(2)};"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,366,"""var window = {};"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,367,"""var JSCompiler_temp_const$$1 = alert();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,368,"""var JSCompiler_temp_const$$0 = alert2();"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,370,""" var JSCompiler_inline_result$$2;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,371,""" window.bar++;"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,372,""" JSCompiler_inline_result$$2 = 3;}"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,373,"""var x = {"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,374,"""  a: JSCompiler_temp_const$$1,"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,375,"""  b: JSCompiler_temp_const$$0,"" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,376,"""  c: JSCompiler_inline_result$$2"" +"
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,48,ode firstVal = firstKey.getNext();
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,48,Node firstVal = firstKey.getFirstChild();
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,50,ode secondKey = firstVal.getNext();
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,51,ode secondVal = secondKey.getNext();
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,50,Node secondKey = firstKey.getNext();
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,51,Node secondVal = secondKey.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,221,"arse(""var o = {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,221,"newParse(""var o = {}"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,225,"arse(""var o = {a: 1}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,225,"newParse(""var o = {a: 1}"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,229,"arse(""var o = {a: 1, b: 2}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,229,"newParse(""var o = {a: 1, b: 2}"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,233,"arse(""var o = {1: 'a'}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,233,"newParse(""var o = {1: 'a'}"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,237,"arse(""var o = {'a': 'a'}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,237,"newParse(""var o = {'a': 'a'}"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,813,ode firstValue = firstKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,813,Node firstValue = firstKey.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,815,ode secondKey = firstValue.getNext();
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,816,ode secondValue = secondKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,815,Node secondKey = firstKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,816,Node secondValue = secondKey.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,818,ode thirdKey = secondValue.getNext();
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,819,ode thirdValue = thirdKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,818,Node thirdKey = secondKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,819,Node thirdValue = thirdKey.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,168, = n.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,168,Node key = n.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,170,"ssertEquals(Token.STRING, n.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,171,"ssertEquals(3, n.getLineno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,172,"ssertEquals(10, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,170,"assertEquals(Token.STRING, key.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,171,"assertEquals(3, key.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,172,"assertEquals(10, key.getCharno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,174, = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,174,Node value = key.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,176,"ssertEquals(Token.NUMBER, n.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,177,"ssertEquals(3, n.getLineno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,178,"ssertEquals(12, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,176,"assertEquals(Token.NUMBER, value.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,177,"assertEquals(3, value.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,178,"assertEquals(12, value.getCharno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,180, = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,180,key = key.getNext();
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,182,"ssertEquals(Token.STRING, n.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,183,"ssertEquals(4, n.getLineno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,184,"ssertEquals(1, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,182,"assertEquals(Token.STRING, key.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,183,"assertEquals(4, key.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,184,"assertEquals(1, key.getCharno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,186, = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,186,value = key.getFirstChild();
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,188,"ssertEquals(Token.NUMBER, n.getType());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,189,"ssertEquals(4, n.getLineno());"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,190,"ssertEquals(4, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,188,"assertEquals(Token.NUMBER, value.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,189,"assertEquals(4, value.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,190,"assertEquals(4, value.getCharno());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,236,ry {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,321, catch (DerivativeException de) {
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,322,"hrow new MathRuntimeException(de, ""unexpected exception caught"");"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,325,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,326,* step finalization that throws one
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,331,ublic double[] getInterpolatedState() {
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,328,public double[] getInterpolatedState() throws DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,77,/** indicator for dirty state. */
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,78,private boolean dirtyState;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,101,this.dirtyState         = true;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,122,this.dirtyState   = true;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,154,inalized = interpolator.finalized;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,155,orward   = interpolator.forward;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,160,finalized  = interpolator.finalized;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,161,forward    = interpolator.forward;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,162,dirtyState = interpolator.dirtyState;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,184,this.dirtyState   = true;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,213,urrentTime      = t;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,214,                = currentTime - previousTime;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,215,nterpolatedTime = t;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,216,"ystem.arraycopy(currentState, 0, interpolatedState, 0,"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,217,urrentState.length);
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,221,currentTime = t;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,222,h           = currentTime - previousTime;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,223,setInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,220,inalized = false;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,226,finalized  = false;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,240,ublic void setInterpolatedTime(final double time)
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,241,hrows DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,246,public void setInterpolatedTime(final double time) {
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,243,inal double oneMinusThetaH = currentTime - interpolatedTime;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,244,inal double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,245,"omputeInterpolatedState(theta, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248,dirtyState       = true;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,253,** Compute the state at the interpolated time.
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,256,/** Compute the state and derivatives at the interpolated time.
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,263,"rotected abstract void computeInterpolatedState(double theta,"
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,264,ouble oneMinusThetaH)
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,266,"protected abstract void computeInterpolatedStateAndDerivatives(double theta,"
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,267,double oneMinusThetaH)
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,268,ublic double[] getInterpolatedState() {
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,269,eturn interpolatedState;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,271,public double[] getInterpolatedState() throws DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,273,// lazy evaluation of the state
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,274,if (dirtyState) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,275,final double oneMinusThetaH = currentTime - interpolatedTime;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,276,final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,277,"computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,278,dirtyState = false;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,281,return interpolatedState;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,273,ublic double[] getInterpolatedDerivatives() {
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,274,eturn interpolatedDerivatives;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,286,public double[] getInterpolatedDerivatives() throws DerivativeException {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,288,// lazy evaluation of the state
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,289,if (dirtyState) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,290,final double oneMinusThetaH = currentTime - interpolatedTime;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,291,final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,292,"computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);"
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,293,dirtyState = false;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,296,return interpolatedDerivatives;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,424,dirtyState    = true;
True,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,20,import java.io.IOException;
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,22,mport java.io.IOException;
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,96,"rotected void computeInterpolatedState(final double theta, final double oneMinusThetaH)"
True,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,95,"protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)"
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,123,ry {
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,124,/ we can now set the interpolated time and state
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,125,etInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,126, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,127,hrow MathRuntimeException.createIOException(e);
True,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,122,// we can now set the interpolated time and state
True,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,123,setInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,25,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,29,mport org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,30,mport org.apache.commons.math.ode.nonstiff.AdamsIntegrator;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,38, @see AdamsIntegrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,35,* @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,36,* @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,49,/** Reference time for all arrays.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,50,"* <p>Sometimes, the reference time is the same as previousTime,"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,51,"* sometimes it is the same as currentTime, so we use a separate"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,52,* field to avoid any confusion.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,53,* </p>
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,55,private double referenceTime;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,110,* @param referenceTime time at which all arrays are defined
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,110,"ublic void reinitialize(final double scalingH, final double[] scaled,"
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,111,inal RealMatrix nordsieck) {
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,112,his.scalingH  = scalingH;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,113,his.scaled    = scaled;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,114,his.nordsieck = nordsieck;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,117,"public void reinitialize(final double referenceTime, final double scalingH,"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,118,"final double[] scaled, final RealMatrix nordsieck) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,119,this.referenceTime = referenceTime;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,120,this.scalingH      = scalingH;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,121,this.scaled        = scaled;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,122,this.nordsieck     = nordsieck;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,124,// make sure the state and derivatives will depend on the new arrays
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,125,setInterpolatedTime(getInterpolatedTime());
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,117,** Store the current step time.
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,118, @param t current time
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,120,Override
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,121,ublic void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,122,urrentTime      = t;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,123,                = currentTime - previousTime;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,124,nterpolatedTime = t;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,125,"omputeInterpolatedState(1.0, 0.0);"
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,130,"rotected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,131,inal double x = theta * h;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,131,"protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,132,final double x = interpolatedTime - referenceTime;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,257,ry {
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,258,f (hasScaled && hasNordsieck) {
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,259,/ we can now set the interpolated time and state
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,260,etInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,262, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,263,hrow MathRuntimeException.createIOException(e);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,258,if (hasScaled && hasNordsieck) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,259,// we can now set the interpolated time and state
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,260,setInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,85, @throws DerivativeException if this call induces an automatic
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,86, step finalization that throws one
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,88,ublic void setInterpolatedTime(double time)
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,89,hrows DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,86,public void setInterpolatedTime(double time);
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,95,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,96,* step finalization that throws one
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,99,ublic double[] getInterpolatedState();
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,98,public double[] getInterpolatedState()
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,99,throws DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,108,* @throws DerivativeException if this call induces an automatic
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,109,* step finalization that throws one
False,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,110,ublic double[] getInterpolatedDerivatives();
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,112,public double[] getInterpolatedDerivatives()
True,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,113,throws DerivativeException;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,25,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,26,mport org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,26,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,29,mport org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,29,import org.apache.commons.math3.util.MathUtils;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,570,ry {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,571,f (isNaN) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,572,eturn NaN;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,575,eturn this.add(this.sqrt1z().multiply(I)).log()
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,576,multiply(I.negate());
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,577, catch (NullArgumentException e) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,578,/ this should never happen as intermediat results are not null
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,579,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,569,if (isNaN) {
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,570,return NaN;
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,573,return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,600,ry {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,601,f (isNaN) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,602,eturn NaN;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,605,eturn sqrt1z().add(this.multiply(I)).log()
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,606,multiply(I.negate());
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,607, catch (NullArgumentException e) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,608,/ this should never happen as intermediat results are not null
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,609,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,593,if (isNaN) {
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,594,return NaN;
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,597,return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,630,ry {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,631,f (isNaN) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,632,eturn NaN;
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,635,eturn this.add(I).divide(I.subtract(this)).log()
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,636,"multiply(I.divide(createComplex(2.0, 0.0)));"
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,637, catch (NullArgumentException e) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,638,/ this should never happen as intermediat results are not null
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,639,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,617,if (isNaN) {
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,618,return NaN;
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,621,return this.add(I).divide(I.subtract(this)).log()
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,622,".multiply(I.divide(createComplex(2.0, 0.0)));"
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,998,ry {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,999,"eturn createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();"
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,1000, catch (NullArgumentException e) {
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,1001,/ this should never happen as intermediat results are not null
False,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,1002,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/complex/Complex.java,src/main/java/org/apache/commons/math3/complex/Complex.java,980,"return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();"
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,26,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,238, @throws MathInternalError if {@code absIm} is not positive.
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,243,f (absIm < 0) {
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,244,hrow new MathInternalError();
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,321,ry {
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,322,umberFormat f = CompositeFormat.getDefaultNumberFormat(locale);
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,323,eturn new ComplexFormat(f);
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,324, catch (NullArgumentException nae) {
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,325,/ this should never happen
False,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,326,hrow new MathInternalError(nae);
True,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,315,NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);
True,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,src/main/java/org/apache/commons/math3/complex/ComplexFormat.java,316,return new ComplexFormat(f);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,19,mport org.apache.commons.math3.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,21,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,89,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,90,"eturn new Line(zero, zero.subtract(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,91, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,92,/ this should never happen has the instance was already built without error
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,93,hrow new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,87,"return new Line(zero, zero.subtract(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,152,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,153,"inal double angle = Vector3D.angle(direction, line.direction);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,154,eturn ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,155, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,156,/ this should never happen as directions are non-zero vectors
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,157,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,145,"final double angle = Vector3D.angle(direction, line.direction);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,146,return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,20,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,21,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,151,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,152,"rigin = new Vector3D(-originOffset, w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,153, = w.orthogonal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,154," = Vector3D.crossProduct(w, u);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,155, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,156,/ this should never happen as w is built to be non-zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,157,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,149,"origin = new Vector3D(-originOffset, w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,150,u = w.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,151,"v = Vector3D.crossProduct(w, u);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,267,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,268,"inal double angle = Vector3D.angle(w, plane.w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,269,eturn ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,270,(angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < 1.0e-10));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,271, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,272,/ this should never happen as w vectors are built to be non-zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,273,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,260,"final double angle = Vector3D.angle(w, plane.w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,261,return ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,262,((angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < 1.0e-10));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,285,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,286,inal Vector3D delta = origin.subtract(center);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,287,"inal Plane plane = new Plane(center.add(rotation.applyTo(delta)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,288,otation.applyTo(w));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,273,final Vector3D delta = origin.subtract(center);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,274,"final Plane plane = new Plane(center.add(rotation.applyTo(delta)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,275,rotation.applyTo(w));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,290,/ make sure the frame is transformed as desired
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,291,lane.u = rotation.applyTo(u);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,292,lane.v = rotation.applyTo(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,277,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,278,plane.u = rotation.applyTo(u);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,279,plane.v = rotation.applyTo(v);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,294,eturn plane;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,295, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,296,/ this should never happen as w vector is built to be non-zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,297,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,281,return plane;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,309,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,310,"inal Plane plane = new Plane(origin.add(translation), w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,292,"final Plane plane = new Plane(origin.add(translation), w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,312,/ make sure the frame is transformed as desired
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,313,lane.u = u;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,314,lane.v = v;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,294,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,295,plane.u = u;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,296,plane.v = v;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,316,eturn plane;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,317, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,318,/ this should never happen as w vector is built to be non-zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,319,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,298,return plane;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,346,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,347,"inal Vector3D direction = Vector3D.crossProduct(w, other.w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,348,f (direction.getNorm() < 1.0e-10) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,349,eturn null;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,351,"inal Vector3D point = intersection(this, other, new Plane(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,352,"eturn new Line(point, point.add(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,353, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,354,/ this should never happen as direction has been checked to have non-zero norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,355,hrow new MathInternalError(miae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,356, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,357,/ this should never happen as direction has been checked to have non-zero norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,358,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,324,"final Vector3D direction = Vector3D.crossProduct(w, other.w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,325,if (direction.getNorm() < 1.0e-10) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,326,return null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,328,"final Vector3D point = intersection(this, other, new Plane(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,329,"return new Line(point, point.add(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,22,mport org.apache.commons.math3.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,23,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,24,mport org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,27,import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,38,mport org.apache.commons.math3.geometry.partitioning.AbstractRegion;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,115,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,116,"inal Plane pxMin = new Plane(new Vector3D(xMin, 0,    0),   Vector3D.MINUS_I);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,117,"inal Plane pxMax = new Plane(new Vector3D(xMax, 0,    0),   Vector3D.PLUS_I);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,118,"inal Plane pyMin = new Plane(new Vector3D(0,    yMin, 0),   Vector3D.MINUS_J);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,119,"inal Plane pyMax = new Plane(new Vector3D(0,    yMax, 0),   Vector3D.PLUS_J);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,120,"inal Plane pzMin = new Plane(new Vector3D(0,    0,   zMin), Vector3D.MINUS_K);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,121,"inal Plane pzMax = new Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,122,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,123,inal Region<Euclidean3D> boundary =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,124,"ew RegionFactory<Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,125,eturn boundary.getTree(false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,126, catch (MathArithmeticException mae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,127,/ this should never happen as provided normals are all non-zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,128,hrow new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,112,"final Plane pxMin = new Plane(new Vector3D(xMin, 0,    0),   Vector3D.MINUS_I);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,113,"final Plane pxMax = new Plane(new Vector3D(xMax, 0,    0),   Vector3D.PLUS_I);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,114,"final Plane pyMin = new Plane(new Vector3D(0,    yMin, 0),   Vector3D.MINUS_J);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,115,"final Plane pyMax = new Plane(new Vector3D(0,    yMax, 0),   Vector3D.PLUS_J);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,116,"final Plane pzMin = new Plane(new Vector3D(0,    0,   zMin), Vector3D.MINUS_K);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,117,"final Plane pzMax = new Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,118,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,119,final Region<Euclidean3D> boundary =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,120,"new RegionFactory<Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,121,return boundary.getTree(false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,382,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,383,achedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,384, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,385,"/ this should never happen as the transform built on p00, p10, p01 is invertible"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,386,hrow new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,374,cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,447,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,448,achedTransform =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,449,rg.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,450, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,451,/ this should never happen as a translation is always invertible
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,452,hrow new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,434,cachedTransform =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,435,org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,24,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,380,ry {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,381,"otation r1 = new Rotation(order.getA1(), alpha1);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,382,"otation r2 = new Rotation(order.getA2(), alpha2);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,383,"otation r3 = new Rotation(order.getA3(), alpha3);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,384,otation composed = r1.applyTo(r2.applyTo(r3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,385,0 = composed.q0;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,386,1 = composed.q1;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,387,2 = composed.q2;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,388,3 = composed.q3;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,389, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,390,"/ this should never happen as RotationOrder axes are all normalized,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,391,/ and hence never null
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,392,hrow new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,379,"Rotation r1 = new Rotation(order.getA1(), alpha1);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,380,"Rotation r2 = new Rotation(order.getA2(), alpha2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,381,"Rotation r3 = new Rotation(order.getA3(), alpha3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,382,Rotation composed = r1.applyTo(r2.applyTo(r3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,383,q0 = composed.q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,384,q1 = composed.q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,385,q2 = composed.q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,386,q3 = composed.q3;
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,32,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,128,ry {
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,129,"ddEventHandler(handler, maxCheckInterval, convergence,"
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,130,"axIterationCount,"
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,131,"ew BracketingNthOrderBrentSolver(convergence, 5));"
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,132, catch (NumberIsTooSmallException ntse) {
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,133,/ this should never happen
False,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,134,hrow new MathInternalError();
True,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,127,"addEventHandler(handler, maxCheckInterval, convergence,"
True,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,128,"maxIterationCount,"
True,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java,129,"new BracketingNthOrderBrentSolver(convergence, 5));"
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,26,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,394,ry {
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,395,"rovider.computeParameterJacobian(t, y, yDot,"
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,396,"aram.getParameterName(), dFdP);"
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,397, catch (UnknownParameterException upe) {
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,398,/ this should never happen as we have check support beforehand
False,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,399,hrow new MathInternalError(upe);
True,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,393,"provider.computeParameterJacobian(t, y, yDot,"
True,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java,394,"param.getParameterName(), dFdP);"
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,25,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,26,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,85,ry {
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,86,inal double[] tmpDot = new double[n];
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,83,final double[] tmpDot = new double[n];
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,88,/ compute the jacobian df/dp w.r.t. parameter
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,89,inal double p  = pode.getParameter(paramName);
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,90,inal double hP = hParam.get(paramName);
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,91,"ode.setParameter(paramName, p + hP);"
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,92,"ode.computeDerivatives(t, y, tmpDot);"
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,93,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,94,FdP[i] = (tmpDot[i] - yDot[i]) / hP;
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,96,"ode.setParameter(paramName, p);"
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,97, catch (MathIllegalArgumentException miae) {
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,98,/ this should never happen as we have checked the parameter is supported
False,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,99,hrow new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,85,// compute the jacobian df/dp w.r.t. parameter
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,86,final double p  = pode.getParameter(paramName);
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,87,final double hP = hParam.get(paramName);
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,88,"pode.setParameter(paramName, p + hP);"
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,89,"fode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,90,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,91,dFdP[i] = (tmpDot[i] - yDot[i]) / hP;
True,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java,93,"pode.setParameter(paramName, p);"
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,24,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,25,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,411,ry {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,412,f (currentState == null) {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,413,/ we are finalizing an uninitialized instance
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,414,eturn;
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,409,if (currentState == null) {
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,410,// we are finalizing an uninitialized instance
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,411,return;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,417,ouble s;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,418,inal double[] yTmp = new double[currentState.length];
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,419,inal double pT = getGlobalPreviousTime();
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,414,double s;
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,415,final double[] yTmp = new double[currentState.length];
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,416,final double pT = getGlobalPreviousTime();
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,421,/ k14
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,422,or (int j = 0; j < currentState.length; ++j) {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,423, = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,424,14_08 * yDotK[7][j]  + K14_09 * yDotK[8][j]  + K14_10 * yDotK[9][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,425,14_11 * yDotK[10][j] + K14_12 * yDotK[11][j] + K14_13 * yDotK[12][j];
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,426,Tmp[j] = currentState[j] + h * s;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,428,"ntegrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);"
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,430,/ k15
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,431,or (int j = 0; j < currentState.length; ++j) {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,432, = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,433,15_08 * yDotK[7][j]  + K15_09 * yDotK[8][j]  + K15_10 * yDotK[9][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,434,15_11 * yDotK[10][j] + K15_12 * yDotK[11][j] + K15_13 * yDotK[12][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,435,15_14 * yDotKLast[0][j];
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,436,Tmp[j] = currentState[j] + h * s;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,438,"ntegrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);"
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,440,/ k16
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,441,or (int j = 0; j < currentState.length; ++j) {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,442, = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,443,16_08 * yDotK[7][j]  + K16_09 * yDotK[8][j]  + K16_10 * yDotK[9][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,444,16_11 * yDotK[10][j] + K16_12 * yDotK[11][j] + K16_13 * yDotK[12][j] +
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,445,16_14 * yDotKLast[0][j] +  K16_15 * yDotKLast[1][j];
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,446,Tmp[j] = currentState[j] + h * s;
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,448,"ntegrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);"
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,449, catch (DimensionMismatchException dme) {
False,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,450,hrow new MathInternalError(dme);
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,418,// k14
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,419,for (int j = 0; j < currentState.length; ++j) {
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,420,s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,421,K14_08 * yDotK[7][j]  + K14_09 * yDotK[8][j]  + K14_10 * yDotK[9][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,422,K14_11 * yDotK[10][j] + K14_12 * yDotK[11][j] + K14_13 * yDotK[12][j];
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,423,yTmp[j] = currentState[j] + h * s;
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,425,"integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);"
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,427,// k15
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,428,for (int j = 0; j < currentState.length; ++j) {
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,429,s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,430,K15_08 * yDotK[7][j]  + K15_09 * yDotK[8][j]  + K15_10 * yDotK[9][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,431,K15_11 * yDotK[10][j] + K15_12 * yDotK[11][j] + K15_13 * yDotK[12][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,432,K15_14 * yDotKLast[0][j];
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,433,yTmp[j] = currentState[j] + h * s;
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,435,"integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);"
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,437,// k16
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,438,for (int j = 0; j < currentState.length; ++j) {
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,439,s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,440,K16_08 * yDotK[7][j]  + K16_09 * yDotK[8][j]  + K16_10 * yDotK[9][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,441,K16_11 * yDotK[10][j] + K16_12 * yDotK[11][j] + K16_13 * yDotK[12][j] +
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,442,K16_14 * yDotKLast[0][j] +  K16_15 * yDotKLast[1][j];
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,443,yTmp[j] = currentState[j] + h * s;
True,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java,445,"integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);"
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,24,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,25,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,420,ry {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,421,"rimaryMapper.extractEquationData(interpolatedState,"
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,422,nterpolatedPrimaryState);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,423, catch (DimensionMismatchException dme) {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,424,/ this should never happen
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,425,hrow new MathInternalError(dme);
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,418,"primaryMapper.extractEquationData(interpolatedState,"
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,419,interpolatedPrimaryState);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,433,ry {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,434,"rimaryMapper.extractEquationData(interpolatedDerivatives,"
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,435,nterpolatedPrimaryDerivatives);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,436, catch (DimensionMismatchException dme) {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,437,/ this should never happen
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,438,hrow new MathInternalError(dme);
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,426,"primaryMapper.extractEquationData(interpolatedDerivatives,"
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,427,interpolatedPrimaryDerivatives);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,446,ry {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,447,"econdaryMappers[index].extractEquationData(interpolatedState,"
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,448,nterpolatedSecondaryState[index]);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,449, catch (DimensionMismatchException dme) {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,450,/ this should never happen
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,451,hrow new MathInternalError(dme);
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,434,"secondaryMappers[index].extractEquationData(interpolatedState,"
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,435,interpolatedSecondaryState[index]);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,459,ry {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,460,"econdaryMappers[index].extractEquationData(interpolatedDerivatives,"
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,461,nterpolatedSecondaryDerivatives[index]);
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,462, catch (DimensionMismatchException dme) {
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,463,/ this should never happen
False,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,464,hrow new MathInternalError(dme);
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,442,"secondaryMappers[index].extractEquationData(interpolatedDerivatives,"
True,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java,443,interpolatedSecondaryDerivatives[index]);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,20,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,74,ry {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,75,"eturn evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,76, catch (MaxCountExceededException e) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,77,/ this should never happen as integers never exceed MAX_VALUE
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,78,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,73,"return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,90,ry {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,91,"eturn evaluate(x, epsilon, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,92, catch (MaxCountExceededException e) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,93,/ this should never happen as integers never exceed MAX_VALUE
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,94,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,84,"return evaluate(x, epsilon, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,212,ry {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,213,"eturn checkOrder(val, dir, strict, false);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,214, catch (NonMonotonicSequenceException e) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,215,/ this should never happen as abort is set to false
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,216,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,212,"return checkOrder(val, dir, strict, false);"
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,21,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,22,mport org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,22,import org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,295,ry {
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,296,"b.append(""["").append(getCount(i)).append(""]"");"
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,297, catch (OutOfRangeException e) {
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,298,/ this should never happen
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,299,hrow new MathInternalError(e);
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,300, catch (DimensionMismatchException e) {
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,301,/ this should never happen
False,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,302,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java,294,"sb.append(""["").append(getCount(i)).append(""]"");"
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,23,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,395,ry {
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,397, catch (MathArithmeticException e) {
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,398,/ should never happen as we don't use BigDecimal.ROUND_UNNECESSARY
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,399,hrow new MathInternalError(e);
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,400, catch (MathIllegalArgumentException e) {
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,401,/ should never happen as we use a valid rounding
False,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,402,hrow new MathInternalError(e);
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,24,mport org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,868,ry {
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,869,esizableDoubleArray result = new ResizableDoubleArray();
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,870,"opy(this, result);"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,871,eturn result;
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,872, catch (NullArgumentException e) {
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,873,/ this should never happen
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,874,hrow new MathInternalError(e);
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,867,ResizableDoubleArray result = new ResizableDoubleArray();
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,868,"copy(this, result);"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,869,return result;

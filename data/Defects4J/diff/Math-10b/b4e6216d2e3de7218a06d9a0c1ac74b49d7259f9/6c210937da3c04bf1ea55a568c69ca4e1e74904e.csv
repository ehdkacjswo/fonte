is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,57,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,59,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,61,public abstract class AbstractStoreUnivariate implements StoreUnivariate {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,63,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,64,* @see org.apache.commons.math.StoreUnivariate#getMode()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,66,public double getMode() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,67,// Mode depends on a refactor Freq class
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,68,"throw new UnsupportedOperationException(""getMode() is not yet implemented"");"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,71,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,72,* @see org.apache.commons.math.StoreUnivariate#getSkewness()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,74,public double getSkewness() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,75,// Initialize the skewness
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,76,double skewness = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,78,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,79,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,80,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,82,// Sum the cubes of the distance from the mean divided by the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,83,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,84,for( int i = 0; i < getN(); i++ ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,85,"accum += Math.pow( (getElement(i) - mean) / stdDev, 3.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,88,// Get N
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,89,double n = getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,91,// Calculate skewness
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,92,skewness = ( n / ( (n-1) * (n-2) ) ) * accum;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,94,return skewness;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,97,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,98,* @see org.apache.commons.math.StoreUnivariate#getKurtosis()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,100,public double getKurtosis() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,101,// Initialize the kurtosis
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,102,double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,104,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,105,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,106,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,108,// Sum the ^4 of the distance from the mean divided by the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,109,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,110,for( int i = 0; i < getN(); i++ ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,111,"accum += Math.pow( (getElement(i) - mean) / stdDev, 4.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,114,// Get N
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,115,double n = getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,117,double coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,118,"double termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) );"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,119,// Calculate kurtosis
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,120,kurtosis = ( coefficientOne * accum ) - termTwo;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,122,return kurtosis;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,125,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,126,* @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,128,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,130,int kClass = StoreUnivariate.MESOKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,132,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,133,if( kurtosis > 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,134,kClass = StoreUnivariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,135,} else if( kurtosis < 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,136,kClass = StoreUnivariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,139,return( kClass );
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,143,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,144,* @see org.apache.commons.math.Univariate#getMean()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,146,public double getMean() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,147,double arithMean = getSum() / getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,148,return arithMean;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,151,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,152,* @see org.apache.commons.math.Univariate#getVariance()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,154,public double getVariance() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,155,// Initialize variance
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,156,double variance = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,158,if( getN() == 1 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,159,// If this is a single value
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,160,variance = 0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,161,} else if( getN() > 1 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,162,// Get the mean
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,163,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,165,// Calculate the sum of the squares of the distance between each value and the mean
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,166,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,167,for( int i = 0; i < getN(); i++ ){
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,168,"accum += Math.pow( (getElement(i) - mean), 2.0 );"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,171,// Divide the accumulator by N - Hmmm... unbiased or biased?
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,172,variance = accum / (getN() - 1);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,175,return variance;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,178,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,179,* @see org.apache.commons.math.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,181,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,182,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,183,if( getN() != 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,184,stdDev = Math.sqrt( getVariance() );
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,186,return( stdDev );
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,189,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,190,* @see org.apache.commons.math.Univariate#getMax()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,192,public double getMax() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,194,// Initialize maximum to NaN
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,195,double max = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,197,for( int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,198,if( i == 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,199,max = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,200,} else {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,201,if( getElement(i) > max ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,202,max = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,207,return max;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,210,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,211,* @see org.apache.commons.math.Univariate#getMin()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,213,public double getMin() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,214,// Initialize minimum to NaN
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,215,double min = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,217,for( int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,218,if( i == 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,219,min = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,220,} else {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,221,if( getElement(i) < min ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,222,min = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,227,return min;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,230,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,231,* @see org.apache.commons.math.Univariate#getSum()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,233,public double getSum() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,234,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,235,for( int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,236,accum += getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,238,return accum;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,241,/* (non-Javadoc)
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,242,* @see org.apache.commons.math.Univariate#getSumsq()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,244,public double getSumsq() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,245,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,246,for( int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,247,"accum += Math.pow(getElement(i), 2.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,249,return accum;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,63,ublic class ExpandableDoubleArray {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,64,public class ExpandableDoubleArray implements Serializable {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,56,import java.util.Iterator;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,57,import java.util.List;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,60,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,62,public class ListUnivariateImpl extends AbstractStoreUnivariate {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,64,// Holds a reference to a list - GENERICs are going to make
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,65,// out lives easier here as we could only accept List<Number>
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,66,List list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,68,public ListUnivariateImpl( List list ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,69,this.list = list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,73,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,74,* @see org.apache.commons.math.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,76,public double[] getValues() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,78,double[] copiedArray = new double[list.size()];
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,80,int i = 0;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,81,Iterator it = list.iterator();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,82,while( it.hasNext() ) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,83,Number n = (Number) it.next();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,84,copiedArray[i] = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,85,i++;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,88,return copiedArray;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,91,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,92,* @see org.apache.commons.math.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,94,public double getElement(int index) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,95,Number n = (Number) list.get(index);
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,96,return n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,99,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,100,* @see org.apache.commons.math.Univariate#getN()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,102,public double getN() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,103,return list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,106,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,107,* @see org.apache.commons.math.Univariate#addValue(double)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,109,public void addValue(double v) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,110,list.add( new Double(v));
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,113,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,114,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,116,public void clear() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,list.clear();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,117,public abstract double[] getValues();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,120,* Returns the element at the specified index
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,122,* @return return the element at the specified index
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,124,public abstract double getElement(int index);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,57, Provides univariate measures for an array of doubles.
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,ublic class StoreUnivariateImpl implements StoreUnivariate {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,59,public class StoreUnivariateImpl extends AbstractStoreUnivariate {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,70, @see org.apache.commons.math.StoreUnivariate#getMode()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,72,ublic double getMode() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,/ Mode depends on a refactor Freq class
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,74,"hrow new UnsupportedOperationException(""getMode() is not yet implemented"");"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,77,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,78, @see org.apache.commons.math.StoreUnivariate#getSkewness()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,80,ublic double getSkewness() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,81,/ Initialize the skewness
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,82,ouble skewness = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,84,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,85,ouble mean = getMean();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,86,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,88,/ Sum the cubes of the distance from the mean divided by the standard deviation
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,89,ouble accum = 0.0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,90,or( int i = 0; i < eDA.getNumElements(); i++ ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,91,"ccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 3.0);"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,/ Get N
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,95,ouble n = getN();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,97,/ Calculate skewness
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,98,kewness = ( n / ( (n-1) * (n-2) ) ) * accum;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,100,eturn skewness;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,103,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,104, @see org.apache.commons.math.StoreUnivariate#getKurtosis()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,106,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,107,/ Initialize the kurtosis
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,108,ouble kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,110,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,111,ouble mean = getMean();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,112,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,114,/ Sum the ^4 of the distance from the mean divided by the standard deviation
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,115,ouble accum = 0.0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,116,or( int i = 0; i < eDA.getNumElements(); i++ ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,117,"ccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 4.0);"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,120,/ Get N
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,121,ouble n = getN();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,123,ouble coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,124,"ouble termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) );"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,125,/ Calculate kurtosis
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,126,urtosis = ( coefficientOne * accum ) - termTwo;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,128,eturn kurtosis;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,131,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,132, @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,134,ublic int getKurtosisClass() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,136,nt kClass = StoreUnivariate.MESOKURTIC;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,138,ouble kurtosis = getKurtosis();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,139,f( kurtosis > 0 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,140,Class = StoreUnivariate.LEPTOKURTIC;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,141, else if( kurtosis < 0 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,142,Class = StoreUnivariate.PLATYKURTIC;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,145,eturn( kClass );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,149,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,150, @see org.apache.commons.math.Univariate#addValue(double)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,152,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,153,DA.addElement( v );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,156,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,157, @see org.apache.commons.math.Univariate#getMean()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,159,ublic double getMean() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,160,ouble arithMean = getSum() / getN();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,161,eturn arithMean;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,164,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,165, @see org.apache.commons.math.Univariate#getVariance()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,167,ublic double getVariance() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,168,/ Initialize variance
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,169,ouble variance = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,171,f( getN() == 1 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,172,/ If this is a single value
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,173,ariance = 0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,174, else if( getN() > 1 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,175,/ Get the mean
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,176,ouble mean = getMean();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,178,/ Calculate the sum of the squares of the distance between each value and the mean
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,179,ouble accum = 0.0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,180,or( int i = 0; i < eDA.getNumElements(); i++ ){
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,181,"ccum += Math.pow( (eDA.getElement(i) - mean), 2.0 );"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,184,/ Divide the accumulator by N - Hmmm... unbiased or biased?
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,185,ariance = accum / (getN() - 1);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,188,eturn variance;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,191,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,192, @see org.apache.commons.math.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,194,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,195,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,196,f( getN() != 0 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,197,tdDev = Math.sqrt( getVariance() );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,199,eturn( stdDev );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,203, @see org.apache.commons.math.Univariate#getMax()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,* @see org.apache.commons.math.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,205,ublic double getMax() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,207,/ Initialize maximum to NaN
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,208,ouble max = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,210,or( int i = 0; i < eDA.getNumElements(); i++) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,211,f( i == 0 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,212,ax = eDA.getElement(i);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,213, else {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,214,f( eDA.getElement(i) > max ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,215,ax = eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,71,public double[] getValues() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,220,eturn max;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,double[] copiedArray = new double[ eDA.getNumElements() ];
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,74,"System.arraycopy( eDA.getValues(), 0, copiedArray, 0, eDA.getNumElements());"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,75,return copiedArray;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,224, @see org.apache.commons.math.Univariate#getMin()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,79,* @see org.apache.commons.math.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,226,ublic double getMin() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,227,/ Initialize minimum to NaN
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,228,ouble min = Double.NaN;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,230,or( int i = 0; i < eDA.getNumElements(); i++) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,231,f( i == 0 ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,232,in = eDA.getElement(i);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,233, else {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,234,f( eDA.getElement(i) < min ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,235,in = eDA.getElement(i);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,240,eturn min;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,81,public double getElement(int index) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,82,return eDA.getElement(index);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,251, @see org.apache.commons.math.Univariate#getSum()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,253,ublic double getSum() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,254,ouble accum = 0.0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,255,or( int i = 0; i < eDA.getNumElements(); i++) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,256,ccum += eDA.getElement(i);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,258,eturn accum;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,261,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,262, @see org.apache.commons.math.Univariate#getSumsq()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,93,* @see org.apache.commons.math.Univariate#addValue(double)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,264,ublic double getSumsq() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,265,ouble accum = 0.0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,266,or( int i = 0; i < eDA.getNumElements(); i++) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,267,"ccum += Math.pow(eDA.getElement(i), 2.0);"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,269,eturn accum;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,95,public void addValue(double v) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,96,eDA.addElement( v );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,65, @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:00 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67,* @version $Revision: 1.2 $ $Date: 2003/05/15 06:33:19 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,68,ublic class UnivariateImpl implements Univariate {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,70,"public class UnivariateImpl implements Univariate, Serializable {"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,57,import java.util.Collection;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,58,import java.util.List;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,60,import junit.framework.Test;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,62,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,65,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,67,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,68,* @version $Revision: 1.1 $ $Date: 2003/05/15 06:33:19 $
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,71,public final class ListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,72,private double one = 1;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,73,private float two = 2;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,74,private int three = 3;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,76,private double mean = 2;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,77,private double sumSq = 18;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,78,private double sum = 8;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,79,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,80,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,81,private double n = 4;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,82,private double min = 1;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,83,private double max = 3;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,84,private double skewness = 0;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,85,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,86,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,87,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,89,public ListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,90,super(name);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,93,public void setUp() {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,96,public static Test suite() {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,97,TestSuite suite = new TestSuite(ListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,98,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,99,return suite;
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,102,/** test stats */
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,103,public void testStats() {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,104,List externalList = new ArrayList();
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,106,StoreUnivariate u = new ListUnivariateImpl( externalList );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,108,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,109,u.addValue(one);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,110,u.addValue(two);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,111,u.addValue(two);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,112,u.addValue(three);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,113,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,114,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,115,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,116,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,117,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,118,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,119,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,120,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,121,u.clear();
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,122,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,125,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,126,List list = new ArrayList();
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,128,StoreUnivariate u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,130,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,131,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,132,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,134,list.add( new Double(one));
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,136,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,137,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,138,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,141,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,142,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,144,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,145,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,146,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,147,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,150,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,151,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,152,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,153,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,17,ackage org.apache.commons.math;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,19,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,22, Error thrown when two dimensions differ.
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,24, @since 1.2
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,25, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,27,ublic class DimensionMismatchException extends MathException {
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,29,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,30,rivate static final long serialVersionUID = -1316089546353786411L;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,32,** First dimension. */
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,33,rivate final int dimension1;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,35,** Second dimension. */
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,36,rivate final int dimension2;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,39, Construct an exception from the mismatched dimensions
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,40, @param dimension1 first dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,41, @param dimension2 second dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,43,"ublic DimensionMismatchException(final int dimension1, final int dimension2) {"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,44,"uper(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, dimension1, dimension2);"
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,45,his.dimension1 = dimension1;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,46,his.dimension2 = dimension2;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,50, Get the first dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,51, @return first dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,53,ublic int getDimension1() {
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,54,eturn dimension1;
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,58, Get the second dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,59, @return second dimension
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,61,ublic int getDimension2() {
False,src/main/java/org/apache/commons/math/DimensionMismatchException.java,src/main/java/org/apache/commons/math/DimensionMismatchException.java,62,eturn dimension2;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,20,mport org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,90, @exception IllegalArgumentException if there is a dimension
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,91, mismatch between the mean vector and the covariance matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,92, @exception NonPositiveDefiniteMatrixException if the
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,85,* @throws NonPositiveDefiniteMatrixException if the
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,94, @exception DimensionMismatchException if the mean and covariance
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,95, arrays dimensions don't match
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,87,* @throws DimensionMismatchException if the mean and covariance
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,88,* arrays dimensions do not match.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,99,ormalizedRandomGenerator generator)
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,100,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,92,NormalizedRandomGenerator generator) {
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,183, @exception NonPositiveDefiniteMatrixException if the
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,184, covariance matrix is not strictly positive definite
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,174,* @throws NonPositiveDefiniteMatrixException if the
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,175,* covariance matrix is not strictly positive definite.
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,71,"mplements StatisticalMultivariateSummary, Serializable {"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,71,"implements StatisticalMultivariateSummary, Serializable {"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,146,ublic void addValue(double[] value)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,147,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,146,public void addValue(double[] value) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,418,torelessUnivariateStatistic[] oldImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,419,"hrows DimensionMismatchException, IllegalStateException {"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,417,StorelessUnivariateStatistic[] oldImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,447,ublic void setSumImpl(StorelessUnivariateStatistic[] sumImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,448,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,445,public void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,474,ublic void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,475,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,471,public void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,501,ublic void setMinImpl(StorelessUnivariateStatistic[] minImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,502,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,497,public void setMinImpl(StorelessUnivariateStatistic[] minImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,528,ublic void setMaxImpl(StorelessUnivariateStatistic[] maxImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,529,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,523,public void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,555,ublic void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,556,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,549,public void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,582,ublic void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,583,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,575,public void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,609,ublic void setMeanImpl(StorelessUnivariateStatistic[] meanImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,610,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,601,public void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,630,rivate void checkDimension(int dimension)
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,631,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,621,private void checkDimension(int dimension) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,19,mport org.apache.commons.math.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,35,xtends MultivariateSummaryStatistics {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,34,extends MultivariateSummaryStatistics {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,55,ublic synchronized void addValue(double[] value)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,56,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,54,public synchronized void addValue(double[] value) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,192,ublic synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,193,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,190,public synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,209,ublic synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,210,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,206,public synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,226,ublic synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,227,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,222,public synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,243,ublic synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,244,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,238,public synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,260,ublic synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,261,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,254,public synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,277,ublic synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,278,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,270,public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,294,ublic synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl)
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,295,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,286,public synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,63, @exception DimensionMismatchException if the vector does not have the right dimension
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,63,* @throws DimensionMismatchException if the vector does not have the right dimension
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,50, @exception DimensionMismatchException if the vector does not have the right dimension
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,50,* @throws DimensionMismatchException if the vector does not have the right dimension
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,52,ublic void increment(double[] v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,52,public void increment(double[] v) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,20,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,30,ublic class CorrelatedRandomVectorGeneratorTest
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,31,xtends TestCase {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,31,public class CorrelatedRandomVectorGeneratorTest {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,32,private double[] mean;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,33,private RealMatrix covariance;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,34,private CorrelatedRandomVectorGenerator generator;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,36,public CorrelatedRandomVectorGeneratorTest() {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,37,"mean = new double[] { 0.0, 1.0, -3.0, 2.3 };"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,39,"RealMatrix b = MatrixUtils.createRealMatrix(4, 3);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,40,int counter = 0;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,41,for (int i = 0; i < b.getRowDimension(); ++i) {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,42,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,43,"b.setEntry(i, j, 1.0 + 0.1 * ++counter);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,46,RealMatrix bbt = b.multiply(b.transpose());
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,47,"covariance = MatrixUtils.createRealMatrix(mean.length, mean.length);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,48,for (int i = 0; i < covariance.getRowDimension(); ++i) {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,49,"covariance.setEntry(i, i, bbt.getEntry(i, i));"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,50,for (int j = 0; j < covariance.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,51,"double s = bbt.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,52,"covariance.setEntry(i, j, s);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,53,"covariance.setEntry(j, i, s);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,33,ublic CorrelatedRandomVectorGeneratorTest(String name) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,34,uper(name);
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,35,ean       = null;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,36,ovariance = null;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,37,enerator  = null;
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,57,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,58,rg.setSeed(17399225432l);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,59,GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,60,"generator = new CorrelatedRandomVectorGenerator(mean,"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,61,"covariance,"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,62,"1.0e-12 * covariance.getNorm(),"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,63,rawGenerator);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,66,@Test
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,41,"ssertEquals(3, generator.getRank());"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,68,"Assert.assertEquals(3, generator.getRank());"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,44,ublic void testMath226()
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,45,hrows DimensionMismatchException {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,71,@Test
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,72,public void testMath226() {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,62,ssertTrue(FastMath.abs(generated[0] - 1) > 0.1);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,89,Assert.assertTrue(FastMath.abs(generated[0] - 1) > 0.1);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,94,@Test
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,72,"ssertEquals(covariance.getEntry(i, j), bbt.getEntry(i, j), 1.0e-12);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,100,"Assert.assertEquals(covariance.getEntry(i, j), bbt.getEntry(i, j), 1.0e-12);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,77,ublic void testMeanAndCovariance() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,105,@Test
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,106,public void testMeanAndCovariance() {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,90,"ssertEquals(mean[i], estimatedMean[i], 0.07);"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,119,"Assert.assertEquals(mean[i], estimatedMean[i], 0.07);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,92,"ssertEquals(covariance.getEntry(i, j),"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,93,"stimatedCovariance.getEntry(i, j),"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,94,.1 * (1.0 + FastMath.abs(mean[i])) * (1.0 + FastMath.abs(mean[j])));
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,121,"Assert.assertEquals(covariance.getEntry(i, j),"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,122,"estimatedCovariance.getEntry(i, j),"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,123,0.1 * (1.0 + FastMath.abs(mean[i])) * (1.0 + FastMath.abs(mean[j])));
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,100,Override
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,101,ublic void setUp() {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,102,ry {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,103,"ean = new double[] { 0.0, 1.0, -3.0, 2.3};"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,105,"ealMatrix b = MatrixUtils.createRealMatrix(4, 3);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,106,nt counter = 0;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,107,or (int i = 0; i < b.getRowDimension(); ++i) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,108,or (int j = 0; j < b.getColumnDimension(); ++j) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,109,".setEntry(i, j, 1.0 + 0.1 * ++counter);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,112,ealMatrix bbt = b.multiply(b.transpose());
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,113,"ovariance = MatrixUtils.createRealMatrix(mean.length, mean.length);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,114,or (int i = 0; i < covariance.getRowDimension(); ++i) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,115,"ovariance.setEntry(i, i, bbt.getEntry(i, i));"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,116,or (int j = 0; j < covariance.getColumnDimension(); ++j) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,117,"ouble s = bbt.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,118,"ovariance.setEntry(i, j, s);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,119,"ovariance.setEntry(j, i, s);"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,123,andomGenerator rg = new JDKRandomGenerator();
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,124,g.setSeed(17399225432l);
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,125,aussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg);
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,126,"enerator = new CorrelatedRandomVectorGenerator(mean,"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,127,"ovariance,"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,128,".0e-12 * covariance.getNorm(),"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,129,awGenerator);
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,130, catch (DimensionMismatchException e) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,131,ail(e.getMessage());
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,132, catch (NonPositiveDefiniteMatrixException e) {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,133,"ail(""not positive definite matrix"");"
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,137,Override
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,138,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,139,ean       = null;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,140,ovariance = null;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,141,enerator  = null;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,144,rivate double[] mean;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,145,rivate RealMatrix covariance;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,146,rivate CorrelatedRandomVectorGenerator generator;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,20,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,25,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,26,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,27,ublic class UncorrelatedRandomVectorGeneratorTest
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,28,xtends TestCase {
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,28,public class UncorrelatedRandomVectorGeneratorTest {
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,29,private double[] mean;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,30,private double[] standardDeviation;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,31,private UncorrelatedRandomVectorGenerator generator;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,30,ublic UncorrelatedRandomVectorGeneratorTest(String name) {
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,31,uper(name);
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,32,ean = null;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,33,tandardDeviation = null;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,34,enerator = null;
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,33,public UncorrelatedRandomVectorGeneratorTest() {
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,34,"mean              = new double[] {0.0, 1.0, -3.0, 2.3};"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,35,"standardDeviation = new double[] {1.0, 2.0, 10.0, 0.1};"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,36,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,37,rg.setSeed(17399225432l);
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,38,generator =
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,39,"new UncorrelatedRandomVectorGenerator(mean, standardDeviation,"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,40,new GaussianRandomGenerator(rg));
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,37,ublic void testMeanAndCorrelation() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,43,@Test
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,44,public void testMeanAndCorrelation() {
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,51,"ssertEquals(mean[i], estimatedMean[i], 0.07);"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,58,"Assert.assertEquals(mean[i], estimatedMean[i], 0.07);"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,54,"ssertEquals(0, estimatedCorrelation.getEntry(i, j) / scale, 0.03);"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,61,"Assert.assertEquals(0, estimatedCorrelation.getEntry(i, j) / scale, 0.03);"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,57,"ssertEquals(1, estimatedCorrelation.getEntry(i, i) / scale, 0.025);"
True,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,64,"Assert.assertEquals(1, estimatedCorrelation.getEntry(i, i) / scale, 0.025);"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,62,Override
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,63,ublic void setUp() {
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,64,"ean              = new double[] {0.0, 1.0, -3.0, 2.3};"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,65,"tandardDeviation = new double[] {1.0, 2.0, 10.0, 0.1};"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,66,andomGenerator rg = new JDKRandomGenerator();
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,67,g.setSeed(17399225432l);
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,68,enerator =
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,69,"ew UncorrelatedRandomVectorGenerator(mean, standardDeviation,"
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,70,ew GaussianRandomGenerator(rg));
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,73,Override
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,74,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,75,ean = null;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,76,tandardDeviation = null;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,77,enerator = null;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,80,rivate double[] mean;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,81,rivate double[] standardDeviation;
False,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,82,rivate UncorrelatedRandomVectorGenerator generator;
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,22,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,24,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,28,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,35,ublic class MultivariateSummaryStatisticsTest extends TestCase {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,37,ublic MultivariateSummaryStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,38,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,36,public class MultivariateSummaryStatisticsTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,42,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,52,"ssertEquals(4, u.getMean()[0], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,53,"ssertEquals(6, u.getMean()[1], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,50,"Assert.assertEquals(4, u.getMean()[0], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,51,"Assert.assertEquals(6, u.getMean()[1], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,57,"ssertEquals(4, u.getMean()[0], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,58,"ssertEquals(6, u.getMean()[1], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,55,"Assert.assertEquals(4, u.getMean()[0], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,56,"Assert.assertEquals(6, u.getMean()[1], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,65,"ssertEquals(2, u.getMean()[0], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,66,"ssertEquals(3, u.getMean()[1], 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,67,"ssertEquals(2, u.getDimension());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,63,"Assert.assertEquals(2, u.getMean()[0], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,64,"Assert.assertEquals(3, u.getMean()[1], 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,65,"Assert.assertEquals(2, u.getDimension());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,68,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,78,"ail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,77,"Assert.fail(""Expecting IllegalStateException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,84,ublic void testToString() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,83,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,84,public void testToString() {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,92,"ssertEquals(""MultivariateSummaryStatistics:"" + suffix+"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,92,"Assert.assertEquals(""MultivariateSummaryStatistics:"" + suffix+"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,106,ublic void testShuffledStatistics() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,106,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,107,public void testShuffledStatistics() {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,174,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,176,"ail(""Expecting DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,178,"Assert.fail(""Expecting DimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,183,ublic void testStats() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,185,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,186,public void testStats() {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,185,"ssertEquals(0, u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,188,"Assert.assertEquals(0, u.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,190,"ssertEquals( 4, u.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,191,"ssertEquals( 8, u.getSum()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,192,"ssertEquals(12, u.getSum()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,193,"ssertEquals(18, u.getSumSq()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,194,"ssertEquals(38, u.getSumSq()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,195,"ssertEquals( 1, u.getMin()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,196,"ssertEquals( 2, u.getMin()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,197,"ssertEquals( 3, u.getMax()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,198,"ssertEquals( 4, u.getMax()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,199,"ssertEquals(2.4849066497880003102, u.getSumLog()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,200,"ssertEquals( 4.276666119016055311, u.getSumLog()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,201,"ssertEquals( 1.8612097182041991979, u.getGeometricMean()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,202,"ssertEquals( 2.9129506302439405217, u.getGeometricMean()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,203,"ssertEquals( 2, u.getMean()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,204,"ssertEquals( 3, u.getMean()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,205,"ssertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,206,"ssertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,207,"ssertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 0), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,208,"ssertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 1), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,209,"ssertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 0), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,210,"ssertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 1), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,193,"Assert.assertEquals( 4, u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,194,"Assert.assertEquals( 8, u.getSum()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,195,"Assert.assertEquals(12, u.getSum()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,196,"Assert.assertEquals(18, u.getSumSq()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,197,"Assert.assertEquals(38, u.getSumSq()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,198,"Assert.assertEquals( 1, u.getMin()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,199,"Assert.assertEquals( 2, u.getMin()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,200,"Assert.assertEquals( 3, u.getMax()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,201,"Assert.assertEquals( 4, u.getMax()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,202,"Assert.assertEquals(2.4849066497880003102, u.getSumLog()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,203,"Assert.assertEquals( 4.276666119016055311, u.getSumLog()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,204,"Assert.assertEquals( 1.8612097182041991979, u.getGeometricMean()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,205,"Assert.assertEquals( 2.9129506302439405217, u.getGeometricMean()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,206,"Assert.assertEquals( 2, u.getMean()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,207,"Assert.assertEquals( 3, u.getMean()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,208,"Assert.assertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,209,"Assert.assertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,210,"Assert.assertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 0), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,211,"Assert.assertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 1), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,212,"Assert.assertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 0), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,213,"Assert.assertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 1), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,212,"ssertEquals(0, u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,215,"Assert.assertEquals(0, u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,218,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,217,ssertTrue(Double.isNaN(u.getMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,218,ssertTrue(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,221,Assert.assertTrue(Double.isNaN(u.getMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,222,Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,222,"ssertEquals(1.0, u.getMean()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,223,"ssertEquals(1.0, u.getGeometricMean()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,224,"ssertEquals(0.0, u.getStandardDeviation()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,226,"Assert.assertEquals(1.0, u.getMean()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,227,"Assert.assertEquals(1.0, u.getGeometricMean()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,228,"Assert.assertEquals(0.0, u.getStandardDeviation()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,228,ssertTrue(u.getStandardDeviation()[0] > 0);
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,232,Assert.assertTrue(u.getStandardDeviation()[0] > 0);
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,232,ublic void testNaNContracts() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,236,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,237,public void testNaNContracts() {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,234,ssertTrue(Double.isNaN(u.getMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,235,ssertTrue(Double.isNaN(u.getMin()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,236,ssertTrue(Double.isNaN(u.getStandardDeviation()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,237,ssertTrue(Double.isNaN(u.getGeometricMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,239,Assert.assertTrue(Double.isNaN(u.getMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,240,Assert.assertTrue(Double.isNaN(u.getMin()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,241,Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,242,Assert.assertTrue(Double.isNaN(u.getGeometricMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,240,ssertFalse(Double.isNaN(u.getMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,241,ssertFalse(Double.isNaN(u.getMin()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,242,ssertFalse(Double.isNaN(u.getStandardDeviation()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,243,ssertFalse(Double.isNaN(u.getGeometricMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,245,Assert.assertFalse(Double.isNaN(u.getMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,246,Assert.assertFalse(Double.isNaN(u.getMin()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,247,Assert.assertFalse(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,248,Assert.assertFalse(Double.isNaN(u.getGeometricMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,247,ublic void testSerialization() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,252,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,253,public void testSerialization() {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,252,"ssertEquals(u, s);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,258,"Assert.assertEquals(u, s);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,264,"ssertEquals(u, s);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,270,"Assert.assertEquals(u, s);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,268,ublic void testEqualsAndHashCode() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,274,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,275,public void testEqualsAndHashCode() {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,272,ssertTrue(u.equals(u));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,273,ssertFalse(u.equals(t));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,274,ssertFalse(u.equals(Double.valueOf(0)));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,279,Assert.assertTrue(u.equals(u));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,280,Assert.assertFalse(u.equals(t));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,281,Assert.assertFalse(u.equals(Double.valueOf(0)));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,276,ssertTrue(t.equals(u));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,277,ssertTrue(u.equals(t));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,278,"ssertEquals(emptyHash, t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,283,Assert.assertTrue(t.equals(u));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,284,Assert.assertTrue(u.equals(t));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,285,"Assert.assertEquals(emptyHash, t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,286,ssertFalse(t.equals(u));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,287,ssertFalse(u.equals(t));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,288,ssertTrue(u.hashCode() != t.hashCode());
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,293,Assert.assertFalse(t.equals(u));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,294,Assert.assertFalse(u.equals(t));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,295,Assert.assertTrue(u.hashCode() != t.hashCode());
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,296,ssertTrue(t.equals(u));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,297,ssertTrue(u.equals(t));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,298,"ssertEquals(u.hashCode(), t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,303,Assert.assertTrue(t.equals(u));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,304,Assert.assertTrue(u.equals(t));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,305,"Assert.assertEquals(u.hashCode(), t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,303,ssertTrue(t.equals(u));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,304,ssertTrue(u.equals(t));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,305,"ssertEquals(emptyHash, t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,306,"ssertEquals(emptyHash, u.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,310,Assert.assertTrue(t.equals(u));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,311,Assert.assertTrue(u.equals(t));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,312,"Assert.assertEquals(emptyHash, t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,313,"Assert.assertEquals(emptyHash, u.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,22,ublic final class SynchronizedMultivariateSummaryStatisticsTest extends MultivariateSummaryStatisticsTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,24,ublic SynchronizedMultivariateSummaryStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,25,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,22,public final class SynchronizedMultivariateSummaryStatisticsTest
True,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java,23,extends MultivariateSummaryStatisticsTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,20,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,26,ublic class VectorialCovarianceTest
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,27,xtends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,27,public class VectorialCovarianceTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,28,private double[][] points;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,29,ublic VectorialCovarianceTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,30,uper(name);
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,31,oints = null;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,30,public VectorialCovarianceTest() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,31,points = new double[][] {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,32,"{ 1.2, 2.3,  4.5},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,33,"{-0.7, 2.3,  5.0},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,34,"{ 3.1, 0.0, -3.1},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,35,"{ 6.0, 1.2,  4.2},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,36,"{-0.7, 2.3,  5.0}"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,40,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,37,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,44,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,39,"ssertEquals(5, dme.getDimension1());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,40,"ssertEquals(8, dme.getDimension2());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,46,"Assert.assertEquals(5, dme.getArgument());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,47,"Assert.assertEquals(8, dme.getDimension());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,44,ublic void testSimplistic() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,51,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,52,public void testSimplistic() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,49,"ssertEquals( 2.0, c.getEntry(0, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,50,"ssertEquals(-2.0, c.getEntry(1, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,51,"ssertEquals( 2.0, c.getEntry(1, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,57,"Assert.assertEquals( 2.0, c.getEntry(0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,58,"Assert.assertEquals(-2.0, c.getEntry(1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,59,"Assert.assertEquals( 2.0, c.getEntry(1, 1), 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,54,ublic void testBasicStats() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,62,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,63,public void testBasicStats() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,61,"ssertEquals(points.length, stat.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,70,"Assert.assertEquals(points.length, stat.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,72,"ssertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,81,"Assert.assertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,87,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,80,"ssertEquals(stat, TestUtils.serializeAndRecover(stat));"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,83,Override
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,84,ublic void setUp() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,85,oints = new double[][] {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,86," 1.2, 2.3,  4.5},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,87,"-0.7, 2.3,  5.0},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,88," 3.1, 0.0, -3.1},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,89," 6.0, 1.2,  4.2},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,90,"-0.7, 2.3,  5.0}"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,94,Override
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,95,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,96,oints = null;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,90,"Assert.assertEquals(stat, TestUtils.serializeAndRecover(stat));"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,99,rivate double [][] points;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,20,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,25,ublic class VectorialMeanTest
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,26,xtends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,26,public class VectorialMeanTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,27,private double[][] points;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,28,ublic VectorialMeanTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,29,uper(name);
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,30,oints = null;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,29,public VectorialMeanTest() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,30,points = new double[][] {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,31,"{ 1.2, 2.3,  4.5},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,32,"{-0.7, 2.3,  5.0},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,33,"{ 3.1, 0.0, -3.1},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,34,"{ 6.0, 1.2,  4.2},"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,35,"{-0.7, 2.3,  5.0}"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,39,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,36,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,43,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,38,"ssertEquals(5, dme.getDimension1());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,39,"ssertEquals(8, dme.getDimension2());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,45,"Assert.assertEquals(5, dme.getArgument());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,46,"Assert.assertEquals(8, dme.getDimension());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,43,ublic void testSimplistic() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,50,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,51,public void testSimplistic() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,48,"ssertEquals(0.0, mean[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,49,"ssertEquals(0.0, mean[1], 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,56,"Assert.assertEquals(0.0, mean[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,57,"Assert.assertEquals(0.0, mean[1], 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,52,ublic void testBasicStats() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,60,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,61,public void testBasicStats() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,59,"ssertEquals(points.length, stat.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,68,"Assert.assertEquals(points.length, stat.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,65,"ssertEquals(refMean[i], mean[i], 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,74,"Assert.assertEquals(refMean[i], mean[i], 1.0e-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,70,ublic void testSerial() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,79,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,80,public void testSerial() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,75,"ssertEquals(stat, TestUtils.serializeAndRecover(stat));"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,85,"Assert.assertEquals(stat, TestUtils.serializeAndRecover(stat));"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,77,Override
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,78,ublic void setUp() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,79,oints = new double[][] {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,80," 1.2, 2.3,  4.5},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,81,"-0.7, 2.3,  5.0},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,82," 3.1, 0.0, -3.1},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,83," 6.0, 1.2,  4.2},"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,84,"-0.7, 2.3,  5.0}"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,88,Override
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,89,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,90,oints = null;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,93,rivate double [][] points;

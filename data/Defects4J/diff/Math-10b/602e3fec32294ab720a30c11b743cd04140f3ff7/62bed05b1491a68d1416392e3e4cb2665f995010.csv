is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,21,import java.util.Collections;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,22,import java.util.List;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,25,* Chromosome represented by an immutable list of a fixed length.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,27,* @param <T> type of the representation list
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,28,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,29,* @since 2.0
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,31,public abstract class AbstractListChromosome<T> extends Chromosome {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,33,/** List representing the chromosome */
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,34,private final List<T> representation;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,37,* Constructor.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,38,* @param representation inner representation of the chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,40,public AbstractListChromosome(final List<T> representation) {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,41,try {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,42,checkValidity(representation);
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,43,} catch (InvalidRepresentationException e) {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,44,"throw new IllegalArgumentException(String.format(""Invalid representation for %s"", getClass().getSimpleName()), e);"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,46,this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,50,* Constructor.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,51,* @param representation inner representation of the chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,53,public AbstractListChromosome(final T[] representation) {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,54,this(Arrays.asList(representation));
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,59,* Asserts that <code>representation</code> can represent a valid chromosome.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,60,* @param representation representation of the chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,61,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,62,*         a valid chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,64,protected abstract void checkValidity(List<T> representation) throws InvalidRepresentationException;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,67,* Returns the (immutable) inner representation of the chromosome.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,68,* @return the representation of the chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,70,protected List<T> getRepresentation() {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,71,return representation;
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,75,* Returns the length of the chromosome.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,76,* @return the length of the chromosome
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,78,public int getLength() {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,79,return getRepresentation().size();
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,83,"* Creates a new instance of the same class as <code>this</code> is, with a"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,84,* given <code>arrayRepresentation</code>. This is needed in crossover and
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,85,"* mutation operators, where we need a new instance of the same class, but"
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,86,* with different array representation.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,88,"* Usually, this method just calls a constructor of the class."
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,90,* @param representation
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,91,*            the inner array representation of the new chromosome.
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,92,* @return new instance extended from FixedLengthChromosome with the given
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,93,*         arrayRepresentation
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,95,public abstract AbstractListChromosome<T> newFixedLengthChromosome(final List<T> representation);
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,98,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,100,@Override
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,101,public String toString() {
True,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/java/org/apache/commons/math/genetics/AbstractListChromosome.java,102,"return String.format(""(f=%s %s)"", getFitness(), getRepresentation());"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,24,* Chromosome represented by a vector of 0s and 1s.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,26,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,27,* @since 2.0
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,29,public abstract class BinaryChromosome extends AbstractListChromosome<Integer> {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,32,* Constructor.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,33,"* @param representation list of {0,1} values representing the chromosome"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,35,public BinaryChromosome(List<Integer> representation) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,36,super(representation);
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,40,* Constructor.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,41,"* @param representation array of {0,1} values representing the chromosome"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,43,public BinaryChromosome(Integer[] representation) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,44,super(representation);
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,48,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,50,@Override
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,51,protected void checkValidity(List<Integer> representation) throws InvalidRepresentationException {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,52,for (int i : representation) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,53,if (i < 0 || i >1)
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,54,"throw new InvalidRepresentationException(""Elements can be only 0 or 1."");"
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,59,* Returns a representation of a random binary array of length <code>length</code>.
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,60,* @param length length of the array
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,61,* @return a random binary array of length <code>length</code>
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,63,public static List<Integer> randomBinaryRepresentation(int length) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,64,// random binary list
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,65,List<Integer> rList= new ArrayList<Integer> (length);
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,66,for (int j=0; j<length; j++) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,67,rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,69,return rList;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,73,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,75,@Override
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,76,protected boolean isSame(Chromosome another) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,77,// type check
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,78,if (! (another instanceof BinaryChromosome))
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,79,return false;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,80,BinaryChromosome anotherBc = (BinaryChromosome) another;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,81,// size check
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,82,if (getLength() != anotherBc.getLength())
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,83,return false;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,85,for (int i=0; i< getRepresentation().size(); i++) {
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,86,if (!(getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))))
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,87,return false;
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,89,// all is ok
True,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/java/org/apache/commons/math/genetics/BinaryChromosome.java,90,return true;
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,23,* Mutation for {@link BinaryChromosome}s. Randomly changes one gene.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,25,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,26,* @since 2.0
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,28,public class BinaryMutation implements MutationPolicy {
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,31,* Mutate the given chromosome. Randomly changes one gene.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,32,* @param original the original chromosome.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,33,* @return the mutated chromomsome.
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,35,public Chromosome mutate(Chromosome original) {
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,36,if (!(original instanceof BinaryChromosome)) {
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,37,"throw new IllegalArgumentException(""Binary mutation works on BinaryChromosome only."");"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,40,BinaryChromosome origChrom = (BinaryChromosome) original;
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,41,List<Integer> newRepr = new ArrayList<Integer>(origChrom.getRepresentation());
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,43,// randomly select a gene
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,44,int geneIndex = GeneticAlgorithm.getRandomGenerator().nextInt(origChrom.getLength());
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,45,// and change it
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,46,"newRepr.set(geneIndex, origChrom.getRepresentation().get(geneIndex) == 0 ? 1 : 0);"
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,48,Chromosome newChrom = origChrom.newFixedLengthChromosome(newRepr);
True,src/java/org/apache/commons/math/genetics/BinaryMutation.java,src/java/org/apache/commons/math/genetics/BinaryMutation.java,49,return newChrom;
False,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,21, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,22,"* The chromosomes are IMMUTABLE, and so their fitness is also immutable and"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,23,* therefore it can be cached.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,25,* @since 2.0
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,26,* @version $Revision:$ $Date:$
False,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,23,ublic interface Chromosome {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {"
False,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,25, Access the fitness of this chromosome.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,31,* Cached value of the fitness of this chromosome.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,33,private double fitness = Double.MIN_VALUE;
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,36,"* Access the fitness of this chromosome. The bigger the fitness, the better"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,37,* the chromosome.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,39,"* Computation of fitness is usually very time-consuming task, therefore the"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,40,* fitness is cached.
False,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,29,itness getFitness();
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,44,public double getFitness() {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,45,if (this.fitness == Double.MIN_VALUE) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,46,// no cache - compute the fitness
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,47,this.fitness = fitness();
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,49,return this.fitness;
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,53,"* Compares two chromosomes based on their fitness. The bigger the fitness,"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,54,* the better the chromosome.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,56,* @param another another chromosome to compare
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,57,* @return
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,58,* <ul>
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,59,*     <li>-1 if <code>another</code> is better than <code>this</code></li>
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,60,*     <li>1 if <code>another</code> is worse than <code>this</code></li>
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,61,*     <li>0 if the two chromosomes have the same fitness</li>
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,62,* </ul>
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,64,public int compareTo(Chromosome another) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,65,return ((Double)this.getFitness()).compareTo(another.getFitness());
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,69,* Returns <code>true<code> iff <code>another</code> has the same
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,70,"* representation and therefore the same fitness. By default, it returns"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,71,* false -- override it in your implementation if you need it.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,72,* @param another chromosome to compare
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,73,* @return true if <code>another</code> is equivalent to this chromosome
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,75,protected boolean isSame(Chromosome another) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,76,return false;
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,80,* Searches the <code>population</code> for another chromosome with the same
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,81,"* representation. If such chromosome is found, it is returned, if no such"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,82,"* chromosome exists, returns <code>null</code>."
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,84,* @param population
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,85,*            Population to search
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,86,"* @return Chromosome with the same representation, or <code>null</code> if"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,87,*         no such chromosome exists.
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,89,protected Chromosome findSameChromosome(Population population) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,90,for (Chromosome anotherChr : population) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,91,if (this.isSame(anotherChr))
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,92,return anotherChr;
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,94,return null;
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,98,"* Searches the population for a chromosome representing the same solution,"
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,99,"* and if it finds one, updates the fitness to its value."
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,101,* @param population
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,102,*            Population to search
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,104,public void searchForFitnessUpdate(Population population) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,105,Chromosome sameChromosome = findSameChromosome(population);
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,106,if (sameChromosome != null) {
True,src/java/org/apache/commons/math/genetics/Chromosome.java,src/java/org/apache/commons/math/genetics/Chromosome.java,107,fitness = sameChromosome.getFitness();
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,21,* @since 2.0
False,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,25,rivate Chromosome first;
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,27,private final Chromosome first;
False,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,28,rivate Chromosome second;
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,30,private final Chromosome second;
False,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,36,"ublic ChromosomePair(Chromosome c1, Chromosome c2) {"
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,38,"public ChromosomePair(final Chromosome c1, final Chromosome c2) {"
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,63,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,65,@Override
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,66,public String toString() {
True,src/java/org/apache/commons/math/genetics/ChromosomePair.java,src/java/org/apache/commons/math/genetics/ChromosomePair.java,67,"return String.format(""(%s,%s)"", getFirst(), getSecond());"
True,src/java/org/apache/commons/math/genetics/CrossoverPolicy.java,src/java/org/apache/commons/math/genetics/CrossoverPolicy.java,23,* @since 2.0
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,19,import java.util.Collections;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,23,* Population of chromosomes which uses elitism (certain percentace of the best
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,24,* chromosomes is directly copied to the next generation).
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,26,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,27,* @since 2.0
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,29,public class ElitisticListPopulation extends ListPopulation {
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,31,/** percentage of chromosomes copied to the next generation */
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,32,private double elitismRate = 0.9;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,35,* Creates a new ElitisticListPopulation instance.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,37,* @param chromosomes
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,38,*            list of chromosomes in the population
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,39,* @param populationLimit
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,40,*            maximal size of the population
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,41,* @param elitismRate
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,42,*            how many best chromosomes will be directly transferred to the
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,43,*            next generation [in %]
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,45,"public ElitisticListPopulation(List<Chromosome> chromosomes, int populationLimit, double elitismRate) {"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,46,"super(chromosomes, populationLimit);"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,47,this.elitismRate = elitismRate;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,51,* Creates a new ListPopulation instance and initializes its inner
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,52,* chromosome list.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,54,* @param populationLimit maximal size of the population
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,55,* @param elitismRate
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,56,*            how many best chromosomes will be directly transferred to the
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,57,*            next generation [in %]
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,59,"public ElitisticListPopulation(int populationLimit, double elitismRate) {"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,60,super(populationLimit);
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,61,this.elitismRate = elitismRate;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,65,* Start the population for the next generation. The
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,66,* <code>{@link #elitismRate}<code> percents of the best
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,67,* chromosomes are directly copied to the next generation.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,69,* @return the beginnings of the next generation.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,71,public Population nextGeneration() {
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,72,// initialize a new generation with the same parameters
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,73,"ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,75,List<Chromosome> oldChromosomes = this.getChromosomes();
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,76,Collections.sort(oldChromosomes);
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,78,"// index of the last ""not good enough"" chromosome"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,79,int boundIndex = (int) Math.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,80,for (int i=boundIndex; i<oldChromosomes.size(); i++) {
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,81,nextGeneration.addChromosome(oldChromosomes.get(i));
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,83,return nextGeneration;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,87,"* Sets the elitism rate, i.e. how many best chromosomes will be directly"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,88,* transferred to the next generation [in %].
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,90,* @param elitismRate
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,91,*            how many best chromosomes will be directly transferred to the
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,92,*            next generation [in %]
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,94,public void setElitismRate(double elitismRate) {
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,95,if (elitismRate < 0 || elitismRate > 1)
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,96,"throw new IllegalArgumentException(""Elitism rate has to be in [0,1]"");"
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,97,this.elitismRate = elitismRate;
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,101,* Access the elitism rate.
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,102,* @return the elitism rate
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,104,public double getElitismRate() {
True,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,105,return this.elitismRate;
False,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,20, Interface used to compare chromosomes.
False,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,21, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,20,* Fitness of a chromosome.
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,22,* @version $Revision:$ $Date:$
False,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,24,ublic interface Fitness extends Comparable<Fitness> {
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,25,public interface Fitness {
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,27,"* Compute the fitness. This is usually very time-consuming, so the value"
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,28,* should be cached.
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,30,* @return fitness
True,src/java/org/apache/commons/math/genetics/Fitness.java,src/java/org/apache/commons/math/genetics/Fitness.java,32,public double fitness();
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,20,* Stops after a fixed number of generations.  Each time
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,21,"* {@link #isSatisfied(Population)} is invoked, a generation counter is"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,22,* incremented.  Once the counter reaches the configured
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,23,"* <code>maxGenerations</code> value, {@link #isSatisfied(Population)} returns"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,24,* true.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,26,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,27,* @since 2.0
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,29,public class FixedGenerationCount implements StoppingCondition {
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,30,/** Number of generations that have passed */
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,31,private int numGenerations = 0;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,33,/** Maximum number of generations (stopping criteria) */
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,34,private final int maxGenerations;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,37,* Create a new FixedGenerationCount instance.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,39,* @param maxGenerations number of generations to evolve
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,41,public FixedGenerationCount(int maxGenerations) {
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,42,if (maxGenerations <= 0)
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,43,"throw new IllegalArgumentException(""The number of generations has to be >= 0"");"
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,44,this.maxGenerations = maxGenerations;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,48,* Determine whether or not the given number of generations have passed.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,49,* Increments the number of generations counter if the maximum has not
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,50,* been reached.
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,52,* @param population ignored (no impact on result)
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,53,* @return <code>true</code> IFF the maximum number of generations has been exceeded
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,55,public boolean isSatisfied(Population population) {
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,56,if (this.numGenerations < this.maxGenerations) {
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,57,numGenerations++;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,58,return false;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,60,return true;
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,64,* @return the number of generations that have passed
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,66,public int getNumGenerations() {
True,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/java/org/apache/commons/math/genetics/FixedGenerationCount.java,67,return numGenerations;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,19,import org.apache.commons.math.random.RandomGenerator;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,20,import org.apache.commons.math.random.JDKRandomGenerator;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,23, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,26,* @since 2.0
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,27,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,32,* Static random number generator shared by GA implementation classes.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,33,* Set the randomGenerator seed to get reproducible results.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,34,* Use {@link #setRandomGenerator(RandomGenerator)} to supply an alternative
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,35,* to the default JDK-provided PRNG.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,37,private static RandomGenerator randomGenerator = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,40,* Set the (static) random generator.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,42,* @param random random generator
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,44,public synchronized static void setRandomGenerator(RandomGenerator random) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,45,randomGenerator = random;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,49,* Returns the (static) random generator.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,51,* @return the static random generator shared by GA implementation classes
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,53,public synchronized static RandomGenerator getRandomGenerator() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,54,return randomGenerator;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,27,rivate CrossoverPolicy crossoverPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,58,protected final CrossoverPolicy crossoverPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,30,rivate double crossoverRate;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,61,protected final double crossoverRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,33,rivate MutationPolicy mutationPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,64,protected final MutationPolicy mutationPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,36,rivate double mutationRate;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,67,protected final double mutationRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,39,rivate SelectionPolicy selectionPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,70,protected final SelectionPolicy selectionPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,73,* @param crossoverPolicy The {@link CrossoverPolicy}
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,74,* @param crossoverRate The crossover rate as a percentage (0-1 inclusive)
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,75,* @param mutationPolicy The {@link MutationPolicy}
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,76,* @param mutationRate The mutation rate as a percentage (0-1 inclusive)
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,77,* @param selectionPolicy The {@link selectionPolicy}
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,79,public GeneticAlgorithm(
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,80,"CrossoverPolicy crossoverPolicy, double crossoverRate,"
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,81,"MutationPolicy mutationPolicy, double mutationRate,"
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,82,SelectionPolicy selectionPolicy) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,83,if (crossoverRate < 0 || crossoverRate > 1) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,84,"throw new IllegalArgumentException(""crossoverRate must be between 0 and 1"");"
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,86,if (mutationRate < 0 || mutationRate > 1) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,87,"throw new IllegalArgumentException(""mutationRate must be between 0 and 1"");"
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,89,this.crossoverPolicy = crossoverPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,90,this.crossoverRate = crossoverRate;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,91,this.mutationPolicy = mutationPolicy;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,92,this.mutationRate = mutationRate;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,93,this.selectionPolicy = selectionPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,58, Access the crossover policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,60, @return the crossover policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,62,rivate CrossoverPolicy getCrossoverPolicy() {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,63,eturn crossoverPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,67, Access the crossover rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,69, @return the crossover rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,71,rivate double getCrossoverRate() {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,72,eturn crossoverRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,76, Access the mutation policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,78, @return the mutation policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,80,rivate MutationPolicy getMutationPolicy() {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,81,eturn mutationPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,85, Access the mutation rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,87, @return the mutation rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,89,rivate double getMutationRate() {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,90,eturn mutationRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,94, Access the selection policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,96, @return the selection policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,98,rivate SelectionPolicy getSelectionPolicy() {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,99,eturn selectionPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,125,rivate Population nextGeneration(Population current) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,134,public Population nextGeneration(Population current) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,128,hile (nextGeneration.getPopulationSize() < nextGeneration
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,129,getPopulationLimit()) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,137,while (nextGeneration.getPopulationSize() < nextGeneration.getPopulationLimit()) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,134,f (Math.random() < getCrossoverRate()) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,142,if (randomGenerator.nextDouble() < getCrossoverRate()) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,136,"air = getCrossoverPolicy().crossover(pair.getFirst(),"
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,137,air.getSecond());
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,144,"pair = getCrossoverPolicy().crossover(pair.getFirst(), pair.getSecond());"
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,141,f (Math.random() < getMutationRate()) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,148,if (randomGenerator.nextDouble() < getMutationRate()) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,144,"etMutationPolicy().mutate(pair.getFirst()),"
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,145,etMutationPolicy().mutate(pair.getSecond())
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,151,"getMutationPolicy().mutate(pair.getFirst()),"
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,152,getMutationPolicy().mutate(pair.getSecond()));
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,152,f (nextGeneration.getPopulationSize() < nextGeneration
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,153,getPopulationLimit()) {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,158,if (nextGeneration.getPopulationSize() < nextGeneration.getPopulationLimit()) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,163, Modify the crossover policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,165, @param value the new crossover policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,168,* Returns the crossover policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,169,* @return crossover policy
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,167,ublic void setCrossoverPolicy(CrossoverPolicy value) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,168,his.crossoverPolicy = value;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,171,public CrossoverPolicy getCrossoverPolicy() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,172,return crossoverPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,172, Modify the crossover rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,174, @param value the new crossover rate.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,176,* Returns the crossover rate.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,177,* @return crossover rate
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,176,ublic void setCrossoverRate(double value) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,177,his.crossoverRate = value;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,179,public double getCrossoverRate() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,180,return crossoverRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,181, Modify the mutation policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,183, @param value the new mutation policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,184,* Returns the mutation policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,185,* @return mutation policy
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,185,ublic void setMutationPolicy(MutationPolicy value) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,186,his.mutationPolicy = value;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,187,public MutationPolicy getMutationPolicy() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,188,return mutationPolicy;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,190, Modify the mutation rate.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,192, @param value the new mutation rate.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,192,* Returns the mutation rate.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,193,* @return mutation rate
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,194,ublic void setMutationRate(double value) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,195,his.mutationRate = value;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,195,public double getMutationRate() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,196,return mutationRate;
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,199, Modify the selection policy.
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,201, @param value the new selection policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,200,* Returns the selection policy.
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,201,* @return selection policy
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,203,ublic void setSelectionPolicy(SelectionPolicy value) {
False,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,204,his.selectionPolicy = value;
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,203,public SelectionPolicy getSelectionPolicy() {
True,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,204,return selectionPolicy;
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,20,* Exception indicating that the representation of a chromosome is not valid.
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,22,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,23,* @since 2.0
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,25,public class InvalidRepresentationException extends Exception {
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,27,/** Serialization version id */
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,28,private static final long serialVersionUID = 1L;
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,31,* Constructor
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,33,public InvalidRepresentationException() {
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,34,super();
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,38,* Construct an InvalidRepresentationException
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,39,* @param arg0 exception message
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,41,public InvalidRepresentationException(String arg0) {
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,42,super(arg0);
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,46,* Construct an InvalidRepresentationException
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,47,* @param arg0 cause
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,49,public InvalidRepresentationException(Throwable arg0) {
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,50,super(arg0);
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,54,* Construct an InvalidRepresentationException
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,56,* @param arg0 exception message
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,57,* @param arg1 cause
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,59,"public InvalidRepresentationException(String arg0, Throwable arg1) {"
True,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,60,"super(arg0, arg1);"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,20,import java.util.Iterator;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,21,import java.util.List;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,24,* Population of chromosomes represented by a {@link List}.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,26,* @since 2.0
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,27,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,29,public abstract class ListPopulation implements Population {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,31,/** List of chromosomes */
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,32,private List<Chromosome> chromosomes;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,34,/** maximial size of the population */
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,35,private int populationLimit;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,39,* Creates a new ListPopulation instance.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,41,* @param chromosomes list of chromosomes in the population
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,42,* @param populationLimit maximal size of the population
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,44,"public ListPopulation (List<Chromosome> chromosomes, int populationLimit) {"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,45,if (chromosomes.size() > populationLimit) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,46,"throw new IllegalArgumentException(""List of chromosomes bigger than maxPopulationSize."");"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,48,if (populationLimit < 0) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,49,"throw new IllegalArgumentException(""Population limit has to be >= 0"");"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,52,this.chromosomes = chromosomes;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,53,this.populationLimit = populationLimit;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,57,* Creates a new ListPopulation instance and initializes its inner
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,58,* chromosome list.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,60,* @param populationLimit maximal size of the population
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,62,public ListPopulation (int populationLimit) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,63,if (populationLimit < 0) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,64,"throw new IllegalArgumentException(""Population limit has to be >= 0"");"
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,66,this.populationLimit = populationLimit;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,67,this.chromosomes = new ArrayList<Chromosome>(populationLimit);
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,71,* Sets the list of chromosomes.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,72,* @param chromosomes the list of chromosomes
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,74,public void setChromosomes(List<Chromosome> chromosomes) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,75,this.chromosomes = chromosomes;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,79,* Access the list of chromosomes.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,80,* @return the list of chromosomes
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,82,public List<Chromosome> getChromosomes() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,83,return chromosomes;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,87,* Add the given chromosome to the population.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,88,* @param chromosome the chromosome to add.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,90,public void addChromosome(Chromosome chromosome) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,91,this.chromosomes.add(chromosome);
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,95,* Access the fittest chromosome in this population.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,96,* @return the fittest chromosome.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,98,public Chromosome getFittestChromosome() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,99,// best so far
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,100,Chromosome bestChromosome = this.chromosomes.get(0);
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,101,for (Chromosome chromosome : this.chromosomes) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,102,if (chromosome.compareTo(bestChromosome) > 0) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,103,// better chromosome found
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,104,bestChromosome = chromosome;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,107,return bestChromosome;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,111,* Access the maximum population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,112,* @return the maximum population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,114,public int getPopulationLimit() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,115,return this.populationLimit;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,119,* Sets the maximal population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,120,* @param populationLimit maximal population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,122,public void setPopulationLimit(int populationLimit) {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,123,this.populationLimit = populationLimit;
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,127,* Access the current population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,128,* @return the current population size.
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,130,public int getPopulationSize() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,131,return this.chromosomes.size();
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,135,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,137,@Override
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,138,public String toString() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,139,return this.chromosomes.toString();
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,143,* Chromosome list iterator
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,145,* @return chromosome iterator
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,147,public Iterator<Chromosome> iterator() {
True,src/java/org/apache/commons/math/genetics/ListPopulation.java,src/java/org/apache/commons/math/genetics/ListPopulation.java,148,return chromosomes.iterator();
True,src/java/org/apache/commons/math/genetics/MutationPolicy.java,src/java/org/apache/commons/math/genetics/MutationPolicy.java,22,* @since 2.0
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,24,* One point crossover policy. A random crossover point is selected and the
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,25,"* first part from each parent is copied to the corresponding child, and the"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,26,* second parts are copied crosswise.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,28,* Example:
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,29,* <pre>
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,30,* -C- denotes a crossover point
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,31,*                   -C-                                -C-
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,32,* p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,35,*            VV         (**)                      VV        (*)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,37,* c1 = (1 0 1 0 0 1  | 1 1 1)    X    p2 = (0 1 1 0 1 0  | 0 1 1)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,38,* </pre>
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,40,"* This policy works only on {@link AbstractListChromosome}, and therefore it"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,41,"* is parametrized by T. Moreover, the chromosomes must have same lengths."
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,43,* @param <T> generic type of the {@link AbstractListChromosome}s for crossover
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,44,* @since 2.0
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,45,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,48,public class OnePointCrossover<T> implements CrossoverPolicy {
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,51,* Performs one point crossover. A random crossover point is selected and the
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,52,"* first part from each parent is copied to the corresponding child, and the"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,53,* second parts are copied crosswise.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,55,* Example:
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,56,* -C- denotes a crossover point
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,57,*                   -C-                                -C-
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,58,* p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,61,*            VV         (**)                      VV        (*)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,63,* c1 = (1 0 1 0 0 1  | 1 1 1)    X    p2 = (0 1 1 0 1 0  | 0 1 1)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,65,* @param first first parent (p1)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,66,* @param second second parent (p2)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,67,"* @return pair of two children (c1,c2)"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,69,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,70,"public ChromosomePair crossover(Chromosome first, Chromosome second) {"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,71,if (! (first instanceof AbstractListChromosome && second instanceof AbstractListChromosome)) {
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,72,"throw new IllegalArgumentException(""One point crossover works on FixedLengthChromosomes only."");"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,74,"return crossover((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second);"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,79,"* Helper for {@link #crossover(Chromosome, Chromosome)}. Performs the actual crossover."
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,81,* @param first the first chromosome.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,82,* @param second the second chromosome.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,83,* @return the pair of new chromosomes that resulted from the crossover.
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,85,"private ChromosomePair crossover(AbstractListChromosome<T> first, AbstractListChromosome<T> second) {"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,86,int length = first.getLength();
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,87,if (length != second.getLength())
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,88,"throw new IllegalArgumentException(""Both chromosomes must have same lengths."");"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,90,// array representations of the parents
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,91,List<T> parent1Rep = first.getRepresentation();
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,92,List<T> parent2Rep = second.getRepresentation();
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,93,// and of the children
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,94,ArrayList<T> child1Rep = new ArrayList<T> (first.getLength());
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,95,ArrayList<T> child2Rep = new ArrayList<T> (second.getLength());
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,97,// select a crossover point at random (0 and length makes no sense)
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,98,int crossoverIndex = 1 + (GeneticAlgorithm.getRandomGenerator().nextInt(length-2));
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,100,// copy the first part
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,101,for (int i = 0; i < crossoverIndex; i++) {
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,102,child1Rep.add(parent1Rep.get(i));
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,103,child2Rep.add(parent2Rep.get(i));
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,105,// and switch the second part
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,106,for (int i = crossoverIndex; i < length; i++) {
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,107,child1Rep.add(parent2Rep.get(i));
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,108,child2Rep.add(parent1Rep.get(i));
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,111,return new ChromosomePair(
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,112,"first.newFixedLengthChromosome(child1Rep),"
True,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/java/org/apache/commons/math/genetics/OnePointCrossover.java,113,second.newFixedLengthChromosome(child2Rep)
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,19,import java.util.List;
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,22,* Interface indicating that the chromosome represents a permutation of objects.
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,24,* @param <T>
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,25,*            type of the permuted objects
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,26,* @since 2.0
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,27,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,29,public interface PermutationChromosome<T> {
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,32,* Permutes the <code>sequence</code> of objects of type T according to the
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,33,"* permutation this chromosome represents. For example, if this chromosome"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,34,"* represents a permutation (3,0,1,2), and the unpermuted sequence is"
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,35,"* (a,b,c,d), this yields (d,a,b,c)."
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,37,* @param sequence
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,38,*            the unpermuted (original) sequence of objects
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,39,* @return permutation of <code>sequence</code> represented by this
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,40,*         permutation
True,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/java/org/apache/commons/math/genetics/PermutationChromosome.java,42,public List<T> decode(List<T> sequence);
False,src/java/org/apache/commons/math/genetics/Population.java,src/java/org/apache/commons/math/genetics/Population.java,21, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/Population.java,src/java/org/apache/commons/math/genetics/Population.java,22,* @since 2.0
True,src/java/org/apache/commons/math/genetics/Population.java,src/java/org/apache/commons/math/genetics/Population.java,23,* @version $Revision:$ $Date:$
False,src/java/org/apache/commons/math/genetics/Population.java,src/java/org/apache/commons/math/genetics/Population.java,23,ublic interface Population {
True,src/java/org/apache/commons/math/genetics/Population.java,src/java/org/apache/commons/math/genetics/Population.java,25,public interface Population extends Iterable<Chromosome> {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,21,import java.util.Collections;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,22,import java.util.Comparator;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,23,import java.util.List;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,26,* <p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,27,* Random Key chromosome is used for permutation representation. It is a vector
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,28,"* of a fixed length of real numbers in [0,1] interval. The index of the i-th"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,29,* smallest value in the vector represents an i-th member of the permutation.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,30,* </p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,32,* <p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,33,"* For example, the random key [0.2, 0.3, 0.8, 0.1] corresponds to the"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,34,"* permutation of indices (3,0,1,2). If the original (unpermuted) sequence would"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,35,"* be (a,b,c,d), this would mean the sequence (d,a,b,c)."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,36,* </p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,38,* <p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,39,"* With this representation, common operators like n-point crossover can be"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,40,"* used, because any such chromosome represents a valid permutation."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,41,* </p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,43,* <p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,44,"* Since the chromosome (and thus its arrayRepresentation) is immutable, the"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,45,* array representation is sorted only once in the constructor.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,46,* </p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,48,* <p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,49,"* For details, see:"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,50,* <ul>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,51,"* <li>Bean, J.C.: Genetic algorithms and random keys for sequencing and"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,52,* optimization. ORSA Journal on Computing 6 (1994) 154–160</li>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,53,"* <li>Rothlauf, F.: Representations for Genetic and Evolutionary Algorithms."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,54,"* Volume 104 of Studies in Fuzziness and Soft Computing. Physica-Verlag,"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,55,* Heidelberg (2002)</li>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,56,* </ul>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,57,* </p>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,59,* @param <T>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,60,*            type of the permuted objects
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,61,* @since 2.0
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,62,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,64,public abstract class RandomKey<T> extends AbstractListChromosome<Double> implements PermutationChromosome<T> {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,67,* Cache of sorted representation (unmodifiable).
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,69,private final List<Double> sortedRepresentation;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,72,"* Base sequence [0,1,...,n-1], permuted accorting to the representation (unmodifiable)."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,74,private final List<Integer> baseSeqPermutation;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,77,* Constructor.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,79,"* @param representation list of [0,1] values representing the permutation"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,81,public RandomKey(List<Double> representation) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,82,super(representation);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,83,// store the sorted representation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,84,List<Double> sortedRepr = new ArrayList<Double> (getRepresentation());
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,85,Collections.sort(sortedRepr);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,86,sortedRepresentation = Collections.unmodifiableList(sortedRepr);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,87,"// store the permutation of [0,1,...,n-1] list for toString() and isSame() methods"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,88,baseSeqPermutation = Collections.unmodifiableList(
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,89,"decodeGeneric(baseSequence(getLength()), getRepresentation(), sortedRepresentation)"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,94,* Constructor.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,96,"* @param representation array of [0,1] values representing the permutation"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,98,public RandomKey(Double[] representation) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,99,this(Arrays.asList(representation));
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,103,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,105,public List<T> decode(List<T> sequence) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,106,"return decodeGeneric(sequence, getRepresentation(), sortedRepresentation);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,110,* Decodes a permutation represented by <code>representation</code> and
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,111,* returns a (generic) list with the permuted values.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,113,* @param <S> generic type of the sequence values
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,114,* @param sequence the unpermuted sequence
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,115,"* @param representation representation of the permutation ([0,1] vector)"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,116,* @param sortedRepr sorted <code>representation</code>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,117,* @return list with the sequence values permuted according to the representation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,119,"private static <S> List<S> decodeGeneric(List<S> sequence, List<Double> representation, List<Double> sortedRepr) {"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,120,int l = sequence.size();
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,122,if (representation.size() != l) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,123,"throw new IllegalArgumentException(String.format(""Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)"", l, representation.size()));"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,125,if (representation.size() != sortedRepr.size()) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,126,"throw new IllegalArgumentException(String.format(""Representation and sortedRepr must have same sizes, %d != %d"", representation.size(), sortedRepr.size()));"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,129,List<Double> reprCopy = new ArrayList<Double> (representation);// do not modify the orig. representation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,131,// now find the indices in the original repr and use them for permuting
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,132,List<S> res = new ArrayList<S> (l);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,133,for (int i=0; i<l; i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,134,int index = reprCopy.indexOf(sortedRepr.get(i));
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,135,res.add(sequence.get(index));
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,136,"reprCopy.set(index, null);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,138,return res;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,142,* Returns <code>true</code> iff <code>another</code> is a RandomKey and
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,143,* encodes the same permutation.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,145,* @param another chromosome to compare
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,146,* @return true iff chromosomes encode the same permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,148,@Override
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,149,protected boolean isSame(Chromosome another) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,150,// type check
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,151,if (! (another instanceof RandomKey))
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,152,return false;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,153,RandomKey<?> anotherRk = (RandomKey<?>) another;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,154,// size check
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,155,if (getLength() != anotherRk.getLength())
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,156,return false;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,158,// two different representations can still encode the same permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,159,// the ordering is what counts
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,160,List<Integer> thisPerm = this.baseSeqPermutation;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,161,List<Integer> anotherPerm = anotherRk.baseSeqPermutation;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,163,for (int i=0; i<getLength(); i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,164,if (thisPerm.get(i) != anotherPerm.get(i))
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,165,return false;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,167,// the permutations are the same
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,168,return true;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,172,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,174,@Override
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,175,protected void checkValidity(java.util.List<Double> representation) throws InvalidRepresentationException {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,176,for (double val : representation) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,177,if (val < 0 || val > 1) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,178,"throw new InvalidRepresentationException(""Values of representation must be in [0,1] interval"");"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,185,* Generates a representation corresponding to a random permutation of
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,186,* length l which can be passed to the RandomKey constructor.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,188,* @param l
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,189,*            length of the permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,190,* @return representation of a random permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,192,public static final List<Double> randomPermutation(int l) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,193,List<Double> repr = new ArrayList<Double>(l);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,194,for (int i=0; i<l; i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,195,repr.add(GeneticAlgorithm.getRandomGenerator().nextDouble());
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,197,return repr;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,201,* Generates a representation corresponding to an identity permutation of
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,202,* length l which can be passed to the RandomKey constructor.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,204,* @param l
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,205,*            length of the permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,206,* @return representation of an identity permutation
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,208,public static final List<Double> identityPermutation(int l) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,209,List<Double> repr = new ArrayList<Double>(l);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,210,for (int i=0; i<l; i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,211,repr.add((double)i/l);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,213,return repr;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,217,* Generates a representation of a permutation corresponding to the
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,218,* <code>data</code> sorted by <code>comparator</code>. The
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,219,* <code>data</code> is not modified during the process.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,221,* This is useful if you want to inject some permutations to the initial
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,222,* population.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,224,* @param <S> type of the data
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,225,* @param data list of data determining the order
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,226,* @param comparator how the data will be compared
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,227,* @return list representation of the permutation corresponding to the parameters
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,229,"public static <S> List<Double> comparatorPermutation(List<S> data, Comparator<S> comparator) {"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,230,List<S> sortedData = new ArrayList<S> (data);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,231,"Collections.sort(sortedData, comparator);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,233,"return inducedPermutation(data, sortedData);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,237,* Generates a representation of a permutation corresponding to a
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,238,* permutation which yields <code>permutedData</code> when applied to
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,239,* <code>originalData</code>.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,241,* This method can be viewed as an inverse to {@link #decode(List)}.
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,243,* @param <S> type of the data
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,244,"* @param originalData the original, unpermuted data"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,245,"* @param permutedData the data, somehow permuted"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,246,* @return representation of a permutation corresponding to the permutation <code>originalData -> permutedData</code>
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,247,* @throws IllegalArgumentException iff the <code>permutedData</code> and <code>originalData</code> contains different data
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,249,"public static <S> List<Double> inducedPermutation(List<S> originalData, List<S> permutedData) throws IllegalArgumentException {"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,250,if (originalData.size() != permutedData.size()) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,251,"throw new IllegalArgumentException(""originalData and permutedData must have same length"");"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,253,int l = originalData.size();
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,255,List<S> origDataCopy = new ArrayList<S> (originalData);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,257,Double[] res = new Double[l];
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,258,for (int i=0; i<l; i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,259,int index = origDataCopy.indexOf(permutedData.get(i));
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,260,if (index == -1) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,261,"throw new IllegalArgumentException(""originalData and permutedData must contain the same objects."");"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,263,res[index] = (double) i / l;
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,264,"origDataCopy.set(index, null);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,266,return Arrays.asList(res);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,270,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,272,@Override
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,273,public String toString() {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,274,"return String.format(""(f=%s pi=(%s))"", getFitness(), baseSeqPermutation);"
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,278,"* Helper for constructor. Generates a list of natural numbers (0,1,...,l-1)."
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,280,* @param l length of list to generate
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,281,* @return list of integers from 0 to l-1
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,283,private static List<Integer> baseSequence(int l) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,284,List<Integer> baseSequence = new ArrayList<Integer> (l);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,285,for (int i=0; i<l; i++) {
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,286,baseSequence.add(i);
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,288,return baseSequence;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,25,* Mutation operator for {@link RandomKey}s. Changes a randomly chosen element
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,26,"* of the array representation to a random value uniformly distributed in [0,1]."
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,28,* @since 2.0
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,29,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,31,public class RandomKeyMutation implements MutationPolicy {
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,34,* {@inheritDoc}
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,36,* @throws IllegalArgumentException if <code>original</code> is not a
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,37,* {@link RandomKeys} instance
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,39,public Chromosome mutate(Chromosome original) {
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,40,if (!(original instanceof RandomKey)) {
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,41,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,42,"""RandomKeyMutation works only with RandomKeys, got "" +"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,43,original.getClass().getSimpleName());
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,46,RandomKey<?> originalRk = (RandomKey<?>) original;
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,47,List<Double> repr = originalRk.getRepresentation();
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,48,int rInd = GeneticAlgorithm.getRandomGenerator().nextInt(repr.size());
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,50,List<Double> newRepr = new ArrayList<Double> (repr);
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,51,"newRepr.set(rInd, GeneticAlgorithm.getRandomGenerator().nextDouble());"
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,53,return originalRk.newFixedLengthChromosome(newRepr);
False,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,21, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,22,* @since 2.0
True,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,src/java/org/apache/commons/math/genetics/SelectionPolicy.java,23,* @version $Revision:$ $Date:$
False,src/java/org/apache/commons/math/genetics/StoppingCondition.java,src/java/org/apache/commons/math/genetics/StoppingCondition.java,21, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/genetics/StoppingCondition.java,src/java/org/apache/commons/math/genetics/StoppingCondition.java,22,* @since 2.0
True,src/java/org/apache/commons/math/genetics/StoppingCondition.java,src/java/org/apache/commons/math/genetics/StoppingCondition.java,23,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,17,package org.apache.commons.math.genetics;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,20,import java.util.List;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,23,* Tournament selection scheme. Each of the two selected chromosomes is selected
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,24,* based on n-ary tournament -- this is done by drawing {@link #arity} random
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,25,"* chromosomes without replacement from the population, and then selecting the"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,26,* fittest chromosome among them.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,28,* @since 2.0
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,29,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,31,public class TournamentSelection implements SelectionPolicy {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,33,/** number of chromosomes included in the tournament selections */
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,34,private int arity;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,37,* Creates a new TournamentSelection instance.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,39,* @param arity
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,40,*            how many chromosomes will be drawn to the tournament
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,42,public TournamentSelection(int arity) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,43,this.arity = arity;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,47,* Select two chromosomes from the population. Each of the two selected
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,48,* chromosomes is selected based on n-ary tournament -- this is done by
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,49,* drawing {@link #arity} random chromosomes without replacement from the
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,50,"* population, and then selecting the fittest chromosome among them."
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,52,* @param population
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,53,*            the population from which the chromosomes are choosen.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,54,* @return the selected chromosomes.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,56,public ChromosomePair select(Population population) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,57,return new ChromosomePair(
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,58,"tournament((ListPopulation) population),"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,59,tournament((ListPopulation)population)
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,64,* Helper for {@link #select(Population)}. Draw {@link #arity} random
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,65,"* chromosomes without replacement from the population, and then select the"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,66,* fittest chromosome among them.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,68,* @param population
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,69,*            the population from which the chromosomes are choosen.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,70,* @return the selected chromosome.
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,72,private Chromosome tournament(ListPopulation population) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,73,if (population.getPopulationSize() < this.arity)
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,74,"throw new IllegalArgumentException(""Tournament arity cannot be bigger than population size."");"
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,75,// auxiliary population
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,76,ListPopulation tournamentPopulation = new ListPopulation(this.arity) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,77,public Population nextGeneration() {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,78,// not useful here
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,79,return null;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,83,// create a copy of the chromosome list
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,84,List<Chromosome> chromosomes = new ArrayList<Chromosome> (population.getChromosomes());
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,85,for (int i=0; i<this.arity; i++) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,86,// select a random individual and add it to the tournament
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,87,int rind = GeneticAlgorithm.getRandomGenerator().nextInt(chromosomes.size());
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,88,tournamentPopulation.addChromosome(chromosomes.get(rind));
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,89,// do not select it again
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,90,chromosomes.remove(rind);
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,92,// the winner takes it all
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,93,return tournamentPopulation.getFittestChromosome();
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,97,* Gets the arity (number of chromosomes drawn to the tournament).
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,99,* @return arity of the tournament
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,101,public int getArity() {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,102,return arity;
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,106,* Sets the arity (number of chromosomes drawn to the tournament).
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,108,* @param arity arity of the tournament
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,110,public void setArity(int arity) {
True,src/java/org/apache/commons/math/genetics/TournamentSelection.java,src/java/org/apache/commons/math/genetics/TournamentSelection.java,111,this.arity = arity;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,19,import static org.junit.Assert.assertFalse;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,21,import static org.junit.Assert.fail;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,23,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,25,public class BinaryChromosomeTest {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,27,@Test
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,28,public void testInvalidConstructor() {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,29,Integer[][] reprs = new Integer[][] {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,30,"new Integer[] {0,1,0,1,2},"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,31,"new Integer[] {0,1,0,1,-1}"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,34,for (Integer[] repr : reprs) {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,35,try {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,36,new DummyBinaryChromosome(repr);
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,37,"fail(""Exception not caught"");"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,38,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,44,@Test
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,45,public void testRandomConstructor() {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,46,for (int i=0; i<20; i++) {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,47,new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,51,@Test
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,52,public void testIsSame() {
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,53,"Chromosome c1 = new DummyBinaryChromosome(new Integer[] {0,1,0,1,0,1});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,54,"Chromosome c2 = new DummyBinaryChromosome(new Integer[] {0,1,1,0,1});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,55,"Chromosome c3 = new DummyBinaryChromosome(new Integer[] {0,1,0,1,0,1,1});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,56,"Chromosome c4 = new DummyBinaryChromosome(new Integer[] {1,1,0,1,0,1});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,57,"Chromosome c5 = new DummyBinaryChromosome(new Integer[] {0,1,0,1,0,0});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,58,"Chromosome c6 = new DummyBinaryChromosome(new Integer[] {0,1,0,1,0,1});"
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,60,assertFalse(c1.isSame(c2));
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,61,assertFalse(c1.isSame(c3));
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,62,assertFalse(c1.isSame(c4));
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,63,assertFalse(c1.isSame(c5));
True,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/org/apache/commons/math/genetics/BinaryChromosomeTest.java,64,assertTrue(c1.isSame(c6));
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,21,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,23,public class BinaryMutationTest {
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,25,@Test
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,26,public void testMutate() {
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,27,BinaryMutation mutation = new BinaryMutation();
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,29,// stochastic testing :)
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,30,for (int i=0; i<20; i++) {
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,31,DummyBinaryChromosome original = new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,32,DummyBinaryChromosome mutated = (DummyBinaryChromosome) mutation.mutate(original);
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,34,// one gene should be different
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,35,int numDifferent = 0;
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,36,for (int j=0; j<original.getRepresentation().size(); j++) {
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,37,if (original.getRepresentation().get(j) != mutated.getRepresentation().get(j))
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,38,numDifferent++;
True,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/org/apache/commons/math/genetics/BinaryMutationTest.java,40,"assertEquals(1, numDifferent);"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,22,import java.util.List;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,24,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,26,public class ChromosomeTest {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,28,@Test
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,29,public void testCompareTo() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,30,Chromosome c1 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,31,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,32,return 0;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,35,Chromosome c2 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,36,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,37,return 10;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,40,Chromosome c3 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,41,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,42,return 10;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,46,assertTrue(c1.compareTo(c2) < 0);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,47,assertTrue(c2.compareTo(c1) > 0);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,48,"assertEquals(0,c3.compareTo(c2));"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,49,"assertEquals(0,c2.compareTo(c3));"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,52,private abstract static class DummyChromosome extends Chromosome {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,53,private final int repr;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,55,public DummyChromosome(final int repr) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,56,this.repr = repr;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,58,@Override
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,59,protected boolean isSame(Chromosome another) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,60,return ((DummyChromosome) another).repr == repr;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,64,@Test
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,65,public void testFindSameChromosome() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,66,Chromosome c1 = new DummyChromosome(1) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,67,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,68,return 1;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,71,Chromosome c2 = new DummyChromosome(2) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,72,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,73,return 2;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,76,Chromosome c3 = new DummyChromosome(3) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,77,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,78,return 3;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,81,Chromosome c4 = new DummyChromosome(1) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,82,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,83,return 5;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,86,Chromosome c5 = new DummyChromosome(15) {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,87,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,88,return 15;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,92,List<Chromosome> popChr = new ArrayList<Chromosome>();
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,93,popChr.add(c1);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,94,popChr.add(c2);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,95,popChr.add(c3);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,96,"Population pop = new ListPopulation(popChr,3) {"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,97,public Population nextGeneration() {
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,98,// not important
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,99,return null;
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,103,assertNull(c5.findSameChromosome(pop));
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,104,"assertEquals(c1, c4.findSameChromosome(pop));"
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,106,c4.searchForFitnessUpdate(pop);
True,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/org/apache/commons/math/genetics/ChromosomeTest.java,107,"assertEquals(1, c4.getFitness(),0);"
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,19,import java.util.List;
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,22,* Implementation of BinaryChromosome for testing purposes
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,24,public class DummyBinaryChromosome extends BinaryChromosome {
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,26,public DummyBinaryChromosome(List<Integer> representation) {
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,27,super(representation);
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,30,public DummyBinaryChromosome(Integer[] representation) {
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,31,super(representation);
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,34,@Override
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,35,public AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> representation) {
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,36,return new DummyBinaryChromosome(representation);
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,39,public double fitness() {
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,40,// uninteresting
True,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/org/apache/commons/math/genetics/DummyBinaryChromosome.java,41,return 0;
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,19,import java.util.List;
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,22,* Implementation of RandomKey for testing purposes
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,24,public class DummyRandomKey extends RandomKey<String> {
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,26,public DummyRandomKey(List<Double> representation) {
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,27,super(representation);
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,30,public DummyRandomKey(Double[] representation) {
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,31,super(representation);
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,34,@Override
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,35,public AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> representation) {
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,36,return new DummyRandomKey(representation);
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,39,public double fitness() {
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,40,// unimportant
True,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/org/apache/commons/math/genetics/DummyRandomKey.java,41,return 0;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,21,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,23,public class ElitisticListPopulationTest {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,25,private static int counter = 0;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,27,@Test
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,28,public void testNextGeneration() {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,29,"ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,31,for (int i=0; i<pop.getPopulationLimit(); i++) {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,32,pop.addChromosome(new DummyChromosome());
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,35,Population nextGeneration = pop.nextGeneration();
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,37,"assertEquals(20, nextGeneration.getPopulationSize());"
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,40,private static class DummyChromosome extends Chromosome {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,41,private final int fitness;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,43,public DummyChromosome() {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,44,this.fitness = counter;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,45,counter++;
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,48,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,49,return this.fitness;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,21,import java.util.LinkedList;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,22,import java.util.List;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,23,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,26,public class FitnessCachingTest {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,28,// parameters for the GA
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,29,private static final int DIMENSION = 50;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,30,private static final double CROSSOVER_RATE = 1;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,31,private static final double MUTATION_RATE = 0.1;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,32,private static final int TOURNAMENT_ARITY = 5;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,34,private static final int POPULATION_SIZE = 10;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,35,private static final int NUM_GENERATIONS = 50;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,36,private static final double ELITISM_RATE = 0.2;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,38,// how many times was the fitness computed
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,39,public static int fitnessCalls = 0;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,42,@Test
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,43,public void testFitnessCaching() {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,44,// initialize a new genetic algorithm
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,45,GeneticAlgorithm ga = new GeneticAlgorithm(
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,46,"new OnePointCrossover<Integer>(),"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,47,"CROSSOVER_RATE, // all selected chromosomes will be recombined (=crosssover)"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,48,"new BinaryMutation(),"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,49,"MUTATION_RATE, // no mutation"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,50,new TournamentSelection(TOURNAMENT_ARITY)
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,53,// initial population
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,54,Population initial = randomPopulation();
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,55,// stopping conditions
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,56,StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,58,// run the algorithm
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,59,"ga.evolve(initial, stopCond);"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,61,int neededCalls =
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,62,POPULATION_SIZE /*initial population*/ +
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,63,(NUM_GENERATIONS - 1) /*for each population*/ * (int)(POPULATION_SIZE * (1.0 - ELITISM_RATE)) /*some chromosomes are copied*/
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,65,assertTrue(fitnessCalls <= neededCalls); // some chromosomes after crossover may be the same os old ones
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,70,* Initializes a random population.
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,72,private static ElitisticListPopulation randomPopulation() {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,73,List<Chromosome> popList = new LinkedList<Chromosome>();
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,75,for (int i=0; i<POPULATION_SIZE; i++) {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,76,BinaryChromosome randChrom = new DummyCountingBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(DIMENSION));
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,77,popList.add(randChrom);
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,79,"return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE);"
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,82,private static class DummyCountingBinaryChromosome extends DummyBinaryChromosome {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,84,public DummyCountingBinaryChromosome(List<Integer> representation) {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,85,super(representation);
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,88,@Override
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,89,public double fitness() {
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,90,fitnessCalls++;
True,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/org/apache/commons/math/genetics/FitnessCachingTest.java,91,return 0;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,21,import java.util.Iterator;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,23,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,25,public class FixedGenerationCountTest {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,27,@Test
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,28,public void testIsSatisfied() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,29,FixedGenerationCount fgc = new FixedGenerationCount(20);
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,31,int cnt = 0;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,32,Population pop = new Population() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,33,public void addChromosome(Chromosome chromosome) {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,34,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,36,public Chromosome getFittestChromosome() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,37,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,38,return null;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,40,public int getPopulationLimit() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,41,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,42,return 0;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,44,public int getPopulationSize() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,45,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,46,return 0;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,48,public Population nextGeneration() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,49,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,50,return null;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,52,public Iterator<Chromosome> iterator() {
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,53,// unimportant
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,54,return null;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,58,while (!fgc.isSatisfied(pop))
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,59,cnt++;
True,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/org/apache/commons/math/genetics/FixedGenerationCountTest.java,60,"assertEquals(20, cnt);"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,21,import java.util.LinkedList;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,22,import java.util.List;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,23,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,26,* This is also an example of usage.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,28,public class GeneticAlgorithmTestBinary {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,30,// parameters for the GA
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,31,private static final int DIMENSION = 50;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,32,private static final int POPULATION_SIZE = 50;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,33,private static final int NUM_GENERATIONS = 50;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,34,private static final double ELITISM_RATE = 0.2;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,35,private static final double CROSSOVER_RATE = 1;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,36,private static final double MUTATION_RATE = 0.1;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,37,private static final int TOURNAMENT_ARITY = 2;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,39,@Test
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,40,public void test() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,41,"// to test a stochastic algorithm is hard, so this will rather be an usage example"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,43,// initialize a new genetic algorithm
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,44,GeneticAlgorithm ga = new GeneticAlgorithm(
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,45,"new OnePointCrossover<Integer>(),"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,46,"CROSSOVER_RATE, // all selected chromosomes will be recombined (=crosssover)"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,47,"new BinaryMutation(),"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,48,"MUTATION_RATE,"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,49,new TournamentSelection(TOURNAMENT_ARITY)
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,52,// initial population
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,53,Population initial = randomPopulation();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,54,// stopping conditions
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,55,StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,57,// best initial chromosome
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,58,Chromosome bestInitial = initial.getFittestChromosome();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,60,// run the algorithm
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,61,"Population finalPopulation = ga.evolve(initial, stopCond);"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,63,// best chromosome from the final population
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,64,Chromosome bestFinal = finalPopulation.getFittestChromosome();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,66,// the only thing we can test is whether the final solution is not worse than the initial one
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,67,"// however, for some implementations of GA, this need not be true :)"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,69,assertTrue(bestFinal.compareTo(bestInitial) > 0);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,71,//System.out.println(bestInitial);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,72,//System.out.println(bestFinal);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,79,* Initializes a random population.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,81,private static ElitisticListPopulation randomPopulation() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,82,List<Chromosome> popList = new LinkedList<Chromosome>();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,84,for (int i=0; i<POPULATION_SIZE; i++) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,85,BinaryChromosome randChrom = new FindOnes(BinaryChromosome.randomBinaryRepresentation(DIMENSION));
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,86,popList.add(randChrom);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,88,"return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE);"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,92,* Chromosomes represented by a binary chromosome.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,94,* The goal is to set all bits (genes) to 1.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,96,private static class FindOnes extends BinaryChromosome {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,98,public FindOnes(List<Integer> representation) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,99,super(representation);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,103,* Returns number of elements != 0
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,105,public double fitness() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,106,int num = 0;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,107,for (int val : this.getRepresentation()) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,108,if (val != 0)
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,109,num++;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,111,// number of elements >= 0
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,112,return num;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,115,@Override
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,116,public AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> representation) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,117,return new FindOnes(representation);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,19,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,22,import java.util.List;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,24,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,27,* This is also an example of usage.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,29,"* This algorithm does ""stochastic sorting"" of a sequence 0,...,N."
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,32,public class GeneticAlgorithmTestPermutations {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,34,// parameters for the GA
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,35,private static final int DIMENSION = 20;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,36,private static final int POPULATION_SIZE = 80;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,37,private static final int NUM_GENERATIONS = 200;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,38,private static final double ELITISM_RATE = 0.2;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,39,private static final double CROSSOVER_RATE = 1;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,40,private static final double MUTATION_RATE = 0.08;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,41,private static final int TOURNAMENT_ARITY = 2;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,43,// numbers from 0 to N-1
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,44,private static List<Integer> sequence = new ArrayList<Integer>();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,45,static {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,46,for (int i=0; i<DIMENSION; i++) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,47,sequence.add(i);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,51,@Test
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,52,public void test() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,53,"// to test a stochastic algorithm is hard, so this will rather be an usage example"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,55,// initialize a new genetic algorithm
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,56,GeneticAlgorithm ga = new GeneticAlgorithm(
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,57,"new OnePointCrossover<Integer>(),"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,58,"CROSSOVER_RATE,"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,59,"new RandomKeyMutation(),"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,60,"MUTATION_RATE,"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,61,new TournamentSelection(TOURNAMENT_ARITY)
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,64,// initial population
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,65,Population initial = randomPopulation();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,66,// stopping conditions
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,67,StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,69,// best initial chromosome
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,70,Chromosome bestInitial = initial.getFittestChromosome();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,72,// run the algorithm
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,73,"Population finalPopulation = ga.evolve(initial, stopCond);"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,75,// best chromosome from the final population
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,76,Chromosome bestFinal = finalPopulation.getFittestChromosome();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,78,// the only thing we can test is whether the final solution is not worse than the initial one
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,79,"// however, for some implementations of GA, this need not be true :)"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,81,assertTrue(bestFinal.compareTo(bestInitial) > 0);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,83,//System.out.println(bestInitial);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,84,//System.out.println(bestFinal);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,89,* Initializes a random population
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,91,private static ElitisticListPopulation randomPopulation() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,92,List<Chromosome> popList = new ArrayList<Chromosome>();
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,93,for (int i=0; i<POPULATION_SIZE; i++) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,94,Chromosome randChrom = new MinPermutations(RandomKey.randomPermutation(DIMENSION));
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,95,popList.add(randChrom);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,97,"return new ElitisticListPopulation(popList, popList.size(), ELITISM_RATE);"
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,101,"* Chromosomes representing a permutation of (0,1,2,...,DIMENSION-1)."
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,103,* The goal is to sort the sequence.
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,105,private static class MinPermutations extends RandomKey<Integer> {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,107,public MinPermutations(List<Double> representation) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,108,super(representation);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,109,// TODO Auto-generated constructor stub
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,112,public double fitness() {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,113,int res = 0;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,114,List<Integer> decoded = decode(sequence);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,115,for (int i=0; i<decoded.size(); i++) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,116,int value = (Integer) decoded.get(i);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,117,if (value != i) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,118,// bad position found
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,119,res += Math.abs(value - i);
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,122,// the most fitted chromosome is the one with minimal error
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,123,// therefore we must return negative value
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,124,return -res;
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,127,@Override
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,128,public AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> representation) {
True,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,129,return new MinPermutations(representation);
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,23,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,25,public class ListPopulationTest {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,27,@Test
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,28,public void testGetFittestChromosome() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,29,Chromosome c1 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,30,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,31,return 0;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,34,Chromosome c2 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,35,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,36,return 10;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,39,Chromosome c3 = new Chromosome() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,40,public double fitness() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,41,return 15;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,45,ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,46,chromosomes.add(c1);
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,47,chromosomes.add(c2);
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,48,chromosomes.add(c3);
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,50,"ListPopulation population = new ListPopulation(chromosomes,10) {"
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,52,public Population nextGeneration() {
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,53,// not important
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,54,return null;
True,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/org/apache/commons/math/genetics/ListPopulationTest.java,58,"assertEquals(c3, population.getFittestChromosome());"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,20,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,22,public class OnePointCrossoverTest {
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,24,@Test
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,25,public void testCrossover() {
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,26,"Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,27,"Integer[] p2 = new Integer[] {0,1,1,0,1,0,1,1,1};"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,29,BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,30,BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,32,OnePointCrossover<Integer> opc = new OnePointCrossover<Integer>();
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,34,// how to test a stochastic method?
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,35,for (int i=0; i<20; i++) {
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,36,"ChromosomePair pair = opc.crossover(p1c,p2c);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,38,Integer[] c1 = new Integer[p1.length];
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,39,Integer[] c2 = new Integer[p2.length];
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,41,c1 = ((BinaryChromosome) pair.getFirst()).getRepresentation().toArray(c1);
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,42,c2 = ((BinaryChromosome) pair.getSecond()).getRepresentation().toArray(c2);
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,44,// first and last values will be the same
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,45,"assertEquals((int) p1[0], (int) c1[0]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,46,"assertEquals((int) p2[0], (int) c2[0]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,47,"assertEquals((int) p1[p1.length-1], (int) c1[c1.length-1]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,48,"assertEquals((int) p2[p2.length-1], (int) c2[c2.length-1]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,49,"// moreover, in the above setting, the 2nd, 3rd and 7th values will be the same"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,50,"assertEquals((int) p1[2], (int) c1[2]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,51,"assertEquals((int) p2[2], (int) c2[2]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,52,"assertEquals((int) p1[3], (int) c1[3]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,53,"assertEquals((int) p2[3], (int) c2[3]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,54,"assertEquals((int) p1[7], (int) c1[7]);"
True,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/org/apache/commons/math/genetics/OnePointCrossoverTest.java,55,"assertEquals((int) p2[7], (int) c2[7]);"
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,21,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,23,public class RandomKeyMutationTest {
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,25,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,26,public void testMutate() {
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,27,MutationPolicy mutation = new RandomKeyMutation();
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,28,int l=10;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,29,for (int i=0; i<20; i++) {
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,30,DummyRandomKey origRk = new DummyRandomKey(RandomKey.randomPermutation(l));
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,31,Chromosome mutated = mutation.mutate(origRk);
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,32,DummyRandomKey mutatedRk = (DummyRandomKey) mutated;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,34,int changes = 0;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,35,for (int j=0; j<origRk.getLength(); j++) {
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,36,if (origRk.getRepresentation().get(j) != mutatedRk.getRepresentation().get(j)) {
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,37,changes++;
True,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/org/apache/commons/math/genetics/RandomKeyMutationTest.java,40,"assertEquals(1,changes);"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,21,import java.util.Arrays;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,22,import java.util.Comparator;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,23,import java.util.List;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,25,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,27,public class RandomKeyTest {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,29,@Test(expected=IllegalArgumentException.class)
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,30,public void testConstructor1() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,31,"@SuppressWarnings(""unused"")"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,32,"DummyRandomKey drk = new DummyRandomKey(new Double[] {0.2, 0.3, 1.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,35,@Test(expected=IllegalArgumentException.class)
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,36,public void testConstructor2() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,37,"@SuppressWarnings(""unused"")"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,38,"DummyRandomKey drk = new DummyRandomKey(new Double[] {0.2, 0.3, -0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,41,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,42,public void testIsSame() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,43,"DummyRandomKey drk1 = new DummyRandomKey(new Double[] {0.4, 0.1, 0.5, 0.8, 0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,44,"DummyRandomKey drk2 = new DummyRandomKey(new Double[] {0.4, 0.1, 0.5, 0.8, 0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,45,"DummyRandomKey drk3 = new DummyRandomKey(new Double[] {0.4, 0.15, 0.5, 0.8, 0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,46,"DummyRandomKey drk4 = new DummyRandomKey(new Double[] {0.4, 0.25, 0.5, 0.8, 0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,47,"DummyRandomKey drk5 = new DummyRandomKey(new Double[] {0.4, 0.25, 0.5, 0.8, 0.2, 0.5});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,49,assertTrue(drk1.isSame(drk2));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,50,assertTrue(drk2.isSame(drk3));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,51,assertFalse(drk3.isSame(drk4));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,52,assertFalse(drk4.isSame(drk5));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,55,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,56,public void testDecode() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,57,"DummyRandomKey drk = new DummyRandomKey(new Double[] {0.4, 0.1, 0.5, 0.8, 0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,58,"List<String> decoded = drk.decode(Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""e""}));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,60,"assertEquals(""b"", decoded.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,61,"assertEquals(""e"", decoded.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,62,"assertEquals(""a"", decoded.get(2));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,63,"assertEquals(""c"", decoded.get(3));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,64,"assertEquals(""d"", decoded.get(4));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,67,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,68,public void testRandomPermutation() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,69,// never generate an invalid one
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,70,for (int i=0; i<10; i++) {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,71,"@SuppressWarnings(""unused"")"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,72,DummyRandomKey drk = new DummyRandomKey(RandomKey.randomPermutation(20));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,76,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,77,public void testIdentityPermutation() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,78,DummyRandomKey drk = new DummyRandomKey(RandomKey.identityPermutation(5));
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,79,"List<String> decoded = drk.decode(Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""e""}));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,81,"assertEquals(""a"", decoded.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,82,"assertEquals(""b"", decoded.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,83,"assertEquals(""c"", decoded.get(2));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,84,"assertEquals(""d"", decoded.get(3));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,85,"assertEquals(""e"", decoded.get(4));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,88,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,89,public void testComparatorPermutation() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,90,"List<String> data = Arrays.asList(new String[] {""x"", ""b"", ""c"", ""z"", ""b""});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,92,"List<Double> permutation = RandomKey.comparatorPermutation(data, new Comparator<String>() {"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,93,"public int compare(String o1, String o2) {"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,94,return o1.compareTo(o2);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,97,Double[] permArr = new Double[data.size()];
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,98,permArr = permutation.toArray(permArr);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,99,"assertArrayEquals(new Double[] {0.6,0.0,0.4,0.8,0.2}, permArr);"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,100,List<String> decodedData = new DummyRandomKey(permutation).decode(data);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,101,"assertEquals(""b"", decodedData.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,102,"assertEquals(""b"", decodedData.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,103,"assertEquals(""c"", decodedData.get(2));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,104,"assertEquals(""x"", decodedData.get(3));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,105,"assertEquals(""z"", decodedData.get(4));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,107,"permutation = RandomKey.comparatorPermutation(data, new Comparator<String>() {"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,108,"public int compare(String o1, String o2) {"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,109,return o2.compareTo(o1);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,112,permArr = new Double[data.size()];
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,113,permArr = permutation.toArray(permArr);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,114,"assertArrayEquals(new Double[] {0.2,0.6,0.4,0.0,0.8}, permArr);"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,115,decodedData = new DummyRandomKey(permutation).decode(data);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,116,"assertEquals(""z"", decodedData.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,117,"assertEquals(""x"", decodedData.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,118,"assertEquals(""c"", decodedData.get(2));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,119,"assertEquals(""b"", decodedData.get(3));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,120,"assertEquals(""b"", decodedData.get(4));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,123,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,124,public void testInducedPermutation() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,125,"List<String> origData = Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""d""});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,126,"List<String> permutedData = Arrays.asList(new String[] {""d"", ""b"", ""c"", ""a"", ""d""});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,128,"DummyRandomKey drk = new DummyRandomKey(RandomKey.inducedPermutation(origData, permutedData));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,129,List<String> decoded = drk.decode(origData);
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,131,"assertEquals(""d"", decoded.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,132,"assertEquals(""b"", decoded.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,133,"assertEquals(""c"", decoded.get(2));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,134,"assertEquals(""a"", decoded.get(3));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,135,"assertEquals(""d"", decoded.get(4));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,137,try {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,138,RandomKey.inducedPermutation(
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,139,"Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""d""}),"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,140,"Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d""})"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,142,"fail(""Uncaught exception"");"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,143,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,144,// no-op
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,146,try {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,147,RandomKey.inducedPermutation(
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,148,"Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""d""}),"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,149,"Arrays.asList(new String[] {""a"", ""b"", ""c"", ""d"", ""f""})"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,151,"fail(""Uncaught exception"");"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,152,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,153,// no-op
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,157,@Test
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,158,public void testEqualRepr() {
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,159,"DummyRandomKey drk = new DummyRandomKey(new Double[] {0.2, 0.2, 0.5});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,160,"List<String> decodedData = drk.decode(Arrays.asList(new String[] {""a"", ""b"", ""c""}));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,161,"assertEquals(""a"", decodedData.get(0));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,162,"assertEquals(""b"", decodedData.get(1));"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,163,"assertEquals(""c"", decodedData.get(2));"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,17,package org.apache.commons.math.genetics;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,19,import static org.junit.Assert.*;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,20,import org.junit.Test;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,22,public class TournamentSelectionTest {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,24,private static int counter = 0;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,26,@Test
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,27,public void testSelect() {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,28,TournamentSelection ts = new TournamentSelection(2);
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,29,"ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);"
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,31,for (int i=0; i<pop.getPopulationLimit(); i++) {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,32,pop.addChromosome(new DummyChromosome());
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,34,// how to write a test for stochastic method?
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,35,for (int i=0; i<20; i++) {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,36,ChromosomePair pair = ts.select(pop);
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,37,// the worst chromosome should NEVER be selected
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,38,assertTrue(pair.getFirst().getFitness() > 0);
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,39,assertTrue(pair.getSecond().getFitness() > 0);
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,43,private static class DummyChromosome extends Chromosome {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,44,private final int fitness;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,46,public DummyChromosome() {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,47,this.fitness = counter;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,48,counter++;
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,51,public double fitness() {
True,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/org/apache/commons/math/genetics/TournamentSelectionTest.java,52,return this.fitness;

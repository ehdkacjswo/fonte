is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,33,"rivate final double[] exampleData = { 20, 17, 30, 42.3, 17, 50,"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,34,"ouble.NaN, Double.NEGATIVE_INFINITY, 17 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,35,"rivate final double[] tiesFirst = { 0, 0, 2, 1, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,36,"rivate final double[] tiesLast = { 4, 4, 1, 0 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,37,"rivate final double[] multipleNaNs = { 0, 1, Double.NaN, Double.NaN };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,38,"rivate final double[] multipleTies = { 3, 2, 5, 5, 6, 6, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,39,"rivate final double[] allSame = { 0, 0, 0, 0 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,33,"private final double[] exampleData = { 20, 17, 30, 42.3, 17, 50,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,34,"Double.NaN, Double.NEGATIVE_INFINITY, 17 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,35,"private final double[] tiesFirst = { 0, 0, 2, 1, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,36,"private final double[] tiesLast = { 4, 4, 1, 0 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,37,"private final double[] multipleNaNs = { 0, 1, Double.NaN, Double.NaN };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,38,"private final double[] multipleTies = { 3, 2, 5, 5, 6, 6, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,39,"private final double[] allSame = { 0, 0, 0, 0 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,41,ublic NaturalRankingTest(String arg0) {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,42,uper(arg0);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,41,public NaturalRankingTest(String arg0) {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,42,super(arg0);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,45,Override
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,46,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,47,uper.setUp();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,45,@Override
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,46,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,47,super.setUp();
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,50,Override
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,51,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,52,uper.tearDown();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,50,@Override
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,51,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,52,super.tearDown();
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,55,"ublic void testDefault() { // Ties averaged, NaNs maximal"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,56,aturalRanking ranking = new NaturalRanking();
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,57,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,58,"ouble[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,59,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,60,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,61,"orrectRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,62,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,63,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,64,"orrectRanks = new double[] { 3.5, 3.5, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,65,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,66,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,67,"orrectRanks = new double[] { 1, 2, 3.5, 3.5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,68,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,69,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,70,"orrectRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,71,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,72,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,73,"orrectRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,74,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,55,"public void testDefault() { // Ties averaged, NaNs maximal"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,56,NaturalRanking ranking = new NaturalRanking();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,57,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,58,"double[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,59,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,60,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,61,"correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,62,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,63,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,64,"correctRanks = new double[] { 3.5, 3.5, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,65,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,66,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,67,"correctRanks = new double[] { 1, 2, 3.5, 3.5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,68,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,69,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,70,"correctRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,71,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,72,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,73,"correctRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,74,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,77,ublic void testNaNsMaximalTiesMinimum() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,78,aturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,79,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,80,"ouble[] correctRanks = { 5, 2, 6, 7, 2, 8, 9, 1, 2 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,81,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,82,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,83,"orrectRanks = new double[] { 1, 1, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,84,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,85,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,86,"orrectRanks = new double[] { 3, 3, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,87,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,88,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,89,"orrectRanks = new double[] { 1, 2, 3, 3 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,90,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,91,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,92,"orrectRanks = new double[] { 3, 2, 4, 4, 6, 6, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,93,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,94,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,95,"orrectRanks = new double[] { 1, 1, 1, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,96,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,77,public void testNaNsMaximalTiesMinimum() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,78,NaturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,79,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,80,"double[] correctRanks = { 5, 2, 6, 7, 2, 8, 9, 1, 2 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,81,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,82,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,83,"correctRanks = new double[] { 1, 1, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,84,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,85,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,86,"correctRanks = new double[] { 3, 3, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,87,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,88,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,89,"correctRanks = new double[] { 1, 2, 3, 3 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,90,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,91,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,92,"correctRanks = new double[] { 3, 2, 4, 4, 6, 6, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,93,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,94,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,95,"correctRanks = new double[] { 1, 1, 1, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,96,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,99,ublic void testNaNsRemovedTiesSequential() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,100,"aturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED,"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,101,iesStrategy.SEQUENTIAL);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,102,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,103,"ouble[] correctRanks = { 5, 2, 6, 7, 3, 8, 1, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,104,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,105,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,106,"orrectRanks = new double[] { 1, 2, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,107,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,108,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,109,"orrectRanks = new double[] { 3, 4, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,110,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,111,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,112,"orrectRanks = new double[] { 1, 2 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,113,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,114,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,115,"orrectRanks = new double[] { 3, 2, 4, 5, 6, 7, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,116,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,117,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,118,"orrectRanks = new double[] { 1, 2, 3, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,119,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,99,public void testNaNsRemovedTiesSequential() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,100,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,101,TiesStrategy.SEQUENTIAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,102,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,103,"double[] correctRanks = { 5, 2, 6, 7, 3, 8, 1, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,104,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,105,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,106,"correctRanks = new double[] { 1, 2, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,107,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,108,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,109,"correctRanks = new double[] { 3, 4, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,110,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,111,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,112,"correctRanks = new double[] { 1, 2 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,113,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,114,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,115,"correctRanks = new double[] { 3, 2, 4, 5, 6, 7, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,116,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,117,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,118,"correctRanks = new double[] { 1, 2, 3, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,119,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,122,ublic void testNaNsMinimalTiesMaximum() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,123,"aturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL,"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,124,iesStrategy.MAXIMUM);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,125,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,126,"ouble[] correctRanks = { 6, 5, 7, 8, 5, 9, 2, 2, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,127,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,128,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,129,"orrectRanks = new double[] { 2, 2, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,130,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,131,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,132,"orrectRanks = new double[] { 4, 4, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,133,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,134,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,135,"orrectRanks = new double[] { 3, 4, 2, 2 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,136,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,137,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,138,"orrectRanks = new double[] { 3, 2, 5, 5, 7, 7, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,139,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,140,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,141,"orrectRanks = new double[] { 4, 4, 4, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,142,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,122,public void testNaNsMinimalTiesMaximum() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,123,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,124,TiesStrategy.MAXIMUM);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,125,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,126,"double[] correctRanks = { 6, 5, 7, 8, 5, 9, 2, 2, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,127,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,128,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,129,"correctRanks = new double[] { 2, 2, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,130,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,131,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,132,"correctRanks = new double[] { 4, 4, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,133,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,134,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,135,"correctRanks = new double[] { 3, 4, 2, 2 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,136,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,137,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,138,"correctRanks = new double[] { 3, 2, 5, 5, 7, 7, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,139,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,140,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,141,"correctRanks = new double[] { 4, 4, 4, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,142,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,145,ublic void testNaNsMinimalTiesAverage() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,146,aturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,147,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,148,"ouble[] correctRanks = { 6, 4, 7, 8, 4, 9, 1.5, 1.5, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,149,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,150,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,151,"orrectRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,152,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,153,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,154,"orrectRanks = new double[] { 3.5, 3.5, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,155,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,156,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,157,"orrectRanks = new double[] { 3, 4, 1.5, 1.5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,158,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,159,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,160,"orrectRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,161,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,162,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,163,"orrectRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,164,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,145,public void testNaNsMinimalTiesAverage() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,146,NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,147,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,148,"double[] correctRanks = { 6, 4, 7, 8, 4, 9, 1.5, 1.5, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,149,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,150,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,151,"correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,152,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,153,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,154,"correctRanks = new double[] { 3.5, 3.5, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,155,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,156,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,157,"correctRanks = new double[] { 3, 4, 1.5, 1.5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,158,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,159,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,160,"correctRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,161,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,162,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,163,"correctRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,164,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,167,ublic void testNaNsFixedTiesRandom() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,168,andomGenerator randomGenerator = new JDKRandomGenerator();
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,169,andomGenerator.setSeed(1000);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,170,"aturalRanking ranking = new NaturalRanking(NaNStrategy.FIXED,"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,171,andomGenerator);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,172,ouble[] ranks = ranking.rank(exampleData);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,173,"ouble[] correctRanks = { 5, 4, 6, 7, 3, 8, Double.NaN, 1, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,174,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,175,anks = ranking.rank(tiesFirst);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,176,"orrectRanks = new double[] { 1, 1, 4, 3, 5 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,177,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,178,anks = ranking.rank(tiesLast);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,179,"orrectRanks = new double[] { 3, 4, 2, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,180,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,181,anks = ranking.rank(multipleNaNs);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,182,"orrectRanks = new double[] { 1, 2, Double.NaN, Double.NaN };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,183,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,184,anks = ranking.rank(multipleTies);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,185,"orrectRanks = new double[] { 3, 2, 5, 5, 7, 6, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,186,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,187,anks = ranking.rank(allSame);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,188,"orrectRanks = new double[] { 1, 3, 4, 4 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,189,"estUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,167,public void testNaNsFixedTiesRandom() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,168,RandomGenerator randomGenerator = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,169,randomGenerator.setSeed(1000);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,170,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,171,randomGenerator);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,172,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,173,"double[] correctRanks = { 5, 4, 6, 7, 3, 8, Double.NaN, 1, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,174,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,175,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,176,"correctRanks = new double[] { 1, 1, 4, 3, 5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,177,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,178,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,179,"correctRanks = new double[] { 3, 4, 2, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,180,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,181,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,182,"correctRanks = new double[] { 1, 2, Double.NaN, Double.NaN };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,183,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,184,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,185,"correctRanks = new double[] { 3, 2, 5, 5, 7, 6, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,186,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,187,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,188,"correctRanks = new double[] { 1, 3, 4, 4 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,189,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,192,ublic void testNaNsAndInfs() {
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,193,"ouble[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN,"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,194,ouble.NEGATIVE_INFINITY };
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,195,aturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,196,ouble[] ranks = ranking.rank(data);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,197,"ouble[] correctRanks = new double[] { 2, 3.5, 3.5, 1 };"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,198,"estUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,199,anking = new NaturalRanking(NaNStrategy.MINIMAL);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,200,anks = ranking.rank(data);
False,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,201,"orrectRanks = new double[] { 3, 4, 1.5, 1.5 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,192,public void testNaNsAndInfs() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,193,"double[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,194,Double.NEGATIVE_INFINITY };
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,195,NaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,196,double[] ranks = ranking.rank(data);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,197,"double[] correctRanks = new double[] { 2, 3.5, 3.5, 1 };"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,198,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,199,ranking = new NaturalRanking(NaNStrategy.MINIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,200,ranks = ranking.rank(data);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,201,"correctRanks = new double[] { 3, 4, 1.5, 1.5 };"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,129,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,130,ublic void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,131,ptimizer.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,131,ublic void setConvergenceChecker(ConvergenceChecker<VectorialPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,132,ptimizer.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,55, Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,57, @param checker Object to use to check for convergence.
False,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,59,oid setConvergenceChecker(ConvergenceChecker<PAIR> checker);
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,79,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,80,ublic void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,81,his.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,81,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,82,ublic void setConvergenceChecker(ConvergenceChecker<VectorialPointValuePair> convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java,83,his.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,rivate ConvergenceChecker<UnivariateRealPointValuePair> checker;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,private final ConvergenceChecker<UnivariateRealPointValuePair> checker;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,53,* @param checker Convergence checking procedure.
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,55,protected AbstractUnivariateRealOptimizer(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,56,this.checker = checker;
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,139, {@inheritDoc}
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,141,ublic void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> c) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,142,hecker = c;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,34, <br/>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,35, The user is responsible for calling {@link
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,36, #setConvergenceChecker(ConvergenceChecker) ConvergenceChecker}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,37, prior to using the optimizer.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,67,"* @param checker Additional, user-defined, convergence checking"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68,* procedure.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75,ouble abs) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73,"double abs,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,ConvergenceChecker<UnivariateRealPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75,super(checker);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,* The arguments are used implement the original stopping criterion
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,* of Brent's algorithm.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,90,* {@code abs} and {@code rel} define a tolerance
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,91,* {@code tol = rel |x| + abs}. {@code rel} should be no smaller than
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,92,"* <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,93,* where <em>macheps</em> is the relative machine precision. {@code abs} must
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,94,* be positive.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96,* @param rel Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,* @param abs Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,98,* @throws NotStrictlyPositiveException if {@code abs <= 0}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,99,* @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,101,"public BrentOptimizer(double rel,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,102,double abs) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,"this(rel, abs, null);"
False,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,89, {@inheritDoc}
False,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,91,ublic void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java,92,ptimizer.setConvergenceChecker(checker);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,47,ew NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,47,"new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,48,"new SimpleScalarValueChecker(1.0e-10, 1.0e-10));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,55,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-10));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,103,ew GaussNewtonOptimizer(true);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,103,"new GaussNewtonOptimizer(true,"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,104,"new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,111,"ptimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,135,Test(expected = TestException.class)
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,135,@Test(expected=TestException.class)
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,138,ew GaussNewtonOptimizer(true);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,138,"new GaussNewtonOptimizer(true,"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,139,"new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,146,"ptimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,35,implexOptimizer underlying = new SimplexOptimizer();
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,35,SimplexOptimizer underlying
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,36,"= new SimplexOptimizer(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,46,"ptimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,481,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,482,"ptimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-8, 1.0e-8));"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,481,LevenbergMarquardtOptimizer optimizer
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,482,"= new LevenbergMarquardtOptimizer(new SimpleVectorialValueChecker(1.0e-8, 1.0e-8));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,27, Base class for various continuous distributions.  It provides default
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28, implementations for some of the methods that do not vary from distribution
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29, to distribution.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,27,* Base class for continuous distributions.  Default implementations are
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28,* provided for some of the methods that do not vary from distribution to
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,* distribution.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31, @version $Revision: 1.25 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31,* @version $Revision: 1.26 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,34,extends AbstractDistribution
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,47," For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,48, is accomplished by using the equality P(x0 &lt; X &lt; x1) =
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,49, P(X &lt; x1) - P(X &lt; x0).
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,51, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,52, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,53, @return the cumulative probability.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,54, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,55,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,56, @throws IllegalArgumentException if x0 > x1
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,"ublic double cumulativeProbability(double x0, double x1)"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,59,hrows MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,60,f (x0 > x1) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,61,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,62,"""lower endpoint must be less than or equal to upper endpoint"");"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,64,eturn cumulativeProbability(x1) - cumulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,23,* Base class for probability distributions.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,25,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,27,public abstract class AbstractDistribution
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,28,"implements Distribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,30,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,31,static final long serialVersionUID = -38038050983108802L;
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,34,* Default constructor.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,36,protected AbstractDistribution() {
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,37,super();
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,41,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,42,"* to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,43,* <p>
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,44,* The default implementation uses the identity
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,45,* <p>
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,46,* P(x0 &le; X &le; x1) = P(X &le; x1) - P(X &le; x0)
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,48,* @param x0 the (inclusive) lower bound
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,49,* @param x1 the (inclusive) upper bound
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,50,* @return the probability that a random variable with this distribution
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,51,"* will take a value between <code>x0</code> and <code>x1</code>,"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,52,* including the endpoints.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,53,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,54,* computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,55,* @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,57,"public double cumulativeProbability(double x0, double x1)"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,58,throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,59,if (x0 > x1) {
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,60,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,61,"(""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,63,return cumulativeProbability(x1) - cumulativeProbability(x0);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,24, Base class for various discrete distributions.  It provides default
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,25, implementations for some of the methods that do not vary from distribution
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,26, to distribution.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,24,* Base class for integer-valued discrete distributions.  Default
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,25,* implementations are provided for some of the methods that do not vary
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,26,* from distribution to distribution.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,28, @version $Revision: 1.18 $ $Date: 2004/07/23 05:20:26 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,28,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,30,ublic abstract class AbstractDiscreteDistribution
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,31,"mplements DiscreteDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,30,public abstract class AbstractIntegerDistribution extends AbstractDistribution
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,31,"implements IntegerDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,39,rotected AbstractDiscreteDistribution() {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,39,protected AbstractIntegerDistribution() {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,44," For this distribution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,44,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,45,"* to this distribution, this method returns P(X &le; x).  In other words,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,46,"* this method represents the  (cumulative) distribution function, or"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,47,"* CDF, for this distribution."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,48,* <p>
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,49,"* If <code>x</code> does not represent an integer value, the CDF is"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,50,* evaluated at the greatest integer less than x.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,52,* @param x the value at which the distribution function is evaluated.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,53,* @return cumulative probability that a random variable with this
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,54,* distribution takes a value less than or equal to <code>x</code>
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,55,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56,* computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58,public double cumulativeProbability(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,59,return cumulativeProbability((int) Math.floor(x));
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,63,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64,"* to this distribution, this method returns P(X &le; x).  In other words,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,65,"* this method represents the probability distribution function, or PDF,"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,66,* for this distribution.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,68,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,69,* @return PDF for this distribution.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,73,abstract public double cumulativeProbability(int x) throws MathException;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,77,"* to this distribution, this method returns P(X = x). In other words, this"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,78,"* method represents the probability mass function,  or PMF, for the distribution."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79,* <p>
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,"* If <code>x</code> does not represent an integer value, 0 is returned."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,82,* @param x the value at which the probability density function is evaluated
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,* @return the value of the probability density function at x
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,85,public double probability(double x) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,86,double fl = Math.floor(x);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,87,if (fl == x) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,88,return this.probability((int) x);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,89,} else {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,return 0;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,95,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,96,"* to this distribution, this method returns P(x0 &le; X &le; x1)."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61," For this distribution, X, this method returns the largest x, such"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,114,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,115,"* to this distribution, this method returns the largest x, such"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32, @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,* @version $Revision: 1.12 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,34,ublic interface BinomialDistribution extends DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,34,public interface BinomialDistribution extends IntegerDistribution {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27, @version $Revision: 1.18 $ $Date: 2004/07/25 16:29:24 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,* @version $Revision: 1.19 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,30,xtends AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,30,extends AbstractIntegerDistribution
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121," For this disbution, X, this method returns P(X &le; x)."
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,"* For this distribution, X, this method returns P(X &le; x)."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,21, Base interface for various continuous distributions.
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,21,* Base interface for continuous distributions.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23, @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23,* @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,25,ublic interface ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,27," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,30, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33,ouble cumulativeProbability(double x) throws MathException;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36," For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39, @return the cumulative probability.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,40, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,43,"ouble cumulativeProbability(double x0, double x1) throws MathException;"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,25,public interface ContinuousDistribution extends Distribution {
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,18,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,21, Base interface for various discrete distributions.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,20,* Base interface for discrete distributions.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23, @version $Revision: 1.16 $ $Date: 2004/07/25 16:29:24 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,22,* @version $Revision: 1.17 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,25,ublic interface DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,24,public interface DiscreteDistribution extends Distribution {
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,27," For this distribution, X, this method returns P(X = x)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,28, @param x the value at which the PMF is evaluated.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,29, @return PMF for this distribution.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,31,ouble probability(int x);
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,34," For this distribution, X, this method returns P(X &le; x)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,35, @param x the value at which the PDF is evaluated.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,36, @return PDF for this distribution.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,37, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,38,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,40,ouble cumulativeProbability(int x) throws MathException;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,43," For this distribution, X, this method returns P(x0 &le; X &le; x1)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,44," @param x0 the inclusive, lower bound"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,45," @param x1 the inclusive, upper bound"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,46, @return the cumulative probability.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,47, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,48,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,49, @throws IllegalArgumentException if x0 > x1
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,51,"ouble cumulativeProbability(int x0, int x1) throws MathException;"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,54," For this distribution, X, this method returns the largest x such that"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,55, P(X &le; x) <= p.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,56, <p>
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,57, Note that this definition implies: <ul>
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,58," <li> If there is a minimum value, <code>m</code>, with postive"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59," probablility under (the density of) X, then <code>m - 1</code> is"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,60, returned by <code>inverseCumulativeProbability(0).</code>  If there is
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,61," no such value <code>m,  Integer.MIN_VALUE</code> is"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,62, returned.</li>
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,63," <li> If there is a maximum value, <code>M</code>, such that"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,64," P(X &le; M) =1, then <code>M</code> is returned by"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,65, <code>inverseCumulativeProbability(1).</code>
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,66," If there is no such value, <code>M, Integer.MAX_VALUE</code> is"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,67, returned.</li></ul>
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,26,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,27,"* to this distribution, this method returns P(X = x). In other words, this"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,28,"* method represents the probability mass function, or PMF for the distribution."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,69, @param p the cumulative probability.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,70, @return the largest x such that P(X &le; x) <= p
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,71, @throws MathException if the inverse cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,72,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,73, @throws IllegalArgumentException if p is not between 0 and 1 (inclusive)
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,30,* @param x the value at which the probability mass function is evaluated.
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,31,* @return the value of the probability mass function at x
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,75,nt inverseCumulativeProbability(double p) throws MathException;
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,33,double probability(double x);
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,18,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,21,* Base interface for probability distributions.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,23,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,25,public interface Distribution {
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,27,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,28,"* to this distribution, this method returns P(X &le; x).  In other words,"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,29,"* this method represents the  (cumulative) distribution function, or"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,30,"* CDF, for this distribution."
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,32,* @param x the value at which the distribution function is evaluated.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,33,* @return the probability that a random variable with this
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,34,* distribution takes a value less than or equal to <code>x</code>
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,35,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,36,* computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,38,double cumulativeProbability(double x) throws MathException;
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,41,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,42,"* to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,44,* @param x0 the (inclusive) lower bound
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,45,* @param x1 the (inclusive) upper bound
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,46,* @return the probability that a random variable with this distribution
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,47,"* will take a value between <code>x0</code> and <code>x1</code>,"
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,48,* including the endpoints
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,49,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,50,* computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,51,* @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/java/org/apache/commons/math/distribution/Distribution.java,src/java/org/apache/commons/math/distribution/Distribution.java,53,"double cumulativeProbability(double x0, double x1) throws MathException;"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,31,* <li>Poisson</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,42, @version $Revision: 1.21 $ $Date: 2004/07/10 15:59:14 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,43,* @version $Revision: 1.22 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,73, @param probabilityOfSuccess the probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,74, @return a new binomial distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,75,* @param probabilityOfSuccess the probability of success
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,76,* @return a new binomial distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,81, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,82, @return a new chi-square distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,84,* @param degreesOfFreedom degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,85,* @return a new chi-square distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,89, @param mean mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,90, @return a new exponential distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,93,* @param mean mean
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,94,* @return a new exponential distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,97, @param numeratorDegreesOfFreedom numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,98, @param denominatorDegreesOfFreedom denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,99, @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,102,* @param numeratorDegreesOfFreedom numerator degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,103,* @param denominatorDegreesOfFreedom denominator degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,104,* @return a new F-distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,105, Create a new gamma distribution with the given alpha and beta values.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,106, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,107, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,108, @return a new gamma distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,110,* Create a new gamma distribution with the given shape and scale
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,111,* parameters.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,113,* @param alpha the shape parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,114,* @param beta the scale parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,116,* @return a new gamma distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,115, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,116, @return a new t distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,124,* @param degreesOfFreedom degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,125,* @return a new t distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,123, @param populationSize the population size.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,124, @param numberOfSuccesses number of successes in the population.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,125, @param sampleSize the sample size.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,126, @return a new hypergeometric desitribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,133,* @param populationSize the population size
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,134,* @param numberOfSuccesses number of successes in the population
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,135,* @param sampleSize the sample size
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,136,* @return a new hypergeometric desitribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,134, deviation values.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,135, @param mean arithmetic mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,136, @param sd standard deviation.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,137, @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,144,* deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,146,* @param mean the mean of the distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,147,* @param sd standard deviation
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,148,* @return a new normal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,143, Create a new normal distribution with the mean equal to zero and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,144, deviation equal to one.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,154,* Create a new normal distribution with mean zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,155,* deviation one.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,162,* Create a new Poisson distribution with poisson parameter lambda.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,164,* @param lambda poisson parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,165,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,167,public abstract PoissonDistribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,168,createPoissonDistribution(double lambda);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22, @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22,* @version $Revision: 1.21 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,35, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,36, @return a new chi-square distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,36,* @param degreesOfFreedom degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,37,* @return a new chi-square distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,45, Create a new gamma distribution the given alpha and beta values.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,46, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,47, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,48, @return a new gamma distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,46,* Create a new gamma distribution the given shape and scale parameters.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,48,* @param alpha the shape parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,49,* @param beta the scale parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,50,* @return a new gamma distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,58, @param degreesOfFreedom degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61,* @param degreesOfFreedom degrees of freedom
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,67, @param numeratorDegreesOfFreedom numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,68, @param denominatorDegreesOfFreedom denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,69, @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,71,* @param numeratorDegreesOfFreedom numerator degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,72,* @param denominatorDegreesOfFreedom denominator degrees of freedom
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,73,* @return a new F-distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,80, @param mean mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,81, @return a new exponential distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,85,* @param mean mean
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,86,* @return a new exponential distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,90, @param numberOfTrials the number of trials.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,91, @param probabilityOfSuccess the probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,92, @return a new binomial distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,96,* @param numberOfTrials the number of trials
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,97,* @param probabilityOfSuccess the probability of success
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,98,* @return a new binomial distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,103, @param populationSize the population size.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,104, @param numberOfSuccesses number of successes in the population.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,105, @param sampleSize the sample size.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,106, @return a new hypergeometric desitribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,110,* @param populationSize the population size
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,111,* @param numberOfSuccesses number of successes in the population
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,112,* @param sampleSize the sample size
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,113,* @return a new hypergeometric desitribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,109,"nt populationSize,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,110,"nt numberOfSuccesses,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,111,nt sampleSize)
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,116,"int populationSize, int numberOfSuccesses, int sampleSize) {"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,119, deviation values.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,120, @param mean arithmetic mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,121, @param sd standard deviation.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,122, @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,123,* deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,125,* @param mean the mean of the distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,126,* @param sd standard deviation
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,127,* @return a new normal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,129, Create a new normal distribution with the mean equal to zero and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,130, deviation equal to one.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,131, @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,134,* Create a new normal distribution with the mean zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,135,* deviation one.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,137,* @return a new normal distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,144,* Create a new Poisson distribution with poisson parameter lambda.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,145,* <p>
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,146,* lambda must be postive; otherwise an
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,147,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,149,* @param lambda poisson parameter
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,150,* @return a new Poisson distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,151,* @throws IllegalArgumentException if lambda &le; 0
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,153,public PoissonDistribution  createPoissonDistribution(double lambda) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,154,return new PoissonDistributionImpl(lambda);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33, @version $Revision: 1.10 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33,* @version $Revision: 1.11 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,35,ublic interface HypergeometricDistribution extends DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,35,public interface HypergeometricDistribution extends IntegerDistribution {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27, @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27,* @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,29,ublic class HypergeometricDistributionImpl extends AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,29,public class HypergeometricDistributionImpl extends AbstractIntegerDistribution
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,18,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,21,* Interface for discrete distributions of integer-valued random variables.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,23,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,25,public interface IntegerDistribution extends DiscreteDistribution {
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,27,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,28,"* to this distribution, this method returns P(X = x). In other words, this"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,29,* method represents the probability mass function for the distribution.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,31,* @param x the value at which the probability density function is evaluated.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,32,* @return the value of the probability density function at x
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,34,double probability(int x);
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,37,* For a random variable X whose values are distributed according
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,38,"* to this distribution, this method returns P(X &le; x).  In other words,"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,39,"* this method represents the probability distribution function, or PDF"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,40,* for the distribution.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,42,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,43,* @return PDF for this distribution.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,44,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,45,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,47,double cumulativeProbability(int x) throws MathException;
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,50,"* For this distribution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,51,"* @param x0 the inclusive, lower bound"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,52,"* @param x1 the inclusive, upper bound"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,53,* @return the cumulative probability.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,54,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,55,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,56,* @throws IllegalArgumentException if x0 > x1
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,58,"double cumulativeProbability(int x0, int x1) throws MathException;"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,61,"* For this distribution, X, this method returns the largest x such that"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,62,* P(X &le; x) <= p.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,63,* <p>
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,64,* Note that this definition implies: <ul>
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,65,"* <li> If there is a minimum value, <code>m</code>, with postive"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,66,"* probablility under (the density of) X, then <code>m - 1</code> is"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,67,* returned by <code>inverseCumulativeProbability(0).</code>  If there is
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,68,"* no such value <code>m,  Integer.MIN_VALUE</code> is"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,69,* returned.</li>
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,70,"* <li> If there is a maximum value, <code>M</code>, such that"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,71,"* P(X &le; M) =1, then <code>M</code> is returned by"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,72,* <code>inverseCumulativeProbability(1).</code>
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,73,"* If there is no such value, <code>M, Integer.MAX_VALUE</code> is"
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,74,* returned.</li></ul>
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,76,* @param p the cumulative probability.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,77,* @return the largest x such that P(X &le; x) <= p
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,78,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,79,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,80,* @throws IllegalArgumentException if p is not between 0 and 1 (inclusive)
True,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/java/org/apache/commons/math/distribution/IntegerDistribution.java,82,int inverseCumulativeProbability(double p) throws MathException;
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,18,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,21,* Interface representing the Poisson Distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,23,* <p>
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,24,* References:
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,25,* <ul>
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,26,"* <li><a href=""http://mathworld.wolfram.com/PoissonDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,27,* Poisson distribution</a></li>
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,28,* </ul>
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,29,* </p>
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,31,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,33,public interface PoissonDistribution extends IntegerDistribution {
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,36,* Get the mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,38,* @return the mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,40,public double getMean();
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,43,* Set the mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,44,* The parameter value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,45,* <code>IllegalArgument</code> is thrown.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,47,* @param p the mean
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,48,* @throws IllegalArgumentException if p &le; 0
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,50,public void setMean(double p);
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,53,* Calculates the Poisson distribution function using a normal approximation.
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,55,"* @param x the upper bound, inclusive"
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,56,* @return the distribution function value calculated using a normal approximation
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,57,* @throws MathException if an error occurs computing the normal approximation
True,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/java/org/apache/commons/math/distribution/PoissonDistribution.java,59,public double normalApproximateProbability(int x) throws MathException;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,21,import org.apache.commons.math.special.Gamma;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,25,* Implementation for the @link{PoissonDistribution}
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,27,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,29,public class PoissonDistributionImpl extends AbstractIntegerDistribution
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,30,"implements PoissonDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,32,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,33,static final long serialVersionUID = -3349935121172596109L;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,36,* Holds the Poisson mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,38,private double mean;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,41,* Create a new Poisson distribution with the given the mean.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,42,* The mean value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,43,* <code>IllegalArgument</code> is thrown.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,45,* @param p the Poisson mean
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,46,* @throws IllegalArgumentException if p &le; 0
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,48,public PoissonDistributionImpl(double p) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,49,super();
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,50,setMean(p);
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,54,* Get the Poisson mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,56,* @return the Poisson mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,58,public double getMean() {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,59,return this.mean;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,63,* Set the Poisson mean for the distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,64,* The mean value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,65,* <code>IllegalArgument</code> is thrown.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,67,* @param p the Poisson mean value
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,68,* @throws IllegalArgumentException if p &le; 0
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,70,public void setMean(double p) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,71,if (p <= 0) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,72,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,73,"""The Poisson mean must be positive"");"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,75,this.mean = p;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,79,* The probability mass function P(X = x) for a Poisson distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,81,* @param x the value at which the probability density function is evaluated.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,82,* @return the value of the probability mass function at x
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,84,public double probability(int x) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,85,if (x < 0 || x == Integer.MAX_VALUE) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,86,return 0;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88,"return Math.pow(getMean(), x) /"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,89,MathUtils.factorialDouble(x) * Math.exp(-mean);
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,93,* The probability distribution function P(X <= x) for a Poisson distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,95,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,96,* @return Poisson distribution function evaluated at x
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,97,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,98,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,100,public double cumulativeProbability(int x) throws MathException {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,101,if (x < 0) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,102,return 0;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,104,if (x == Integer.MAX_VALUE) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,105,return 1;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,107,"return Gamma.regularizedGammaQ((double)x + 1, mean,"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,108,"1E-12, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,112,* Calculates the Poisson distribution function using a normal
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,113,"* approximation.  The <code>N(mean, sqrt(mean))</code>"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,114,* distribution is used to approximate the Poisson distribution.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,115,* <p>
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,116,"* The computation uses ""half-correction"" -- evaluating the normal"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,117,* distribution function at <code>x + 0.5</code>
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,119,"* @param x the upper bound, inclusive"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,120,* @return the distribution function value calculated using a normal approximation
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,121,* @throws MathException if an error occurs computing the normal approximation
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,123,public double normalApproximateProbability(int x) throws MathException {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,124,NormalDistribution normal = DistributionFactory.newInstance()
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,125,".createNormalDistribution(getMean(),"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,126,Math.sqrt(getMean()));
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,128,// calculate the probability using half-correction
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,129,return normal.cumulativeProbability(x + 0.5);
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,133,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,134,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,135,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,137,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,138,* @return domain lower bound
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,140,protected int getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,141,return 0;
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,145,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,146,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,147,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,149,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,150,* @return domain upper bound
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,152,protected int getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,153,return Integer.MAX_VALUE;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,20, Extends DiscreteDistributionAbstractTest.  See class javadoc for
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,21, DiscreteDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,20,* Extends IntegerDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,21,* IntegerDistributionAbstractTest for details.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23, @version $Revision: 1.15 $ $Date: 2004/07/25 16:29:25 $
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23,* @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:49 $
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,25,ublic class BinomialDistributionTest extends DiscreteDistributionAbstractTest {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,25,public class BinomialDistributionTest extends IntegerDistributionAbstractTest {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,38,ublic DiscreteDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,38,public IntegerDistribution makeDistribution() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,ublic void tstDegenerate1() throws Exception {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,public void testDegenerate1() throws Exception {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,21, Extends DiscreteDistributionAbstractTest.  See class javadoc for
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,22, DiscreteDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,21,* Extends IntegerDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,22,* IntegerDistributionAbstractTest for details.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24, @version $Revision: 1.12 $ $Date: 2004/07/25 16:29:25 $
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,* @version $Revision: 1.13 $ $Date: 2004/11/07 03:32:49 $
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,26,ublic class HypergeometricDistributionTest extends DiscreteDistributionAbstractTest {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,26,public class HypergeometricDistributionTest extends IntegerDistributionAbstractTest {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,39,ublic DiscreteDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,39,public IntegerDistribution makeDistribution() {
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,21, Abstract base class for {@link DiscreteDistribution} tests.
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,21,* Abstract base class for {@link IntegerDistribution} tests.
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,23," To create a concrete test class for a discrete distribution implementation,"
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,23,"* To create a concrete test class for an integer distribution implementation,"
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,40, @version $Revision: 1.2 $ $Date: 2004/07/23 05:19:06 $
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,40,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:49 $
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,42,ublic abstract class DiscreteDistributionAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,42,public abstract class IntegerDistributionAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,46,rivate DiscreteDistribution distribution;
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,46,private IntegerDistribution distribution;
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,72, Constructor for DiscreteDistributionAbstractTest.
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,72,* Constructor for IntegerDistributionAbstractTest.
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,75,ublic DiscreteDistributionAbstractTest(String name) {
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,75,public IntegerDistributionAbstractTest(String name) {
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,82,ublic abstract DiscreteDistribution makeDistribution();
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,82,public abstract IntegerDistribution makeDistribution();
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,280,rotected DiscreteDistribution getDistribution() {
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,280,protected IntegerDistribution getDistribution() {
False,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,287,rotected void setDistribution(DiscreteDistribution distribution) {
True,src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,287,protected void setDistribution(IntegerDistribution distribution) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,16,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,19,* <code>PoissonDistributionTest</code>
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,21,* @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:49 $
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,23,public class PoissonDistributionTest extends IntegerDistributionAbstractTest {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,26,* Poisson parameter value for the test distribution.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,28,private static final double DEFAULT_TEST_POISSON_PARAMETER = 4.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,31,* Constructor.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,32,* @param name
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,34,public PoissonDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,35,super(name);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,36,setTolerance(1e-12);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,40,* Creates the default discrete distribution instance to use in tests.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,42,public IntegerDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,43,return DistributionFactory.newInstance().createPoissonDistribution
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,44,(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,48,* Creates the default probability density test input values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,50,public int[] makeDensityTestPoints() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,51,"return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20};"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,55,* Creates the default probability density test expected values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,56,"* These and all other test values are generated by R, version 1.8.1"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,58,public double[] makeDensityTestValues() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,59,"return new double[] { 0d, 0.0183156388887d,  0.073262555555d,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,60,"0.14652511111d, 0.195366814813d, 0.195366814813,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,61,"0.156293451851d, 0.00529247667642d, 8.27746364655e-09};"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,65,* Creates the default cumulative probability density test input values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,67,public int[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,68,"return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20 };"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,72,* Creates the default cumulative probability density test expected values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,74,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,75,"return new double[] { 0d,  0.0183156388887d, 0.0915781944437d,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,76,"0.238103305554d, 0.433470120367d, 0.62883693518,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,77,"0.78513038703d,  0.99716023388d, 0.999999998077 };"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,81,* Creates the default inverse cumulative probability test input values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,82,* Increased 3rd and 7th values slightly as computed cumulative
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,83,* probabilities for corresponding values exceeds the target value (still
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,84,* within tolerance).
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,86,public double[] makeInverseCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,87,"return new double[] { 0d,  0.018315638889d, 0.0915781944437d,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,88,"0.238103305554d, 0.433470120367d, 0.62883693518,"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,89,"0.78513038704d,  0.99716023388d, 0.999999998077 };"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,93,* Creates the default inverse cumulative probability density test expected values.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,95,public int[] makeInverseCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,96,"return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20};"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,100,* Test the normal approximation of the Poisson distribution by
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,101,* calculating P(90 &le; X &le; 110) for X = Po(100) and
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,102,* P(9900 &le; X &le; 10200) for X  = Po(10000)
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,104,public void testNormalApproximateProbability() throws Exception {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,105,PoissonDistribution dist = new PoissonDistributionImpl(100);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,106,double result = dist.normalApproximateProbability(110)
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,107,- dist.normalApproximateProbability(89);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,108,"assertEquals(0.706281887248, result, 1E-10);"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,109,dist.setMean(10000);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,110,result = dist.normalApproximateProbability(10200)
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,111,- dist.normalApproximateProbability(9899);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,112,"assertEquals(0.820070051552, result, 1E-10);"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,116,* Test the degenerate cases of a 0.0 and 1.0 inverse cumulative probability.
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,117,* @throws Exception
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,119,public void testDegenerateInverseCumulativeProbability() throws Exception {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,120,PoissonDistribution dist = new PoissonDistributionImpl(
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,122,"assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,123,"assertEquals(-1, dist.inverseCumulativeProbability(0d));"

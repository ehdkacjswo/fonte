is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,48,"* The constant value of {@code alpha + g + 0.5}, where {@code alpha} is"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,49,"* the shape parameter, and {@code g} is the Lanczos constant"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,50,* {@link Gamma#LANCZOS_G}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,52,private final double shiftedShape;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,55,* The constant value of
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,56,"* {@code alpha / beta * sqrt(e / (2 * pi * (alpha + g + 0.5))) / L(alpha)},"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,57,"* where {@code alpha} is the shape parameter, {@code beta} is the scale"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,58,"* parameter, and {@code L(alpha)} is the Lanczos approximation returned by"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,59,* {@link Gamma#lanczos(double)}. This prefactor is used in
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,60,"* {@link #density(double)}, when no overflow occurs with the natural"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,61,* calculation.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,63,private final double densityPrefactor1;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,66,* The constant value of
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,67,"* {@code alpha * sqrt(e / (2 * pi * (alpha + g + 0.5))) / L(alpha)},"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,68,"* where {@code alpha} is the shape parameter, and {@code L(alpha)} is the"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,69,* Lanczos approximation returned by {@link Gamma#lanczos(double)}. This
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,70,"* prefactor is used in {@link #density(double)}, when overflow occurs with"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,71,* the natural calculation.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,73,private final double densityPrefactor2;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,76,* Lower bound on {@code y = x / beta} for the selection of the computation
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,77,"* method in {@link #density(double)}. For {@code y <= minY}, the natural"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,78,* calculation overflows. {@code beta} is the shape parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,80,private final double minY;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,83,* Upper bound on {@code log(y)} ({@code y = x / beta}) for the selection of
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,84,* the computation method in {@link #density(double)}. For
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,85,"* {@code log(y) >= maxLogY}, the natural calculation overflows."
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,86,* {@code beta} is the shape parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,88,private final double maxLogY;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,80,olverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,127,this.solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,128,this.shiftedShape = alpha + Gamma.LANCZOS_G + 0.5;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,129,final double aux = FastMath.E / (2.0 * FastMath.PI * shiftedShape);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,130,this.densityPrefactor2 = alpha * FastMath.sqrt(aux) / Gamma.lanczos(alpha);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,131,this.densityPrefactor1 = this.densityPrefactor2 / beta *
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,132,"FastMath.pow(shiftedShape, -alpha) *"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,133,FastMath.exp(alpha + Gamma.LANCZOS_G);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,134,this.minY = alpha + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,135,this.maxLogY = FastMath.log(Double.MAX_VALUE) / (alpha - 1.0);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,169,/* The present method must return the value of
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,171,*     1       x a     - x
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,172,* ---------- (-)  exp(---)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,173,* x Gamma(a)  b        b
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,175,"* where a is the shape parameter, and b the scale parameter."
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,176,* Substituting the Lanczos approximation of Gamma(a) leads to the
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,177,* following expression of the density
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,179,* a              e            1         y      a
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,180,"* - sqrt(------------------) ---- (-----------)  exp(a - y + g),"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,181,* x      2 pi (a + g + 0.5)  L(a)  a + g + 0.5
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,183,"* where y = x / b. The above formula is the ""natural"" computation, which"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,184,* is implemented when no overflow is likely to occur. If overflow occurs
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,185,"* with the natural computation, the following identity is used. It is"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,186,* based on the BOOST library
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,187,* http://www.boost.org/doc/libs/1_35_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/igamma.html
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,188,"* Formula (15) needs adaptations, which are detailed below."
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,190,*       y      a
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,191,* (-----------)  exp(a - y + g)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,192,*  a + g + 0.5
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,193,*                              y - a - g - 0.5    y (g + 0.5)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,194,"*               = exp(a log1pm(---------------) - ----------- + g),"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,195,*                                a + g + 0.5      a + g + 0.5
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,197,"*  where log1pm(z) = log(1 + z) - z. Therefore, the value to be"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,198,*  returned is
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,200,* a              e            1
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,201,* - sqrt(------------------) ----
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,202,* x      2 pi (a + g + 0.5)  L(a)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,203,*                              y - a - g - 0.5    y (g + 0.5)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,204,*               * exp(a log1pm(---------------) - ----------- + g).
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,205,*                                a + g + 0.5      a + g + 0.5
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,117,"eturn FastMath.pow(x / beta, alpha - 1) / beta *"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,118,astMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,210,final double y = x / beta;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,211,if ((y <= minY) || (FastMath.log(y) >= maxLogY)) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,213,* Overflow.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,215,final double aux1 = (y - shiftedShape) / shiftedShape;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,216,final double aux2 = alpha * (FastMath.log1p(aux1) - aux1);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,217,final double aux3 = -y * (Gamma.LANCZOS_G + 0.5) / shiftedShape +
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,218,Gamma.LANCZOS_G + aux2;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,219,return densityPrefactor2 / x * FastMath.exp(aux3);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,222,* Natural calculation.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,224,return densityPrefactor1  * FastMath.exp(-y) *
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,225,"FastMath.pow(y, alpha - 1);"

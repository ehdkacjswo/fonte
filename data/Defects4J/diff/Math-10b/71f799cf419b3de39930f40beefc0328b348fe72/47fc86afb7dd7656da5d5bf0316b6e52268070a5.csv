is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,24,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,61,rotected AbstractContinuousDistribution() {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,62,uper();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,protected AbstractContinuousDistribution() {}
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,67, @param x  The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68, @return  The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,69, @throws MathRuntimeException if the specialized class hasn't implemented this function
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,70, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,61,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,72,ublic double density(double x) throws MathRuntimeException {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,73,"hrow new MathRuntimeException(new UnsupportedOperationException(),"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,ocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION);
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,63,public abstract double density(double x);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,78," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,79, that P(X &lt; x) = <code>p</code>.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,67,"* point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,81, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,82," @return x, such that P(X &lt; x) = <code>p</code>"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,69,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,70,"* @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,84,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,85, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,86,         probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,72,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,73,* @throws OutOfRangeException if {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,91,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,92,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,78,"throw new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,"hrow new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(), ex.getArguments());"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,90,"throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(),"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,91,ex.getArguments());
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,  catch (ConvergenceException ex) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,} catch (ConvergenceException ex) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,147, Reseeds the random generator used to generate samples.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,134,* Reseed the random generator used to generate samples.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,149, @param seed the new seed
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,136,* @param seed New seed.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,157, Generates a random value sampled from this distribution. The default
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,144,* Generate a random value sampled from this distribution. The default
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,159," <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling""> inversion method.</a>"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,146,"* <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling"">"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,147,*  inversion method.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,148,* </a>
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,161, @return random value
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,150,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,151,* @throws MathException if an error occurs generating the random value.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,163, @throws MathException if an error occurs generating the random value
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,170, Generates a random sample from the distribution.  The default implementation
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,159,* Generate a random sample from the distribution.  The default implementation
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,173, @param sampleSize number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,162,* @param sampleSize Number of random values to generate.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,163,* @return an array representing the random sample.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,164,* @throws MathException if an error occurs generating the sample.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,165,* @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,175, @return an array representing the random sample
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,176, @throws MathException if an error occurs generating the sample
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,177, @throws IllegalArgumentException if sampleSize is not positive
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,181,"athRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,170,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,171,sampleSize);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,191," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,181,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,195, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,196, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,185,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,186,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,201," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,191,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,205, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,206," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,207,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,195,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,196,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,212," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,201,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,216, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,217," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,218,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,205,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,206,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,42, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,44, @param x  Point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,45, @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,47,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,26," <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,27, Cauchy Distribution</a></li>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,26,"*  <li><a href=""http://mathworld.wolfram.com/CauchyDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,27,*   Cauchy Distribution</a>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,28,*  </li>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,38, @return median for this distribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,39,* @return the median for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,44, @return scale parameter for this distribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,46,* @return the scale parameter for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,49, Modify the median.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,50, @param median for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,51, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,53,Deprecated
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,54,oid setMedian(double median);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,57, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,58, @param s scale parameter for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,59, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,61,Deprecated
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,62,oid setScale(double s);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,23,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,58,ublic CauchyDistributionImpl(){
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,59,"his(0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,public CauchyDistributionImpl() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,"this(0, 1);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64, @param median median for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65, @param s scale parameter for this distribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61,* @param median Median for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62,* @param scale Scale parameter for this distribution.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,67,"ublic CauchyDistributionImpl(double median, double s){"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,68,"his(median, s, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64,"public CauchyDistributionImpl(double median, double scale) {"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65,"this(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73, @param median median for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,74, @param s scale parameter for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,75, @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,76, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,71,* @param median Median for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,72,* @param scale Scale parameter for this distribution.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,74,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,75,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,76,* @throws NotStrictlyPositiveException if {@code s <= 0}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79,"ublic CauchyDistributionImpl(double median, double s, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,uper();
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,etMedianInternal(median);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,82,etScaleInternal(s);
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,79,"public CauchyDistributionImpl(double median, double scale,"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,if (scale <= 0) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,82,"throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,84,this.scale = scale;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,85,this.median = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,87," For this distribution, X, this method returns P(X &lt; <code>x</code>)."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,88, @param x the value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,89, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,* @param x Value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93,* @return CDF evaluted at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,96, Access the median.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,97, @return median for this distribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104, Access the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,105, @return scale parameter for this distribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,107,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,112, Returns the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,115, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,116, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,114,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,127, <p>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129, <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124,"* point {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,* It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,* {@code Double.POSITIVE_INFINITY} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,131, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,132," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134,         probability.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129,"* @return {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130,* @throws OutOfRangeException if {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,139,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,140,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,141,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,135,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,136,"throw new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,153, Modify the median.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,154, @param median for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,157,Deprecated
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,158,ublic void setMedian(double median) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159,etMedianInternal(median);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,162, Modify the median.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,163, @param newMedian for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,165,rivate void setMedianInternal(double newMedian) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,166,his.median = newMedian;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,170, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,171, @param s scale parameter for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,172, @throws IllegalArgumentException if <code>sd</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,173, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,175,Deprecated
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176,ublic void setScale(double s) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,177,etScaleInternal(s);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,181, @param s scale parameter for this distribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,182, @throws IllegalArgumentException if <code>sd</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,184,rivate void setScaleInternal(double s) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,185,f (s <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,186,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,187,"ocalizedFormats.NOT_POSITIVE_SCALE, s);"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,189,cale = s;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,193," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,148,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,197, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,198," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,199,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,152,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,153,"* @return domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,205,f (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159,if (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,219, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,220," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,221,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,173,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,174,"* @return domain value lower bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,227,f (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180,if (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,237," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,190,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,241, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,242, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,194,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,195,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,248,f (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,201,if (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,250, else if (p > .5) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,203,} else if (p > 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34, Access the degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34,* Access the number of degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41, @param x  The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42, @return  The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,44,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,76, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,78, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,79, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,80, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,76,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,88," For this distribution, X, this method returns P(X &lt; x)."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,84,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,91, @throws MathException if the cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,92,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,88,* @throws MathException if the cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,89,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,100, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,101, <p>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,102, Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,96,"* For this distribution, X, this method returns the critical point"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,97,"* {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,98,* It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99,* when p = 1.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,104, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,105," @return x, such that P(X &lt; x) = <code>p</code>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,101,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,102,"* @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,107,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,108, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,109,         probability.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,104,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,105,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,106,* {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,124," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,121,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,129," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,130,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,126,"* @return domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,138," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,134,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,142, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,143," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,144,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,138,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,139,"* @return domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,165," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,160,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,169, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,170, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,164,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,165,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,22, <p>Base interface for continuous distributions.</p>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,24, <p>Note: this interface will be extended in version 3.0 to include
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,25, <br/><code>public double density(double x)</code><br/>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,26," that is, from version 3.0 forward, continuous distributions <strong>must</strong>"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,27, include implementations of probability density functions. As of version
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28," 2.1, all continuous distribution implementations included in commons-math"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29, provide implementations of this method.</p>
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,22,* Base interface for continuous distributions.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36," For this distribution, X, this method returns x such that P(X &lt; x) = p."
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37, @param p the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38, @return x.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39, @throws MathException if the inverse cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,40,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28,"* For a distribution, {@code X}, compute {@code x} such that"
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29,* {@code P(X < x) = p}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31,* @param p Cumulative probability.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32,* @return {@code x} such that {@code P(X < x) = p}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33,* @throws MathException if the inverse cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,34,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39,* Probability density for a particular point.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41,* @param x Point at which the density should be computed.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,42,* @return the pdf at point {@code x}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,44,double density(double x);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,41, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,43, @param x Point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,44, @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,46,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,56, @param mean mean of this distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57, @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57,* @param mean Mean of this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,58,* @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99, @param x the value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100,* @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,117, Returns 0 when p = 0 and {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,118,* It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119,* when p = 1.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119, @param p the desired probability
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,121,* @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,170," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,172,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,34, Modify the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,35, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,36, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,38,Deprecated
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,39,oid setNumeratorDegreesOfFreedom(double degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,48, Modify the denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,49, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,50, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,52,Deprecated
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,53,oid setDenominatorDegreesOfFreedom(double degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,57, @param numeratorDegreesOfFreedom the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,58, @param denominatorDegreesOfFreedom the denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,53,* @param numeratorDegreesOfFreedom Numerator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,* @param denominatorDegreesOfFreedom Denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,55,* @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,56,* or {@code denominatorDegreesOfFreedom <= 0}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,62,"his(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,60,"this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,61,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,66, Create a F distribution using the given degrees of freedom and inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,67, @param numeratorDegreesOfFreedom the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,68, @param denominatorDegreesOfFreedom the denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,69, @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,65,* Create an F distribution using the given degrees of freedom
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,66,* and inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,67,* @param numeratorDegreesOfFreedom Numerator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,* @param denominatorDegreesOfFreedom Denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,69,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,70,* cumulative probability estimates.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,72,* @throws NotStrictlyPositiveException if {@code numeratorDegreesOfFreedom <= 0}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,* or {@code denominatorDegreesOfFreedom <= 0}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,"ublic FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,74,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,75,uper();
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,etNumeratorDegreesOfFreedomInternal(numeratorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,77,etDenominatorDegreesOfFreedomInternal(denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,"public FDistributionImpl(double numeratorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,77,"double denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,if (numeratorDegreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,80,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,numeratorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,83,if (denominatorDegreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,84,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,87,this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,88,this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,inal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,eturn FastMath.exp(nhalf*logn + nhalf*logx - logx + mhalf*logm - nhalf*lognxm -
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,97,"half*lognxm - Beta.logBeta(nhalf, mhalf));"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,108,return FastMath.exp(nhalf * logn + nhalf * logx - logx +
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,mhalf * logm - nhalf * lognxm - mhalf * lognxm -
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,"Beta.logBeta(nhalf, mhalf));"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,101," For this distribution, X, this method returns P(X &lt; x)."
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,114,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,103, The implementation of this method is based on:
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,* The implementation of this method is based on
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,105, <li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,106," <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,107," F-Distribution</a>, equation (4).</li>"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,*  <li>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,119,"*   <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,120,"*   F-Distribution</a>, equation (4)."
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,121,*  </li>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,110, @param x the value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,124,* @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,112, @throws MathException if the cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,113,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,126,* @throws MathException if the cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,127,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,f (x <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,et = 0.0;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,131,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,ret = 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,131," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,132, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,133, <p>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,134, Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,146,"* point {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,147,* Returns 0 when p = 0 and {@code Double.POSITIVE_INFINITY} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,136, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,137," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,138, @throws MathException if the inverse cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,139,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,140, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,141,         probability.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,149,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,150,"* @return {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,151,* @throws MathException if the inverse cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,152,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,153,* @throws IllegalArgumentException if {@code p} is not a valid
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,154,* probability.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,147,eturn 0d;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,160,return 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,156," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,169,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,160, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,161," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,162,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,173,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,174,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,eturn 0.0;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,178,return 0;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,170," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,182,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,174, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,175," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,176,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,186,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,184," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,195,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,188, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,189, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,199,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,200,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,193,ouble ret = 1.0;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,204,double ret = 1;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,195,f (d > 2.0) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,206,if (d > 2) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,197,et = d / (d - 2.0);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,208,ret = d / (d - 2);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,203, Modify the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,204, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,205, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,206,         positive.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,207, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,209,Deprecated
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,210,ublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,211,etNumeratorDegreesOfFreedomInternal(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,215, Modify the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,216, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,217, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,218,         positive.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,220,rivate void setNumeratorDegreesOfFreedomInternal(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,221,f (degreesOfFreedom <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,222,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,223,"ocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM, degreesOfFreedom);"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,225,his.numeratorDegreesOfFreedom = degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,229, Access the numerator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,230, @return the numerator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,214,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,237, Modify the denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,238, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,239, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,240,         positive.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,241, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,243,Deprecated
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,244,ublic void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,245,etDenominatorDegreesOfFreedomInternal(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,249, Modify the denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,250, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,251, @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,252,         positive.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,254,rivate void setDenominatorDegreesOfFreedomInternal(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,255,f (degreesOfFreedom <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,256,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,257,"ocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM, degreesOfFreedom);"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,259,his.denominatorDegreesOfFreedom = degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,263, Access the denominator degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,264, @return the denominator degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,221,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,48, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,50, @param x Point at which the density should be computed..
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,51, @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,53,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,64, @param alpha the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65, @param beta the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66, @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,67,* @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,87," For this distribution, X, this method returns P(X &lt; x)."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,88,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,91, <li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,92," <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93," Chi-Squared Distribution</a>, equation (9).</li>"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,94," <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95," Belmont, CA: Duxbury Press.</li>"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,92,*  <li>
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93,"*   <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,94,"*    Chi-Squared Distribution</a>, equation (9)."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95,*  </li>
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96,"*  <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,97,"*    Belmont, CA: Duxbury Press."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98,*  </li>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98, @param x the value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,* @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,104,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,117, that {@code P(X < x) = p}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,118, Returns 0 when p = 0 and {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,119,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,120,"* point {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,121,* It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,122,* when p = 1.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,122, @throws MathException if the inverse cumulative probability can not be
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,126,* @throws MathException if the inverse cumulative probability cannot be
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,124, @throws IllegalArgumentException if {@code p} is not a valid
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,125, probability.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,128,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,129,* {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,164," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,168,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,178," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,182,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,182, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,183," @return domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,186,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,187,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,20,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,23, <p>Interface that signals that a distribution can compute the probability density function
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,24, for a particular point.
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,25," @param <P> the type of the point at which density is to be computed, this"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,26, may be for example <code>Double.</code></p>
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,28," <p>This interface is deprecated.  As of version 2.0, the {@link ContinuousDistribution}"
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,29, interface will be extended to include a <code>density(double)<code> method.</p>
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,31, @deprecated to be removed in math 3.0
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,32, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,34,ublic interface HasDensity<P> {
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,37, Compute the probability density function.
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,38, @param x point for which the probability density is requested
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,39, @return probability density at point x
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,40, @throws MathException if probability density cannot be computed at specifed point
False,src/main/java/org/apache/commons/math/distribution/HasDensity.java,src/main/java/org/apache/commons/math/distribution/HasDensity.java,42,ouble density(P x) throws MathException;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,49, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,51, @param x Point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,52, @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,54,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,55, @param mean mean for this distribution
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,56, @param sd standard deviation for this distribution
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,56,* @param mean Mean for this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,* @param sd Standard deviation for this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,68, @param inverseCumAccuracy inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,69,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,108,@Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141, @return the solver absolute accuracy
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,* @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,150," For this distribution, X, this method returns the critical point"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,"* For this distribution, X, this method returns the critical point"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152, Returns {@code Double.NEGATIVE_INFINITY} when p = 0 and
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154,* It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155, @param p the desired probability
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157,* @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157, @throws MathException if the inverse cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,         probability.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159,* @throws MathException if the inverse cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,* {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,175, Generates a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177,* Generate a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177, @return random value
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179,* @return a random value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179, @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,* @throws MathException if an error occurs generating the random value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,191, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,192," @return domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,193,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,212, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,213," @return domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,214,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,215,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,233, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,234, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,235,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,236,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,34, Modify the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,35, @param degreesOfFreedom the new degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,36, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,38,Deprecated
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,39,oid setDegreesOfFreedom(double degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,42, Access the degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,34,* Access the number of degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,39, Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,38,* Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,47,** The degrees of freedom*/
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,44,/** The degrees of freedom. */
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,50,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,46,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,57, @param degreesOfFreedom the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,58, @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,59, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,53,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,54,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,55,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,56,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,57,* @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,63,uper();
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,64,etDegreesOfFreedomInternal(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,61,if (degreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,62,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,63,degreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,65,this.degreesOfFreedom = degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,70, @param degreesOfFreedom the degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,72,* @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,77, Modify the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,78, @param degreesOfFreedom the new degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,79, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,81,Deprecated
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,82,ublic void setDegreesOfFreedom(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,83,etDegreesOfFreedomInternal(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,86, Modify the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,87, @param newDegreesOfFreedom the new degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,89,rivate void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,90,f (newDegreesOfFreedom <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,91,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,92,"ocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,93,ewDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,95,his.degreesOfFreedom = newDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,107, Returns the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,109, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,110, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,111, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,88,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,eturn FastMath.exp(Gamma.logGamma(nPlus1Over2) - 0.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) -
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,amma.logGamma(n/2) - nPlus1Over2 * FastMath.log(1 + x * x /n));
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,94,return FastMath.exp(Gamma.logGamma(nPlus1Over2) -
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,95,0.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) -
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,96,Gamma.logGamma(n/2) - nPlus1Over2 * FastMath.log(1 + x * x /n));
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,122," For this distribution, X, this method returns P(X &lt; <code>x</code>)."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,123, @param x the value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,124, @return CDF evaluated at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,100,"* For this distribution, X, this method returns {@code P(X < x})."
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102,* @param x Value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,103,* @return CDF evaluated at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,126,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,105,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,130,f (x == 0.0) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,if (x == 0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,149," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,150, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,151, <p>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,152, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,153, <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,128,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,129,"* point {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,130,* Returns {@code Double.NEGATIVE_INFINITY} when p = 0 and
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,* {@code Double.POSITIVE_INFINITY} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,155, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,156," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,157, @throws MathException if the inverse cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,158,         computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,159, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,160,         probability.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,133,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,134,"* @return {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,135,* @throws MathException if the inverse cumulative probability cannot be
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,136,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,137,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,138,* {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,175," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,153,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,179, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,180," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,181,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,157,* @param p Desired probability for the critical value
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,158,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,189," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,166,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,193, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,194," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,195,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,170,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,171,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,203," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,179,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,207, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,208, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,183,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,184,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,212,eturn 0.0;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,188,return 0;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,219, @return the solver absolute accuracy
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,195,* @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,52, Modify the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,53, @param alpha The new shape parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,54, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,56,Deprecated
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,57,oid setShape(double alpha);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,60, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,61, @param beta The new scale parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,62, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,64,Deprecated
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,65,oid setScale(double beta);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,51,** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,47,/** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,55, Creates weibull distribution with the given shape and scale and a
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,51,* Create a Weibull distribution with the given shape and scale and a
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,57, @param alpha the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58, @param beta the scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,54,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,55,* @param beta Scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,60,"ublic WeibullDistributionImpl(double alpha, double beta){"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,57,"public WeibullDistributionImpl(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,65," Creates weibull distribution with the given shape, scale and inverse"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,62,"* Create a Weibull distribution with the given shape, scale and inverse"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,67, @param alpha the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,68, @param beta the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,69, @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,70, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,65,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,66,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,67,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,68,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,69,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,70,* @throws NotStrictlyPositiveException if {@code alpha <= 0} or
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,71,* {@code beta <= 0}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,73,"ublic WeibullDistributionImpl(double alpha, double beta, double inverseCumAccuracy){"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,74,uper();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,75,etShapeInternal(alpha);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,76,etScaleInternal(beta);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,74,"public WeibullDistributionImpl(double alpha, double beta,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,75,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,76,if (alpha <= 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,77,"throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,78,alpha);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,80,if (beta <= 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,81,"throw new NotStrictlyPositiveException(LocalizedFormats.SCALE,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,82,beta);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,84,scale = beta;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,85,shape = alpha;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,81," For this distribution, X, this method returns P(X &lt; <code>x</code>)."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,82, @param x the value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,83, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,90,"* For this distribution, {@code X}, this method returns {@code P(X < x)}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,92,* @param x Value at which the CDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93,* @return the CDF evaluted at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,96, Access the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,97, @return the shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,106,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,104, Access the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,105, @return the scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,113,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,112, Returns the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,114, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,115, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,116, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,120,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,138," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,139, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,140, <p>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,141, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,142, <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,142,"* For this distribution, {@code X}, this method returns the critical"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,143,"* point {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144,* It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145,* {@code Double.POSITIVE_INFINITY} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144, @param p the desired probability
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,146, @throws IllegalArgumentException if <code>p</code> is not a valid
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,147,         probability.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,147,* @param p Desired probability.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,148,"* @return {@code x}, such that {@code P(X < x) = p}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,149,* @throws OutOfRangeException if {@code p} is not a valid probability.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,153,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,154,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,155,"throw new OutOfRangeException(p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,166, Modify the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,167, @param alpha the new shape parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,168, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,170,Deprecated
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,171,ublic void setShape(double alpha) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,172,etShapeInternal(alpha);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,175, Modify the shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,176, @param alpha the new shape parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,178,rivate void setShapeInternal(double alpha) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,179,f (alpha <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,180,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,181,"ocalizedFormats.NOT_POSITIVE_SHAPE,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,182,lpha);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,184,his.shape = alpha;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,188, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,189, @param beta the new scale parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,190, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,192,Deprecated
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,193,ublic void setScale(double beta) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,194,etScaleInternal(beta);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,197, Modify the scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,198, @param beta the new scale parameter value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,200,rivate void setScaleInternal(double beta) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,201,f (beta <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,202,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,203,"ocalizedFormats.NOT_POSITIVE_SCALE,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,204,eta);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,206,his.scale = beta;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,210," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,168,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,214, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,215," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,216,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,172,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,173,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,220,eturn 0.0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,177,return 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,224," Access the domain value upper bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,181,"* Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,228, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,229," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,230,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,185,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,186,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,238," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,194,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,242, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,243, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,198,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,199,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,255, @return the solver absolute accuracy
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,211,* @return the solver absolute accuracy.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,20,import org.apache.commons.math.exception.util.Localizable;
False,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,47,"uper(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,48,"this(null, wrong, lo, hi);"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,52,* Construct an exception from the mismatched dimensions with a
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,53,* specific context information.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,55,* @param specific Context information.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,56,* @param wrong Requested value.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,57,* @param lo Lower bound.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,58,* @param hi Higher bound.
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,60,"public OutOfRangeException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,61,"Number wrong,"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,62,"Number lo,"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,63,Number hi) {
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,64,"super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
True,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,src/main/java/org/apache/commons/math/exception/OutOfRangeException.java,65,"wrong, lo, hi);"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,177,"DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,194,"SCALE(""scale ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,196,"SHAPE(""shape ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,244,"SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,20,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,38,** Distribution used to compute inference statistics. */
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,39,rivate TDistribution distribution;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,42, Default constructor.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,44,ublic TTestImpl() {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,45,his(new TDistributionImpl(1.0));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,49, Create a test instance using the given distribution for computing
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,50, inference statistics.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,51, @param t distribution used to compute inference statistics.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,52, @since 1.2
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,54,ublic TTestImpl(TDistribution t) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,55,uper();
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,56,etDistribution(t);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,85,"tatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,86,ample1.length);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,65,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,66,sample1.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,876,"tatisticalSummary sampleStats2, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,877,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,856,"StatisticalSummary sampleStats2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,857,double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,858,throws MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,959,hrows MathException {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,940,throws MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,961,istribution.setDegreesOfFreedom(n - 1);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,942,TDistribution distribution = new TDistributionImpl(n - 1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,980,"rotected double tTest(double m1, double m2, double v1, double v2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,981,"ouble n1, double n2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,982,hrows MathException {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,961,"protected double tTest(double m1, double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,962,"double v1, double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,963,"double n1, double n2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,964,throws MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,986,istribution.setDegreesOfFreedom(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,968,TDistribution distribution = new TDistributionImpl(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1005,"rotected double homoscedasticTTest(double m1, double m2, double v1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1006,"ouble v2, double n1, double n2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1007,hrows MathException {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,987,"protected double homoscedasticTTest(double m1, double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,988,"double v1, double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,989,"double n1, double n2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,990,throws MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1010,istribution.setDegreesOfFreedom(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,993,TDistribution distribution = new TDistributionImpl(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1015, Modify the distribution used to compute inference statistics.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1016, @param value the new distribution
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1017, @since 1.2
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1019,ublic void setDistribution(TDistribution value) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1020,istribution = value;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1023,** Check significance level.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,998,* Check significance level.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1025, @exception IllegalArgumentException if significance level is out of bounds
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1001,* @throws OutOfRangeException if the significance level is out of bounds.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1027,rivate void checkSignificanceLevel(final double alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1028,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1029,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1030,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1031,"ocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1032,"lpha, 0.0, 0.5);"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1003,private void checkSignificanceLevel(final double alpha) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1004,if (alpha <= 0 || alpha > 0.5) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1005,"throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1006,"alpha, 0.0, 0.5);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1036,** Check sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1037, @param data sample data
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1038, @exception IllegalArgumentException if there is not enough sample data
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1011,* Check sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1013,* @param data Sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1014,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1015,* @throws NumberIsTooSmallException if there is not enough sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1040,rivate void checkSampleData(final double[] data)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1041,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1042,f ((data == null) || (data.length < 2)) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1043,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1044,"ocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1045,data == null) ? 0 : data.length);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1017,private void checkSampleData(final double[] data) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1018,if (data == null) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1019,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1021,if (data.length < 2) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1022,"throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1023,"data.length, 2, true);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1049,** Check sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1050, @param stat statistical summary
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1051, @exception IllegalArgumentException if there is not enough sample data
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1028,* Check sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1030,* @param stat Statistical summary.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1031,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1032,* @throws NumberIsTooSmallException if there is not enough sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1053,rivate void checkSampleData(final StatisticalSummary stat)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1054,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1055,f ((stat == null) || (stat.getN() < 2)) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1056,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1057,"ocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1058,stat == null) ? 0 : stat.getN());
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1034,private void checkSampleData(final StatisticalSummary stat) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1035,if (stat == null) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1036,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1038,if (stat.getN() < 2) {
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1039,"throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1040,"stat.getN(), 2, true);"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,22,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,96,his(new TDistributionImpl(1.0));
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,96,this(1);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,102, @param t the distribution used to compute inference statistics.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,103, @since 1.2
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,103,* @param degrees Number of degrees of freedom of the distribution used
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,104,* to compute inference statistics.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,105,* @since 2.2
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,105,ublic SimpleRegression(TDistribution t) {
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,106,uper();
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,107,etDistribution(t);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,107,public SimpleRegression(int degrees) {
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,108,distribution = new TDistributionImpl(degrees);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,141,istribution.setDegreesOfFreedom(n - 2);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,142,distribution = new TDistributionImpl(n - 2);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,173,istribution.setDegreesOfFreedom(n - 2);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,174,distribution = new TDistributionImpl(n - 2);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,552,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,553,"ocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,554,"lpha, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,553,"throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,554,"alpha, 0, 1);"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,611, Modify the distribution used to compute inference statistics.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,612, @param value the new distribution
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,613, @since 1.2
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,615,ublic void setDistribution(TDistribution value) {
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,616,istribution = value;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,618,/ modify degrees of freedom
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,619,f (n > 2) {
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,620,istribution.setDegreesOfFreedom(n - 2);
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,88,ouble expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,89,istribution.setMedian(expected);
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,90,"ssertEquals(expected, distribution.getMedian(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,89,"assertEquals(1.2, distribution.getMedian(), 0.0);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,95,ouble expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,96,istribution.setScale(expected);
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,97,"ssertEquals(expected, distribution.getScale(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,94,"assertEquals(2.1, distribution.getScale(), 0.0);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,100,ublic void testSetScale() {
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,101,auchyDistribution distribution = (CauchyDistribution) getDistribution();
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,97,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,98,CauchyDistribution dist;
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,103,istribution.setScale(0.0);
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,104,"ail(""Can not have 0.0 scale."");"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,105, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,106,/ success
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,100,"dist = new CauchyDistributionImpl(0, 0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,101,"fail(""Cannot have zero scale"");"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,102,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,103,// Expected.
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,110,istribution.setScale(-1.0);
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,111,"ail(""Can not have negative scale."");"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,112, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,113,/ success
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,106,"dist = new CauchyDistributionImpl(0, -1);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,107,"fail(""Cannot have negative scale"");"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,108,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,109,// Expected.
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,88,Distribution distribution = (FDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,89,"ssertEquals(5d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,90,istribution.setNumeratorDegreesOfFreedom(4d);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,91,"ssertEquals(4d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,92,"ssertEquals(6d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,93,istribution.setDenominatorDegreesOfFreedom(4d);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,94,"ssertEquals(4d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,89,FDistribution dist = (FDistribution) getDistribution();
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,90,"assertEquals(5d, dist.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,91,"assertEquals(6d, dist.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,94,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,95,FDistribution dist;
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,96,istribution.setNumeratorDegreesOfFreedom(0d);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,97,"ail(""Expecting IllegalArgumentException for df = 0"");"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,98, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,99,/ expected
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,97,"dist = new FDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,98,"fail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,99,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,100,// Expected.
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,102,istribution.setDenominatorDegreesOfFreedom(0d);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,103,"ail(""Expecting IllegalArgumentException for df = 0"");"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,104, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,105,/ expected
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,103,"dist = new FDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,104,"fail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,105,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,106,// Expected.
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,110,rg.apache.commons.math.distribution.FDistributionImpl fd =
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,111,ew org.apache.commons.math.distribution.FDistributionImpl(
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,112,"00000., 100000.);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,111,"FDistributionImpl fd = new FDistributionImpl(100000, 100000);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,119,rg.apache.commons.math.distribution.FDistributionImpl fd =
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,120,ew org.apache.commons.math.distribution.FDistributionImpl(
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,121,".0, 1.0);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,118,"FDistributionImpl fd = new FDistributionImpl(1, 1);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,126,d.setDenominatorDegreesOfFreedom(2.0);
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,123,"fd = new FDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,107,Distribution distribution = (TDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,108,"ssertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,109,istribution.setDegreesOfFreedom(4d);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,110,"ssertEquals(4d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,109,TDistribution dist = (TDistribution) getDistribution();
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,110,"assertEquals(5d, dist.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,113,public void testPreconditions() {
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,112,istribution.setDegreesOfFreedom(0d);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,113,"ail(""Expecting IllegalArgumentException for df = 0"");"
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,114, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,115,TDistribution dist = new TDistributionImpl(0);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,116,"fail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,117,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,78,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,79,ouble expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,80,istribution.setShape(expected);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,81,"ssertEquals(expected, distribution.getShape(), 0.0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,ublic void testBeta() {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,85,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,86,ouble expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,87,istribution.setScale(expected);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,88,"ssertEquals(expected, distribution.getScale(), 0.0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,ublic void testSetAlpha() {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,92,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,93,ry {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,94,istribution.setShape(0.0);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,95,"ail(""Can not have 0.0 alpha."");"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,96, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,97,/ success
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,79,"WeibullDistribution dist = new WeibullDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,80,"assertEquals(1, dist.getShape(), 0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,101,istribution.setShape(-1.0);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,102,"ail(""Can not have negative alpha."");"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,103, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,104,/ success
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,82,"dist = new WeibullDistributionImpl(0, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,83,"fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,85,// Expected.
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,ublic void testSetBeta() {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,109,eibullDistribution distribution = (WeibullDistribution) getDistribution();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,110,ry {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,111,istribution.setScale(0.0);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,112,"ail(""Can not have 0.0 beta."");"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,113, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,114,/ success
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,89,public void testBeta() {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,90,"WeibullDistribution dist = new WeibullDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,"assertEquals(2, dist.getScale(), 0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,118,istribution.setScale(-1.0);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,119,"ail(""Can not have negative beta."");"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,120, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,121,/ success
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,93,"dist = new WeibullDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,94,"fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,95,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,96,// Expected.

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,350,* @param delta the &delta; parameter for the default stopping criterion
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,351,* @param check {@code true} if self-adjointedness of both matrix and
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,352,* preconditioner should be checked
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,351,"ublic State(final RealLinearOperator a, final RealLinearOperator minv,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,352,"inal RealVector b, final RealVector x, final boolean goodb,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,354,"public State(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,355,"final RealLinearOperator minv,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,356,"final RealVector b,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,357,"final RealVector x,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,358,"final boolean goodb,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,354,"inal boolean check,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,355,inal double delta) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,360,"final double delta,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,361,final boolean check) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,376,"* Performs a symmetry check on the specified linear operator, and throws an"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,377,"* exception in case this check fails. Given a linear operator L, and a"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,378,"* vector x, this method checks that"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,379,* x' &middot; L &middot; y = y' &middot; L &middot; x
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,380,"* (within a given accuracy), where y = L &middot; x."
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,382,* @param l the linear operator L
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,383,* @param x the candidate vector x
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,384,* @param y the candidate vector y = L &middot; x
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,385,* @param z the vector z = L &middot; y
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,386,* @throws NonSelfAdjointOperatorException when the test fails
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,388,"private static void checkSymmetry(final RealLinearOperator l,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,389,"final RealVector x, final RealVector y, final RealVector z)"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,390,throws NonSelfAdjointOperatorException {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,391,final double s = y.dotProduct(y);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,392,final double t = x.dotProduct(z);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,393,final double epsa = (s + SymmLQ.MACH_PREC) * SymmLQ.CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,394,if (FastMath.abs(s - t) > epsa) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,395,final NonSelfAdjointOperatorException e;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,396,e = new NonSelfAdjointOperatorException();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,397,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,398,"context.setValue(SymmLQ.OPERATOR, l);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,399,"context.setValue(SymmLQ.VECTOR1, x);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,400,"context.setValue(SymmLQ.VECTOR2, y);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,401,"context.setValue(SymmLQ.THRESHOLD, Double.valueOf(epsa));"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,402,throw e;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,407,* Throws a new {@link NonPositiveDefiniteOperatorException} with
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,408,* appropriate context.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,410,* @param l the offending linear operator
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,411,* @param v the offending vector
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,412,* @throws NonPositiveDefiniteOperatorException in any circumstances
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,414,"private static void throwNPDLOException(final RealLinearOperator l,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,415,final RealVector v) throws NonPositiveDefiniteOperatorException {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,416,final NonPositiveDefiniteOperatorException e;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,417,e = new NonPositiveDefiniteOperatorException();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,418,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,419,"context.setValue(OPERATOR, l);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,420,"context.setValue(VECTOR, v);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,421,throw e;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,425,"* A clone of the BLAS {@code DAXPY} function, which carries out the"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,426,* operation y &larr; a &middot; x + y. This is for internal use only: no
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,427,* dimension checks are provided.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,429,* @param a the scalar by which {@code x} is to be multiplied
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,430,* @param x the vector to be added to {@code y}
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,431,* @param y the vector to be incremented
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,433,"private static void daxpy(final double a, final RealVector x,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,434,final RealVector y) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,435,final int n = x.getDimension();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,436,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,437,"y.setEntry(i, a * x.getEntry(i) + y.getEntry(i));"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,442,"* A BLAS-like function, for the operation z &larr; a &middot; x + b"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,443,* &middot; y + z. This is for internal use only: no dimension checks are
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,444,* provided.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,446,* @param a the scalar by which {@code x} is to be multiplied
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,447,* @param x the first vector to be added to {@code z}
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,448,* @param b the scalar by which {@code y} is to be multiplied
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,449,* @param y the second vector to be added to {@code z}
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,450,* @param z the vector to be incremented
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,452,"private static void daxpbypz(final double a, final RealVector x,"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,453,"final double b, final RealVector y, final RealVector z) {"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,454,final int n = z.getDimension();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,455,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,456,final double zi;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,457,zi = a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,458,"z.setEntry(i, zi);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,425,f ((this.minv != null) && check) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,518,if ((this.minv != null) && this.check) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,445,f (check) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,538,if (this.check) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,508,rivate void update() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,601,protected void update() {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,676, TODO This class relies dangerously on references being transparently
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,677, updated.
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,727,rivate static final double CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,815,protected static final double CBRT_MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,730,rivate static final double MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,818,protected static final double MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,797," Performs a symmetry check on the specified linear operator, and throws an"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,798," exception in case this check fails. Given a linear operator L, and a"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,799," vector x, this method checks that"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,800, x' &middot; L &middot; y = y' &middot; L &middot; x
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,801," (within a given accuracy), where y = L &middot; x."
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,803, @param l the linear operator L
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,804, @param x the candidate vector x
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,805, @param y the candidate vector y = L &middot; x
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,806, @param z the vector z = L &middot; y
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,807, @throws NonSelfAdjointOperatorException when the test fails
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,809,"rivate static void checkSymmetry(final RealLinearOperator l,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,810,"inal RealVector x, final RealVector y, final RealVector z)"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,811,hrows NonSelfAdjointOperatorException {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,812,inal double s = y.dotProduct(y);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,813,inal double t = x.dotProduct(z);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,814,inal double epsa = (s + MACH_PREC) * CBRT_MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,815,f (FastMath.abs(s - t) > epsa) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,816,inal NonSelfAdjointOperatorException e;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,817, = new NonSelfAdjointOperatorException();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,818,inal ExceptionContext context = e.getContext();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,819,"ontext.setValue(OPERATOR, l);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,820,"ontext.setValue(VECTOR1, x);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,821,"ontext.setValue(VECTOR2, y);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,822,"ontext.setValue(THRESHOLD, Double.valueOf(epsa));"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,823,hrow e;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,828," A BLAS-like function, for the operation z &larr; a &middot; x + b"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,829, &middot; y + z. This is for internal use only: no dimension checks are
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,830, provided.
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,832, @param a the scalar by which {@code x} is to be multiplied
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,833, @param x the first vector to be added to {@code z}
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,834, @param b the scalar by which {@code y} is to be multiplied
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,835, @param y the second vector to be added to {@code z}
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,836, @param z the vector to be incremented
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,838,"rivate static void daxpbypz(final double a, final RealVector x,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,839,"inal double b, final RealVector y, final RealVector z) {"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,840,inal int n = z.getDimension();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,841,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,842,inal double zi;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,843,i = a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,844,".setEntry(i, zi);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,849," A clone of the BLAS {@code DAXPY} function, which carries out the"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,850, operation y &larr; a &middot; x + y. This is for internal use only: no
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,851, dimension checks are provided.
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,853, @param a the scalar by which {@code x} is to be multiplied
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,854, @param x the vector to be added to {@code y}
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,855, @param y the vector to be incremented
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,857,"rivate static void daxpy(final double a, final RealVector x,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,858,inal RealVector y) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,859,inal int n = x.getDimension();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,860,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,861,".setEntry(i, a * x.getEntry(i) + y.getEntry(i));"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,866, Throws a new {@link NonPositiveDefiniteOperatorException} with
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,867, appropriate context.
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,869, @param l the offending linear operator
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,870, @param v the offending vector
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,871, @throws NonPositiveDefiniteOperatorException in any circumstances
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,873,"rivate static void throwNPDLOException(final RealLinearOperator l,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,874,inal RealVector v) throws NonPositiveDefiniteOperatorException {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,875,inal NonPositiveDefiniteOperatorException e;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,876, = new NonPositiveDefiniteOperatorException();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,877,inal ExceptionContext context = e.getContext();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,878,"ontext.setValue(OPERATOR, l);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,879,"ontext.setValue(VECTOR, v);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,880,hrow e;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1150,"inal State state = new State(a, minv, b, x, goodb, shift, check, delta);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1151,"final State state = new State(a, minv, b, x, goodb, shift, delta, check);"

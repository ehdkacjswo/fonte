is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,19,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,20,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,21,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,24,* Base class for probability distributions on the multivariate reals.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,25,* Default implementations are provided for some of the methods that do
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,26,* not vary from distribution to distribution.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,29,public abstract class AbstractMultivariateRealDistribution
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,30,implements MultivariateRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,31,/** The number of dimensions or columns in the multivariate distribution. */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,32,private final int numDimensions;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,33,/** RNG instance used to generate samples from the distribution. */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,34,protected final RandomGenerator random;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,37,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,38,* @param n Number of dimensions.
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,40,"protected AbstractMultivariateRealDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,41,int n) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,42,random = rng;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,43,numDimensions = n;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,46,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,47,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,48,random.setSeed(seed);
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,53,* @return the number of dimensions in the multivariate distribution .
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,55,public int getDimensions() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,56,return numDimensions;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,60,public abstract double[] sample();
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,62,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,63,public double[][] sample(final int sampleSize) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,64,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,65,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,66,sampleSize);
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,68,final double[][] out = new double[sampleSize][numDimensions];
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,69,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,70,out[i] = sample();
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,72,return out;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,75,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,76,public double probability(double[] x) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,77,return 0;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,80,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,81,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,82,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,85,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,86,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,87,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,90,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,91,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,92,return false;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,95,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,96,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,97,return false;
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,100,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,101,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java,102,return false;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,1,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,3,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,4,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,5,import org.apache.commons.math3.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,6,import org.apache.commons.math3.linear.EigenDecomposition;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,7,import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,8,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,9,import org.apache.commons.math3.linear.SingularMatrixException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,10,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,11,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,12,import org.apache.commons.math3.stat.correlation.Covariance;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,13,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,14,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,17,* Implementation of the multivariate normal (Gaussian) distribution.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,19,"* @see <a href=""http://en.wikipedia.org/wiki/Multivariate_normal_distribution"">"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,20,* Multivariate normal distribution (Wikipedia)</a>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,21,"* @see <a href=""http://mathworld.wolfram.com/MultivariateNormalDistribution.html"">"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,22,* Multivariate normal distribution (MathWorld)</a>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,24,public class MultivariateNormalDistribution
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,25,extends AbstractMultivariateRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,26,/** Vector of means. */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,27,private final double[] means;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,28,/** Covariance matrix. */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,29,private final RealMatrix covarianceMatrix;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,30,/** The matrix inverse of the covariance matrix. */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,31,private final RealMatrix covarianceMatrixInverse;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,32,/** The determinant of the covariance matrix. */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,33,private final double covarianceMatrixDeterminant;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,34,/** Matrix used in computation of samples. */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,35,private final RealMatrix samplingMatrix;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,38,* Creates a multivariate normal distribution with the given mean vector and
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,39,* covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,40,* <br/>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,41,* The number of dimensions is equal to the length of the mean vector
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,42,* and to the number of rows and columns of the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,43,"* It is frequently written as ""p"" in formulae."
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,45,* @param means Vector of means.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,46,* @param covariances Covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,48,"public MultivariateNormalDistribution(final double[] means,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,49,final double[][] covariances)
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,50,"throws SingularMatrixException,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,51,"DimensionMismatchException,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,52,NonPositiveDefiniteMatrixException {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,53,"this(new Well19937c(), means, covariances);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,57,* Creates a multivariate normal distribution with the given mean vector and
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,58,* covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,59,* <br/>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,60,* The number of dimensions is equal to the length of the mean vector
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,61,* and to the number of rows and columns of the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,62,"* It is frequently written as ""p"" in formulae."
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,64,* @param rng Random Number Generator.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,65,* @param means Vector of means.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,66,* @param covariances Covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,68,"public MultivariateNormalDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,69,"final double[] means,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,70,final double[][] covariances)
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,71,"throws SingularMatrixException,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,72,"DimensionMismatchException,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,73,NonPositiveDefiniteMatrixException {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,74,"super(rng, means.length);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,76,final int dim = means.length;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,78,if (covariances.length != dim) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,79,"throw new DimensionMismatchException(covariances.length, dim);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,82,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,83,if (dim != covariances[i].length) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,84,"throw new DimensionMismatchException(covariances[i].length, dim);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,88,this.means = MathArrays.copyOf(means);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,90,covarianceMatrix = new Array2DRowRealMatrix(covariances);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,92,// Covariance matrix eigen decomposition.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,93,final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,95,// Compute and store the inverse.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,96,covarianceMatrixInverse = covMatDec.getSolver().getInverse();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,97,// Compute and store the determinant.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,98,covarianceMatrixDeterminant = covMatDec.getDeterminant();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,100,// Eigenvalues of the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,101,final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,103,for (int i = 0; i < covMatEigenvalues.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,104,if (covMatEigenvalues[i] < 0) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,105,"throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,109,// Matrix where each column is an eigenvector of the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,110,"final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,111,for (int v = 0; v < dim; v++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,112,final double[] evec = covMatDec.getEigenvector(v).toArray();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,113,"covMatEigenvectors.setColumn(v, evec);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,116,final RealMatrix tmpMatrix = covMatEigenvectors.transpose();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,118,// Scale each eigenvector by the square root of its eigenvalue.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,119,for (int row = 0; row < dim; row++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,120,final double factor = FastMath.sqrt(covMatEigenvalues[row]);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,121,for (int col = 0; col < dim; col++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,122,"tmpMatrix.multiplyEntry(row, col, factor);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,126,samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,130,* Gets the mean vector.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,132,* @return the mean vector.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,134,public double[] getMeans() {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,135,return MathArrays.copyOf(means);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,139,* Gets the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,141,* @return the covariance matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,143,public RealMatrix getCovariances() {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,144,return covarianceMatrix.copy();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,147,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,148,public double density(final double[] vals) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,149,final int dim = getDimensions();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,150,if (vals.length != dim) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,151,"throw new DimensionMismatchException(vals.length, dim);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,154,final double kernel = getKernel(vals);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,156,"return FastMath.pow(2 * FastMath.PI, -dim / 2) *"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,157,"FastMath.pow(covarianceMatrixDeterminant, -0.5) *"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,158,FastMath.exp(kernel);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,162,* Gets the square root of each element on the diagonal of the covariance
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,163,* matrix.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,165,* @return the standard deviations.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,167,public double[] getStandardDeviations() {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,168,final int dim = getDimensions();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,169,final double[] std = new double[dim];
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,170,final double[][] s = covarianceMatrix.getData();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,171,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,172,std[i] = FastMath.sqrt(s[i][i]);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,174,return std;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,177,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,178,public double[] sample() {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,179,final int dim = getDimensions();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,180,final double[] normalVals = new double[dim];
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,182,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,183,normalVals[i] = random.nextGaussian();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,186,final double[] vals = samplingMatrix.operate(normalVals);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,188,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,189,vals[i] += means[i];
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,192,return vals;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,196,* Precomputes some of the multiplications used for determining densities.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,198,* @param values Values at which to compute density.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,199,* @return the multiplication factor of density calculations.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,201,private double getKernel(final double[] values) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,202,double k = 0;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,203,for (int col = 0; col < values.length; col++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,204,for (int v = 0; v < values.length; v++) {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,205,"k += covarianceMatrixInverse.getEntry(v, col)"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,206,"* FastMath.pow(values[v] - means[v], 2);"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java,209,return -0.5 * k;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,20,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,21,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,22,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,25,* Base interface for multivariate distributions on the reals.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,27,"* This is based largely on the RealDistribution interface, but cumulative"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,28,* distribution functions are not required because they are often quite
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,29,* difficult to compute for multivariate distributions.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,31,public interface MultivariateRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,33,* For a random variable {@code X} whose values are distributed according to
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,34,"* this distribution, this method returns {@code P(X = x)}. In other words,"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,35,* this method represents the probability mass function (PMF) for the
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,36,* distribution.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,38,* @param x Point at which the PMF is evaluated.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,39,* @return the value of the probability mass function at point {@code x}.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,41,double probability(double[] x);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,44,* Returns the probability density function (PDF) of this distribution
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,45,"* evaluated at the specified point {@code x}. In general, the PDF is the"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,46,* derivative of the cumulative distribution function. If the derivative
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,47,"* does not exist at {@code x}, then an appropriate replacement should be"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,48,"* returned, e.g. {@code Double.POSITIVE_INFINITY}, {@code Double.NaN}, or"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,49,* the limit inferior or limit superior of the difference quotient.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,51,* @param x Point at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,52,* @return the value of the probability density function at point {@code x}.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,54,double density(double[] x) throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,57,* Access the lower bound of the support.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,58,* This method must return the same value as {@code inverseCumulativeProbability(0)}.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,59,"* In other words, this method must return"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,60,* <p>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,61,* <code>inf {x in R | P(X <= x) > 0}</code>.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,62,* </p>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,64,* @return the lower bound of the support (might be
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,65,* {@code Double.NEGATIVE_INFINITY}).
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,67,double getSupportLowerBound();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,70,* Access the upper bound of the support.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,71,* This method must return the same value as {@code inverseCumulativeProbability(1)}.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,72,"* In other words, this method must return"
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,73,* <p>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,74,* <code>inf {x in R | P(X <= x) = 1}</code>.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,75,* </p>
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,77,* @return the upper bound of the support (might be
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,78,* {@code Double.POSITIVE_INFINITY}).
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,80,double getSupportUpperBound();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,83,* Gets information about whether the lower bound of the support is
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,84,* inclusive or not.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,86,* @return whether the lower bound of the support is inclusive or not.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,88,boolean isSupportLowerBoundInclusive();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,91,* gets information about whether the upper bound of the support is
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,92,* inclusive or not.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,94,* @return whether the upper bound of the support is inclusive or not.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,96,boolean isSupportUpperBoundInclusive();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,99,* Gets information about whether the support is connected (i.e. all
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,100,* values between the lower and upper bound of the support are included
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,101,* in the support).
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,103,* @return whether the support is connected or not.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,105,boolean isSupportConnected();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,108,* Reseeds the random generator used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,110,* @param seed Seed with which to initialize the random number generator.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,112,void reseedRandomGenerator(long seed);
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,115,* Generates a random value vector sampled from this distribution.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,117,* @return a random value vector.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,119,double[] sample();
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,122,* Generates a list of a random value vectors from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,124,* @param sampleSize the number of random vectors to generate.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,125,* @return an array representing the random samples.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,126,* @throws org.apache.commons.math3.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,127,* if {@code sampleSize} is not positive.
True,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java,129,double[][] sample(int sampleSize) throws NotStrictlyPositiveException;

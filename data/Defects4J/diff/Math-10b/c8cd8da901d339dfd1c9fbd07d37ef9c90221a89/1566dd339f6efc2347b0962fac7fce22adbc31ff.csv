is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,30,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,30,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,31,import org.apache.commons.math3.distribution.UniformRealDistribution;
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,43,inal RandomDataImpl rng = new RandomDataImpl();
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,44,ng.reSeed(64925784252L);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,44,"final RealDistribution rng = new UniformRealDistribution(-100, 100);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,45,rng.reseedRandomGenerator(64925784252L);
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,53,"inal double x = rng.nextUniform(-100, 100);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,54,final double x = rng.sample();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,268,// The test is extremely sensitive to the seed.
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,269,final long seed = 59421061L;
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,271,9421063L);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,273,seed);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,21,mport org.apache.commons.math3.random.RandomData;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,22,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,21,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,25,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,26,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,27,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,31,** RNG. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,32,rivate final RandomData random;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,33,/** RNG for the x-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,34,private final RealDistribution cX;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,35,/** RNG for the y-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,36,private final RealDistribution cY;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,37,/** RNG for the parametric position of the point. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,38,private final RealDistribution tP;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,35,** x-coordinate of the circle center. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,36,rivate final double x;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,37,** y-coordinate of the circle center. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,38,rivate final double y;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,39,** Error on the x-coordinate of the center. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,40,rivate final double xSigma;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,41,** Error on the y-coordinate of the center. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,42,rivate final double ySigma;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,58,andom = new RandomDataImpl(new Well44497b((seed)));
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,56,final RandomGenerator rng = new Well44497b(seed);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,60,his.x = x;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,61,his.y = y;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,62,his.xSigma = xSigma;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,63,his.ySigma = ySigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,58,"cX = new NormalDistribution(rng, x, xSigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,59,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,60,"cY = new NormalDistribution(rng, y, ySigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,61,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,62,"tP = new UniformRealDistribution(rng, 0, MathUtils.TWO_PI,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,63,UniformRealDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,86,"inal double cX = random.nextGaussian(x, xSigma);"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,87,"inal double cY = random.nextGaussian(y, ySigma);"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,88,"inal double t = random.nextUniform(0, MathUtils.TWO_PI);"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,90,inal double pX = cX + radius * FastMath.cos(t);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,91,inal double pY = cY + radius * FastMath.sin(t);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,86,final double t = tP.sample();
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,87,final double pX = cX.sample() + radius * FastMath.cos(t);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,88,final double pY = cY.sample() + radius * FastMath.sin(t);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,21,mport org.apache.commons.math3.random.RandomData;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,22,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,21,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,25,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,26,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,27,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,31,** RNG. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,32,rivate final RandomData random;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,37,** Error on the y-coordinate. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,38,rivate final double sigma;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,39,** Lowest value of the x-coordinate. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,40,rivate final double lo;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,41,** Highest value of the x-coordinate. */
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,42,rivate final double hi;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,37,/** RNG for the x-coordinate. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,38,private final RealDistribution x;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,39,/** RNG for the error on the y-coordinate. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,40,private final RealDistribution error;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,47, the correspoding y-coordinates will be computed as
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,45,* the corresponding y-coordinates will be computed as
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,56, @param error Error on the y-coordinate of the point.
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,57, @param xLo Lowest value of the x-coordinate.
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,58, @param xHi Highest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,54,* @param sigma Standard deviation on the y-coordinate of the point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,55,* @param lo Lowest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,56,* @param hi Highest value of the x-coordinate.
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,63,"ouble error,"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,64,"ouble xLo,"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,65,"ouble xHi,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,61,"double sigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,62,"double lo,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,63,"double hi,"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,67,andom = new RandomDataImpl(new Well44497b((seed)));
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,65,final RandomGenerator rng = new Well44497b(seed);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,70,igma = error;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,71,o = xLo;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,72,i = xHi;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,68,"error = new NormalDistribution(rng, 0, sigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,69,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,70,"x = new UniformRealDistribution(rng, lo, hi,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,71,UniformRealDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,95,"inal double x = random.nextUniform(lo, hi);"
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,96,inal double yModel = slope * x + intercept;
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,97,"inal double y = yModel + random.nextGaussian(0, sigma);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,94,final double abscissa = x.sample();
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,95,final double yModel = slope * abscissa + intercept;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,96,final double ordinate = yModel + error.sample();
False,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,99,"eturn new Point2D.Double(x, y);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java,98,"return new Point2D.Double(abscissa, ordinate);"
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,25,mport org.apache.commons.math3.random.RandomData;
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,26,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,25,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,26,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,27,import org.apache.commons.math3.distribution.IntegerDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,28,import org.apache.commons.math3.distribution.UniformIntegerDistribution;
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,249,inal RandomData randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,250,"inal int sampleSize = randomData.nextInt(10,100);"
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,251,ouble[] out = new double[sampleSize];
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,252,or (int i = 0; i < out.length; i++) {
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,253,"ut[i] = randomData.nextUniform(-100, 100);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,251,"final IntegerDistribution size = new UniformIntegerDistribution(10, 100);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,252,"final RealDistribution randomData = new UniformRealDistribution(-100, 100);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,253,final int sampleSize = size.sample();
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,254,final double[] out = randomData.sample(sampleSize);
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,268,inal RandomData randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,276,"inal int next = (i == 4 || cur == length - 1) ? length - 1 : randomData.nextInt(cur, length - 1);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,275,"final IntegerDistribution partitionPoint = new UniformIntegerDistribution(cur, length - 1);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java,276,final int next = (i == 4 || cur == length - 1) ? length - 1 : partitionPoint.sample();
False,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,24,mport org.apache.commons.math3.random.RandomData;
False,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,25,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,24,import org.apache.commons.math3.distribution.IntegerDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,25,import org.apache.commons.math3.distribution.UniformIntegerDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,26,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,27,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,182,andomData randomData = new RandomDataImpl();
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,187,"final IntegerDistribution weightDist = new UniformIntegerDistribution(1, 5);"
False,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,187,"ntWeights[i] = randomData.nextInt(1, 5);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,189,intWeights[i] = weightDist.sample();
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,196,"final RealDistribution valueDist = new NormalDistribution(mu, sigma);"
False,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,196,"ouble value = randomData.nextGaussian(mu, sigma);"
True,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java,199,double value = valueDist.sample();
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,21,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,22,import org.apache.commons.math3.distribution.UniformRealDistribution;
False,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,83,"riginal[i] = random.nextUniform(i + 0.5, i + 0.75);"
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,85,"final RealDistribution u = new UniformRealDistribution(i + 0.5, i + 0.75);"
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,86,original[i] = u.sample();
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,18,mport org.apache.commons.math3.random.RandomDataImpl;
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,19,mport org.apache.commons.math3.random.RandomData;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,19,import org.apache.commons.math3.distribution.IntegerDistribution;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,20,import org.apache.commons.math3.distribution.UniformIntegerDistribution;
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,316,andomData randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,317,"nt iterations = randomData.nextInt(100, 1000);"
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,318,"final IntegerDistribution randomData = new UniformIntegerDistribution(100, 1000);"
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,319,final int iterations = randomData.sample();
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,337,andomData randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,338,"nt iterations = randomData.nextInt(100, 3000);"
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,339,"final IntegerDistribution randomData = new UniformIntegerDistribution(100, 3000);"
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,340,final int iterations = randomData.sample();

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,24,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,** &sqrt;(2 &pi;) */
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44,/** &radic;(2 &pi;) */
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,46,/** &radic;(2) */
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,private static final double SQRT2 = FastMath.sqrt(2.0);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,128,eturn 0.5 * (1 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2))));
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,131,return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,137,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,138,"public double cumulativeProbability(double x0, double x1) throws MathException {"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139,if (x0 > x1) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,"x0, x1, true);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,final double denom = standardDeviation * SQRT2;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,144,final double v0 = (x0 - mean) / denom;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,145,final double v1 = (x1 - mean) / denom;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,146,"return 0.5 * Erf.erf(v0, v1);"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,30,"* The number {@code X_CRIT} is used by {@link #erf(double, double)} internally."
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,31,* This number solves {@code erf(x)=0.5} within 1ulp.
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,32,"* More precisely, the current implementations of"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,33,* {@link #erf(double)} and {@link #erfc(double)} satisfy:<br/>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,34,"* {@code erf(X_CRIT) < 0.5},<br/>"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,35,"* {@code erf(Math.nextUp(X_CRIT) > 0.5},<br/>"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,36,"* {@code erfc(X_CRIT) = 0.5}, and<br/>"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,37,* {@code erfc(Math.nextUp(X_CRIT) < 0.5}
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,39,private static final double X_CRIT = 0.4769362762044697;
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,57,"ouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,58,f (x < 0) {
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,59,et = -ret;
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,61,eturn ret;
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,70,"final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,71,return x < 0 ? -ret : ret;
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,106,* Returns the difference between erf(x1) and erf(x2).
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,108,* The implementation uses either erf(double) or erfc(double)
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,109,* depending on which provides the most precise result.
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,111,* @param x1 the first value
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,112,* @param x2 the second value
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,113,* @return erf(x2) - erf(x1)
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,115,"public static double erf(double x1, double x2) {"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,116,if(x1 > x2) {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,117,"return -erf(x2, x1);"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,120,return
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,121,x1 < -X_CRIT ?
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,122,x2 < 0.0 ?
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,123,erfc(-x2) - erfc(-x1) :
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,124,erf(x2) - erf(x1) :
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,125,x2 > X_CRIT && x1 > 0.0 ?
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,126,erfc(x1) - erfc(x2) :
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,127,erf(x2) - erf(x1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,200,"* Test the implementation of Erf.erf(double, double) for consistency with results"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,201,* obtained from Erf.erf(double) and Erf.erfc(double).
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,203,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,204,public void testTwoArgumentErf() throws Exception {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,205,"double[] xi = new double[]{-2.0, -1.0, -0.9, -0.1, 0.0, 0.1, 0.9, 1.0, 2.0};"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,206,for(double x1 : xi) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,207,for(double x2 : xi) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,208,"double a = Erf.erf(x1, x2);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,209,double b = Erf.erf(x2) - Erf.erf(x1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,210,double c = Erf.erfc(x1) - Erf.erfc(x2);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,211,"Assert.assertEquals(a, b, 1E-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,212,"Assert.assertEquals(a, c, 1E-15);"

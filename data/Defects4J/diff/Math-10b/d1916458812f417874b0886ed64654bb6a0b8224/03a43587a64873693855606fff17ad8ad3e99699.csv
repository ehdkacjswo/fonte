is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65, @version $Revision: 1.15 $ $Date: 2003/11/15 18:47:09 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65,* @version $Revision: 1.16 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,86,"ublic double cummulativeProbability(double x0, double x1) {"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,86,"public double cummulativeProbability(double x0, double x1)"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,87,throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,ublic double inverseCummulativeProbability(final double p) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,98,public double inverseCummulativeProbability(final double p)
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,99,throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,99,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,100,"p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,101,"throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,ry {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,114,/ bracket root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,115,"ouble[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,"etInitialDomain(p), getDomainLowerBound(p),"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,114,// bracket root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,115,double[] bracket =
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,UnivariateRealSolverUtils.bracket(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,"rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,118,"getInitialDomain(p),"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,119,"getDomainLowerBound(p),"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,119,/ find root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,120,ouble root = UnivariateRealSolverUtils.solve(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,121,"ootFindingFunction, bracket[0], bracket[1]);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,eturn root;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,125,/ this should never happen.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,126,eturn Double.NaN;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,// find root
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,double root =
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124,UnivariateRealSolverUtils.solve(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,125,"rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,126,"bracket[0],"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,127,bracket[1]);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,return root;
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,62, @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:35 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,64,* @version $Revision: 1.8 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,80,"ublic double cummulativeProbability(int x0, int x1) {"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,82,"public double cummulativeProbability(int x0, int x1) throws MathException{"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,92,ublic int inverseCummulativeProbability(final double p) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,94,public int inverseCummulativeProbability(final double p) throws MathException{
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,63, @version $Revision: 1.7 $ $Date: 2003/11/15 18:59:10 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,65,* @version $Revision: 1.8 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,65,ublic class BinomialDistributionImpl extends AbstractDiscreteDistribution
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,66,mplements BinomialDistribution {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,67,public class BinomialDistributionImpl
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,68,extends AbstractDiscreteDistribution
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,69,"implements BinomialDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,109,"number of trials must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,111,"throw new IllegalArgumentException(""number of trials must be non-negative."");"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,120,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,"probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,122,"throw new IllegalArgumentException(""probability of success must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,155,ublic double cummulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,public double cummulativeProbability(int x) throws MathException {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,162,ry {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,"et = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164," + 1.0, getNumberOfTrials() - x);"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,165, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,166,et = Double.NaN;
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,ret =
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164,1.0
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,165,- Beta.regularizedBeta(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,166,"getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,167,"x + 1.0,"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,168,getNumberOfTrials() - x);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,182,"et = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,"ath.pow(getProbabilityOfSuccess(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,"ath.pow(1.0 - getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,185,etNumberOfTrials() - x);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,ret =
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,"MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x)"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,185,"* Math.pow(getProbabilityOfSuccess(), x)"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,186,* Math.pow(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,187,"1.0 - getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,188,getNumberOfTrials() - x);
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,58,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59, @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:35 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,63,* @version $Revision: 1.11 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,63,mplements ChiSquaredDistribution {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,67,"implements ChiSquaredDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99,ublic double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,103,public double cummulativeProbability(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:35 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,61,* @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,67,ouble cummulativeProbability(double x);
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,69,double cummulativeProbability(double x) throws MathException;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,75,"ouble cummulativeProbability(double x0, double x1);"
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,77,"double cummulativeProbability(double x0, double x1) throws MathException;"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,82,ouble inverseCummulativeProbability(double p);
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,84,double inverseCummulativeProbability(double p) throws MathException;
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59, @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,61,* @version $Revision: 1.7 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,74,ouble cummulativeProbability(int x);
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,76,double cummulativeProbability(int x) throws MathException;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,82,"ouble cummulativeProbability(int x0, int x1);"
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,84,"double cummulativeProbability(int x0, int x1) throws MathException;"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,89,nt inverseCummulativeProbability(double p);
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,91,int inverseCummulativeProbability(double p) throws MathException;
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61, @version $Revision: 1.15 $ $Date: 2003/11/15 16:01:36 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63,* @version $Revision: 1.16 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63,ublic class DistributionFactoryImpl extends DistributionFactory {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,65,public class DistributionFactoryImpl extends DistributionFactory implements Serializable  {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,58,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59, @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,63,* @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,62,mplements ExponentialDistribution {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,66,"implements ExponentialDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,108,ublic double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,112,public double cummulativeProbability(double x) throws MathException{
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,125,ublic double inverseCummulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,129,public double inverseCummulativeProbability(double p) throws MathException{
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,145,"ublic double cummulativeProbability(double x0, double x1) {"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,149,"public double cummulativeProbability(double x0, double x1) throws MathException{"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,63, @version $Revision: 1.10 $ $Date: 2003/11/15 18:59:10 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,67,mplements FDistribution {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,69,"implements FDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,ublic double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,public double cummulativeProbability(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,108,ry {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,"et = Beta.regularizedBeta((n * x) / (m + n * x),"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,".5 * n,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111,.5 * m);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,113,et = Double.NaN;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,"ret = Beta.regularizedBeta((n * x) / (m + n * x),"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111,"0.5 * n,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112,0.5 * m);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,62, @version $Revision: 1.13 $ $Date: 2003/11/15 18:59:10 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,64,* @version $Revision: 1.14 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65,mplements GammaDistribution {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,67,"implements GammaDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,99,ublic double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,public double cummulativeProbability(double x) throws MathException{
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,105,ry {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,106,"et = Gamma.regularizedGammaP(getAlpha(), x / getBeta());"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,107, catch(MathException ex){
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,108,et = Double.NaN;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,107,"ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,59,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62, @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:36 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,65,* @version $Revision: 1.7 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,65,mplements HypergeometricDistribution
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,68,"implements HypergeometricDistribution, Serializable"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,98,ublic double cummulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,101,public double cummulativeProbability(int x) throws MathException{
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,56,import java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,63, @version $Revision: 1.10 $ $Date: 2003/11/15 18:59:10 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,65,* @version $Revision: 1.11 $ $Date: 2003/11/19 03:22:53 $
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,67,mplements TDistribution {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,69,"implements TDistribution, Serializable  {"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,87,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,88,"degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,89,"throw new IllegalArgumentException(""degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,106,ublic double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,public double cummulativeProbability(double x) throws MathException{
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,ouble t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,ry {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113, = Beta.regularizedBeta(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,double t =
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,Beta.regularizedBeta(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,f (x < 0.0) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,et = 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,119, else {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,120,et = 1.0 - 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,122, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,123,et = Double.NaN;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,if (x < 0.0) {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,ret = 0.5 * t;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,119,} else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,120,ret = 1.0 - 0.5 * t;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,58,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,87, @version $Revision: 1.10 $ $Date: 2003/11/18 15:07:12 $
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,90,* @version $Revision: 1.11 $ $Date: 2003/11/19 03:22:54 $
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,89,ublic class BivariateRegression {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,92,public class BivariateRegression implements Serializable {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,94,static final long serialVersionUID = -3004689053607543335L;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,163,or (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,167,for (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,226,ublic double getIntercept() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,227,eturn getIntercept(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,231, Returns the slope of the estimated regression line.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,230,public double getIntercept() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,231,return getIntercept(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,235,* Returns the slope of the estimated regression line.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,236,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,237,* The least squares estimate of the slope is computed using the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,238,"* <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,239,* The slope is sometimes denoted b1.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,240,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,241,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,242,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,243,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,244,"* invoked before a model can be estimated, <code>Double.NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,245,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,246,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,248,* @return the slope of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,250,public double getSlope() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,251,if (n < 2) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,252,return Double.NaN; //not enough data
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,254,if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,255,return Double.NaN; //not enough variation in x
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,257,return sumXY / sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,261,"* Returns the <a href=""http://www.xycoon.com/SumOfSquares.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,262,* sum of squared errors</a> (SSE) associated with the regression
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,263,* model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,233, The least squares estimate of the slope is computed using the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,234," <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,235, The slope is sometimes denoted b1.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,265,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,266,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,267,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,268,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,269,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,270,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,272,* @return sum of squared errors associated with the regression model
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,274,public double getSumSquaredErrors() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,275,return getSumSquaredErrors(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,279,* Returns the sum of squared deviations of the y values about their mean.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,280,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,281,* This is defined as SSTO
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,282,"* <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,283,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,284,"* If <code>n < 2</code>, this returns <code>Double.NaN</code>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,286,* @return sum of squared deviations of y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,288,public double getTotalSumSquares() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,289,if (n < 2) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,290,return Double.NaN;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,292,return sumYY;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,296,* Returns the sum of squared deviations of the predicted y values about
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,297,* their mean (which equals the mean of y).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,298,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,299,* This is usually abbreviated SSR or SSM.  It is defined as SSM
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,300,"* <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,240," invoked before a model can be estimated, <code>Double.NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,305,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,244, @return the slope of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,309,* @return sum of squared deviations of predicted y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,246,ublic double getSlope() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,247,f (n < 2) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,248,eturn Double.NaN;  //not enough data
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,250,f (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,251,eturn Double.NaN; //not enough variation in x
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,253,eturn sumXY / sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,257," Returns the <a href=""http://www.xycoon.com/SumOfSquares.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,258, sum of squared errors</a> (SSE) associated with the regression
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,259, model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,260, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,261, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,262, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,263, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,264," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,265, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,266, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,268, @return sum of squared errors associated with the regression model
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,270,ublic double getSumSquaredErrors() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,271,eturn getSumSquaredErrors(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,275, Returns the sum of squared deviations of the y values about their mean.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,276, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,277, This is defined as SSTO
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,278," <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,279, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,280," If <code>n < 2</code>, this returns <code>Double.NaN</code>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,282, @return sum of squared deviations of y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,284,ublic double getTotalSumSquares() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,285,f (n < 2) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,286,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,288,eturn sumYY;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,292, Returns the sum of squared deviations of the predicted y values about
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,293, their mean (which equals the mean of y).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,294, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,295, This is usually abbreviated SSR or SSM.  It is defined as SSM
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,296," <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,297, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,298, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,299, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,300, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,301," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,302, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,303, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,305, @return sum of squared deviations of predicted y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,307,ublic double getRegressionSumSquares() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,308,eturn getRegressionSumSquares(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,312," Returns the sum of squared errors divided by the degrees of freedom,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,313, usually abbreviated MSE.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,314, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,315," If there are fewer than <strong>three</strong> data pairs in the model,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,316," or if there is no variation in <code>x</code>, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,317, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,319, @return sum of squared deviations of y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,321,ublic double getMeanSquareError() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,322,f (n < 3) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,323,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,325,eturn getSumSquaredErrors() / (double) (n - 2);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,329," Returns <a href=""http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,330," Pearson's product moment correlation coefficient</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,331, usually denoted r.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,332, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,333, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,334, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,335, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,336," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,337, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,338, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,340, @return Pearson's r
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,342,ublic double getR() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,343,ouble b1 = getSlope();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,344,ouble result = Math.sqrt(getRSquare(b1));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,345,f (b1 < 0) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,346,esult = -result;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,348,eturn result;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,352," Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,353," coefficient of determination</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,354, usually denoted r-square.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,355, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,356, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,357, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,358, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,359," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,360, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,361, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,363, @return r-square
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,365,ublic double getRSquare() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,366,eturn getRSquare(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,371," Returns the <a href=""http://www.xycoon.com/standarderrorb0.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,372," standard error of the intercept estimate</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,373, usually denoted s(b0).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,374, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,375, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,376," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,377, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,379, @return standard error associated with intercept estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,381,ublic double getInterceptStdErr() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,382,eturn Math.sqrt(getMeanSquareError() * ((1d / (double) n) +
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,383,xbar * xbar) / sumXX));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,387," Returns the <a href=""http://www.xycoon.com/standerrorb(1).htm"">standard"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,388," error of the slope estimate</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,389, usually denoted s(b1).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,390, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,391," If there are fewer that <strong>three</strong> data pairs in the model,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,392," or if there is no variation in x, this returns <code>Double.NaN</code>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,394, @return standard error associated with slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,396,ublic double getSlopeStdErr() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,397,eturn Math.sqrt(getMeanSquareError() / sumXX);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,401, Returns the half-width of a 95% confidence interval for the slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,402, estimate.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,403, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,404, The 95% confidence interval is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,405, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,406," <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,407, getSlope() + getSlopeConfidenceInterval())</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,408, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,409, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,410," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,411, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,412, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,413, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,414, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,415, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,416," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,417," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,419, @return half-width of 95% confidence interval for the slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,421,ublic double getSlopeConfidenceInterval() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,422,eturn getSlopeConfidenceInterval(0.05d);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,426, Returns the half-width of a (100-100*alpha)% confidence interval for
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,427, the slope estimate.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,428, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,429, The (100-100*alpha)% confidence interval is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,430, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,431," <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,432, getSlope() + getSlopeConfidenceInterval())</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,433, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,434," To request, for example, a 99% confidence interval, use"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,435, <code>alpha = .01</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,436, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,437, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,438, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,439, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,440," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,441," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,442, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,443, <strong> Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,444, <li>If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,445," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,446, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,447, </li>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,448, <li><code>(0 < alpha < 1)</code>; otherwise an
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,449, <code>IllegalArgumentException</code> is thrown.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,450, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,452, @param alpha the desired significance level
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,453, @return half-width of 95% confidence interval for the slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,455,ublic double getSlopeConfidenceInterval(double alpha) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,456,f (alpha >= 1 || alpha <= 0) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,457,hrow new IllegalArgumentException();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,459,eturn getSlopeStdErr() *
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,460,etTDistribution().inverseCummulativeProbability(1d - alpha / 2d);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,464, Returns the significance level of the slope (equiv) correlation.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,465, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,466," Specifically, the returned value is the smallest <code>alpha</code>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,467, such that the slope confidence interval with significance level
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,468, equal to <code>alpha</code> does not include <code>0</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,469," On regression output, this is often denoted <code>Prob(|t| > 0)</code>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,470, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,471, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,472, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,473, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,474," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,475," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,476, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,477, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,478," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,479, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,481, @return significance level for slope/correlation
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,483,ublic double getSignificance() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,484,eturn (1d - getTDistribution().cummulativeProbability(
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,485,ath.abs(getSlope()) / getSlopeStdErr()));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,488,/ ---------------------Private methods-----------------------------------
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,491," Returns the intercept of the estimated regression line, given the slope."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,311,public double getRegressionSumSquares() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,312,return getRegressionSumSquares(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,316,"* Returns the sum of squared errors divided by the degrees of freedom,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,317,* usually abbreviated MSE.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,493, Will return <code>NaN</code> if slope is <code>NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,319,"* If there are fewer than <strong>three</strong> data pairs in the model,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,320,"* or if there is no variation in <code>x</code>, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,321,* <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,495, @param slope current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,496, @return the intercept of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,323,* @return sum of squared deviations of y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,498,rivate double getIntercept(double slope) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,499,eturn (sumY - slope * sumX) / ((double) n);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,503, Returns the sum of squared errors associated with the regression
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,504," model, using the slope of the regression line."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,505, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,506, Returns NaN if the slope is NaN.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,508, @param b1 current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,509, @return sum of squared errors associated with the regression model
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,511,rivate double getSumSquaredErrors(double b1) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,512,eturn sumYY - sumXY * sumXY / sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,516, Computes r-square from the slope.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,517, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,518, will return NaN if slope is Nan.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,520, @param b1 current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,521, @return r-square
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,523,rivate double getRSquare(double b1) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,524,ouble ssto = getTotalSumSquares();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,525,eturn (ssto - getSumSquaredErrors(b1)) / ssto;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,529, Computes SSR from b1.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,531, @param slope regression slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,532, @return sum of squared deviations of predicted y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,534,rivate double getRegressionSumSquares(double slope) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,535,eturn slope * slope * sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,539, Uses distribution framework to get a t distribution instance
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,540, with df = n - 2
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,542, @return t distribution with df = n - 2
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,544,rivate TDistribution getTDistribution() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,545,eturn DistributionFactory.newInstance().createTDistribution(n - 2);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,325,public double getMeanSquareError() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,326,if (n < 3) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,327,return Double.NaN;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,329,return getSumSquaredErrors() / (double) (n - 2);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,333,"* Returns <a href=""http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,334,"* Pearson's product moment correlation coefficient</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,335,* usually denoted r.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,336,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,337,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,338,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,339,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,340,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,341,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,342,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,344,* @return Pearson's r
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,346,public double getR() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,347,double b1 = getSlope();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,348,double result = Math.sqrt(getRSquare(b1));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,349,if (b1 < 0) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,350,result = -result;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,352,return result;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,356,"* Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,357,"* coefficient of determination</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,358,* usually denoted r-square.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,359,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,360,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,361,* <li>At least two observations (with at least two different x values)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,362,* must have been added before invoking this method. If this method is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,363,"* invoked before a model can be estimated, <code>Double,NaN</code> is"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,364,* returned.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,365,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,367,* @return r-square
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,369,public double getRSquare() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,370,return getRSquare(getSlope());
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,374,"* Returns the <a href=""http://www.xycoon.com/standarderrorb0.htm"">"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,375,"* standard error of the intercept estimate</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,376,* usually denoted s(b0).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,377,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,378,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,379,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,380,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,382,* @return standard error associated with intercept estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,384,public double getInterceptStdErr() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,385,return Math.sqrt(
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,386,getMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,390,"* Returns the <a href=""http://www.xycoon.com/standerrorb(1).htm"">standard"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,391,"* error of the slope estimate</a>,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,392,* usually denoted s(b1).
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,393,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,394,"* If there are fewer that <strong>three</strong> data pairs in the model,"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,395,"* or if there is no variation in x, this returns <code>Double.NaN</code>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,397,* @return standard error associated with slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,399,public double getSlopeStdErr() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,400,return Math.sqrt(getMeanSquareError() / sumXX);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,404,* Returns the half-width of a 95% confidence interval for the slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,405,* estimate.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,406,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,407,* The 95% confidence interval is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,408,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,409,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,410,* getSlope() + getSlopeConfidenceInterval())</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,411,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,412,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,413,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,414,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,415,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,416,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,417,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,418,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,419,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,420,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,422,* @return half-width of 95% confidence interval for the slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,424,public double getSlopeConfidenceInterval() throws MathException {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,425,return getSlopeConfidenceInterval(0.05d);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,429,* Returns the half-width of a (100-100*alpha)% confidence interval for
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,430,* the slope estimate.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,431,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,432,* The (100-100*alpha)% confidence interval is
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,433,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,434,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,435,* getSlope() + getSlopeConfidenceInterval())</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,436,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,437,"* To request, for example, a 99% confidence interval, use"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,438,* <code>alpha = .01</code>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,439,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,440,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,441,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,442,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,443,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,444,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,445,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,446,* <strong> Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,447,* <li>If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,448,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,449,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,450,* </li>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,451,* <li><code>(0 < alpha < 1)</code>; otherwise an
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,452,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,453,* </li></ul>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,455,* @param alpha the desired significance level
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,456,* @return half-width of 95% confidence interval for the slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,458,public double getSlopeConfidenceInterval(double alpha)
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,459,throws MathException {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,460,if (alpha >= 1 || alpha <= 0) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,461,throw new IllegalArgumentException();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,463,return getSlopeStdErr()
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,464,* getTDistribution().inverseCummulativeProbability(1d - alpha / 2d);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,468,* Returns the significance level of the slope (equiv) correlation.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,469,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,470,"* Specifically, the returned value is the smallest <code>alpha</code>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,471,* such that the slope confidence interval with significance level
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,472,* equal to <code>alpha</code> does not include <code>0</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,473,"* On regression output, this is often denoted <code>Prob(|t| > 0)</code>"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,474,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,475,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,476,* The validity of this statistic depends on the assumption that the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,477,* observations included in the model are drawn from a
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,478,"* <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,479,"* BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,480,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,481,* If there are fewer that <strong>three</strong> observations in the
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,482,"* model, or if there is no variation in x, this returns"
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,483,* <code>Double.NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,485,* @return significance level for slope/correlation
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,487,public double getSignificance() throws MathException {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,488,return (
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,489,1d
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,490,- getTDistribution().cummulativeProbability(
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,491,Math.abs(getSlope()) / getSlopeStdErr()));
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,494,// ---------------------Private methods-----------------------------------
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,497,"* Returns the intercept of the estimated regression line, given the slope."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,498,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,499,* Will return <code>NaN</code> if slope is <code>NaN</code>.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,501,* @param slope current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,502,* @return the intercept of the regression line
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,504,private double getIntercept(double slope) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,505,return (sumY - slope * sumX) / ((double) n);
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,509,* Returns the sum of squared errors associated with the regression
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,510,"* model, using the slope of the regression line."
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,511,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,512,* Returns NaN if the slope is NaN.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,514,* @param b1 current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,515,* @return sum of squared errors associated with the regression model
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,517,private double getSumSquaredErrors(double b1) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,518,return sumYY - sumXY * sumXY / sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,522,* Computes r-square from the slope.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,523,* <p>
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,524,* will return NaN if slope is Nan.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,526,* @param b1 current slope
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,527,* @return r-square
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,529,private double getRSquare(double b1) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,530,double ssto = getTotalSumSquares();
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,531,return (ssto - getSumSquaredErrors(b1)) / ssto;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,535,* Computes SSR from b1.
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,537,* @param slope regression slope estimate
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,538,* @return sum of squared deviations of predicted y values
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,540,private double getRegressionSumSquares(double slope) {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,541,return slope * slope * sumXX;
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,545,* Uses distribution framework to get a t distribution instance
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,546,* with df = n - 2
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,548,* @return t distribution with df = n - 2
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,550,private TDistribution getTDistribution() {
True,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,551,return DistributionFactory.newInstance().createTDistribution(n - 2);
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,56,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58, @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,61,* @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,86,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,89,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,117,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,120,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,151,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,154,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,170,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,173,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,190,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,193,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,223,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,226,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,270,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,273,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,309,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,312,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,338,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,341,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,357,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,360,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,378,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,381,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,412,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,415,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,462,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,465,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,501,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,504,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,531,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,534,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,57,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,59,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64, @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,67,* @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,66,ublic class TestStatisticImpl implements TestStatistic {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,69,"public class TestStatisticImpl implements TestStatistic, Serializable {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,71,static final long serialVersionUID = 3357444126133491679L;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,86,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,87,"""observed, expected array lengths incorrect"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,91,"throw new IllegalArgumentException(""observed, expected array lengths incorrect"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,90,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,91,"""observed counts must be non-negative,"" +"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,92," expected counts must be postive"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,94,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,95,"""observed counts must be non-negative,"""
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,96,"+ "" expected counts must be postive"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,108,"ublic double chiSquareTest(double[] expected, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,109,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,110,hiSquaredDistribution chiSquaredDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,111,istributionFactory.newInstance().createChiSquareDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,112,(double) expected.length - 1);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,113,eturn 1 - chiSquaredDistribution.cummulativeProbability(
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,114,"hiSquare(expected, observed));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,112,"public double chiSquareTest(double[] expected, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,113,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,114,ChiSquaredDistribution chiSquaredDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,115,DistributionFactory.newInstance().createChiSquareDistribution(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,116,(double) expected.length - 1);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,117,return 1
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,118,- chiSquaredDistribution.cummulativeProbability(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,119,"chiSquare(expected, observed));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,125,"ublic boolean chiSquareTest(double[] expected, double[] observed,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,126,ouble alpha)
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,127,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,130,public boolean chiSquareTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,131,"double[] expected,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,132,"double[] observed,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,133,double alpha)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,134,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,129,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,130,"""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,136,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,137,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,141,"ublic double t(double mu, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,142,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,148,"public double t(double mu, double[] observed)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,149,throws IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,144,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,145,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,151,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,147,"eturn t(StatUtils.mean(observed), mu, StatUtils.variance(observed),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,153,return t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,154,"StatUtils.mean(observed),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,155,"mu,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,156,"StatUtils.variance(observed),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,159,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,168,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,161,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,162,"""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,170,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,171,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,173,"ublic double t(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,182,"public double t(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,175,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,176,"ath.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,177,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,178,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,184,if ((sample1 == null)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,185,|| (sample2 == null
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,186,"|| Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,187,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,180,"eturn t(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,181,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,182,"double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,189,return t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,190,"StatUtils.mean(sample1),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,191,"StatUtils.mean(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,192,"StatUtils.variance(sample1),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,193,"StatUtils.variance(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,194,"(double) sample1.length,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,195,(double) sample2.length);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,193,hrows IllegalArgumentException  {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,194,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,195,"ath.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,196,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,197,"""insufficient data"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,206,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,207,if ((sample1 == null)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,208,|| (sample2 == null
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,209,"|| Math.min(sample1.length, sample2.length) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,210,"throw new IllegalArgumentException(""insufficient data"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,199,"eturn tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,200,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,201,"double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,212,return tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,213,"StatUtils.mean(sample1),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,214,"StatUtils.mean(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,215,"StatUtils.variance(sample1),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,216,"StatUtils.variance(sample2),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,217,"(double) sample1.length,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,218,(double) sample2.length);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,213,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,214,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,215,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,216,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,218,"eturn (tTest(sample1, sample2) < alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,230,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,231,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,232,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,233,"""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,235,"return (tTest(sample1, sample2) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,227,"ublic double tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,228,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,244,"public double tTest(double mu, double[] sample)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,245,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,230,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,231,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,247,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,233,"eturn tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,249,return tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,250,"StatUtils.mean(sample),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,251,"mu,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,252,"StatUtils.variance(sample),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,243,"ublic double t(double mu, DescriptiveStatistics sampleStats)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"public double t(double mu, DescriptiveStatistics sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,246,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,247,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,265,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,249,"eturn t(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,267,return t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,268,"sampleStats.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,269,"mu,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,270,"sampleStats.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,259,"ublic double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,280,public double t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,"DescriptiveStatistics sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,DescriptiveStatistics sampleStats2)
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,261,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,263,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,264,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,284,if ((sampleStats1 == null)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,285,|| (sampleStats2 == null
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,286,"|| Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,287,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,266,"eturn t(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,267,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,268,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,289,return t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,290,"sampleStats1.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,291,"sampleStats2.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,292,"sampleStats1.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,293,"sampleStats2.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,294,"(double) sampleStats1.getN(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,295,(double) sampleStats2.getN());
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,277,"ublic double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,278,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,279,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,280,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,304,public double tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,305,"DescriptiveStatistics sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,306,DescriptiveStatistics sampleStats2)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,307,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,308,if ((sampleStats1 == null)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,309,|| (sampleStats2 == null
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,310,"|| Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,311,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,284,"eturn tTest(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,285,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,286,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,return tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,314,"sampleStats1.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,315,"sampleStats2.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,316,"sampleStats1.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,317,"sampleStats2.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,318,"(double) sampleStats1.getN(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,319,(double) sampleStats2.getN());
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,297,"ublic boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,298,ouble alpha) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,330,public boolean tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,"DescriptiveStatistics sampleStats1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"DescriptiveStatistics sampleStats2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,333,double alpha)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,334,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,300,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,301,"""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,336,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,337,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,"ublic boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,314,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,349,public boolean tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,350,"double mu,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,"DescriptiveStatistics sampleStats,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,352,double alpha)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,353,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,316,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,317,"""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,355,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,356,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,329,hrows IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,368,"throws IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,370,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,334,"eturn tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,372,return tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,373,"sampleStats.getMean(),"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,374,"mu,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,375,"sampleStats.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,350,eturn (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,(v1 * v1) / (n1 * n1 * (n1 - 1d)) +
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,352,v2 * v2) / (n2 * n2 * (n2 - 1d)));
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,391,return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2)))
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,392,/ ((v1 * v1) / (n1 * n1 * (n1 - 1d))
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,393,+ (v2 * v2) / (n2 * n2 * (n2 - 1d)));
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,356, Computes t test statistic for 2-sample t-test.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,358, @param m1 first sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,359, @param m2 second sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,360, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,361, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,362, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,363, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,364, @return t test statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,366,"rivate double t(double m1, double m2, double v1, double v2, double n1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,397,* Computes t test statistic for 2-sample t-test.
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,399,* @param m1 first sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,400,* @param m2 second sample mean
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,401,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,402,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,403,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,404,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,405,* @return t test statistic
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,407,private double t(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,408,"double m1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,409,"double m2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,410,"double v1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,411,"double v2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,412,"double n1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,395,"rivate double tTest(double m1, double m2, double v1, double v2, double n1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,396,ouble n2) {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,441,private double tTest(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,442,"double m1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,443,"double m2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,444,"double v1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,445,"double v2,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,446,"double n1,"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,447,double n2)
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,448,throws MathException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,398,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,399,istributionFactory.newInstance().createTDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,400,"df(v1, v2, n1, n2));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,401,"eturn 1.0 - tDistribution.cummulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,450,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,451,DistributionFactory.newInstance().createTDistribution(
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,452,"df(v1, v2, n1, n2));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,453,"return 1.0 - tDistribution.cummulativeProbability(-t, t);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,413,"rivate double tTest(double m, double mu, double v, double n) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,414,"ouble t = Math.abs(t(m, mu, v, n));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,415,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,416,istributionFactory.newInstance().createTDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,417,n - 1);
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,465,"private double tTest(double m, double mu, double v, double n)"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,466,throws MathException {
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,467,"double t = Math.abs(t(m, mu, v, n));"
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,468,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,469,DistributionFactory.newInstance().createTDistribution(n - 1);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,56,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,59, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,61,* @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,77," = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,79,b =
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,80,DistributionFactory.newInstance().createBinomialDistribution(
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,81,"10,"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,82,0.70);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,152,"rivate void testProbability(int x, double expected){"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,153,ouble actual = b.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,154,"ssertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,157,"rivate void testValue(int expected, double p){"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,158,nt actual = b.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,159,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,160,ssertTrue(b.cummulativeProbability(actual) <= p);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,161,ssertTrue(b.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,157,"private void testProbability(int x, double expected) {"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,158,try {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,159,double actual = b.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,160,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,161,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,162,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,163,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,168,"private void testValue(int expected, double p) {"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,169,try {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,170,int actual = b.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,171,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,172,assertTrue(b.cummulativeProbability(actual) <= p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,173,assertTrue(b.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,174,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,175,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,176,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,57,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,60, @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,62,* @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,122,ouble actual = chiSquare.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,123,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,124,try {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,125,double actual = chiSquare.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,126,"assertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,127,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,128,e.printStackTrace();
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,127,ouble actual = chiSquare.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,128,"ssertEquals(""value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,134,try {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,135,double actual = chiSquare.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,136,"assertEquals(""value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,137,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,138,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,56,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,61, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,62,* @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,79,xp = DistributionFactory.newInstance().createExponentialDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,80,exp =
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,81,DistributionFactory.newInstance().createExponentialDistribution(
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,82,5.0);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,195,"ouble actual = exp.cummulativeProbability(0.25, 0.75);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,196,"ssertEquals(0.0905214, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,199,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,200,ouble actual = exp.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,201,"estUtils.assertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,204,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,205,ouble actual = exp.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,206,"estUtils.assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,198,try {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,199,"double actual = exp.cummulativeProbability(0.25, 0.75);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,200,"assertEquals(0.0905214, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,201,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,202,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,203,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,208,"private void testProbability(double x, double expected) {"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,209,try {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,210,double actual = exp.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,211,"TestUtils.assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,212,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,213,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,214,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,218,"private void testValue(double expected, double p) {"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,219,try {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,220,double actual = exp.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,221,"TestUtils.assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,222,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,223,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,224,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,56,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59, @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,61,* @version $Revision: 1.8 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,88,ublic void testLowerTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,public void testLowerTailProbability() {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,"estProbability(1.0 /  6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,91,"estProbability(1.0 /  4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,"estProbability(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,"testProbability(1.0 / 6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,93,"testProbability(1.0 / 4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,94,"testProbability(1.0 / 3.40, .100);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,95,ublic void testUpperTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,97,public void testUpperTailProbability() {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,102,ublic void testLowerTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,public void testLowerTailValues() {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,"estValue(1.0 /  6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,105,"estValue(1.0 /  4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"estValue(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"testValue(1.0 / 6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,107,"testValue(1.0 / 4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,108,"testValue(1.0 / 3.40, .100);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,109,ublic void testUpperTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,111,public void testUpperTailValues() {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,116,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,117,ouble actual = f.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,"ssertEquals(""probability for "" + x, expected, actual, 1e-3);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,"private void testProbability(double x, double expected) {"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,119,try {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,120,double actual = f.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,121,"assertEquals(""probability for "" + x, expected, actual, 1e-3);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,122,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,123,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,124,e.printStackTrace();
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,121,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,122,ouble actual = f.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,123,"ssertEquals(""value for "" + p, expected, actual, 1e-2);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,128,"private void testValue(double expected, double p) {"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,129,try {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,130,double actual = f.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,131,"assertEquals(""value for "" + p, expected, actual, 1e-2);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,132,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,133,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,134,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,57,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60, @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,62,* @version $Revision: 1.11 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,63,ublic void testProbabilities(){
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,65,public void testProbabilities() {
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,66,"estProbability( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,"testProbability(0.504, 4.0, 1.0, .0018);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,"estProbability( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,70,"testProbability(5.000, 2.0, 2.0, .7127);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,71,ublic void testValues(){
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,public void testValues() {
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"estValue( 0.504, 4.0, 1.0, .0018);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"testValue(0.504, 4.0, 1.0, .0018);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"estValue( 5.000, 2.0, 2.0, .7127);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,77,"testValue(5.000, 2.0, 2.0, .7127);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,78,"rivate void testProbability(double x, double a, double b, double expected){"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,79,"ouble actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,80,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,80,private void testProbability(
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,81,"double x,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,82,"double a,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,83,"double b,"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,84,double expected) {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,85,try {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,86,double actual =
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,87,DistributionFactory
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,88,.newInstance()
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,89,".createGammaDistribution(a, b)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,90,.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,91,"assertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,92,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,93,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,94,e.printStackTrace();
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,83,"rivate void testValue(double expected, double a, double b, double p){"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,84,"ouble actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,85,"ssertEquals(""critical value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,98,"private void testValue(double expected, double a, double b, double p) {"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,99,try {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,100,double actual =
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,101,DistributionFactory
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,102,.newInstance()
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,103,".createGammaDistribution(a, b)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,104,.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,105,"assertEquals(""critical value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,106,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,107,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,108,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,57,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,60, @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,78," = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,80,h =
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,81,DistributionFactory.newInstance().createHypergeometricDistribution(
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,82,"10,"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,83,"5,"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,84,5);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"rivate void testProbability(int x, double expected){"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,ouble actual = h.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"ssertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,"private void testProbability(int x, double expected) {"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,try {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,161,double actual = h.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,163,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,164,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,165,e.printStackTrace();
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"rivate void testValue(int expected, double p){"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,nt actual = h.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,161,ssertTrue(h.cummulativeProbability(actual) <= p);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,ssertTrue(h.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,169,"private void testValue(int expected, double p) {"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,try {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,171,int actual = h.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,172,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,173,assertTrue(h.cummulativeProbability(actual) <= p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,174,assertTrue(h.cummulativeProbability(actual + 1) >= p);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,175,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,176,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,177,e.printStackTrace();
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,56,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,59, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,61,* @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,168,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,169,ouble actual = t.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,170,"ssertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,170,"private void testProbability(double x, double expected) {"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,171,try {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,172,double actual = t.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,173,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,174,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,175,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,176,e.printStackTrace();
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,173,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,174,ouble actual = t.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,175,"ssertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,180,"private void testValue(double expected, double p) {"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,181,try {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,182,double actual = t.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,183,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,184,} catch (MathException e) {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,185,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,186,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,58,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,64, @version $Revision: 1.9 $ $Date: 2003/11/18 15:07:12 $
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,66,* @version $Revision: 1.10 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,74,"rivate double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,75,"888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,76,"449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,77,"778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,78,"557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,79,"0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,80,"998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,81,"668.4,669.1},{449.2,448.9},{0.2,0.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,76,"private double[][] data = { { 0.1, 0.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,77,"338.8, 337.4 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,78,"118.1, 118.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,79,"888.0, 884.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,80,"9.2, 10.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,81,"228.1, 226.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,82,"668.5, 666.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,83,"998.5, 996.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,84,"449.1, 448.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,85,"778.9, 777.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,86,"559.2, 558.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,87,"0.3, 0.4 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,88,"0.1, 0.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,89,"778.1, 775.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,90,"668.8, 666.9 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,91,"339.3, 338.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,92,"448.9, 447.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,93,"10.8, 11.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,94,"557.7, 556.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,95,"228.3, 228.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,96,"998.0, 995.8 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,97,"888.8, 887.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,98,"119.6, 120.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,99,"0.3, 0.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,100,"0.6, 0.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,101,"557.6, 556.8 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,102,"339.3, 339.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,103,"888.0, 887.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,104,"998.5, 999.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,105,"778.9, 779.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,106,"10.2, 11.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,107,"117.6, 118.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,108,"228.9, 229.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,109,"668.4, 669.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,110,"449.2, 448.9 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,111,"0.2, 0.5 }"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,87,"rivate double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,88,"90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,89,"70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,90,"52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,118,"private double[][] corrData = { { 101.0, 99.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,119,"100.1, 99.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,120,"100.0, 100.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,121,"90.6, 111.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,122,"86.5, 122.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,123,"89.7, 117.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,124,"90.6, 121.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,125,"82.8, 136.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,126,"70.1, 154.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,127,"65.4, 153.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,128,"61.3, 158.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,129,"62.5, 140.6 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,130,"63.6, 136.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,131,"52.6, 168.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,132,"59.7, 154.3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,133,"59.5, 149.0 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,134,"61.3, 165.5 }"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,96,"rivate double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,97,"35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,141,"private double[][] infData = { { 15.6, 5.2 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,142,"26.8, 6.1 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,143,"37.8, 8.7 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,144,"36.4, 8.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,145,"35.5, 8.8 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,146,"18.6, 4.9 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,147,"15.3, 4.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,148,"7.9, 2.5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,149,"0.0, 1.1 }"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,102,"rivate double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,155,"private double[][] infData2 = { { 1, 3 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,156,"2, 5 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,157,"3, 7 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,158,"4, 14 }, {"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,159,"5, 11 }"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,108,ublic void setUp() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,166,public void setUp() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,118,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,119,or (int i = 0; i < data.length; i++) {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,120,"egression.addData(data[i][1],data[i][0]);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,122,"ssertEquals(""slope"",1.00211681802045,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,123,"egression.getSlope(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,124,"ssertEquals(""slope std err"",0.429796848199937E-03,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,125,"egression.getSlopeStdErr(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,126,"ssertEquals(""number of observations"",36,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,127,"ssertEquals(""intercept"", -0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,128,"egression.getIntercept(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,129,"ssertEquals(""std err intercept"", 0.232818234301152,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,130,"egression.getInterceptStdErr(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,131,"ssertEquals(""r-square"",0.999993745883712,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,132,"egression.getRSquare(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,133,"ssertEquals(""SSR"",4255954.13232369,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,134,"egression.getRegressionSumSquares(),10E-9);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,135,"ssertEquals(""MSE"",0.782864662630069,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,136,"egression.getMeanSquareError(),10E-10);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,137,"ssertEquals(""SSE"",26.6173985294224,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,138,"egression.getSumSquaredErrors(),10E-9);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,139,"ssertEquals(""predict(0)"",-0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,140,"egression.predict(0),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,141,"ssertEquals(""predict(1)"",1.00211681802045-0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,142,"egression.predict(1),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,176,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,177,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,178,"regression.addData(data[i][1], data[i][0]);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,180,"assertEquals(""slope"", 1.00211681802045, regression.getSlope(), 10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,181,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,182,"""slope std err"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,183,"0.429796848199937E-03,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,184,"regression.getSlopeStdErr(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,185,10E-12);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,186,"assertEquals(""number of observations"", 36, regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,187,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,188,"""intercept"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,189,"-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,190,"regression.getIntercept(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,191,10E-12);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,192,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,193,"""std err intercept"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,194,"0.232818234301152,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,195,"regression.getInterceptStdErr(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,196,10E-12);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,197,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,198,"""r-square"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,199,"0.999993745883712,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,200,"regression.getRSquare(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,201,10E-12);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,202,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,203,"""SSR"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,204,"4255954.13232369,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,205,"regression.getRegressionSumSquares(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,206,10E-9);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,207,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,208,"""MSE"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,209,"0.782864662630069,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,210,"regression.getMeanSquareError(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,211,10E-10);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,212,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,213,"""SSE"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,214,"26.6173985294224,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,215,"regression.getSumSquaredErrors(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,216,10E-9);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,217,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,218,"""predict(0)"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,219,"-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,220,"regression.predict(0),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,221,10E-12);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,222,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,223,"""predict(1)"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,224,"1.00211681802045 - 0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,225,"regression.predict(1),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,226,10E-12);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,146,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,147,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,148,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,149,"ssertEquals(""r-square"",.896123,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,150,"egression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,151,"ssertEquals(""r"",-.946638,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,152,"egression.getR(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,230,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,231,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,232,"assertEquals(""number of observations"", 17, regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,233,"assertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,234,"assertEquals(""r"", -.946638, regression.getR(), 10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,159,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,160,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,161,"ssertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,241,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,242,"""intercept not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,243,Double.isNaN(regression.getIntercept()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,244,"assertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,245,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,246,"""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,163,"ssertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,248,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,249,"""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,165,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,166,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,167,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,168,"ssertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,251,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,252,"""MSE not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,253,Double.isNaN(regression.getMeanSquareError()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,254,"assertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,255,"assertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,256,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,257,"""RSS not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,170,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,171,"ssertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,172,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,174,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,175,"egression.addData(1,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,259,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,260,"""SSE not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,261,Double.isNaN(regression.getSumSquaredErrors()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,262,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,263,"""SSTO not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,264,Double.isNaN(regression.getTotalSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,265,"assertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,267,"regression.addData(1, 2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,268,"regression.addData(1, 3);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,178,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,179,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,180,"ssertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,271,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,272,"""intercept not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,273,Double.isNaN(regression.getIntercept()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,274,"assertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,275,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,276,"""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,182,"ssertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,278,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,279,"""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,184,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,185,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,186,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,187,"ssertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,281,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,282,"""MSE not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,283,Double.isNaN(regression.getMeanSquareError()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,284,"assertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,285,"assertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,286,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,287,"""RSS not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,189,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,190,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,289,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,290,"""SSE not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,291,Double.isNaN(regression.getSumSquaredErrors()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,292,"assertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,193,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,295,"assertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,197,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,198,"egression.addData(3,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,299,"regression.addData(1, 2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,300,"regression.addData(3, 3);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,201,"ssertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,202,"ssertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,203,"ssertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,303,"assertTrue(""interceptNaN"", !Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,304,"assertTrue(""slope NaN"", !Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,305,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,306,"""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,205,"ssertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,308,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,309,"""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,207,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,208,"ssertTrue(""r NaN"",!Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,209,"ssertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,210,"ssertTrue(""RSS NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,311,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,312,"""MSE not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,313,Double.isNaN(regression.getMeanSquareError()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,314,"assertTrue(""r NaN"", !Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,315,"assertTrue(""r-square NaN"", !Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,316,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,317,"""RSS NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,212,"ssertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,213,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,214,"ssertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,216,"egression.addData(1,4);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,319,"assertTrue(""SSE NaN"", !Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,320,"assertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,321,"assertTrue(""predict NaN"", !Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,323,"regression.addData(1, 4);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,219,"ssertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,220,"ssertTrue(""slope std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,326,"assertTrue(""MSE NaN"", !Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,327,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,328,"""slope std err NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,222,"ssertTrue(""intercept std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,330,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,331,"""intercept std err NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,227,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,228,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,229,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,230,egression.clear();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,231,"ssertEquals(""number of observations"",0,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,232,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,233,"ssertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,234,egression.addData(data);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,235,"ssertEquals(""number of observations"",53,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,336,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,337,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,338,"assertEquals(""number of observations"", 17, regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,339,regression.clear();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,340,"assertEquals(""number of observations"", 0, regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,341,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,342,"assertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,343,regression.addData(data);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,344,"assertEquals(""number of observations"", 53, regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,239,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,240,egression.addData(infData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,241,"ssertEquals(""slope confidence interval"", 0.0271,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,242,"egression.getSlopeConfidenceInterval(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,243,"ssertEquals(""slope std err"",0.01146,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,244,"egression.getSlopeStdErr(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,246,egression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,247,egression.addData(infData2);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,248,"ssertEquals(""significance"", 0.023331,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,249,"egression.getSignificance(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,251,/FIXME: get a real example to test against with alpha = .01
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,252,"ssertTrue(""tighter means wider"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,253,egression.getSlopeConfidenceInterval() <
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,254,egression.getSlopeConfidenceInterval(0.01));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,256,ry {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,257,ouble x = regression.getSlopeConfidenceInterval(1);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,258,"ail(""expecting IllegalArgumentException for alpha = 1"");"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,259, catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,349,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,350,regression.addData(infData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,352,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,353,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,354,"""slope confidence interval"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,355,"0.0271,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,356,"regression.getSlopeConfidenceInterval(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,357,0.0001);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,358,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,359,"""slope std err"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,360,"0.01146,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,361,"regression.getSlopeStdErr(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,362,0.0001);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,364,regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,365,regression.addData(infData2);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,366,assertEquals(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,367,"""significance"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,368,"0.023331,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,369,"regression.getSignificance(),"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,370,0.0001);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,372,//FIXME: get a real example to test against with alpha = .01
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,373,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,374,"""tighter means wider"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,375,regression.getSlopeConfidenceInterval()
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,376,< regression.getSlopeConfidenceInterval(0.01));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,378,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,379,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,380,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,383,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,384,double x = regression.getSlopeConfidenceInterval(1);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,385,"fail(""expecting IllegalArgumentException for alpha = 1"");"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,386,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,388,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,389,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,390,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,271,"ssertEquals(0.0, regression.getSignificance(), 1.0e-5);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,272,ssertTrue(regression.getSlope() > 0.0);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,402,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,403,"assertEquals(0.0, regression.getSignificance(), 1.0e-5);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,404,assertTrue(regression.getSlope() > 0.0);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,405,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,406,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,407,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,279,"egression.addData(-((double) i) / (n - 1), i);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,415,"regression.addData(- ((double) i) / (n - 1), i);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,417,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,418,"assertEquals(0.0, regression.getSignificance(), 1.0e-5);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,419,assertTrue(regression.getSlope() < 0.0);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,420,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,421,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,422,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,281,"ssertEquals(0.0, regression.getSignificance(), 1.0e-5);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,282,ssertTrue(regression.getSlope() < 0.0);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,292,ssertTrue(0.0 < regression.getSignificance() && regression.getSignificance() < 1.0);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,434,try {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,435,assertTrue(
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,436,0.0 < regression.getSignificance()
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,437,&& regression.getSignificance() < 1.0);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,438,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,439,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,440,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,56,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,63, @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:41 $
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,64,* @version $Revision: 1.9 $ $Date: 2003/11/19 03:22:54 $
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,75,ublic void setUp() {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,75,public void setUp() {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,85,"ouble[] observed = {11,24,69,96};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,86,"ouble[] expected = {8.2,25.2,65.8,100.8};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,87,"ssertEquals(""chi-square statistic"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,88,".39743495,testStatistic.chiSquare(expected,observed),10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,90,ouble[] tooShortObs = {0};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,91,ouble[] tooShortEx = {1};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,92,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,93,"estStatistic.chiSquare(tooShortObs,tooShortEx);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,94,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,95, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,99,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,100,"estStatistic.chiSquareTest(tooShortObs,tooShortEx);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,101,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,102, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,106,"ouble[] unMatchedObs = {0,1,2,3};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,107,"ouble[] unMatchedEx = {1,1,2};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,108,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,109,"estStatistic.chiSquare(unMatchedEx,unMatchedObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,110,"ail(""arrays have different lengths,"" +"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,111," IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,112, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,115,xpected[0] = 0;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,116,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,117,"estStatistic.chiSquareTest(expected, observed, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,118,"ail(""bad expected count, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,119, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,122,** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,123,"ouble[] observed1 = {504, 523, 72, 70, 31};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,124,"ouble[] expected1 = {480, 540, 84, 60, 36};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,125,"ssertEquals(""chi-square test statistic"", 5.81,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,126,"estStatistic.chiSquare(expected1,observed1),10E-2);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,127,"ssertEquals(""chi-square p-value"", 0.21,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,128,"estStatistic.chiSquareTest(expected1, observed1),10E-2);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,129,"ssertTrue(""chi-square test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,130,"estStatistic.chiSquareTest(expected1, observed1, 0.3));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,131,"ssertTrue(""chi-square test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,132,"testStatistic.chiSquareTest(expected1, observed1, 0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,133,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,134,"estStatistic.chiSquareTest(expected1, observed1, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,135,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,136, catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,85,"double[] observed = { 11, 24, 69, 96 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,86,"double[] expected = { 8.2, 25.2, 65.8, 100.8 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,87,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,88,"""chi-square statistic"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,89,"1.39743495,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,90,"testStatistic.chiSquare(expected, observed),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,91,10E-5);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,93,double[] tooShortObs = { 0 };
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,94,double[] tooShortEx = { 1 };
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,95,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,96,"testStatistic.chiSquare(tooShortObs, tooShortEx);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,97,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,98,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,102,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,103,"testStatistic.chiSquareTest(tooShortObs, tooShortEx);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,104,"fail(""arguments too short, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,105,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,107,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,108,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,109,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,112,"double[] unMatchedObs = { 0, 1, 2, 3 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,113,"double[] unMatchedEx = { 1, 1, 2 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,114,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,115,"testStatistic.chiSquare(unMatchedEx, unMatchedObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,116,fail(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,117,"""arrays have different lengths,"""
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,118,"+ "" IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,119,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,122,expected[0] = 0;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,123,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,124,"testStatistic.chiSquareTest(expected, observed, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,125,"fail(""bad expected count, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,126,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,128,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,129,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,130,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,132,/** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,133,"double[] observed1 = { 504, 523, 72, 70, 31 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,134,"double[] expected1 = { 480, 540, 84, 60, 36 };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,136,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,137,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,138,"""chi-square test statistic"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,139,"5.81,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,140,"testStatistic.chiSquare(expected1, observed1),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,141,10E-2);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,142,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,143,"""chi-square p-value"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,144,"0.21,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,145,"testStatistic.chiSquareTest(expected1, observed1),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,146,10E-2);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,147,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,148,"""chi-square test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,149,"testStatistic.chiSquareTest(expected1, observed1, 0.3));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,150,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,151,"""chi-square test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,152,"!testStatistic.chiSquareTest(expected1, observed1, 0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,154,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,155,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,156,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,159,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,160,"testStatistic.chiSquareTest(expected1, observed1, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,161,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,162,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,164,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,165,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,166,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,141,ublic void testT(){
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,142,"ouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,143,"4.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,170,public void testT() {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,171,double[] observed =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,173,"93.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,174,"103.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,175,"95.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,176,"101.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,177,"91.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178,"105.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,"96.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,180,"94.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,181,"101.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,182,"88.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,183,"98.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,184,"94.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,185,"101.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,186,"92.0,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,187,95.0 };
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,146,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,147,ampleStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,148, catch (InstantiationException e5) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,149,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,150,5.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,151, catch (IllegalAccessException e5) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,152,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,153,5.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,155,or (int i = 0; i < observed.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,190,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,191,sampleStats =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,192,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,193,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,194,} catch (InstantiationException e5) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,195,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,196,e5.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,197,} catch (IllegalAccessException e5) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,198,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,199,e5.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,for (int i = 0; i < observed.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,159,"ssertEquals(""t statistic"", -2.82, testStatistic.t(mu, observed),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,205,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,206,"""t statistic"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,207,"-2.82,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,208,"testStatistic.t(mu, observed),"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,161,"ssertEquals(""t statistic"", -2.82, testStatistic.t(mu, sampleStats),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,210,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,211,"""t statistic"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,212,"-2.82,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,213,"testStatistic.t(mu, sampleStats),"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,172,escriptiveStatistics nullStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,173,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,174,ullStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,175, catch (InstantiationException e6) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,176,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,177,6.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178, catch (IllegalAccessException e6) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,180,6.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,182,ry {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,224,DescriptiveStatistics nullStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,225,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,226,nullStats =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,227,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229,} catch (InstantiationException e6) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231,e6.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232,} catch (IllegalAccessException e6) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234,e6.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,236,try {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,189,ouble[] emptyObs = {};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,243,double[] emptyObs = {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,197,escriptiveStatistics emptyStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,198,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,199,mptyStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,200, catch (InstantiationException e4) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,202,4.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,203, catch (IllegalAccessException e4) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,204,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,205,4.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,207,ry {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,252,DescriptiveStatistics emptyStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,253,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,254,emptyStats =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,256,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,257,} catch (InstantiationException e4) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,258,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,e4.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,} catch (IllegalAccessException e4) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,262,e4.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,264,try {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,214,ouble[] tooShortObs = {1.0};
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,271,double[] tooShortObs = { 1.0 };
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,283,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,284,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,285,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,escriptiveStatistics tooShortStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,ooShortStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231, catch (InstantiationException e3) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,3.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234, catch (IllegalAccessException e3) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,235,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,236,3.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,238,ooShortStats.addValue(0d);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,288,DescriptiveStatistics tooShortStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,289,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,290,tooShortStats =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,291,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,292,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,293,} catch (InstantiationException e3) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,294,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,295,e3.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,296,} catch (IllegalAccessException e3) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,297,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,298,e3.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,300,tooShortStats.addValue(0d);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,313,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,314,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,315,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,254,"ouble[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,"d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,319,double[] oneSidedP =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,321,"2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,322,"0d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,323,"6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,324,"6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,325,"3d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,326,"3d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,327,"2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,328,"3d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,329,"-6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,330,"6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,331,"6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,332,"6d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,333,"3d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,334,"0d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,335,"1d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,336,"1d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,337,"0d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,338,"2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,339,"3d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,340,3d };
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,258,escriptiveStatistics oneSidedPStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,neSidedPStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261, catch (InstantiationException e2) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,262,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,263,2.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,264, catch (IllegalAccessException e2) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,265,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,266,2.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,268,or (int i = 0; i < oneSidedP.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,342,DescriptiveStatistics oneSidedPStats = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,343,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,344,oneSidedPStats =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,345,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,346,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,347,} catch (InstantiationException e2) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,348,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,349,e2.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,350,} catch (IllegalAccessException e2) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,351,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,352,e2.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,354,for (int i = 0; i < oneSidedP.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,271,"ssertEquals(""one sample t stat"",3.86,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,272,"estStatistic.t(0d,oneSidedP),0.01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,273,"ssertEquals(""one sample t stat"",3.86,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,274,"estStatistic.t(0d,oneSidedPStats),0.01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,275,"ssertEquals(""one sample p value"",0.00052,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,276,"estStatistic.tTest(0d,oneSidedP)/2d,10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,277,"ssertEquals(""one sample p value"",0.00052,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,278,"estStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,279,"ssertTrue(""one sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,280,"estStatistic.tTest(0d,oneSidedP,0.01));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,281,"ssertTrue(""one sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,282,"estStatistic.tTest(0d,oneSidedPStats,0.01));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,283,"ssertTrue(""one sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,284,"testStatistic.tTest(0d,oneSidedP,0.0001));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,285,"ssertTrue(""one sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,286,"testStatistic.tTest(0d,oneSidedPStats,0.0001));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,287,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,288,"estStatistic.tTest(0d,oneSidedP, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,289,"ail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,358,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,359,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,360,"""one sample t stat"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,361,"3.86,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,362,"testStatistic.t(0d, oneSidedP),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,363,0.01);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,364,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,365,"""one sample t stat"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,366,"3.86,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,367,"testStatistic.t(0d, oneSidedPStats),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,368,0.01);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,369,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,370,"""one sample p value"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,371,"0.00052,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,372,"testStatistic.tTest(0d, oneSidedP) / 2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,373,10E-5);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,374,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,375,"""one sample p value"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,376,"0.00052,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,377,"testStatistic.tTest(0d, oneSidedPStats) / 2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,378,10E-5);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,379,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,380,"""one sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,381,"testStatistic.tTest(0d, oneSidedP, 0.01));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,382,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,383,"""one sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,384,"testStatistic.tTest(0d, oneSidedPStats, 0.01));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,385,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,386,"""one sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,387,"!testStatistic.tTest(0d, oneSidedP, 0.0001));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,388,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,389,"""one sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,390,"!testStatistic.tTest(0d, oneSidedPStats, 0.0001));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,392,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,393,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,394,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,397,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,398,"testStatistic.tTest(0d, oneSidedP, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,399,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,402,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,403,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,404,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,294,"estStatistic.tTest(0d,oneSidedPStats, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,295,"ail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,407,"testStatistic.tTest(0d, oneSidedPStats, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,408,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,411,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,412,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,413,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,301,"ouble[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,302,"ouble[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,417,"double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,418,double[] sample2 =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,419,"{ -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,304,escriptiveStatistics sampleStats1 = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,305,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,306,ampleStats1 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,307, catch (InstantiationException e1) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,308,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,309,1.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,310, catch (IllegalAccessException e1) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,311,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,312,1.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,314,or (int i = 0; i < sample1.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,421,DescriptiveStatistics sampleStats1 = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,422,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,423,sampleStats1 =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,424,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,425,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,426,} catch (InstantiationException e1) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,427,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,428,e1.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,429,} catch (IllegalAccessException e1) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,430,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,431,e1.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,433,for (int i = 0; i < sample1.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,318,escriptiveStatistics sampleStats2 = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,319,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,320,ampleStats2 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,321, catch (InstantiationException e) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,322,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,323,.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,324, catch (IllegalAccessException e) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,325,/ TODO Auto-generated catch block
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,326,.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,328,or (int i = 0; i < sample2.length; i++) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,437,DescriptiveStatistics sampleStats2 = null;
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,438,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,439,sampleStats2 =
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,440,DescriptiveStatistics.newInstance(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,441,StorelessDescriptiveStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,442,} catch (InstantiationException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,443,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,444,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,445,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,446,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,447,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,449,for (int i = 0; i < sample2.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,331,/FIXME: textbook example reported t stat uses pooled variance
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,332,/ should replace with R-verified example
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,333,"ssertEquals(""two sample t stat"",1.634,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,334,"estStatistic.t(sample1, sample2), 0.1);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,335,"ssertEquals(""two sample t stat"",1.634,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,336,"estStatistic.t(sampleStats1, sampleStats2), 0.1);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,337,"/ This test is OK, since book reports non-pooled exact p-value"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,338,"ssertEquals(""two sample p value"",0.059,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,339,"estStatistic.tTest(sample1, sample2)/2d, 10E-3);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,340,"ssertEquals(""two sample p value"",0.059,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,341,"estStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,342,"ssertTrue(""two sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,343,"estStatistic.tTest(sample1, sample2, 0.2));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,344,"ssertTrue(""two sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,345,"estStatistic.tTest(sampleStats1, sampleStats2, 0.2));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,346,"ssertTrue(""two sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,347,"testStatistic.tTest(sample1, sample2,0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,348,"ssertTrue(""two sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,349,"testStatistic.tTest(sampleStats1, sampleStats2,0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,350,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,351,"estStatistic.tTest(sample1, sample2, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,352,"ail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,452,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,453,//FIXME: textbook example reported t stat uses pooled variance
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,454,// should replace with R-verified example
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,455,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,456,"""two sample t stat"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,457,"1.634,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,458,"testStatistic.t(sample1, sample2),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,459,0.1);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,460,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,461,"""two sample t stat"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,462,"1.634,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,463,"testStatistic.t(sampleStats1, sampleStats2),"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,464,0.1);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,465,"// This test is OK, since book reports non-pooled exact p-value"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,466,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,467,"""two sample p value"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,468,"0.059,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,469,"testStatistic.tTest(sample1, sample2) / 2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,470,10E-3);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,471,assertEquals(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,472,"""two sample p value"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,473,"0.059,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,474,"testStatistic.tTest(sampleStats1, sampleStats2) / 2d,"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,475,10E-3);
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,476,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,477,"""two sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,478,"testStatistic.tTest(sample1, sample2, 0.2));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,479,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,480,"""two sample t-test reject"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,481,"testStatistic.tTest(sampleStats1, sampleStats2, 0.2));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,482,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,483,"""two sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,484,"!testStatistic.tTest(sample1, sample2, 0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,485,assertTrue(
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,486,"""two sample t-test accept"","
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,487,"!testStatistic.tTest(sampleStats1, sampleStats2, 0.1));"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,489,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,490,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,491,e.printStackTrace();
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,493,try {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,494,"testStatistic.tTest(sample1, sample2, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,495,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,498,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,499,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,500,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,357,"estStatistic.tTest(sampleStats1, sampleStats2, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,358,"ail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,503,"testStatistic.tTest(sampleStats1, sampleStats2, 95);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,504,"fail(""alpha out of range, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,507,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,508,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,509,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,363,"estStatistic.tTest(sample1, tooShortObs, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,364,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,512,"testStatistic.tTest(sample1, tooShortObs, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,513,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,516,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,517,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,518,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,369,"estStatistic.tTest(sampleStats1, tooShortStats, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,370,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,521,"testStatistic.tTest(sampleStats1, tooShortStats, .01);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,522,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,525,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,526,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,527,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,375,"estStatistic.tTest(sample1, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,376,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,530,"testStatistic.tTest(sample1, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,531,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,534,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,535,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,536,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,381,"estStatistic.tTest(sampleStats1, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,382,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,539,"testStatistic.tTest(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,540,"fail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,543,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,544,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,545,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,387,"estStatistic.t(sample1, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,388,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,548,"testStatistic.t(sample1, tooShortObs);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,549,"fail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,393,"estStatistic.t(sampleStats1, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,394,"ail(""insufficient data, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,554,"testStatistic.t(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,555,"fail(""insufficient data, IllegalArgumentException expected"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,24,mport org.apache.commons.math3.util.ArithmeticUtils;
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,104,"et = innerCumulativeProbability(domain[0], x, 1, populationSize,"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,105,"umberOfSuccesses, sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,103,"ret = innerCumulativeProbability(domain[0], x, 1);"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,200," For this distribution, {@code X}, defined by the given hypergeometric"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,201," distribution parameters, this method returns {@code P(X = x)}."
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,203, @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,204, @param n the population size.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,205, @param m number of successes in the population.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,206, @param k the sample size.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,207, @return PMF for the distribution.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,209,"rivate double probability(int n, int m, int k, int x) {"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,210,"eturn FastMath.exp(ArithmeticUtils.binomialCoefficientLog(m, x) +"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,211,"rithmeticUtils.binomialCoefficientLog(n - m, k - x) -"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,212,"rithmeticUtils.binomialCoefficientLog(n, k));"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,226,f (x < domain[0]) {
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,208,if (x <= domain[0]) {
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,231,"et = innerCumulativeProbability(domain[1], x, -1, populationSize,"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,232,"umberOfSuccesses, sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,213,"ret = innerCumulativeProbability(domain[1], x, -1);"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,249, @param n the population size.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,250, @param m number of successes in the population.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,251, @param k the sample size.
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,254,"rivate double innerCumulativeProbability(int x0, int x1, int dx,"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,255,"nt n, int m, int k) {"
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,256,"ouble ret = probability(n, m, k, x0);"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,232,"private double innerCumulativeProbability(int x0, int x1, int dx) {"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,233,double ret = probability(x0);
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,259,"et += probability(n, m, k, x0);"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,236,ret += probability(x0);

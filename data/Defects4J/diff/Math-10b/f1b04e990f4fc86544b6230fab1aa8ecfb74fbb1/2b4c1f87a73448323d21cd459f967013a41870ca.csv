is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,27," Implements Richard Brent's algorithm (from his book ""Algorithms for"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,27,"* For a function defined on some interval {@code (lo, hi)}, this class"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,28,* finds an approximation {@code x} to the point at which the function
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,29,* attains its minimum.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,30,"* It implements Richard Brent's algorithm (from his book ""Algorithms for"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,29, univariate functions. This implementation is an adaptation partly
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,30," based on the Python code from SciPy (module ""optimize.py"" v0.5)."
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,31," If the function is defined on some interval {@code (lo, hi)}, then"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,32, this method finds an approximation {@code x} to the point at which
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,33, the function attains its minimum.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,32,* univariate functions.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,33,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,34,"* This code is an adaptation, partly based on the Python code from SciPy"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,35,"* (module ""optimize.py"" v0.5); the original algorithm is also modified"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,36,* <ul>
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,37,"*  <li>to use an initial guess provided by the user,</li>"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,38,*  <li>to ensure that the best point encountered is the one returned.</li>
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,39,* </ul>
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,150,// Best point encountered so far (which is the initial guess).
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,151,UnivariatePointValuePair best = current;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,235,"best = best(best,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,236,"best(current,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,237,"previous,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,238,"isMinim),"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,239,isMinim);
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,230,"eturn best(current, previous, isMinim);"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,243,return best;
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,267,"eturn best(current, previous, isMinim);"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,280,"return best(best,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,281,"best(current,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,282,"previous,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,283,"isMinim),"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,284,isMinim);
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,281, both {@code null}.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,298,* both {@code null}. When {@code a} and {@code b} have the same function
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,299,"* value, {@code a} is returned."
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,294,eturn a.getValue() < b.getValue() ? a : b;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,312,return a.getValue() <= b.getValue() ? a : b;
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,296,eturn a.getValue() > b.getValue() ? a : b;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,314,return a.getValue() >= b.getValue() ? a : b;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,188,* Contrived example showing that prior to the resolution of MATH-855
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,189,"* (second revision), the algorithm would not return the best point if"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,190,* it happened to be the initial guess.
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,192,@Test
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,193,public void testKeepInitIfBest() {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,194,final double minSin = 3 * Math.PI / 2;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,195,final double offset = 1e-8;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,196,final double delta = 1e-7;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,197,final UnivariateFunction f1 = new Sin();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,198,"final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,199,"new double[] { 0, -1, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,200,"final UnivariateFunction f = FunctionUtils.add(f1, f2);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,201,// A slightly less stringent tolerance would make the test pass
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,202,// even with the previous implementation.
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,203,final double relTol = 1e-8;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,204,"final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,205,final double init = minSin + 1.5 * offset;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,206,final UnivariatePointValuePair result
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,207,"= optimizer.optimize(200, f, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,208,"minSin - 6.789 * delta,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,209,"minSin + 9.876 * delta,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,210,init);
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,211,final int numEval = optimizer.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,213,final double sol = result.getPoint();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,214,final double expected = init;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,216,"//         System.out.println(""numEval="" + numEval);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,217,"//         System.out.println(""min="" + init + "" f="" + f.value(init));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,218,"//         System.out.println(""sol="" + sol + "" f="" + f.value(sol));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,219,"//         System.out.println(""exp="" + expected + "" f="" + f.value(expected));"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,221,"Assert.assertTrue(""Best point not reported"", f.value(sol) <= f.value(expected));"
False,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,203," optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,240,"= optimizer.optimize(200, f, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,241,"minSin - 6.789 * delta,"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,242,minSin + 9.876 * delta);

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,19,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,22,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,23,import java.util.Arrays;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,26,"* Implements the <a href=""http://en.wikipedia.org/wiki/Local_regression"">"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,27,"* Local Regression Algorithm</a> (also Loess, Lowess) for interpolation of"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,28,* real univariate functions.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,29,* <p/>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,30,"* For reference, see"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,31,"* <a href=""http://www.math.tau.ac.il/~yekutiel/MA seminar/Cleveland 1979.pdf"">"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,32,* William S. Cleveland - Robust Locally Weighted Regression and Smoothing
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,33,* Scatterplots</a>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,34,* <p/>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,35,* This class implements both the loess method and serves as an interpolation
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,36,"* adapter to it, allowing to build a spline on the obtained loess fit."
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,39,* @since 2.0
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,41,public class LoessInterpolator
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,42,"implements UnivariateRealInterpolator, Serializable {"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,44,/** serializable version identifier. */
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,45,private static final long serialVersionUID = 5204927143605193821L;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,48,* Default value of the bandwidth parameter.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,50,public static final double DEFAULT_BANDWIDTH = 0.3;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,52,* Default value of the number of robustness iterations.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,54,public static final int DEFAULT_ROBUSTNESS_ITERS = 2;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,57,* The bandwidth parameter: when computing the loess fit at
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,58,"* a particular point, this fraction of source points closest"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,59,* to the current point is taken into account for computing
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,60,* a least-squares regression.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,61,* <p/>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,62,* A sensible value is usually 0.25 to 0.5.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,64,private final double bandwidth;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,67,* The number of robustness iterations parameter: this many
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,68,* robustness iterations are done.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,69,* <p/>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,70,* A sensible value is usually 0 (just the initial fit without any
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,71,* robustness iterations) to 4.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,73,private final int robustnessIters;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,76,* Constructs a new {@link LoessInterpolator}
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,77,* with a bandwidth of {@link #DEFAULT_BANDWIDTH} and
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,78,* {@link #DEFAULT_ROBUSTNESS_ITERS} robustness iterations.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,79,"* See {@link #LoessInterpolator(double, int)} for an explanation of"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,80,* the parameters.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,82,public LoessInterpolator() {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,83,this.bandwidth = DEFAULT_BANDWIDTH;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,84,this.robustnessIters = DEFAULT_ROBUSTNESS_ITERS;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,88,* Constructs a new {@link LoessInterpolator}
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,89,* with given bandwidth and number of robustness iterations.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,91,* @param bandwidth  when computing the loess fit at
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,92,"* a particular point, this fraction of source points closest"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,93,* to the current point is taken into account for computing
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,94,* a least-squares regression.</br>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,95,"* A sensible value is usually 0.25 to 0.5, the default value is"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,96,* {@link #DEFAULT_BANDWIDTH}.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,97,* @param robustnessIters This many robustness iterations are done.</br>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,98,* A sensible value is usually 0 (just the initial fit without any
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,99,"* robustness iterations) to 4, the default value is"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,100,* {@link #DEFAULT_ROBUSTNESS_ITERS}.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,101,"* @throws MathException if bandwidth does not lie in the interval [0,1]"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,102,* or if robustnessIters is negative.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,104,"public LoessInterpolator(double bandwidth, int robustnessIters) throws MathException {"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,105,if (bandwidth < 0 || bandwidth > 1) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,106,"throw new MathException(""bandwidth must be in the interval [0,1], but got {0}"","
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,107,bandwidth);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,109,this.bandwidth = bandwidth;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,110,if (robustnessIters < 0) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,111,"throw new MathException(""the number of robustness iterations must "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,112,"""be non-negative, but got {0}"","
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,113,robustnessIters);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,115,this.robustnessIters = robustnessIters;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,119,* Compute an interpolating function by performing a loess fit
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,120,* on the data at the original abscissae and then building a cubic spline
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,121,* with a
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,122,* {@link org.apache.commons.math.analysis.interpolation.SplineInterpolator}
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,123,* on the resulting fit.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,125,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,126,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,127,* @return A cubic spline built upon a loess fit to the data at the original abscissae
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,128,* @throws MathException  if some of the following conditions are false:
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,129,* <ul>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,130,* <li> Arguments and values are of the same size that is greater than zero</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,131,* <li> The arguments are in a strictly increasing order</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,132,* <li> All arguments and values are finite real numbers</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,133,* </ul>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,135,public final UnivariateRealFunction interpolate(
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,136,"final double[] xval, final double[] yval) throws MathException {"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,137,"return new SplineInterpolator().interpolate(xval, smooth(xval, yval));"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,141,* Compute a loess fit on the data at the original abscissae.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,143,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,144,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,145,* @return values of the loess fit at corresponding original abscissae
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,146,* @throws MathException if some of the following conditions are false:
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,147,* <ul>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,148,* <li> Arguments and values are of the same size that is greater than zero</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,149,* <li> The arguments are in a strictly increasing order</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,150,* <li> All arguments and values are finite real numbers</li>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,151,* </ul>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,153,"public final double[] smooth(final double[] xval, final double[] yval)"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,154,throws MathException {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,155,if (xval.length != yval.length) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,156,throw new MathException(
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,157,"""Loess expects the abscissa and ordinate arrays "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,158,"""to be of the same size, "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,159,"""but got {0} abscisssae and {1} ordinatae"","
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,160,"xval.length, yval.length);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,163,final int n = xval.length;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,165,if (n == 0) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,166,"throw new MathException(""Loess expects at least 1 point"");"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,169,"checkAllFiniteReal(xval, true);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,170,"checkAllFiniteReal(yval, false);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,172,checkStrictlyIncreasing(xval);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,174,if (n == 1) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,175,return new double[]{yval[0]};
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,178,if (n == 2) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,179,"return new double[]{yval[0], yval[1]};"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,182,int bandwidthInPoints = (int) (bandwidth * n);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,184,if (bandwidthInPoints < 2) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,185,throw new MathException(
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,186,"""the bandwidth must be large enough to "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,187,"""accomodate at least 2 points. There are {0} "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,188,""" data points, and bandwidth must be at least {1} "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,189,""" but it is only {2}"","
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,190,"n, 2.0 / n, bandwidth);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,193,final double[] res = new double[n];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,195,final double[] residuals = new double[n];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,196,final double[] sortedResiduals = new double[n];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,198,final double[] robustnessWeights = new double[n];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,200,// Do an initial fit and 'robustnessIters' robustness iterations.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,201,// This is equivalent to doing 'robustnessIters+1' robustness iterations
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,202,// starting with all robustness weights set to 1.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,203,"Arrays.fill(robustnessWeights, 1);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,205,for (int iter = 0; iter <= robustnessIters; ++iter) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,206,"final int[] bandwidthInterval = {0, bandwidthInPoints - 1};"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,207,"// At each x, compute a local weighted linear regression"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,208,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,209,final double x = xval[i];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,211,// Find out the interval of source points on which
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,212,// a regression is to be made.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,213,if (i > 0) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,214,"updateBandwidthInterval(xval, i, bandwidthInterval);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,217,final int ileft = bandwidthInterval[0];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,218,final int iright = bandwidthInterval[1];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,220,// Compute the point of the bandwidth interval that is
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,221,// farthest from x
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,222,final int edge;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,223,if (xval[i] - xval[ileft] > xval[iright] - xval[i]) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,224,edge = ileft;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,225,} else {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,226,edge = iright;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,229,// Compute a least-squares linear fit weighted by
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,230,// the product of robustness weights and the tricube
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,231,// weight function.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,232,// See http://en.wikipedia.org/wiki/Linear_regression
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,233,"// (section ""Univariate linear case"")"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,234,// and http://en.wikipedia.org/wiki/Weighted_least_squares
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,235,"// (section ""Weighted least squares"")"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,236,double sumWeights = 0;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,237,"double sumX = 0, sumXSquared = 0, sumY = 0, sumXY = 0;"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,238,double denom = Math.abs(1.0 / (xval[edge] - x));
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,239,for (int k = ileft; k <= iright; ++k) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,240,final double xk = xval[k];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,241,final double yk = yval[k];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,242,double dist;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,243,if (k < i) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,244,dist = (x - xk);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,245,} else {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,246,dist = (xk - x);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,248,final double w = tricube(dist * denom) * robustnessWeights[k];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,249,final double xkw = xk * w;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,250,sumWeights += w;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,251,sumX += xkw;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,252,sumXSquared += xk * xkw;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,253,sumY += yk * w;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,254,sumXY += yk * xkw;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,257,final double meanX = sumX / sumWeights;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,258,final double meanY = sumY / sumWeights;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,259,final double meanXY = sumXY / sumWeights;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,260,final double meanXSquared = sumXSquared / sumWeights;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,262,final double beta;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,263,if (meanXSquared == meanX * meanX) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,264,beta = 0;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,265,} else {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,266,beta = (meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,269,final double alpha = meanY - beta * meanX;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,271,res[i] = beta * x + alpha;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,272,residuals[i] = Math.abs(yval[i] - res[i]);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,275,// No need to recompute the robustness weights at the last
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,276,"// iteration, they won't be needed anymore"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,277,if (iter == robustnessIters) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,278,break;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,281,// Recompute the robustness weights.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,283,// Find the median residual.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,284,"// An arraycopy and a sort are completely tractable here,"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,285,// because the preceding loop is a lot more expensive
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,286,"System.arraycopy(residuals, 0, sortedResiduals, 0, n);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,287,Arrays.sort(sortedResiduals);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,288,final double medianResidual = sortedResiduals[n / 2];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,290,if (medianResidual == 0) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,291,break;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,294,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,295,final double arg = residuals[i] / (6 * medianResidual);
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,296,"robustnessWeights[i] = (arg >= 1) ? 0 : Math.pow(1 - arg * arg, 2);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,300,return res;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,304,* Given an index interval into xval that embraces a certain number of
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,305,"* points closest to xval[i-1], update the interval so that it embraces"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,306,* the same number of points closest to xval[i]
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,308,* @param xval arguments array
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,309,* @param i the index around which the new interval should be computed
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,310,"* @param bandwidthInterval a two-element array {left, right} such that: <p/>"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,311,* <tt>(left==0 or xval[i] - xval[left-1] > xval[right] - xval[i])</tt>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,312,* <p/> and also <p/>
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,313,* <tt>(right==xval.length-1 or xval[right+1] - xval[i] > xval[i] - xval[left])</tt>.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,314,* The array will be updated.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,316,"private static void updateBandwidthInterval(final double[] xval, final int i,"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,317,final int[] bandwidthInterval) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,318,final int left = bandwidthInterval[0];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,319,final int right = bandwidthInterval[1];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,321,// The right edge should be adjusted if the next point to the right
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,322,// is closer to xval[i] than the leftmost point of the current interval
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,323,if (right < xval.length - 1 &&
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,324,xval[right+1] - xval[i] < xval[i] - xval[left]) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,325,bandwidthInterval[0]++;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,326,bandwidthInterval[1]++;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,331,* Compute the
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,332,"* <a href=""http://en.wikipedia.org/wiki/Local_regression#Weight_function"">tricube</a>"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,333,* weight function
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,335,* @param x the argument
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,336,* @return (1-|x|^3)^3
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,338,private static double tricube(final double x) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,339,final double tmp = 1 - x * x * x;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,340,return tmp * tmp * tmp;
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,344,* Check that all elements of an array are finite real numbers.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,346,* @param values the values array
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,347,"* @param isAbscissae if true, elements are abscissae otherwise they are ordinatae"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,348,* @throws MathException if one of the values is not
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,349,*         a finite real number
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,351,"private static void checkAllFiniteReal(final double[] values, final boolean isAbscissae)"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,352,throws MathException {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,353,for (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,354,final double x = values[i];
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,355,if (Double.isInfinite(x) || Double.isNaN(x)) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,356,final String pattern = isAbscissae ?
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,357,"""all abscissae must be finite real numbers, but {0}-th is {1}"" :"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,358,"""all ordinatae must be finite real numbers, but {0}-th is {1}"";"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,359,"throw new MathException(pattern, i, x);"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,365,* Check that elements of the abscissae array are in a strictly
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,366,* increasing order.
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,368,* @param xval the abscissae array
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,369,* @throws MathException if the abscissae array
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,370,* is not in a strictly increasing order
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,372,private static void checkStrictlyIncreasing(final double[] xval)
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,373,throws MathException {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,374,for (int i = 0; i < xval.length; ++i) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,375,if (i >= 1 && xval[i - 1] >= xval[i]) {
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,376,throw new MathException(
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,377,"""the abscissae array must be sorted in a strictly "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,378,"""increasing order, but the {0}-th element is {1} "" +"
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,379,"""whereas {2}-th is {3}"","
True,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,380,"i - 1, xval[i - 1], i, xval[i]);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,21,import static org.junit.Assert.fail;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,23,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,24,import org.junit.Test;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,27,* Test of the LoessInterpolator class.
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,29,public class LoessInterpolatorTest {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,31,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,32,public void testOnOnePoint() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,33,double[] xval = {0.5};
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,34,double[] yval = {0.7};
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,35,"double[] res = new LoessInterpolator().smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,36,"assertEquals(1, res.length);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,37,"assertEquals(0.7, res[0], 0.0);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,40,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,41,public void testOnTwoPoints() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,42,"double[] xval = {0.5, 0.6};"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,43,"double[] yval = {0.7, 0.8};"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,44,"double[] res = new LoessInterpolator().smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,45,"assertEquals(2, res.length);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,46,"assertEquals(0.7, res[0], 0.0);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,47,"assertEquals(0.8, res[1], 0.0);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,50,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,51,public void testOnStraightLine() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,52,"double[] xval = {1,2,3,4,5};"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,53,"double[] yval = {2,4,6,8,10};"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,54,"LoessInterpolator li = new LoessInterpolator(0.6, 2);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,55,"double[] res = li.smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,56,"assertEquals(5, res.length);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,57,for(int i = 0; i < 5; ++i) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,58,"assertEquals(yval[i], res[i], 1e-8);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,62,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,63,public void testOnDistortedSine() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,64,int numPoints = 100;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,65,double[] xval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,66,double[] yval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,67,double xnoise = 0.1;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,68,double ynoise = 0.2;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,70,"generateSineData(xval, yval, xnoise, ynoise);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,72,"LoessInterpolator li = new LoessInterpolator(0.3, 4);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,74,"double[] res = li.smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,76,// Check that the resulting curve differs from
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,77,"// the ""real"" sine less than the jittered one"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,79,double noisyResidualSum = 0;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,80,double fitResidualSum = 0;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,82,System.out.println();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,83,for(int i = 0; i < numPoints; ++i) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,84,double expected = Math.sin(xval[i]);
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,85,double noisy = yval[i];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,86,double fit = res[i];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,88,"noisyResidualSum += Math.pow(noisy - expected, 2);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,89,"fitResidualSum += Math.pow(fit - expected, 2);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,92,assertTrue(fitResidualSum < noisyResidualSum);
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,95,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,96,public void testIncreasingBandwidthIncreasesSmoothness() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,97,int numPoints = 100;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,98,double[] xval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,99,double[] yval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,100,double xnoise = 0.1;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,101,double ynoise = 0.1;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,103,"generateSineData(xval, yval, xnoise, ynoise);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,105,// Check that variance decreases as bandwidth increases
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,107,"double[] bandwidths = {0.1, 0.5, 1.0};"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,108,double[] variances = new double[bandwidths.length];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,109,for (int i = 0; i < bandwidths.length; i++) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,110,double bw = bandwidths[i];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,112,"LoessInterpolator li = new LoessInterpolator(bw, 4);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,114,"double[] res = li.smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,116,for (int j = 1; j < res.length; ++j) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,117,"variances[i] += Math.pow(res[j] - res[j-1], 2);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,121,for(int i = 1; i < variances.length; ++i) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,122,assertTrue(variances[i] < variances[i-1]);
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,126,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,127,public void testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers() throws MathException {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,128,int numPoints = 100;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,129,double[] xval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,130,double[] yval = new double[numPoints];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,131,double xnoise = 0.1;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,132,double ynoise = 0.1;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,134,"generateSineData(xval, yval, xnoise, ynoise);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,136,// Introduce a couple of outliers
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,137,yval[numPoints/3] *= 100;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,138,yval[2 * numPoints/3] *= -100;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,140,// Check that variance decreases as the number of robustness
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,141,// iterations increases
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,143,double[] variances = new double[4];
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,144,for (int i = 0; i < 4; i++) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,145,"LoessInterpolator li = new LoessInterpolator(0.3, i);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,147,"double[] res = li.smooth(xval, yval);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,149,for (int j = 1; j < res.length; ++j) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,150,variances[i] += Math.abs(res[j] - res[j-1]);
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,154,for(int i = 1; i < variances.length; ++i) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,155,assertTrue(variances[i] < variances[i-1]);
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,159,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,160,public void testUnequalSizeArguments() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,161,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,162,"new LoessInterpolator().smooth(new double[] {1,2,3}, new double[] {1,2,3,4});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,163,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,164,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,165,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,169,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,170,public void testEmptyData() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,171,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,172,"new LoessInterpolator().smooth(new double[] {}, new double[] {});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,173,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,174,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,175,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,179,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,180,public void testNonStrictlyIncreasing() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,181,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,182,"new LoessInterpolator().smooth(new double[] {4,3,1,2}, new double[] {3,4,5,6});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,183,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,184,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,185,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,187,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,188,"new LoessInterpolator().smooth(new double[] {1,2,2,3}, new double[] {3,4,5,6});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,189,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,190,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,191,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,195,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,196,public void testNotAllFiniteReal() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,197,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,198,"new LoessInterpolator().smooth(new double[] {1,2,Double.NaN}, new double[] {3,4,5});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,199,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,200,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,201,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,203,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,204,"new LoessInterpolator().smooth(new double[] {1,2,Double.POSITIVE_INFINITY}, new double[] {3,4,5});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,205,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,206,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,207,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,209,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,210,"new LoessInterpolator().smooth(new double[] {1,2,Double.NEGATIVE_INFINITY}, new double[] {3,4,5});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,211,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,212,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,213,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,215,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,216,"new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NaN});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,217,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,218,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,219,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,221,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,222,"new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.POSITIVE_INFINITY});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,223,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,224,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,225,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,227,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,228,"new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NEGATIVE_INFINITY});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,229,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,230,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,231,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,235,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,236,public void testInsufficientBandwidth() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,237,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,238,"LoessInterpolator li = new LoessInterpolator(0.1, 3);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,239,"li.smooth(new double[] {1,2,3,4,5,6,7,8,9,10,11,12}, new double[] {1,2,3,4,5,6,7,8,9,10,11,12});"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,240,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,241,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,242,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,246,@Test
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,247,public void testCompletelyIncorrectBandwidth() {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,248,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,249,"new LoessInterpolator(-0.2, 3);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,250,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,251,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,252,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,254,try {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,255,"new LoessInterpolator(1.1, 3);"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,256,fail();
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,257,} catch(MathException e) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,258,// Expected
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,262,"private void generateSineData(double[] xval, double[] yval, double xnoise, double ynoise) {"
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,263,double dx = 2 * Math.PI / xval.length;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,264,double x = 0;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,265,for(int i = 0; i < xval.length; ++i) {
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,266,xval[i] = x;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,267,yval[i] = Math.sin(x) + (2 * Math.random() - 1) * ynoise;
True,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,268,x += dx * (1 + (2 * Math.random() - 1) * xnoise);

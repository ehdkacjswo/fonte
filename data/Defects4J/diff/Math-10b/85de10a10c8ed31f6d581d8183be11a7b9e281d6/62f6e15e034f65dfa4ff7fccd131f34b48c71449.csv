is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1100,unction[1] = -1.0 / FastMath.sqrt(1 - x * x);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1101,or (int i = 2; i <= order; ++i) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1102,/ TODO compute higher order derivatives
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1103,unction[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1100,// the nth order derivative of acos has the form:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1101,// dn(acos(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1102,// where P_n(x) is a degree n-1 polynomial with same parity as n-1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1103,"// P_1(x) = -1, P_2(x) = -x, P_3(x) = -2x^2 - 1 ..."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1104,// the general recurrence relation for P_n is:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1105,// P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1106,"// as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1107,final double[] p = new double[order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1108,p[0] = -1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1109,final double x2    = x * x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1110,final double f     = 1.0 / (1 - x2);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1111,double coeff = FastMath.sqrt(f);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1112,function[1] = coeff * p[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1113,for (int n = 2; n <= order; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1115,// update and evaluate polynomial P_n(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1116,double v = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1117,p[n - 1] = (n - 1) * p[n - 2];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1118,for (int k = n - 1; k >= 0; k -= 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1119,v = v * x2 + p[k];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1120,if (k > 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1121,p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1122,} else if (k == 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1123,p[0] = p[1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1126,if ((n & 0x1) == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1127,v *= x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1130,coeff *= f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1131,function[n] = coeff * v;
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1128,unction[1] = 1.0 / FastMath.sqrt(1 - x * x);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1129,or (int i = 2; i <= order; ++i) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1130,/ TODO compute higher order derivatives
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1131,unction[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1157,// the nth order derivative of asin has the form:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1158,// dn(asin(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1159,// where P_n(x) is a degree n-1 polynomial with same parity as n-1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1160,"// P_1(x) = 1, P_2(x) = x, P_3(x) = 2x^2 + 1 ..."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1161,// the general recurrence relation for P_n is:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1162,// P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1163,"// as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1164,final double[] p = new double[order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1165,p[0] = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1166,final double x2    = x * x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1167,final double f     = 1.0 / (1 - x2);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1168,double coeff = FastMath.sqrt(f);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1169,function[1] = coeff * p[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1170,for (int n = 2; n <= order; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1172,// update and evaluate polynomial P_n(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1173,double v = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1174,p[n - 1] = (n - 1) * p[n - 2];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1175,for (int k = n - 1; k >= 0; k -= 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1176,v = v * x2 + p[k];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1177,if (k > 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1178,p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1179,} else if (k == 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1180,p[0] = p[1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1183,if ((n & 0x1) == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1184,v *= x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1187,coeff *= f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1188,function[n] = coeff * v;
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1156,unction[1] = 1.0 / (1 + x * x);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1157,or (int i = 2; i <= order; ++i) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1158,/ TODO compute higher order derivatives
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1159,unction[i] = Double.NaN;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1214,// the nth order derivative of atan has the form:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1215,// dn(atan(x)/dxn = Q_n(x) / (1 + x^2)^n
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1216,// where Q_n(x) is a degree n-1 polynomial with same parity as n-1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1217,"// Q_1(x) = 1, Q_2(x) = -2x, Q_3(x) = 6x^2 - 2 ..."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1218,// the general recurrence relation for Q_n is:
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1219,// Q_n(x) = (1+x^2) Q_(n-1)'(x) - 2(n-1) x Q_(n-1)(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1220,"// as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1221,final double[] q = new double[order];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1222,q[0] = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1223,final double x2    = x * x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1224,final double f     = 1.0 / (1 + x2);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1225,double coeff = f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1226,function[1] = coeff * q[0];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1227,for (int n = 2; n <= order; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1229,// update and evaluate polynomial Q_n(x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1230,double v = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1231,q[n - 1] = -n * q[n - 2];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1232,for (int k = n - 1; k >= 0; k -= 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1233,v = v * x2 + q[k];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1234,if (k > 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1235,q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1236,} else if (k == 2) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1237,q[0] = q[1];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1240,if ((n & 0x1) == 0) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1241,v *= x;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1244,coeff *= f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,1245,function[n] = coeff * v;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,462,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,463,public void testSinAsin() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,464,"double[] epsilon = new double[] { 3.0e-16, 5.0e-16, 3.0e-15, 2.0e-14, 4.0e-13 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,465,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,466,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,467,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,468,DerivativeStructure rebuiltX = dsX.sin().asin();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,469,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,470,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,471,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,477,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,478,public void testCosAcos() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,479,"double[] epsilon = new double[] { 6.0e-16, 6.0e-15, 2.0e-13, 4.0e-12, 2.0e-10 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,480,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,481,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,482,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,483,DerivativeStructure rebuiltX = dsX.cos().acos();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,484,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,485,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,486,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,492,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,493,public void testTanAtan() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,494,"double[] epsilon = new double[] { 6.0e-17, 2.0e-16, 2.0e-15, 4.0e-14, 2.0e-12 };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,495,for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,496,for (double x = 0.1; x < 1.2; x += 0.001) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,497,"DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,498,DerivativeStructure rebuiltX = dsX.tan().atan();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,499,DerivativeStructure zero = rebuiltX.subtract(dsX);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,500,for (int n = 0; n <= maxOrder; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,501,"Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,1,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,3,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,5,public class MaxIterationsExceededException extends ConvergenceException {
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,7,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,8,private static final long serialVersionUID = -2154780004193976271L;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,10,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,11,private int maxIterations;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,14,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,15,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,16,* @param maxIterations maximal number of iterations allowed
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,18,public MaxIterationsExceededException(int maxIterations) {
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,19,"super(""Maximal number of iterations ({0}) exceeded"","
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,20,new Object[] { new Integer(maxIterations) });
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,21,this.maxIterations = maxIterations;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,25,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,26,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,27,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,28,* @param pattern format specifier
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,29,* @param arguments format arguments
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,31,"public MaxIterationsExceededException(int maxIterations,"
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,32,"String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,33,"super(pattern, arguments);"
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,34,this.maxIterations = maxIterations;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,37,/** Get the maximal number of iterations allowed.
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,38,* @return maximal number of iterations allowed
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,40,public int getMaxIterations() {
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,41,return maxIterations;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,rivate static final long serialVersionUID = 7137520585963699578L;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,private static final long serialVersionUID = 4963578633786538912L;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51, @throws ConvergenceException the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51,* @throws MaxIterationsExceededException the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,57,"hrows ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,57,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68, @throws ConvergenceException if the maximum iteration count is exceeded.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,73,"ublic double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,73,"public double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,hrow new ConvergenceException
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,105,"""Maximum number of iterations exceeded: ""  + maximalIterationCount);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,20,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,21,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,34,rivate static final long serialVersionUID = 3350616277306882875L;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,34,private static final long serialVersionUID = -2136672307739067002L;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,55, @throws ConvergenceException the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,55,* @throws MaxIterationsExceededException the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61,"hrows ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,"ublic double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,"public double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,192,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,192,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,21,mport org.apache.commons.math.complex.Complex;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,22,mport org.apache.commons.math.complex.ComplexUtils;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,25," Implements the <a href=""http://mathworld.wolfram.com/LaguerresMethod.html"">"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,26, Laguerre's Method</a> for root finding of real coefficient polynomials.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,27," For reference, see <b>A First Course in Numerical Analysis</b>,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,28," ISBN 048641454X, chapter 8."
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,29, <p>
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,30, Laguerre's method is global in the sense that it can start with any initial
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,31, approximation and be able to solve all roots from that point.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,33, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,35,ublic class LaguerreSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,37,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,38,rivate static final long serialVersionUID = 5287689975005870178L;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,40,** polynomial function to solve */
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,41,rivate PolynomialFunction p;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,44, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,46, @param f function to solve
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,47, @throws IllegalArgumentException if function is not polynomial
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,49,ublic LaguerreSolver(UnivariateRealFunction f) throws
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,50,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,52,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,53,f (f instanceof PolynomialFunction) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,54, = (PolynomialFunction)f;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,55, else {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,56,"hrow new IllegalArgumentException(""Function is not polynomial."");"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,61, Returns a copy of the polynomial function.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,63, @return a fresh copy of the polynomial function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,65,ublic PolynomialFunction getPolynomialFunction() {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,66,eturn new PolynomialFunction(p.getCoefficients());
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,70, Find a real root in the given interval with initial value.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,71, <p>
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,72, Requires bracketing condition.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,74, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,75, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,76, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,77, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,78, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,79, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,80, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,81, function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,82, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,84,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,85,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,87,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,88,f (p.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,89,f (p.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,90,f (p.value(initial) == 0.0) { return initial; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,92,"erifyBracketing(min, max, p);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,93,"erifySequence(min, initial, max);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,94,"f (isBracketing(min, initial, p)) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,95,"eturn solve(min, initial);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,96, else {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,97,"eturn solve(initial, max);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,102, Find a real root in the given interval.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,103, <p>
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,104," Despite the bracketing condition, the root returned by solve(Complex[],"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,105," Complex) may not be a real zero inside [min, max]. For example,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,106," p(x) = x^3 + 1, min = -2, max = 2, initial = 0. We can either try"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,107," another initial value, or, as we did here, call solveAll() to obtain"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,108, all roots and pick up the one that we're looking for.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,110, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,111, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,112, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,113, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,114, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,115, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,116, function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,117, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,119,"ublic double solve(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,120,unctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,122,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,123,f (p.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,124,f (p.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,125,"erifyBracketing(min, max, p);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,127,ouble coefficients[] = p.getCoefficients();
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,128,omplex c[] = new Complex[coefficients.length];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,129,or (int i = 0; i < coefficients.length; i++) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,130,"[i] = new Complex(coefficients[i], 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,132,"omplex initial = new Complex(0.5 * (min + max), 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,133,"omplex z = solve(c, initial);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,134,"f (isRootOK(min, max, z)) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,135,"etResult(z.getReal(), iterationCount);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,136,eturn result;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,139,/ solve all roots and select the one we're seeking
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,140,"omplex[] root = solveAll(c, initial);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,141,or (int i = 0; i < root.length; i++) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,142,"f (isRootOK(min, max, root[i])) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,143,"etResult(root[i].getReal(), iterationCount);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,144,eturn result;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,148,/ should never happen
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,149,"hrow new ConvergenceException(""Convergence failed."");"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,153, Returns true iff the given complex root is actually a real zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,154," in the given interval, within the solver tolerance level."
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,156, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,157, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,158, @param z the complex root
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,159, @return true iff z is the sought-after real zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,161,"rotected boolean isRootOK(double min, double max, Complex z) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,162,"ouble tolerance = Math.max(relativeAccuracy * z.abs(), absoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,163,"eturn (isSequence(min, z.getReal(), max)) &&"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,164,Math.abs(z.getImaginary()) <= tolerance ||
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,165,.abs() <= functionValueAccuracy);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,169," Find all complex roots for the polynomial with the given coefficients,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,170, starting from the given initial value.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,172, @param coefficients the polynomial coefficients array
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,173, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,174, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,175, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,176, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,177, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,178, function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,179, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,181,"ublic Complex[] solveAll(double coefficients[], double initial) throws"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,182,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,184,omplex c[] = new Complex[coefficients.length];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,185,"omplex z = new Complex(initial, 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,186,or (int i = 0; i < c.length; i++) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,187,"[i] = new Complex(coefficients[i], 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,189,"eturn solveAll(c, z);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,193," Find all complex roots for the polynomial with the given coefficients,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,194, starting from the given initial value.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,196, @param coefficients the polynomial coefficients array
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,197, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,198, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,199, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,200, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,201, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,202, function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,203, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,205,"ublic Complex[] solveAll(Complex coefficients[], Complex initial) throws"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,206,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,208,nt n = coefficients.length - 1;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,209,nt iterationCount = 0;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,210,f (n < 1) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,211,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,212,"""Polynomial degree must be positive: degree="" + n);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,214,omplex c[] = new Complex[n+1];    // coefficients for deflated polynomial
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,215,or (int i = 0; i <= n; i++) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,216,[i] = coefficients[i];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,219,/ solve individual root successively
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,220,omplex root[] = new Complex[n];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,221,or (int i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,222,omplex subarray[] = new Complex[n-i+1];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,223,"ystem.arraycopy(c, 0, subarray, 0, subarray.length);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,224,"oot[i] = solve(subarray, initial);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,225,/ polynomial deflation using synthetic division
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,226,omplex newc = c[n-i];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,227,omplex oldc = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,228,or (int j = n-i-1; j >= 0; j--) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,229,ldc = c[j];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,230,[j] = newc;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,231,ewc = oldc.add(newc.multiply(root[i]));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,233,terationCount += this.iterationCount;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,236,esultComputed = true;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,237,his.iterationCount = iterationCount;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,238,eturn root;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,242," Find a complex root for the polynomial with the given coefficients,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,243, starting from the given initial value.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,245, @param coefficients the polynomial coefficients array
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,246, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,247, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,248, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,249, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,250, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,251, function
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,252, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,254,"ublic Complex solve(Complex coefficients[], Complex initial) throws"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,255,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,257,nt n = coefficients.length - 1;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,258,f (n < 1) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,259,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,260,"""Polynomial degree must be positive: degree="" + n);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,262,"omplex N = new Complex((double)n, 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,263,"omplex N1 = new Complex((double)(n-1), 0.0);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,265,nt i = 1;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,266,omplex pv = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,267,omplex dv = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,268,omplex d2v = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,269,omplex G = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,270,omplex G2 = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,271,omplex H = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,272,omplex delta = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,273,omplex denominator = null;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,274,omplex z = initial;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,275,"omplex oldz = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,276,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,277,"/ Compute pv (polynomial value), dv (derivative value), and"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,278,/ d2v (second derivative value) simultaneously.
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,279,v = coefficients[n];
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,280,v = Complex.ZERO;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,281,2v = Complex.ZERO;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,282,or (int j = n-1; j >= 0; j--) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,283,2v = dv.add(z.multiply(d2v));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,284,v = pv.add(z.multiply(dv));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,285,v = coefficients[j].add(z.multiply(pv));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,287,"2v = d2v.multiply(new Complex(2.0, 0.0));"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,289,/ check for convergence
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,290,"ouble tolerance = Math.max(relativeAccuracy * z.abs(),"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,291,bsoluteAccuracy);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,292,f ((z.subtract(oldz)).abs() <= tolerance) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,293,esultComputed = true;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,294,terationCount = i;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,295,eturn z;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,297,f (pv.abs() <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,298,esultComputed = true;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,299,terationCount = i;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,300,eturn z;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,303,"/ now pv != 0, calculate the new approximation"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,304, = dv.divide(pv);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,305,2 = G.multiply(G);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,306, = G2.subtract(d2v.divide(pv));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,307,elta = N1.multiply((N.multiply(H)).subtract(G2));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,308,/ choose a denominator larger in magnitude
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,309,omplex dplus = G.add(ComplexUtils.sqrt(delta));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,310,omplex dminus = G.subtract(ComplexUtils.sqrt(delta));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,311,enominator = dplus.abs() > dminus.abs() ? dplus : dminus;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,312,"/ Perturb z if denominator is zero, for instance,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,313,"/ p(x) = x^3 + 1, z = 0."
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,314,"f (denominator.equals(new Complex(0.0, 0.0))) {"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,315," = z.add(new Complex(absoluteAccuracy, absoluteAccuracy));"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,316,"ldz = new Complex(Double.POSITIVE_INFINITY,"
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,317,ouble.POSITIVE_INFINITY);
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,318, else {
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,319,ldz = z;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,320, = z.subtract(N.divide(denominator));
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,322,++;
False,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,324,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,19,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,21,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,22,import org.apache.commons.math.complex.Complex;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,23,import org.apache.commons.math.complex.ComplexUtils;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,26,"* Implements the <a href=""http://mathworld.wolfram.com/LaguerresMethod.html"">"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,27,* Laguerre's Method</a> for root finding of real coefficient polynomials.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,28,"* For reference, see <b>A First Course in Numerical Analysis</b>,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,29,"* ISBN 048641454X, chapter 8."
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,30,* <p>
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,31,* Laguerre's method is global in the sense that it can start with any initial
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,32,* approximation and be able to solve all roots from that point.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,36,public class LaguerreSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,38,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,39,private static final long serialVersionUID = -3775334783473775723L;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,41,/** polynomial function to solve */
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,42,private PolynomialFunction p;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,45,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,47,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,48,* @throws IllegalArgumentException if function is not polynomial
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,50,public LaguerreSolver(UnivariateRealFunction f) throws
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,51,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,53,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,54,if (f instanceof PolynomialFunction) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,55,p = (PolynomialFunction)f;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,56,} else {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,57,"throw new IllegalArgumentException(""Function is not polynomial."");"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,62,* Returns a copy of the polynomial function.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,64,* @return a fresh copy of the polynomial function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,66,public PolynomialFunction getPolynomialFunction() {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,67,return new PolynomialFunction(p.getCoefficients());
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,71,* Find a real root in the given interval with initial value.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,72,* <p>
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,73,* Requires bracketing condition.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,75,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,76,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,77,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,78,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,79,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,80,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,81,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,82,* function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,83,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,85,"public double solve(double min, double max, double initial) throws"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,86,"ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,88,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,89,if (p.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,90,if (p.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,91,if (p.value(initial) == 0.0) { return initial; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,93,"verifyBracketing(min, max, p);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,94,"verifySequence(min, initial, max);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,95,"if (isBracketing(min, initial, p)) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,96,"return solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,97,} else {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,98,"return solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,103,* Find a real root in the given interval.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,104,* <p>
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,105,"* Despite the bracketing condition, the root returned by solve(Complex[],"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,106,"* Complex) may not be a real zero inside [min, max]. For example,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,107,"* p(x) = x^3 + 1, min = -2, max = 2, initial = 0. We can either try"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,108,"* another initial value, or, as we did here, call solveAll() to obtain"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,109,* all roots and pick up the one that we're looking for.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,111,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,112,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,113,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,114,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,115,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,116,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,117,* function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,118,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,120,"public double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,121,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,123,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,124,if (p.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,125,if (p.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,126,"verifyBracketing(min, max, p);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,128,double coefficients[] = p.getCoefficients();
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,129,Complex c[] = new Complex[coefficients.length];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,130,for (int i = 0; i < coefficients.length; i++) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,131,"c[i] = new Complex(coefficients[i], 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,133,"Complex initial = new Complex(0.5 * (min + max), 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,134,"Complex z = solve(c, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,135,"if (isRootOK(min, max, z)) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,136,"setResult(z.getReal(), iterationCount);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,137,return result;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,140,// solve all roots and select the one we're seeking
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,141,"Complex[] root = solveAll(c, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,142,for (int i = 0; i < root.length; i++) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,143,"if (isRootOK(min, max, root[i])) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,144,"setResult(root[i].getReal(), iterationCount);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,145,return result;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,149,// should never happen
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,150,throw new ConvergenceException();
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,154,* Returns true iff the given complex root is actually a real zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,155,"* in the given interval, within the solver tolerance level."
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,157,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,158,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,159,* @param z the complex root
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,160,* @return true iff z is the sought-after real zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,162,"protected boolean isRootOK(double min, double max, Complex z) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,163,"double tolerance = Math.max(relativeAccuracy * z.abs(), absoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,164,"return (isSequence(min, z.getReal(), max)) &&"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,165,(Math.abs(z.getImaginary()) <= tolerance ||
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,166,z.abs() <= functionValueAccuracy);
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,170,"* Find all complex roots for the polynomial with the given coefficients,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,171,* starting from the given initial value.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,173,* @param coefficients the polynomial coefficients array
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,174,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,175,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,176,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,177,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,178,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,179,* function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,180,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,182,"public Complex[] solveAll(double coefficients[], double initial) throws"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,183,"ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,185,Complex c[] = new Complex[coefficients.length];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,186,"Complex z = new Complex(initial, 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,187,for (int i = 0; i < c.length; i++) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,188,"c[i] = new Complex(coefficients[i], 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,190,"return solveAll(c, z);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,194,"* Find all complex roots for the polynomial with the given coefficients,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,195,* starting from the given initial value.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,197,* @param coefficients the polynomial coefficients array
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,198,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,199,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,200,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,201,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,202,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,203,* function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,204,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,206,"public Complex[] solveAll(Complex coefficients[], Complex initial) throws"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,207,"MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,209,int n = coefficients.length - 1;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,210,int iterationCount = 0;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,211,if (n < 1) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,212,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,213,"(""Polynomial degree must be positive: degree="" + n);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,215,Complex c[] = new Complex[n+1];    // coefficients for deflated polynomial
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,216,for (int i = 0; i <= n; i++) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,217,c[i] = coefficients[i];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,220,// solve individual root successively
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,221,Complex root[] = new Complex[n];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,222,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,223,Complex subarray[] = new Complex[n-i+1];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,224,"System.arraycopy(c, 0, subarray, 0, subarray.length);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,225,"root[i] = solve(subarray, initial);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,226,// polynomial deflation using synthetic division
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,227,Complex newc = c[n-i];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,228,Complex oldc = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,229,for (int j = n-i-1; j >= 0; j--) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,230,oldc = c[j];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,231,c[j] = newc;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,232,newc = oldc.add(newc.multiply(root[i]));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,234,iterationCount += this.iterationCount;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,237,resultComputed = true;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,238,this.iterationCount = iterationCount;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,239,return root;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,243,"* Find a complex root for the polynomial with the given coefficients,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,244,* starting from the given initial value.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,246,* @param coefficients the polynomial coefficients array
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,247,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,248,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,249,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,250,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,251,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,252,* function
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,253,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,255,"public Complex solve(Complex coefficients[], Complex initial) throws"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,256,"MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,258,int n = coefficients.length - 1;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,259,if (n < 1) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,260,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,261,"(""Polynomial degree must be positive: degree="" + n);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,263,"Complex N = new Complex((double)n, 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,264,"Complex N1 = new Complex((double)(n-1), 0.0);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,266,int i = 1;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,267,Complex pv = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,268,Complex dv = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,269,Complex d2v = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,270,Complex G = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,271,Complex G2 = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,272,Complex H = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,273,Complex delta = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,274,Complex denominator = null;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,275,Complex z = initial;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,276,"Complex oldz = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,277,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,278,"// Compute pv (polynomial value), dv (derivative value), and"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,279,// d2v (second derivative value) simultaneously.
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,280,pv = coefficients[n];
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,281,dv = Complex.ZERO;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,282,d2v = Complex.ZERO;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,283,for (int j = n-1; j >= 0; j--) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,284,d2v = dv.add(z.multiply(d2v));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,285,dv = pv.add(z.multiply(dv));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,286,pv = coefficients[j].add(z.multiply(pv));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,288,"d2v = d2v.multiply(new Complex(2.0, 0.0));"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,290,// check for convergence
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,291,"double tolerance = Math.max(relativeAccuracy * z.abs(),"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,292,absoluteAccuracy);
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,293,if ((z.subtract(oldz)).abs() <= tolerance) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,294,resultComputed = true;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,295,iterationCount = i;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,296,return z;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,298,if (pv.abs() <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,299,resultComputed = true;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,300,iterationCount = i;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,301,return z;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,304,"// now pv != 0, calculate the new approximation"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,305,G = dv.divide(pv);
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,306,G2 = G.multiply(G);
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,307,H = G2.subtract(d2v.divide(pv));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,308,delta = N1.multiply((N.multiply(H)).subtract(G2));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,309,// choose a denominator larger in magnitude
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,310,Complex dplus = G.add(ComplexUtils.sqrt(delta));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,311,Complex dminus = G.subtract(ComplexUtils.sqrt(delta));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,312,denominator = dplus.abs() > dminus.abs() ? dplus : dminus;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,313,"// Perturb z if denominator is zero, for instance,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,314,"// p(x) = x^3 + 1, z = 0."
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,315,"if (denominator.equals(new Complex(0.0, 0.0))) {"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,316,"z = z.add(new Complex(absoluteAccuracy, absoluteAccuracy));"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,317,"oldz = new Complex(Double.POSITIVE_INFINITY,"
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,318,Double.POSITIVE_INFINITY);
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,319,} else {
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,320,oldz = z;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,321,z = z.subtract(N.divide(denominator));
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,323,i++;
True,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/LaguerreSolver.java,325,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,21,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,24," Implements the <a href=""http://mathworld.wolfram.com/MullersMethod.html"">"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,25, Muller's Method</a> for root finding of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,26," reference, see <b>Elementary Numerical Analysis</b>, ISBN 0070124477,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,27, chapter 3.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,28, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,29," Muller's method applies to both real and complex functions, but here we"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,30, restrict ourselves to real functions. Methods solve() and solve2() find
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,31," real zeros, using different ways to bypass complex arithmetics."
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,33, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,35,ublic class MullerSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,37,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,38,tatic final long serialVersionUID = 2619993603551148137L;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,41, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,43, @param f function to solve
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,45,ublic MullerSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,46,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,50, Find a real root in the given interval with initial value.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,51, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,52, Requires bracketing condition.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,54, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,55, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,56, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,57, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,58, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,59, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,60, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,61, function
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,62, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,64,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,65,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,67,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,68,f (f.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,69,f (f.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,70,f (f.value(initial) == 0.0) { return initial; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,72,"erifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,73,"erifySequence(min, initial, max);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,74,"f (isBracketing(min, initial, f)) {"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,75,"eturn solve(min, initial);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,76, else {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,77,"eturn solve(initial, max);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,82, Find a real root in the given interval.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,83, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,84, Original Muller's method would have function evaluation at complex point.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,85," Since our f(x) is real, we have to find ways to avoid that. Bracketing"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,86," condition is one way to go: by requiring bracketing in every iteration,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,87, the newly computed approximation is guaranteed to be real.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,88, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,89, Normally Muller's method converges quadratically in the vicinity of a
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,90," zero, however it may be very slow in regions far away from zeros. For"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,91," example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,92, bisection as a safety backup if it performs very poorly.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,93, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,94, The formulas here use divided differences directly.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,96, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,97, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,98, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,99, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,100, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,101, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,102, function
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,103, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,105,"ublic double solve(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,106,unctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,108,"/ [x0, x2] is the bracketing interval in each iteration"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,109,"/ x1 is the last approximation and an interpolation point in (x0, x2)"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,110,/ x is the new root approximation and new x1 for next round
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,111,"/ d01, d12, d012 are divided differences"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,112,"ouble x0, x1, x2, x, oldx, y0, y1, y2, y;"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,113,"ouble d01, d12, d012, c1, delta, xplus, xminus, tolerance;"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,115,0 = min; y0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,116,2 = max; y2 = f.value(x2);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,117,1 = 0.5 * (x0 + x2); y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,119,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,120,f (y0 == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,121,f (y2 == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,122,"erifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,124,nt i = 1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,125,ldx = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,126,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,127,/ Muller's method employs quadratic interpolation through
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,128,"/ x0, x1, x2 and x is the zero of the interpolating parabola."
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,129,"/ Due to bracketing condition, this parabola must have two"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,130,"/ real roots and we choose one in [x0, x2] to be x."
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,131,01 = (y1 - y0) / (x1 - x0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,132,12 = (y2 - y1) / (x2 - x1);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,133,012 = (d12 - d01) / (x2 - x0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,134,1 = d01 + (x1 - x0) * d012;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,135,elta = c1 * c1 - 4 * y1 * d012;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,136,plus = x1 + (-2.0 * y1) / (c1 + Math.sqrt(delta));
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,137,minus = x1 + (-2.0 * y1) / (c1 - Math.sqrt(delta));
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,138,/ xplus and xminus are two roots of parabola and at least
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,139,"/ one of them should lie in (x0, x2)"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,140," = isSequence(x0, xplus, x2) ? xplus : xminus;"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,141, = f.value(x);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,143,/ check for convergence
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,144,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,145,f (Math.abs(x - oldx) <= tolerance) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,146,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,147,eturn result;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,149,f (Math.abs(y) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,150,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,151,eturn result;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,154,/ Bisect if convergence is too slow. Bisection would waste
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,155,"/ our calculation of x, hopefully it won't happen often."
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,156,oolean bisect = (x < x1 && (x1 - x0) > 0.95 * (x2 - x0)) ||
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,157,x > x1 && (x2 - x1) > 0.95 * (x2 - x0)) ||
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,158,x == x1);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,159,/ prepare the new bracketing interval for next iteration
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,160,f (!bisect) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,161,0 = x < x1 ? x0 : x1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,162,0 = x < x1 ? y0 : y1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,163,2 = x > x1 ? x2 : x1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,164,2 = x > x1 ? y2 : y1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,165,1 = x; y1 = y;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,166,ldx = x;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,167, else {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,168,ouble xm = 0.5 * (x0 + x2);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,169,ouble ym = f.value(xm);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,170,f (MathUtils.sign(y0) + MathUtils.sign(ym) == 0.0) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,171,2 = xm; y2 = ym;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,172, else {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,173,0 = xm; y0 = ym;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,175,1 = 0.5 * (x0 + x2);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,176,1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,177,ldx = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,179,++;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,181,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,185, Find a real root in the given interval.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,186, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,187, solve2() differs from solve() in the way it avoids complex operations.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,188," Except for the initial [min, max], solve2() does not require bracketing"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,189," condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,190," number arises in the computation, we simply use its modulus as real"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,191, approximation.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,192, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,193," Because the interval may not be bracketing, bisection alternative is"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,194, not applicable here. However in practice our treatment usually works
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,195," well, especially near real zeros where the imaginary part of complex"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,196, approximation is often negligible.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,197, <p>
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,198, The formulas here do not use divided differences directly.
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,200, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,201, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,202, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,203, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,204, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,205, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,206, function
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,207, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,209,"ublic double solve2(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,210,unctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,212,/ x2 is the last root approximation
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,213,/ x is the new approximation and new x2 for next round
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,214,/ x0 < x1 < x2 does not hold here
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,215,"ouble x0, x1, x2, x, oldx, y0, y1, y2, y;"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,216,"ouble q, A, B, C, delta, denominator, tolerance;"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,218,0 = min; y0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,219,1 = max; y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,220,2 = 0.5 * (x0 + x1); y2 = f.value(x2);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,222,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,223,f (y0 == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,224,f (y1 == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,225,"erifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,227,nt i = 1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,228,ldx = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,229,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,230,"/ quadratic interpolation through x0, x1, x2"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,231, = (x2 - x1) / (x1 - x0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,232, = q * (y2 - (1 + q) * y1 + q * y0);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,233, = (2*q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,234, = (1 + q) * y2;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,235,elta = B * B - 4 * A * C;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,236,f (delta >= 0.0) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,237,/ choose a denominator larger in magnitude
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,238,ouble dplus = B + Math.sqrt(delta);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,239,ouble dminus = B - Math.sqrt(delta);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,240,enominator = Math.abs(dplus) > Math.abs(dminus) ? dplus : dminus;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,241, else {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,242,/ take the modulus of (B +/- Math.sqrt(delta))
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,243,enominator = Math.sqrt(B * B - delta);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,245,f (denominator != 0) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,246, = x2 - 2.0 * C * (x2 - x1) / denominator;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,247,/ perturb x if it coincides with x1 or x2
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,248,hile (x == x1 || x == x2) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,249, += absoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,251, else {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,252,"/ extremely rare case, get a random number to skip it"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,253, = min + Math.random() * (max - min);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,254,ldx = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,256, = f.value(x);
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,258,/ check for convergence
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,259,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,260,f (Math.abs(x - oldx) <= tolerance) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,261,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,262,eturn result;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,264,f (Math.abs(y) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,265,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,266,eturn result;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,269,/ prepare the next iteration
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,270,0 = x1; y0 = y1;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,271,1 = x2; y1 = y2;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,272,2 = x; y2 = y;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,273,ldx = x;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,274,++;
False,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,276,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,20,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,21,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,24,"* Implements the <a href=""http://mathworld.wolfram.com/MullersMethod.html"">"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,25,* Muller's Method</a> for root finding of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,26,"* reference, see <b>Elementary Numerical Analysis</b>, ISBN 0070124477,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,27,* chapter 3.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,28,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,29,"* Muller's method applies to both real and complex functions, but here we"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,30,* restrict ourselves to real functions. Methods solve() and solve2() find
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,31,"* real zeros, using different ways to bypass complex arithmetics."
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,33,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,35,public class MullerSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,37,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,38,private static final long serialVersionUID = 6552227503458976920L;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,41,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,43,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,45,public MullerSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,46,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,50,* Find a real root in the given interval with initial value.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,51,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,52,* Requires bracketing condition.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,54,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,55,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,56,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,57,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,58,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,59,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,60,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,61,* function
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,62,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,64,"public double solve(double min, double max, double initial) throws"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,65,"MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,67,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,68,if (f.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,69,if (f.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,70,if (f.value(initial) == 0.0) { return initial; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,72,"verifyBracketing(min, max, f);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,73,"verifySequence(min, initial, max);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,74,"if (isBracketing(min, initial, f)) {"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,75,"return solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,76,} else {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,77,"return solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,82,* Find a real root in the given interval.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,83,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,84,* Original Muller's method would have function evaluation at complex point.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,85,"* Since our f(x) is real, we have to find ways to avoid that. Bracketing"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,86,"* condition is one way to go: by requiring bracketing in every iteration,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,87,* the newly computed approximation is guaranteed to be real.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,88,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,89,* Normally Muller's method converges quadratically in the vicinity of a
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,90,"* zero, however it may be very slow in regions far away from zeros. For"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,91,"* example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,92,* bisection as a safety backup if it performs very poorly.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,93,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,94,* The formulas here use divided differences directly.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,96,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,97,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,98,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,99,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,100,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,101,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,102,* function
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,103,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,105,"public double solve(double min, double max) throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,106,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,108,"// [x0, x2] is the bracketing interval in each iteration"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,109,"// x1 is the last approximation and an interpolation point in (x0, x2)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,110,// x is the new root approximation and new x1 for next round
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,111,"// d01, d12, d012 are divided differences"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,112,"double x0, x1, x2, x, oldx, y0, y1, y2, y;"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,113,"double d01, d12, d012, c1, delta, xplus, xminus, tolerance;"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,115,x0 = min; y0 = f.value(x0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,116,x2 = max; y2 = f.value(x2);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,117,x1 = 0.5 * (x0 + x2); y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,119,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,120,if (y0 == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,121,if (y2 == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,122,"verifyBracketing(min, max, f);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,124,int i = 1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,125,oldx = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,126,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,127,// Muller's method employs quadratic interpolation through
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,128,"// x0, x1, x2 and x is the zero of the interpolating parabola."
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,129,"// Due to bracketing condition, this parabola must have two"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,130,"// real roots and we choose one in [x0, x2] to be x."
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,131,d01 = (y1 - y0) / (x1 - x0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,132,d12 = (y2 - y1) / (x2 - x1);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,133,d012 = (d12 - d01) / (x2 - x0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,134,c1 = d01 + (x1 - x0) * d012;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,135,delta = c1 * c1 - 4 * y1 * d012;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,136,xplus = x1 + (-2.0 * y1) / (c1 + Math.sqrt(delta));
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,137,xminus = x1 + (-2.0 * y1) / (c1 - Math.sqrt(delta));
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,138,// xplus and xminus are two roots of parabola and at least
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,139,"// one of them should lie in (x0, x2)"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,140,"x = isSequence(x0, xplus, x2) ? xplus : xminus;"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,141,y = f.value(x);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,143,// check for convergence
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,144,"tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,145,if (Math.abs(x - oldx) <= tolerance) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,146,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,147,return result;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,149,if (Math.abs(y) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,150,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,151,return result;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,154,// Bisect if convergence is too slow. Bisection would waste
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,155,"// our calculation of x, hopefully it won't happen often."
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,156,boolean bisect = (x < x1 && (x1 - x0) > 0.95 * (x2 - x0)) ||
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,157,(x > x1 && (x2 - x1) > 0.95 * (x2 - x0)) ||
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,158,(x == x1);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,159,// prepare the new bracketing interval for next iteration
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,160,if (!bisect) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,161,x0 = x < x1 ? x0 : x1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,162,y0 = x < x1 ? y0 : y1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,163,x2 = x > x1 ? x2 : x1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,164,y2 = x > x1 ? y2 : y1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,165,x1 = x; y1 = y;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,166,oldx = x;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,167,} else {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,168,double xm = 0.5 * (x0 + x2);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,169,double ym = f.value(xm);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,170,if (MathUtils.sign(y0) + MathUtils.sign(ym) == 0.0) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,171,x2 = xm; y2 = ym;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,172,} else {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,173,x0 = xm; y0 = ym;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,175,x1 = 0.5 * (x0 + x2);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,176,y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,177,oldx = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,179,i++;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,181,throw new MaxIterationsExceededException(maximalIterationCount);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,185,* Find a real root in the given interval.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,186,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,187,* solve2() differs from solve() in the way it avoids complex operations.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,188,"* Except for the initial [min, max], solve2() does not require bracketing"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,189,"* condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,190,"* number arises in the computation, we simply use its modulus as real"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,191,* approximation.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,192,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,193,"* Because the interval may not be bracketing, bisection alternative is"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,194,* not applicable here. However in practice our treatment usually works
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,195,"* well, especially near real zeros where the imaginary part of complex"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,196,* approximation is often negligible.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,197,* <p>
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,198,* The formulas here do not use divided differences directly.
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,200,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,201,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,202,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,203,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,204,* or the solver detects convergence problems otherwise
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,205,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,206,* function
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,207,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,209,"public double solve2(double min, double max) throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,210,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,212,// x2 is the last root approximation
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,213,// x is the new approximation and new x2 for next round
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,214,// x0 < x1 < x2 does not hold here
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,215,"double x0, x1, x2, x, oldx, y0, y1, y2, y;"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,216,"double q, A, B, C, delta, denominator, tolerance;"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,218,x0 = min; y0 = f.value(x0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,219,x1 = max; y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,220,x2 = 0.5 * (x0 + x1); y2 = f.value(x2);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,222,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,223,if (y0 == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,224,if (y1 == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,225,"verifyBracketing(min, max, f);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,227,int i = 1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,228,oldx = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,229,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,230,"// quadratic interpolation through x0, x1, x2"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,231,q = (x2 - x1) / (x1 - x0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,232,A = q * (y2 - (1 + q) * y1 + q * y0);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,233,B = (2*q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,234,C = (1 + q) * y2;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,235,delta = B * B - 4 * A * C;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,236,if (delta >= 0.0) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,237,// choose a denominator larger in magnitude
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,238,double dplus = B + Math.sqrt(delta);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,239,double dminus = B - Math.sqrt(delta);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,240,denominator = Math.abs(dplus) > Math.abs(dminus) ? dplus : dminus;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,241,} else {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,242,// take the modulus of (B +/- Math.sqrt(delta))
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,243,denominator = Math.sqrt(B * B - delta);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,245,if (denominator != 0) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,246,x = x2 - 2.0 * C * (x2 - x1) / denominator;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,247,// perturb x if it coincides with x1 or x2
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,248,while (x == x1 || x == x2) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,249,x += absoluteAccuracy;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,251,} else {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,252,"// extremely rare case, get a random number to skip it"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,253,x = min + Math.random() * (max - min);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,254,oldx = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,256,y = f.value(x);
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,258,// check for convergence
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,259,"tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,260,if (Math.abs(x - oldx) <= tolerance) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,261,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,262,return result;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,264,if (Math.abs(y) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,265,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,266,return result;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,269,// prepare the next iteration
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,270,x0 = x1; y0 = y1;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,271,x1 = x2; y1 = y2;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,272,x2 = x; y2 = y;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,273,oldx = x;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,274,i++;
True,src/java/org/apache/commons/math/analysis/MullerSolver.java,src/java/org/apache/commons/math/analysis/MullerSolver.java,276,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,21,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,22,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,35,rivate static final long serialVersionUID = 2606474895443431607L;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,35,private static final long serialVersionUID = 2067325783137941016L;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,55, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,55,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,60,"ublic double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,60,"public double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,72, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,72,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,78,"hrows ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,78,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,99,hrow new ConvergenceException
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,100,"""Maximum number of iterations exceeded "" + i);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,99,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,21,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,24," Implements the <a href=""http://mathworld.wolfram.com/RiddersMethod.html"">"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,25, Ridders' Method</a> for root finding of real univariate functions. For
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,26," reference, see C. Ridders, <i>A new algorithm for computing a single root"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,27," of a real continuous function </i>, IEEE Transactions on Circuits and"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,28," Systems, 26 (1979), 979 - 980."
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,29, <p>
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,30, The function should be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,32, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,34,ublic class RiddersSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,36,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,37,tatic final long serialVersionUID = -4703139035737911735L;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,40, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,42, @param f function to solve
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,44,ublic RiddersSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,45,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,49, Find a root in the given interval with initial value.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,50, <p>
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,51, Requires bracketing condition.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,53, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,54, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,55, @param initial the start value to use
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,56, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,57, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,58, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,59, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,60, function
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,61, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,63,"ublic double solve(double min, double max, double initial) throws"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,64,"onvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,66,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,67,f (f.value(min) == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,68,f (f.value(max) == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,69,f (f.value(initial) == 0.0) { return initial; }
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,71,"erifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,72,"erifySequence(min, initial, max);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,73,"f (isBracketing(min, initial, f)) {"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,74,"eturn solve(min, initial);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,75, else {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,76,"eturn solve(initial, max);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,81, Find a root in the given interval.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,82, <p>
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,83, Requires bracketing condition.
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,85, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,86, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,87, @return the point at which the function value is zero
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,88, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,89, or the solver detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,90, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,91, function
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,92, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,94,"ublic double solve(double min, double max) throws ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,95,unctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,97,"/ [x1, x2] is the bracketing interval in each iteration"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,98,"/ x3 is the midpoint of [x1, x2]"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,99,/ x is the new root approximation and an endpoint of the new interval
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,100,"ouble x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,102,1 = min; y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,103,2 = max; y2 = f.value(x2);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,105,/ check for zeros before verifying bracketing
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,106,f (y1 == 0.0) { return min; }
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,107,f (y2 == 0.0) { return max; }
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,108,"erifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,110,nt i = 1;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,111,ldx = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,112,hile (i <= maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,113,/ calculate the new root approximation
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,114,3 = 0.5 * (x1 + x2);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,115,3 = f.value(x3);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,116,f (Math.abs(y3) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,117,"etResult(x3, i);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,118,eturn result;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,120,elta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,121,orrection = (MathUtils.sign(y2) * MathUtils.sign(y3)) *
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,122,x3 - x1) / Math.sqrt(delta);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,123, = x3 - correction;                // correction != 0
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,124, = f.value(x);
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,126,/ check for convergence
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,127,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,128,f (Math.abs(x - oldx) <= tolerance) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,129,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,130,eturn result;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,132,f (Math.abs(y) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,133,"etResult(x, i);"
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,134,eturn result;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,137,/ prepare the new interval for next iteration
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,138,/ Ridders' method guarantees x1 < x < x2
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,139,f (correction > 0.0) {             // x1 < x < x3
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,140,f (MathUtils.sign(y1) + MathUtils.sign(y) == 0.0) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,141,2 = x; y2 = y;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,142, else {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,143,1 = x; x2 = x3;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,144,1 = y; y2 = y3;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,146, else {                            // x3 < x < x2
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,147,f (MathUtils.sign(y2) + MathUtils.sign(y) == 0.0) {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,148,1 = x; y1 = y;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,149, else {
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,150,1 = x3; x2 = x;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,151,1 = y3; y2 = y;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,154,ldx = x;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,155,++;
False,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,157,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,20,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,21,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,24,"* Implements the <a href=""http://mathworld.wolfram.com/RiddersMethod.html"">"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,25,* Ridders' Method</a> for root finding of real univariate functions. For
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,26,"* reference, see C. Ridders, <i>A new algorithm for computing a single root"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,27,"* of a real continuous function </i>, IEEE Transactions on Circuits and"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,28,"* Systems, 26 (1979), 979 - 980."
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,29,* <p>
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,30,* The function should be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,34,public class RiddersSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,36,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,37,private static final long serialVersionUID = -4703139035737911735L;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,40,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,42,* @param f function to solve
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,44,public RiddersSolver(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,45,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,49,* Find a root in the given interval with initial value.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,50,* <p>
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,51,* Requires bracketing condition.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,53,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,54,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,55,* @param initial the start value to use
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,56,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,57,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,58,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,59,* function
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,60,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,62,"public double solve(double min, double max, double initial) throws"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,63,"MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,65,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,66,if (f.value(min) == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,67,if (f.value(max) == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,68,if (f.value(initial) == 0.0) { return initial; }
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,70,"verifyBracketing(min, max, f);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,71,"verifySequence(min, initial, max);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,72,"if (isBracketing(min, initial, f)) {"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,73,"return solve(min, initial);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,74,} else {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,75,"return solve(initial, max);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,80,* Find a root in the given interval.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,81,* <p>
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,82,* Requires bracketing condition.
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,84,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,85,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,86,* @return the point at which the function value is zero
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,87,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,88,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,89,* function
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,90,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,92,"public double solve(double min, double max) throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,93,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,95,"// [x1, x2] is the bracketing interval in each iteration"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,96,"// x3 is the midpoint of [x1, x2]"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,97,// x is the new root approximation and an endpoint of the new interval
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,98,"double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,100,x1 = min; y1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,101,x2 = max; y2 = f.value(x2);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,103,// check for zeros before verifying bracketing
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,104,if (y1 == 0.0) { return min; }
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,105,if (y2 == 0.0) { return max; }
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,106,"verifyBracketing(min, max, f);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,108,int i = 1;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,109,oldx = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,110,while (i <= maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,111,// calculate the new root approximation
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,112,x3 = 0.5 * (x1 + x2);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,113,y3 = f.value(x3);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,114,if (Math.abs(y3) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,115,"setResult(x3, i);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,116,return result;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,118,delta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,119,correction = (MathUtils.sign(y2) * MathUtils.sign(y3)) *
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,120,(x3 - x1) / Math.sqrt(delta);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,121,x = x3 - correction;                // correction != 0
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,122,y = f.value(x);
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,124,// check for convergence
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,125,"tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,126,if (Math.abs(x - oldx) <= tolerance) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,127,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,128,return result;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,130,if (Math.abs(y) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,131,"setResult(x, i);"
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,132,return result;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,135,// prepare the new interval for next iteration
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,136,// Ridders' method guarantees x1 < x < x2
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,137,if (correction > 0.0) {             // x1 < x < x3
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,138,if (MathUtils.sign(y1) + MathUtils.sign(y) == 0.0) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,139,x2 = x; y2 = y;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,140,} else {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,141,x1 = x; x2 = x3;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,142,y1 = y; y2 = y3;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,144,} else {                            // x3 < x < x2
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,145,if (MathUtils.sign(y2) + MathUtils.sign(y) == 0.0) {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,146,x1 = x; y1 = y;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,147,} else {
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,148,x1 = x3; x2 = x;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,149,y1 = y3; y2 = y;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,152,oldx = x;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,153,i++;
True,src/java/org/apache/commons/math/analysis/RiddersSolver.java,src/java/org/apache/commons/math/analysis/RiddersSolver.java,155,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,19,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,20,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,37,tatic final long serialVersionUID = -1058849527738180243L;
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,37,private static final long serialVersionUID = -1058849527738180243L;
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,54, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,54,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,60,"ublic double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,60,"public double integrate(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,92,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/RombergIntegrator.java,92,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,21,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,22,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,68,"hrows ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,68,"throws MaxIterationsExceededException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78, @throws ConvergenceException  if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78,* @throws MaxIterationsExceededException  if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,"ublic double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,"public double solve(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,154,"hrow new ConvergenceException(""Maximal iteration number exceeded"" + i);"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,154,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,19,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,20,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,36,tatic final long serialVersionUID = 3405465123320678216L;
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,36,private static final long serialVersionUID = 3405465123320678216L;
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,53, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,53,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,59,"ublic double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,59,"public double integrate(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,91,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/SimpsonIntegrator.java,91,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,19,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,20,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,35,tatic final long serialVersionUID = 4978222553983172543L;
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,35,private static final long serialVersionUID = 4978222553983172543L;
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,94, @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,94,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,100,"ublic double integrate(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,100,"public double integrate(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,122,"hrow new ConvergenceException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/TrapezoidIntegrator.java,122,throw new MaxIterationsExceededException(maximalIterationCount);
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,21,mport org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,22,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,33,/** Serializable version identifier */
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,34,private static final long serialVersionUID = -6587513359895466954L;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,177,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,178,"maximum number of iterations reached"");"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,180,throw new MaxIterationsExceededException(maxIterations);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,245,private static final long serialVersionUID = 5378525034886164398L;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,23,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,"Continued fraction convergents diverged to +/- "" +"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,157,"infinity."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,157,"""Continued fraction convergents diverged to +/- infinity for value {0}"","
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,new Object[] { new Double(x) });
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173,"Continued fraction convergents failed to converge."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173,"throw new MaxIterationsExceededException(maxIterations,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,174,"""Continued fraction convergents failed to converge for value {0}"","
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,new Object[] { new Double(x) });
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,18,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,25,* @version $Revision:$
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,27,public class MaxIterationsExceededExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,29,public void testConstructor(){
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,30,MaxIterationsExceededException ex = new MaxIterationsExceededException(1000000);
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,31,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,32,assertNotNull(ex.getMessage());
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,33,"assertTrue(ex.getMessage().indexOf(""1,000,000"") > 0);"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,34,"assertEquals(1000000, ex.getMaxIterations());"
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,35,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));

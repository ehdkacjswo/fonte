is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,17,package org.apache.commons.math3.util;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,19,import org.apache.commons.math3.Field;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,20,import org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,23,* This class wraps a {@code double} value in an object. It is similar to the
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,24,"* standard class {@link Double}, while also implementing the"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,25,* {@link FieldElement} interface.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,27,* @since 3.1
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,30,"public class Decimal64 extends Number implements FieldElement<Decimal64>,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,31,Comparable<Decimal64> {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,33,/** The constant value of {@code 0d} as a {@code Decimal64}. */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,34,public static final Decimal64 ZERO;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,36,/** The constant value of {@code 1d} as a {@code Decimal64}. */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,37,public static final Decimal64 ONE;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,40,* The constant value of {@link Double#NEGATIVE_INFINITY} as a
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,41,* {@code Decimal64}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,43,public static final Decimal64 NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,46,* The constant value of {@link Double#POSITIVE_INFINITY} as a
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,47,* {@code Decimal64}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,49,public static final Decimal64 POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,51,/** The constant value of {@link Double#NaN} as a {@code Decimal64}. */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,52,public static final Decimal64 NAN;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,55,private static final long serialVersionUID = 20120227L;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,57,static {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,58,ZERO = new Decimal64(0d);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,59,ONE = new Decimal64(1d);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,60,NEGATIVE_INFINITY = new Decimal64(Double.NEGATIVE_INFINITY);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,61,POSITIVE_INFINITY = new Decimal64(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,62,NAN = new Decimal64(Double.NaN);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,65,/** The primitive {@code double} value of this object. */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,66,private final double value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,69,* Creates a new instance of this class.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,71,* @param x the primitive {@code double} value of the object to be created
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,73,public Decimal64(final double x) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,74,this.value = x;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,78,* Methods from the FieldElement interface.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,81,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,82,public Field<Decimal64> getField() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,83,return Decimal64Field.getInstance();
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,87,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,89,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,90,* {@code this.add(a).equals(new Decimal64(this.doubleValue()
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,91,* + a.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,93,public Decimal64 add(final Decimal64 a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,94,return new Decimal64(this.value + a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,98,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,100,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,101,* {@code this.subtract(a).equals(new Decimal64(this.doubleValue()
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,102,* - a.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,104,public Decimal64 subtract(final Decimal64 a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,105,return new Decimal64(this.value - a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,109,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,111,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,112,* {@code this.negate().equals(new Decimal64(-this.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,114,public Decimal64 negate() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,115,return new Decimal64(-this.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,119,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,121,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,122,* {@code this.multiply(a).equals(new Decimal64(this.doubleValue()
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,123,* * a.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,125,public Decimal64 multiply(final Decimal64 a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,126,return new Decimal64(this.value * a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,130,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,132,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,133,* {@code this.multiply(n).equals(new Decimal64(n * this.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,135,public Decimal64 multiply(final int n) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,136,return new Decimal64(n * this.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,140,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,142,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,143,* {@code this.divide(a).equals(new Decimal64(this.doubleValue()
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,144,* / a.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,147,public Decimal64 divide(final Decimal64 a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,148,return new Decimal64(this.value / a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,152,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,154,* The current implementation strictly enforces
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,155,* {@code this.reciprocal().equals(new Decimal64(1.0
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,156,* / this.doubleValue()))}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,158,public Decimal64 reciprocal() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,159,return new Decimal64(1.0 / this.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,163,* Methods from the Number abstract class
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,167,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,169,* The current implementation performs casting to a {@code byte}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,171,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,172,public byte byteValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,173,return (byte) value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,177,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,179,* The current implementation performs casting to a {@code short}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,181,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,182,public short shortValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,183,return (short) value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,187,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,189,* The current implementation performs casting to a {@code int}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,191,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,192,public int intValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,193,return (int) value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,197,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,199,* The current implementation performs casting to a {@code long}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,201,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,202,public long longValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,203,return (long) value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,207,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,209,* The current implementation performs casting to a {@code float}.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,211,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,212,public float floatValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,213,return (float) value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,216,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,217,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,218,public double doubleValue() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,219,return value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,223,* Methods from the Comparable interface.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,227,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,229,* The current implementation returns the same value as
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,230,* <center> {@code new Double(this.doubleValue()).compareTo(new
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,231,* Double(o.doubleValue()))} </center>
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,233,* @see Double#compareTo(Double)
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,235,public int compareTo(final Decimal64 o) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,236,"return Double.compare(this.value, o.value);"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,240,* Methods from the Object abstract class.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,243,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,244,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,245,public boolean equals(final Object obj) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,246,if (obj instanceof Decimal64) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,247,final Decimal64 that = (Decimal64) obj;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,248,return Double.doubleToLongBits(this.value) == Double
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,249,.doubleToLongBits(that.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,251,return false;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,255,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,257,* The current implementation returns the same value as
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,258,* {@code new Double(this.doubleValue()).hashCode()}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,260,* @see Double#hashCode()
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,262,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,263,public int hashCode() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,264,long v = Double.doubleToLongBits(value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,265,return (int) (v ^ (v >>> 32));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,269,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,271,* The returned {@code String} is equal to
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,272,* {@code Double.toString(this.doubleValue())}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,274,* @see Double#toString(double)
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,276,@Override
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,277,public String toString() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,278,return Double.toString(value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,282,* Methods inspired by the Double class.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,286,* Returns {@code true} if {@code this} double precision number is infinite
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,287,* ({@link Double#POSITIVE_INFINITY} or {@link Double#NEGATIVE_INFINITY}).
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,289,* @return {@code true} if {@code this} number is infinite
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,291,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,292,return Double.isInfinite(value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,296,* Returns {@code true} if {@code this} double precision number is
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,297,"* Not-a-Number ({@code NaN}), false otherwise."
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,299,* @return {@code true} if {@code this} is {@code NaN}
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,301,public boolean isNaN() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,302,return Double.isNaN(value);
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,17,package org.apache.commons.math3.util;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,19,import org.apache.commons.math3.Field;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,20,import org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,23,* The field of double precision floating-point numbers.
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,25,* @since 3.1
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,26,* @version $Id$
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,27,* @see Decimal64
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,29,public class Decimal64Field implements Field<Decimal64> {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,31,/** The unique instance of this class. */
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,32,private static final Decimal64Field INSTANCE = new Decimal64Field();
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,34,/** Default constructor. */
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,35,private Decimal64Field() {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,36,// Do nothing
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,40,* Returns the unique instance of this class.
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,42,* @return the unique instance of this class
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,44,public static final Decimal64Field getInstance() {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,45,return INSTANCE;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,48,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,49,public Decimal64 getZero() {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,50,return Decimal64.ZERO;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,53,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,54,public Decimal64 getOne() {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,55,return Decimal64.ONE;
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,58,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,59,public Class<? extends FieldElement<Decimal64>> getRuntimeClass() {
True,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,src/main/java/org/apache/commons/math3/util/Decimal64Field.java,60,return Decimal64.class;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,17,package org.apache.commons.math3.util;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,19,import junit.framework.Assert;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,23,public class Decimal64Test {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,24,public static final double X = 1.2345;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,26,public static final Decimal64 PLUS_X = new Decimal64(X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,28,public static final Decimal64 MINUS_X = new Decimal64(-X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,30,public static final double Y = 6.789;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,32,public static final Decimal64 PLUS_Y = new Decimal64(Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,34,public static final Decimal64 MINUS_Y = new Decimal64(-Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,36,public static final Decimal64 PLUS_ZERO = new Decimal64(0.0);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,38,public static final Decimal64 MINUS_ZERO = new Decimal64(-0.0);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,40,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,41,public void testAdd() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,42,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,44,expected = new Decimal64(X + Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,45,actual = PLUS_X.add(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,46,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,47,actual = PLUS_Y.add(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,48,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,50,expected = new Decimal64(X + (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,51,actual = PLUS_X.add(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,52,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,53,actual = MINUS_Y.add(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,54,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,56,expected = new Decimal64((-X) + (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,57,actual = MINUS_X.add(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,58,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,59,actual = MINUS_Y.add(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,60,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,62,expected = Decimal64.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,63,actual = PLUS_X.add(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,64,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,65,actual = Decimal64.POSITIVE_INFINITY.add(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,66,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,67,actual = MINUS_X.add(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,68,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,69,actual = Decimal64.POSITIVE_INFINITY.add(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,70,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,71,actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,72,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,74,expected = Decimal64.NEGATIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,75,actual = PLUS_X.add(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,76,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,77,actual = Decimal64.NEGATIVE_INFINITY.add(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,78,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,79,actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,80,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,81,actual = MINUS_X.add(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,82,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,83,actual = Decimal64.NEGATIVE_INFINITY.add(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,84,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,86,expected = Decimal64.NAN;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,87,actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,88,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,89,actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,90,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,91,actual = PLUS_X.add(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,92,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,93,actual = Decimal64.NAN.add(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,94,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,95,actual = MINUS_X.add(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,96,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,97,actual = Decimal64.NAN.add(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,98,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,99,actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,100,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,101,actual = Decimal64.NAN.add(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,102,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,103,actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,104,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,105,actual = Decimal64.NAN.add(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,106,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,107,actual = Decimal64.NAN.add(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,108,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,111,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,112,public void testSubtract() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,113,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,115,expected = new Decimal64(X - Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,116,actual = PLUS_X.subtract(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,117,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,119,expected = new Decimal64(X - (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,120,actual = PLUS_X.subtract(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,121,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,123,expected = new Decimal64((-X) - Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,124,actual = MINUS_X.subtract(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,125,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,127,expected = new Decimal64((-X) - (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,128,actual = MINUS_X.subtract(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,129,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,131,expected = Decimal64.NEGATIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,132,actual = PLUS_X.subtract(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,133,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,134,actual = MINUS_X.subtract(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,135,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,136,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,137,.subtract(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,138,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,140,expected = Decimal64.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,141,actual = PLUS_X.subtract(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,142,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,143,actual = MINUS_X.subtract(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,144,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,145,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,146,.subtract(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,147,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,149,expected = Decimal64.NAN;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,150,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,151,.subtract(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,152,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,153,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,154,.subtract(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,155,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,156,actual = PLUS_X.subtract(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,157,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,158,actual = Decimal64.NAN.subtract(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,159,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,160,actual = MINUS_X.subtract(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,161,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,162,actual = Decimal64.NAN.subtract(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,163,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,164,actual = Decimal64.POSITIVE_INFINITY.subtract(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,165,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,166,actual = Decimal64.NAN.subtract(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,167,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,168,actual = Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,169,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,170,actual = Decimal64.NAN.subtract(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,171,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,172,actual = Decimal64.NAN.subtract(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,173,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,176,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,177,public void testNegate() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,178,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,180,expected = MINUS_X;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,181,actual = PLUS_X.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,182,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,184,expected = PLUS_X;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,185,actual = MINUS_X.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,186,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,188,expected = MINUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,189,actual = PLUS_ZERO.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,190,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,192,expected = PLUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,193,actual = MINUS_ZERO.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,194,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,196,expected = Decimal64.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,197,actual = Decimal64.NEGATIVE_INFINITY.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,198,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,200,expected = Decimal64.NEGATIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,201,actual = Decimal64.POSITIVE_INFINITY.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,202,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,204,expected = Decimal64.NAN;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,205,actual = Decimal64.NAN.negate();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,206,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,209,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,210,public void testMultiply() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,211,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,213,expected = new Decimal64(X * Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,214,actual = PLUS_X.multiply(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,215,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,216,actual = PLUS_Y.multiply(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,217,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,219,expected = new Decimal64(X * (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,220,actual = PLUS_X.multiply(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,221,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,222,actual = MINUS_Y.multiply(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,223,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,225,expected = new Decimal64((-X) * (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,226,actual = MINUS_X.multiply(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,227,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,228,actual = MINUS_Y.multiply(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,229,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,231,expected = Decimal64.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,232,actual = PLUS_X.multiply(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,233,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,234,actual = Decimal64.POSITIVE_INFINITY.multiply(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,235,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,236,actual = MINUS_X.multiply(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,237,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,238,actual = Decimal64.NEGATIVE_INFINITY.multiply(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,239,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,240,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,241,.multiply(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,242,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,243,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,244,.multiply(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,245,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,247,expected = Decimal64.NEGATIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,248,actual = PLUS_X.multiply(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,249,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,250,actual = Decimal64.NEGATIVE_INFINITY.multiply(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,251,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,252,actual = MINUS_X.multiply(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,253,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,254,actual = Decimal64.POSITIVE_INFINITY.multiply(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,255,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,256,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,257,.multiply(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,258,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,259,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,260,.multiply(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,261,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,263,expected = Decimal64.NAN;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,264,actual = PLUS_X.multiply(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,265,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,266,actual = Decimal64.NAN.multiply(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,267,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,268,actual = MINUS_X.multiply(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,269,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,270,actual = Decimal64.NAN.multiply(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,271,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,272,actual = Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,273,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,274,actual = Decimal64.NAN.multiply(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,275,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,276,actual = Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,277,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,278,actual = Decimal64.NAN.multiply(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,279,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,280,actual = Decimal64.NAN.multiply(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,281,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,284,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,285,public void testDivide() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,286,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,288,expected = new Decimal64(X / Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,289,actual = PLUS_X.divide(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,290,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,292,expected = new Decimal64(X / (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,293,actual = PLUS_X.divide(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,294,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,296,expected = new Decimal64((-X) / Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,297,actual = MINUS_X.divide(PLUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,298,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,300,expected = new Decimal64((-X) / (-Y));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,301,actual = MINUS_X.divide(MINUS_Y);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,302,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,304,expected = PLUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,305,actual = PLUS_X.divide(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,306,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,307,actual = MINUS_X.divide(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,308,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,310,expected = MINUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,311,actual = MINUS_X.divide(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,312,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,313,actual = PLUS_X.divide(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,314,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,316,expected = Decimal64.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,317,actual = Decimal64.POSITIVE_INFINITY.divide(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,318,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,319,actual = Decimal64.NEGATIVE_INFINITY.divide(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,320,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,321,actual = PLUS_X.divide(PLUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,322,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,323,actual = MINUS_X.divide(MINUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,324,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,326,expected = Decimal64.NEGATIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,327,actual = Decimal64.POSITIVE_INFINITY.divide(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,328,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,329,actual = Decimal64.NEGATIVE_INFINITY.divide(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,330,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,331,actual = PLUS_X.divide(MINUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,332,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,333,actual = MINUS_X.divide(PLUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,334,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,336,expected = Decimal64.NAN;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,337,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,338,.divide(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,339,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,340,actual = Decimal64.POSITIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,341,.divide(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,342,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,343,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,344,.divide(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,345,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,346,actual = Decimal64.NEGATIVE_INFINITY
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,347,.divide(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,348,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,349,actual = PLUS_X.divide(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,350,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,351,actual = Decimal64.NAN.divide(PLUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,352,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,353,actual = MINUS_X.divide(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,354,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,355,actual = Decimal64.NAN.divide(MINUS_X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,356,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,357,actual = Decimal64.POSITIVE_INFINITY.divide(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,358,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,359,actual = Decimal64.NAN.divide(Decimal64.POSITIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,360,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,361,actual = Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,362,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,363,actual = Decimal64.NAN.divide(Decimal64.NEGATIVE_INFINITY);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,364,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,365,actual = Decimal64.NAN.divide(Decimal64.NAN);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,366,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,367,actual = PLUS_ZERO.divide(PLUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,368,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,369,actual = PLUS_ZERO.divide(MINUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,370,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,371,actual = MINUS_ZERO.divide(PLUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,372,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,373,actual = MINUS_ZERO.divide(MINUS_ZERO);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,374,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,377,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,378,public void testReciprocal() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,379,"Decimal64 expected, actual;"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,381,expected = new Decimal64(1.0 / X);
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,382,actual = PLUS_X.reciprocal();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,383,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,385,expected = new Decimal64(1.0 / (-X));
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,386,actual = MINUS_X.reciprocal();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,387,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,389,expected = PLUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,390,actual = Decimal64.POSITIVE_INFINITY.reciprocal();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,391,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,393,expected = MINUS_ZERO;
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,394,actual = Decimal64.NEGATIVE_INFINITY.reciprocal();
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,395,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,398,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,399,public void testIsInfinite() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,400,Assert.assertFalse(MINUS_X.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,401,Assert.assertFalse(PLUS_X.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,402,Assert.assertFalse(MINUS_Y.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,403,Assert.assertFalse(PLUS_Y.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,404,Assert.assertFalse(Decimal64.NAN.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,406,Assert.assertTrue(Decimal64.NEGATIVE_INFINITY.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,407,Assert.assertTrue(Decimal64.POSITIVE_INFINITY.isInfinite());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,410,@Test
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,411,public void testIsNaN() {
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,412,Assert.assertFalse(MINUS_X.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,413,Assert.assertFalse(PLUS_X.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,414,Assert.assertFalse(MINUS_Y.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,415,Assert.assertFalse(PLUS_Y.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,416,Assert.assertFalse(Decimal64.NEGATIVE_INFINITY.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,417,Assert.assertFalse(Decimal64.POSITIVE_INFINITY.isNaN());
True,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,src/test/java/org/apache/commons/math3/util/Decimal64Test.java,419,Assert.assertTrue(Decimal64.NAN.isNaN());

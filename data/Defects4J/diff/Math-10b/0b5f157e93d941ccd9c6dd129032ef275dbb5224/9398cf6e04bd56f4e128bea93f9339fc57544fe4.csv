is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,41,/** Compute n &times; this. Multiplication by an integer number is defined
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,42,* as the following sum
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,43,* <center>
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,44,* n &times; this = &sum;<sub>i=1</sub><sup>n</sup> this.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,45,* </center>
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,46,* @param n Number of times {@code this} must be added to itself.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,47,* @return A new element representing n &times; this.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,49,T multiply(int n);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,428,"* Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,429,* interpreted as a integer number.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,431,* @param  factor value to be multiplied by this {@code Complex}.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,432,* @return {@code this * factor}.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,433,* @see #multiply(Complex)
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,435,public Complex multiply(final int factor) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,436,if (isNaN) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,437,return NaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,439,if (Double.isInfinite(real) ||
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,440,Double.isInfinite(imaginary)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,441,return INF;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,443,"return createComplex(real * factor, imaginary * factor);"
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,249,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,250,public BigReal multiply(final int n) {
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,251,return new BigReal(d.multiply(new BigDecimal(n)));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,316,z = Complex.NaN.multiply(5);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,317,"Assert.assertSame(Complex.NaN, z);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,319,ublic void testMultiplyInInf() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,321,public void testMultiplyInfInf() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,356,int zInt = -5;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,357,Complex zComplex = new Complex(zInt);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,358,"Assert.assertEquals(x.multiply(zComplex), x.multiply(zInt));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,90,int n = 1024;
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,91,"Assert.assertEquals(1.0, b.multiply(n).doubleValue(), 1.0e-15);"

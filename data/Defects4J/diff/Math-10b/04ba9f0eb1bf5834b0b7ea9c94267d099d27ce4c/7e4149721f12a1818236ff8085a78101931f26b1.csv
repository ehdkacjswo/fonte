is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,20,mport java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,66,/** Found function values at optima. */
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,67,private double[] optimaValues;
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,178," descending order if maximizing), followed by and null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,179,"* descending order if maximizing), followed by Double.NaN elements"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,180," elements will be null if the {@link #optimize(UnivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,181,"* elements will be NaN if the {@link #optimize(UnivariateRealFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,183," if the first element is non null, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,184,"* if the first element is not NaN, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,189,* @see #getOptimaValues()
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,198,/** Get all the function values at optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,199,"* #optimize(UnivariateRealFunction, GoalType, double, double) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,200,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,201,* The returned array as one element for each start as specified
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,202,* in the constructor. It is ordered with the results from the
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,203,"* runs that did converge first, sorted from best to worst"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,204,* objective value (i.e in ascending order if minimizing and in
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,205,"* descending order if maximizing), followed by Double.NaN elements"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,206,* corresponding to the runs that did not converge. This means all
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,207,"* elements will be NaN if the {@link #optimize(UnivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,208,"* GoalType, double, double) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,209,* ConvergenceException ConvergenceException}). This also means that
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,210,"* if the first element is not NaN, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,211,* all starts.</p>
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,212,* @return array containing the optima
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,213,"* @exception IllegalStateException if {@link #optimize(UnivariateRealFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,214,"* GoalType, double, double) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,215,* @see #getOptima()
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,217,public double[] getOptimaValues() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,218,if (optimaValues == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,219,"throw MathRuntimeException.createIllegalStateException(""no optimum computed yet"");"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,221,return optimaValues.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,231,optimaValues     = new double[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,214,"ptima[i] = optimizer.optimize(f, goalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,215,"ath.min(bound1, bound2),"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,216,"ath.max(bound1, bound2));"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,243,"optima[i]       = optimizer.optimize(f, goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,244,"Math.min(bound1, bound2),"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,245,"Math.max(bound1, bound2));"
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,246,optimaValues[i] = optimizer.getFunctionValue();
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,218,ptima[i] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,248,optima[i]       = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,249,optimaValues[i] = Double.NaN;
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,220,ptima[i] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,251,optima[i]       = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,252,optimaValues[i] = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,266,optimaValues[i] = optimaValues[--lastNaN];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,267,optimaValues[lastNaN + 1] = Double.NaN;
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,236,"rrays.sort(optima, 0, lastNaN);"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,237,f (goalType == GoalType.MAXIMIZE) {
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,238,"or (int i = 0, j = lastNaN - 1; i < j; ++i, --j) {"
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,239,ouble tmp = optima[i];
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,240,ptima[i] = optima[j];
False,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,241,ptima[j] = tmp;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,271,double currX = optima[0];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,272,double currY = optimaValues[0];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,273,for (int j = 1; j < lastNaN; ++j) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,274,final double prevY = currY;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,275,currX = optima[j];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,276,currY = optimaValues[j];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,277,if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,278,// the current element should be inserted closer to the beginning
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,279,int i = j - 1;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,280,double mIX = optima[i];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,281,double mIY = optimaValues[i];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,282,while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,283,optima[i + 1]       = mIX;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,284,optimaValues[i + 1] = mIY;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,285,if (i-- != 0) {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,286,mIX = optima[i];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,287,mIY = optimaValues[i];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,288,} else {
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,289,mIX = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,290,mIY = Double.NaN;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,293,optima[i + 1]       = currX;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,294,optimaValues[i + 1] = currY;
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,295,currX = optima[j];
True,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,296,currY = optimaValues[j];

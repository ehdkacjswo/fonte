is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,18,package org.apache.commons.math3.optimization;
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,21,* Simple optimization constraints: lower and upper bounds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,22,* The valid range of the parameters is an interval that can be infinite
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,23,* (in one or both directions).
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,24,* <br/>
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,25,* Immutable class.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,28,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,30,public class SimpleBounds implements OptimizationData {
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,31,/** Lower bounds. */
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,32,private final double[] lower;
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,33,/** Upper bounds. */
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,34,private final double[] upper;
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,37,* @param lB Lower bounds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,38,* @param uB Upper bounds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,40,"public SimpleBounds(double[] lB,"
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,41,double[] uB) {
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,42,lower = lB.clone();
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,43,upper = uB.clone();
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,47,* Gets the lower bounds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,49,* @return the initial guess.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,51,public double[] getLower() {
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,52,return lower.clone();
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,55,* Gets the lower bounds.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,57,* @return the initial guess.
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,59,public double[] getUpper() {
True,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java,60,return upper.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,28,import org.apache.commons.math3.optimization.SimpleBounds;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,32,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,33,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,34,import org.apache.commons.math3.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,34, This base class handles the boiler-plate methods associated to thresholds
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,35," settings, iterations and evaluations counting."
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,38,"* This base class handles the boiler-plate methods associated to thresholds,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,39,"* evaluations counting, initial guess and simple bounds settings."
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,56,/** Lower bounds. */
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,57,private double[] lowerBound;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,58,/** Upper bounds. */
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,59,private double[] upperBound;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,132,*  <li>{@link SimpleBounds}</li>
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,179,*  <li>{@link SimpleBounds}</li>
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,191,// Set internal state.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,196,// Retrieve other settings.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,198,// Check input consistency.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,199,checkParameters();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,211,*  <li>{@link SimpleBounds}</li>
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,222,if (data instanceof SimpleBounds) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,223,final SimpleBounds bounds = (SimpleBounds) data;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,224,lowerBound = bounds.getLower();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,225,upperBound = bounds.getUpper();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,226,continue;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,222,eturn start.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,242,return start == null ? null : start.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,245,* @return the lower bounds.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,247,public double[] getLowerBound() {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,248,return lowerBound == null ? null : lowerBound.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,251,* @return the upper bounds.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,253,public double[] getUpperBound() {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,254,return upperBound == null ? null : upperBound.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,266,* Check parameters consistency.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,268,private void checkParameters() {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,269,if (start != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,270,final int dim = start.length;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,271,if (lowerBound != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,272,if (lowerBound.length != dim) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,273,"throw new DimensionMismatchException(lowerBound.length, dim);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,275,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,276,final double v = start[i];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,277,final double lo = lowerBound[i];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,278,if (v < lo) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,279,"throw new NumberIsTooSmallException(v, lo, true);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,283,if (upperBound != null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,284,if (upperBound.length != dim) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,285,"throw new DimensionMismatchException(upperBound.length, dim);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,287,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,288,final double v = start[i];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,289,final double hi = upperBound[i];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,290,if (v > hi) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,291,"throw new NumberIsTooLargeException(v, hi, true);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,296,"// If the bounds were not specified, the allowed interval is"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,297,"// assumed to be [-inf, +inf]."
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,298,if (lowerBound == null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,299,lowerBound = new double[dim];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,300,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,301,lowerBound[i] = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,304,if (upperBound == null) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,305,upperBound = new double[dim];
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,306,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java,307,upperBound[i] = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,24,import org.apache.commons.math3.optimization.InitialGuess;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,25,import org.apache.commons.math3.optimization.SimpleBounds;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,26,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,27,mport org.apache.commons.math3.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,28,mport org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,40,* @deprecated As of 3.1 since the {@link BaseAbstractMultivariateSimpleBoundsOptimizer
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,41,* base class} contains similar functionality.
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,43,@Deprecated
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,46,** Lower bounds. */
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,47,rivate double[] lowerBound;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,48,** Upper bounds. */
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,49,rivate double[] upperBound;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,73,eturn lowerBound.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,70,return super.getLowerBound();
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,80,eturn upperBound.clone();
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,77,return super.getUpperBound();
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,86,ouble[] startPoint) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,87,"eturn optimize(maxEval, f, goalType, startPoint, null, null);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,83,double[] startPoint) {
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,84,"return super.optimizeInternal(maxEval, f, goalType,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,85,new InitialGuess(startPoint));
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,92,"ouble[] startPoint,"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,93,"ouble[] lower, double[] upper) {"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,94,/ Checks.
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,95,inal int dim = startPoint.length;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,96,f (lower != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,97,f (lower.length != dim) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,98,"hrow new DimensionMismatchException(lower.length, dim);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,100,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,101,inal double v = startPoint[i];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,102,inal double lo = lower[i];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,103,f (v < lo) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,104,"hrow new NumberIsTooSmallException(v, lo, true);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,108,f (upper != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,109,f (upper.length != dim) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,110,"hrow new DimensionMismatchException(upper.length, dim);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,112,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,113,inal double v = startPoint[i];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,114,inal double hi = upper[i];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,115,f (v > hi) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,116,"hrow new NumberIsTooLargeException(v, hi, true);"
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,121,/ Initialization.
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,122,f (lower == null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,123,owerBound = new double[dim];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,124,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,125,owerBound[i] = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,127, else {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,128,owerBound = lower.clone();
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,130,f (upper == null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,131,pperBound = new double[dim];
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,132,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,133,pperBound[i] = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,135, else {
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,136,pperBound = upper.clone();
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,139,/ Base class method performs the non bound-specific initializations.
False,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,140,"eturn super.optimize(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,90,"double[] startPoint,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,91,"double[] lower, double[] upper) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,92,"return super.optimizeInternal(maxEval, f, goalType,"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,93,"new InitialGuess(startPoint),"
True,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java,94,"new SimpleBounds(lower, upper));"
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,29,import org.apache.commons.math3.optimization.InitialGuess;
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,30,import org.apache.commons.math3.optimization.SimpleBounds;
False,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,321,"ointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);"
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,323,PointValuePair result = boundaries == null ?
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,324,"optim.optimize(maxEvaluations, func, goal,"
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,325,new InitialGuess(startPoint)) :
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,326,"optim.optimize(maxEvaluations, func, goal,"
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,327,"new InitialGuess(startPoint),"
True,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java,328,"new SimpleBounds(lB, uB));"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,34,import org.apache.commons.math3.optimization.InitialGuess;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,35,import org.apache.commons.math3.optimization.SimpleBounds;
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,465,"ointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,467,PointValuePair result = boundaries == null ?
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,468,"optim.optimize(maxEvaluations, func, goal,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,469,new InitialGuess(startPoint)) :
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,470,"optim.optimize(maxEvaluations, func, goal,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,471,"new InitialGuess(startPoint),"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,472,"new SimpleBounds(lB, uB));"

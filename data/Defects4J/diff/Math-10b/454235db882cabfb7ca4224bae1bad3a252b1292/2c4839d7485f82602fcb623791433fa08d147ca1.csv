is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,20,import java.io.Serializable;
False,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,31,"ublic class PointValuePair extends Pair<double[], Double> {"
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,33,"public class PointValuePair extends Pair<double[], Double> implements Serializable {"
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,35,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,36,private static final long serialVersionUID = 20120513L;
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,87,* Replace the instance with a data transfer object for serialization.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,88,* @return data transfer object that will be serialized
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,90,private Object writeReplace() {
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,91,"return new DataTransferObject(getKey(), getValue());"
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,94,/** Internal class used only for serialization. */
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,95,private static class DataTransferObject implements Serializable {
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,97,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,98,private static final long serialVersionUID = 20120513L;
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,100,/** Point coordinates.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,101,* @Serial
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,103,final double[] point;
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,105,/** Value of the objective function at the point.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,106,* @Serial
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,108,final double value;
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,110,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,111,* @param point Point coordinates.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,112,* @param value Value of the objective function at the point.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,114,"public DataTransferObject(final double[] point, final double value) {"
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,115,this.point = point.clone();
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,116,this.value = value;
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,119,/** Replace the deserialized data transfer object with a {@link PointValuePair}.
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,120,* @return replacement {@link PointValuePair}
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,122,private Object readResolve() {
True,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointValuePair.java,123,"return new PointValuePair(point, value, false);"
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,20,import java.io.Serializable;
False,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,31,"ublic class PointVectorValuePair extends Pair<double[], double[]> {"
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,33,"public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable {"
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,35,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,36,private static final long serialVersionUID = 20120513L;
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,112,* Replace the instance with a data transfer object for serialization.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,113,* @return data transfer object that will be serialized
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,115,private Object writeReplace() {
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,116,"return new DataTransferObject(getKey(), getValue());"
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,119,/** Internal class used only for serialization. */
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,120,private static class DataTransferObject implements Serializable {
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,122,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,123,private static final long serialVersionUID = 20120513L;
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,125,/** Point coordinates.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,126,* @Serial
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,128,final double[] point;
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,130,/** Value of the objective function at the point.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,131,* @Serial
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,133,final double[] value;
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,135,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,136,* @param point Point coordinates.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,137,* @param value Value of the objective function at the point.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,139,"public DataTransferObject(final double[] point, final double[] value) {"
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,140,this.point = point.clone();
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,141,this.value = value.clone();
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,144,/** Replace the deserialized data transfer object with a {@link PointValuePair}.
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,145,* @return replacement {@link PointValuePair}
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,147,private Object readResolve() {
True,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java,148,"return new PointVectorValuePair(point, value, false);"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,18,package org.apache.commons.math3.optimization;
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,21,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,25,public class PointValuePairTest {
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,27,@Test
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,28,public void testSerial() {
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,29,"PointValuePair pv1 = new PointValuePair(new double[] { 1.0, 2.0, 3.0 }, 4.0);"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,30,PointValuePair pv2 = (PointValuePair) TestUtils.serializeAndRecover(pv1);
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,31,"Assert.assertEquals(pv1.getKey().length, pv2.getKey().length);"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,32,for (int i = 0; i < pv1.getKey().length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,33,"Assert.assertEquals(pv1.getKey()[i], pv2.getKey()[i], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java,35,"Assert.assertEquals(pv1.getValue(), pv2.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,18,package org.apache.commons.math3.optimization;
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,21,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,25,public class PointVectorValuePairTest {
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,27,@Test
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,28,public void testSerial() {
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,29,"PointVectorValuePair pv1 = new PointVectorValuePair(new double[] { 1.0, 2.0, 3.0 },"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,30,"new double[] { 4.0, 5.0 });"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,31,PointVectorValuePair pv2 = (PointVectorValuePair) TestUtils.serializeAndRecover(pv1);
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,32,"Assert.assertEquals(pv1.getKey().length, pv2.getKey().length);"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,33,for (int i = 0; i < pv1.getKey().length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,34,"Assert.assertEquals(pv1.getKey()[i], pv2.getKey()[i], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,36,"Assert.assertEquals(pv1.getValue().length, pv2.getValue().length);"
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,37,for (int i = 0; i < pv1.getValue().length; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java,38,"Assert.assertEquals(pv1.getValue()[i], pv2.getValue()[i], 1.0e-15);"

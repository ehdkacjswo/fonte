is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,21, The Zipf (or zeta) Distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/ZipfDistribution.html"">Zipf"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,26, Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,27,* Implementation of the Zipf distribution.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,29,"* @see <a href=""http://mathworld.wolfram.com/ZipfDistribution.html"">Zipf distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,32,ublic interface ZipfDistribution extends IntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,32,public class ZipfDistribution extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,33,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,34,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,35,private static final long serialVersionUID = -140627372283420404L;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,36,/** Number of elements. */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,37,private final int numberOfElements;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,38,/** Exponent parameter of the distribution. */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,39,private final double exponent;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,42,* Create a new Zipf distribution with the given number of elements and
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,43,* exponent.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,45,* @param numberOfElements Number of elements.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,46,* @param exponent Exponent.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,47,* @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,48,* or {@code exponent <= 0}.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,50,"public ZipfDistribution(final int numberOfElements, final double exponent)"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,51,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,52,if (numberOfElements <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,53,"throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,54,numberOfElements);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,56,if (exponent <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,57,"throw new NotStrictlyPositiveException(LocalizedFormats.EXPONENT,"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,58,exponent);
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,61,this.numberOfElements = numberOfElements;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,62,this.exponent = exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,38,nt getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,70,public int getNumberOfElements() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,71,return numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,41, Get the exponent characterising the distribution.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,75,* Get the exponent characterizing the distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,45,ouble getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,79,public double getExponent() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,80,return exponent;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,83,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,84,public double probability(final int x) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,85,if (x <= 0 || x > numberOfElements) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,86,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,89,"return (1.0 / FastMath.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,92,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,93,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,94,public double cumulativeProbability(final int x) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,95,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,96,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,97,} else if (x >= numberOfElements) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,98,return 1.0;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,101,"return generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,104,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,105,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,106,protected int getDomainLowerBound(final double p) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,107,return 0;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,110,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,111,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,112,protected int getDomainUpperBound(final double p) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,113,return numberOfElements;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,117,* Calculates the Nth generalized harmonic number. See
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,118,"* <a href=""http://mathworld.wolfram.com/HarmonicSeries.html"">Harmonic"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,119,* Series</a>.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,121,* @param n Term in the series to calculate (must be larger than 1)
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,122,* @param m Exponent (special case {@code m = 1} is the harmonic series).
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,123,* @return the n<sup>th</sup> generalized harmonic number.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,125,"private double generalizedHarmonic(final int n, final double m) {"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,126,double value = 0;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,127,for (int k = n; k > 0; --k) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,128,"value += 1.0 / FastMath.pow(k, m);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,130,return value;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,134,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,136,* The lower bound of the support is always 1 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,138,* @return lower bound of the support (always 1)
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,140,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,141,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,142,return 1;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,146,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,148,* The upper bound of the support is the number of elements.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,150,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,152,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,153,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,154,return getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,158,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,160,"* For number of elements {@code N} and exponent {@code s}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,161,"* {@code Hs1 / Hs}, where"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,162,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,163,"*  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,164,"*  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,165,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,167,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,168,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,169,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,170,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,172,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,173,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,175,return Hs1 / Hs;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,179,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,181,"* For number of elements {@code N} and exponent {@code s}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,182,"* {@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,183,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,184,"*  <li>{@code Hs2 = generalizedHarmonic(N, s - 2)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,185,"*  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,186,"*  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,187,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,189,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,190,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,191,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,192,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,194,"final double Hs2 = generalizedHarmonic(N, s - 2);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,195,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,196,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,198,return (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,22,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,24,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,27, Implementation for the {@link ZipfDistribution}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,29, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,31,ublic class ZipfDistributionImpl extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,32,"mplements ZipfDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,33,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,34,rivate static final long serialVersionUID = -140627372283420404L;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,35,** Number of elements. */
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,36,rivate final int numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,37,** Exponent parameter of the distribution. */
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,38,rivate final double exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,41, Create a new Zipf distribution with the given number of elements and
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42, exponent.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,44, @param numberOfElements Number of elements.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,45, @param exponent Exponent.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,46, @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,47, or {@code exponent <= 0}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,49,"ublic ZipfDistributionImpl(final int numberOfElements,"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,50,inal double exponent) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,51,f (numberOfElements <= 0) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,52,"hrow new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,53,umberOfElements);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,55,f (exponent <= 0) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,56,"hrow new NotStrictlyPositiveException(LocalizedFormats.EXPONENT,"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,57,xponent);
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,60,his.numberOfElements = numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,61,his.exponent = exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,65, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,67,ublic int getNumberOfElements() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,68,eturn numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,72, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,74,ublic double getExponent() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,75,eturn exponent;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,79, The probability mass function {@code P(X = x)} for a Zipf distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,81, @param x Value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,82, @return the value of the probability mass function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,84,ublic double probability(final int x) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,85,f (x <= 0 || x > numberOfElements) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,86,eturn 0.0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,89,"eturn (1.0 / FastMath.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,93, The probability distribution function {@code P(X <= x)} for a
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,94, Zipf distribution.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,96, @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,97, @return Zipf distribution function evaluated at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,99,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,100,ublic double cumulativeProbability(final int x) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,101,f (x <= 0) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,102,eturn 0.0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,103, else if (x >= numberOfElements) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,104,eturn 1.0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,107,"eturn generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,111," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,112, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,114, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,115," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,117,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,118,rotected int getDomainLowerBound(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,119,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,123," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,124, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,126, @param p Desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,127," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,129,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,130,rotected int getDomainUpperBound(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,131,eturn numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,135, Calculates the Nth generalized harmonic number. See
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,136," <a href=""http://mathworld.wolfram.com/HarmonicSeries.html"">Harmonic"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,137, Series</a>.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,139, @param n Term in the series to calculate (must be larger than 1)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,140, @param m Exponent (special case {@code m = 1} is the harmonic series).
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,141, @return the n<sup>th</sup> generalized harmonic number.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,143,"rivate double generalizedHarmonic(final int n, final double m) {"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,144,ouble value = 0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,145,or (int k = n; k > 0; --k) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,146,"alue += 1.0 / FastMath.pow(k, m);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,148,eturn value;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,152, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,154, The lower bound of the support is always 1 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,156, @return lower bound of the support (always 1)
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,158,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,159,ublic int getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,160,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,164, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,166, The upper bound of the support is the number of elements
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,168, @return upper bound of the support
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,170,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171,ublic int getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,172,eturn getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,176, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,178," For number of elements N and exponent s, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,179, <code>Hs1 / Hs</code> where
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,180, <ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,181,"  <li><code>Hs1 = generalizedHarmonic(N, s - 1)</code></li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,182,"  <li><code>Hs = generalizedHarmonic(N, s)</code></li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,183, </ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,185, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,187,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,188,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,189,inal int N = getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,190,inal double s = getExponent();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,192,"inal double Hs1 = generalizedHarmonic(N, s - 1);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,193,"inal double Hs = generalizedHarmonic(N, s);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,195,eturn Hs1 / Hs;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,199, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,201," For number of elements N and exponent s, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,202, <code>(Hs2 / Hs) - (Hs1^2 / Hs^2)</code> where
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,203, <ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,204,"  <li><code>Hs2 = generalizedHarmonic(N, s - 2)</code></li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,205,"  <li><code>Hs1 = generalizedHarmonic(N, s - 1)</code></li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,206,"  <li><code>Hs = generalizedHarmonic(N, s)</code></li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,207, </ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,209, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,211,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,212,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,213,inal int N = getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,214,inal double s = getExponent();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,216,"inal double Hs2 = generalizedHarmonic(N, s - 2);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,217,"inal double Hs1 = generalizedHarmonic(N, s - 1);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,218,"inal double Hs = generalizedHarmonic(N, s);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,220,eturn (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,38,mport org.apache.commons.math.distribution.ZipfDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,38,import org.apache.commons.math.distribution.ZipfDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,814, Generates a random value from the {@link ZipfDistributionImpl Zipf Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,814,* Generates a random value from the {@link ZipfDistribution Zipf Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,824,"eturn nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,824,"return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,37,"ew ZipfDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,37,"new ZipfDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,42,"ew ZipfDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,42,"new ZipfDistribution(1, 0);"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,50,"eturn new ZipfDistributionImpl(10, 1);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,50,"return new ZipfDistribution(10, 1);"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,97,"ist = new ZipfDistributionImpl(2, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,97,"dist = new ZipfDistribution(2, 0.5);"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,99,"ssert.assertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,99,"Assert.assertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,44,mport org.apache.commons.math.distribution.ZipfDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,44,import org.apache.commons.math.distribution.ZipfDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1043,ipfDistributionImpl distribution = (ZipfDistributionImpl) testInstance.makeDistribution();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1043,ZipfDistribution distribution = (ZipfDistribution) testInstance.makeDistribution();

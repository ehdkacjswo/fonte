is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,97,"""Not enough knot values -- spline partition must have at least 2 points."");"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,97,"(""Not enough knot values -- spline partition must have at least 2 points."");"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,123,eturn getInstance().format( c );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,123,return getInstance().format( c );
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,108,"""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,108,"(""lower endpoint must be less than or equal to upper endpoint"");"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,155,"etNumberOfTrials(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,"ath.pow(getProbabilityOfSuccess(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,157,"ath.pow(1.0 - getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,158,etNumberOfTrials() - x);
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,155,"getNumberOfTrials(), x) *"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,"Math.pow(getProbabilityOfSuccess(), x) *"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,157,"Math.pow(1.0 - getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,158,getNumberOfTrials() - x);
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,38, Access the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,39, @return median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,41,ouble getMedian();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,38,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,39,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,41,double getMedian();
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,44, Access the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,45, @return scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,47,ouble getScale();
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,44,* Access the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,45,* @return scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,47,double getScale();
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,50, Modify the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,51, @param median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,53,oid setMedian(double median);
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,50,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,51,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,53,void setMedian(double median);
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,56, Modify the scale parameter.
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,57, @param s scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,59,oid setScale(double s);
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,56,* Modify the scale parameter.
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,57,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,59,void setScale(double s);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,29,"mplements CauchyDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,29,"implements CauchyDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,rivate double median = 0;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,35,private double median = 0;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,38,rivate double scale = 1;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,38,private double scale = 1;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,41, Creates cauchy distribution with the medain equal to zero and scale
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,42, equal to one.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,ublic CauchyDistributionImpl(){
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,"his(0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,49, Create a cauchy distribution using the given median and scale.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,50, @param median median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,51, @param s scale parameter for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,53,"ublic CauchyDistributionImpl(double median, double s){"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,uper();
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,etMedian(median);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,56,etScale(s);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,41,* Creates cauchy distribution with the medain equal to zero and scale
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,42,* equal to one.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,44,public CauchyDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,"this(0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,49,* Create a cauchy distribution using the given median and scale.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,50,* @param median median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,51,* @param s scale parameter for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,53,"public CauchyDistributionImpl(double median, double s){"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,54,super();
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,55,setMedian(median);
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,56,setScale(s);
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,60," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64,ublic double cumulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,60,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,61,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,62,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,64,public double cumulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,69, Access the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,70, @return median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,72,ublic double getMedian() {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73,eturn median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,69,* Access the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,70,* @return median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,72,public double getMedian() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,73,return median;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,ublic double getScale() {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,eturn scale;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,80,public double getScale() {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,81,return scale;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,112, Modify the median.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,113, @param median for this distribution
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,115,ublic void setMedian(double median) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,116,his.median = median;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,112,* Modify the median.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,113,* @param median for this distribution
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,115,public void setMedian(double median) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,116,this.median = median;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124,ublic void setScale(double s) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,f (s <= 0.0) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,hrow new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124,public void setScale(double s) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,if (s <= 0.0) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,throw new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129,cale = s;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,135, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,137, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,138," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,139,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,141,rotected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129,scale = s;
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,134,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,135,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,137,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,138,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,139,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,141,protected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,154," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,156, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,158, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,160,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,162,rotected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,154,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,155,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,156,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,158,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,159,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,160,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,162,protected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,175," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,177, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,179, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180, @return initial domain value
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,182,rotected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,175,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,176,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,177,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,179,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,180,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,182,protected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,158, Create a new normal distribution with the given mean and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,159, deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,158,* Create a new normal distribution with the given mean and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,159,* deviation.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,161, @param mean the mean of the distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,162, @param sd standard deviation
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,163, @return a new normal distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,161,* @param mean the mean of the distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,162,* @param sd standard deviation
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,163,* @return a new normal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,166,"reateNormalDistribution(double mean, double sd);"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,169, Create a new normal distribution with mean zero and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,170, deviation one.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,166,"createNormalDistribution(double mean, double sd);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,169,* Create a new normal distribution with mean zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,170,* deviation one.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,172, @return a new normal distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,174,ublic abstract NormalDistribution createNormalDistribution();
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,172,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,174,public abstract NormalDistribution createNormalDistribution();
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,122, Create a new normal distribution with the given mean and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,123, deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,122,* Create a new normal distribution with the given mean and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,123,* deviation.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,125, @param mean the mean of the distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,126, @param sd standard deviation
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,127, @return a new normal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,129,"ublic NormalDistribution createNormalDistribution(double mean, double sd) {"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,130,"eturn new NormalDistributionImpl(mean, sd);"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,125,* @param mean the mean of the distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,126,* @param sd standard deviation
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,127,* @return a new normal distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,129,"public NormalDistribution createNormalDistribution(double mean, double sd) {"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,130,"return new NormalDistributionImpl(mean, sd);"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,134, Create a new normal distribution with the mean zero and standard
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,135, deviation one.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,134,* Create a new normal distribution with the mean zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,135,* deviation one.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,137, @return a new normal distribution
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,139,ublic NormalDistribution createNormalDistribution() {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,140,eturn new NormalDistributionImpl();
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,137,* @return a new normal distribution
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,139,public NormalDistribution createNormalDistribution() {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,140,return new NormalDistributionImpl();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,36, Access the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,37, @return mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,39,ouble getMean();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,41, Modify the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,42, @param mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,44,oid setMean(double mean);
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,46, Access the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,47, @return standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,49,ouble getStandardDeviation();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,51, Modify the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,52, @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,54,oid setStandardDeviation(double sd);
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,36,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,37,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,39,double getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,41,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,42,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,44,void setMean(double mean);
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,46,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,47,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,49,double getStandardDeviation();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,51,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,52,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,54,void setStandardDeviation(double sd);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,31,"mplements NormalDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,31,"implements NormalDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37,rivate double mean = 0;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37,private double mean = 0;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,rivate double standardDeviation = 1;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43, Create a normal distribution using the given mean and standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44, @param mean mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45, @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,"ublic NormalDistributionImpl(double mean, double sd){"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,uper();
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,etMean(mean);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,etStandardDeviation(sd);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,private double standardDeviation = 1;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,54, Creates normal distribution with the mean equal to zero and standard
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,55, deviation equal to one.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,ublic NormalDistributionImpl(){
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,58,"his(0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,* Create a normal distribution using the given mean and standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44,* @param mean mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,"public NormalDistributionImpl(double mean, double sd){"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,super();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,setMean(mean);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,setStandardDeviation(sd);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,62, Access the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,63, @return mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,65,ublic double getMean() {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,66,eturn mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,54,* Creates normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,55,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,public NormalDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,58,"this(0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70, Modify the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,71, @param mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,73,ublic void setMean(double mean) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,74,his.mean = mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,62,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,63,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,65,public double getMean() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,66,return mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,71,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,73,public void setMean(double mean) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,74,this.mean = mean;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,78, Access the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79, @return standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,81,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,82,eturn standardDeviation;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,78,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,81,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,82,return standardDeviation;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86, Modify the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87, @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87,* @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,90,ublic void setStandardDeviation(double sd) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,91,f (sd <= 0.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,92,hrow new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,90,public void setStandardDeviation(double sd) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,91,if (sd <= 0.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,92,throw new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,tandardDeviation = sd;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,standardDeviation = sd;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,101, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,104,ublic double cumulativeProbability(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,101,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,104,public double cumulativeProbability(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,137, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,rotected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,137,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,protected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,156," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,rotected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,156,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,protected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182, @return initial domain value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184,rotected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184,protected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,87,eturn getImproperInstance().format(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,87,return getImproperInstance().format(f);

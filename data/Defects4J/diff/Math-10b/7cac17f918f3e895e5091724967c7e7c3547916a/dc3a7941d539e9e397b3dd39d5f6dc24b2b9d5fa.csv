is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,19,import java.util.Map;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,20,import java.util.TreeMap;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,21,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,22,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,25,* Base class for rules that determines the integration nodes and their
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,26,* weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,27,* Subclasses must implement the {@link #computeRule(int) computeRule} method.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,29,* <T> Type of the number used to represent the points and weights of the
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,30,* quadrature rules.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,33,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,35,public abstract class BaseRuleFactory<T extends Number> {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,36,"/** List of points and weights, indexed by the order of the rule. */"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,37,"private final Map<Integer, Pair<T[], T[]>> pointsAndWeights"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,38,"= new TreeMap<Integer, Pair<T[], T[]>>();"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,41,* Gets a copy of the quadrature rule with given number of integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,43,* @param numberOfPoints Number of integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,44,* @return a copy of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,46,"public Pair<double[], double[]> getRule(int numberOfPoints) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,47,return convertToDouble(getRuleInternal(numberOfPoints));
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,51,* Gets a rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,52,"* Rules are computed once, and cached."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,53,* The returned rule is a reference into the cache.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,55,* @param numberOfPoints Order of the rule to be retrieved.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,56,* @return the points and weights corresponding to the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,58,"protected Pair<T[], T[]> getRuleInternal(int numberOfPoints) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,59,"final Pair<T[], T[]> rule = pointsAndWeights.get(numberOfPoints);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,60,if (rule == null) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,61,addRule(computeRule(numberOfPoints));
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,62,// The rule should be available now.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,63,return getRuleInternal(numberOfPoints);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,65,return rule;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,69,* Stores a rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,71,* @param rule Rule to be stored.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,72,* @throws DimensionMismatchException if the elements of the pair do not
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,73,* have the same length.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,75,"protected void addRule(Pair<T[], T[]> rule) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,76,if (rule.getFirst().length != rule.getSecond().length) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,77,"throw new DimensionMismatchException(rule.getFirst().length,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,78,rule.getSecond().length);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,81,"pointsAndWeights.put(rule.getFirst().length, rule);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,85,* Computes the rule for the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,87,* @param numberOfPoints Order of the rule to be computed.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,88,* @return the computed rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,90,"protected abstract Pair<T[], T[]> computeRule(int numberOfPoints);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,93,* Converts the from the actual {@code Number} type to {@code double}
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,95,* @param rule Points and weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,96,* @return points and weights as {@code double}s.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,98,"private static <T extends Number> Pair<double[], double[]> convertToDouble(Pair<T[], T[]> rule) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,99,final T[] pT = rule.getFirst();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,100,final T[] wT = rule.getSecond();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,102,final int len = pT.length;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,103,final double[] pD = new double[len];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,104,final double[] wD = new double[len];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,106,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,107,pD[i] = pT[i].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,108,wD[i] = wT[i].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java,111,"return new Pair<double[], double[]>(pD, wD);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,20,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,21,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,22,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,25,* Class that implements the Gaussian rule for
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,26,* {@link #integrate(UnivariateFunction) integrating} a weighted
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,27,* function.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,29,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,30,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,32,public class GaussIntegrator {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,33,/** Nodes. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,34,private final double[] points;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,35,/** Nodes weights. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,36,private final double[] weights;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,39,* Creates an integrator from the given {@code points} and {@code weights}.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,40,* The integration interval is defined by the first and last value of
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,41,* {@code points} which must be sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,43,* @param points Integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,44,* @param weights Weights of the corresponding integration nodes.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,45,* @throws org.apache.commons.math3.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,46,* if the {@code points} are not sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,48,"public GaussIntegrator(double[] points,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,49,double[] weights) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,50,if (points.length != weights.length) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,51,"throw new DimensionMismatchException(points.length,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,52,weights.length);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,55,"MathArrays.checkOrder(points, MathArrays.OrderDirection.INCREASING, true, true);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,57,this.points = points.clone();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,58,this.weights = weights.clone();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,62,* Creates an integrator from the given pair of points (first element of
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,63,* the pair) and weights (second element of the pair.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,65,* @param pointsAndWeights Integration points and corresponding weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,66,* @throws org.apache.commons.math3.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,67,* if the {@code points} are not sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,69,"* @see #GaussIntegrator(double[], double[])"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,71,"public GaussIntegrator(Pair<double[], double[]> pointsAndWeights) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,72,"this(pointsAndWeights.getFirst(), pointsAndWeights.getSecond());"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,76,"* Returns an estimate of the integral of {@code f(x) * w(x)},"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,77,* where {@code w} is a weight function that depends on the actual
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,78,* flavor of the Gauss integration scheme.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,79,"* The algorithm uses the points and associated weights, as passed"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,80,"* to the {@link #GaussIntegrator(double[],double[]) constructor}."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,82,* @param f Function to integrate.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,83,* @return the integral of the weighted function.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,85,public double integrate(UnivariateFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,86,double s = 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,87,double c = 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,88,for (int i = 0; i < points.length; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,89,final double x = points[i];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,90,final double w = weights[i];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,91,final double y = w * f.value(x) - c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,92,final double t = s + y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,93,c = (t - s) - y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,94,s = t;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,96,return s;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,100,* @return the order of the integration rule (the number of integration
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,101,* points).
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,103,public int getNumberOfPoints() {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,104,return points.length;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,19,import java.util.Map;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,20,import java.util.TreeMap;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,21,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,22,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,25,* Class that provides different ways to compute the nodes and weights to be
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,26,* used by the {@link GaussIntegrator Gaussian integration rule}.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,29,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,31,public class GaussIntegratorFactory {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,32,/** Generator of Gauss-Legendre integrators. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,33,private final BaseRuleFactory legendre = new LegendreRuleFactory();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,34,/** Generator of Gauss-Legendre integrators. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,35,private final BaseRuleFactory legendreHighPrecision = new LegendreHighPrecisionRuleFactory();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,38,"* Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,39,* {@link GaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,40,* integrate} method will perform an integration on the natural interval
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,41,"* {@code [-1 , 1]}."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,43,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,44,* @return a Gauss-Legendre integrator.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,46,public GaussIntegrator legendre(int numberOfPoints) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,47,"return new GaussIntegrator(getRule(legendre, numberOfPoints));"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,51,"* Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,52,* {@link GaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,53,* integrate} method will perform an integration on the given interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,55,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,56,* @param lowerBound Lower bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,57,* @param upperBound Upper bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,58,* @return a Gauss-Legendre integrator.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,60,"public GaussIntegrator legendre(int numberOfPoints,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,61,"double lowerBound,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,62,double upperBound) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,63,"return new GaussIntegrator(transform(getRule(legendre, numberOfPoints),"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,64,"lowerBound, upperBound));"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,68,"* Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,69,* {@link GaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,70,* integrate} method will perform an integration on the natural interval
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,71,"* {@code [-1 , 1]}."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,73,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,74,* @return a Gauss-Legendre integrator.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,76,public GaussIntegrator legendreHighPrecision(int numberOfPoints) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,77,"return new GaussIntegrator(getRule(legendreHighPrecision, numberOfPoints));"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,81,"* Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,82,* {@link GaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,83,* integrate} method will perform an integration on the given interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,85,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,86,* @param lowerBound Lower bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,87,* @param upperBound Upper bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,88,* @return a Gauss-Legendre integrator.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,90,"public GaussIntegrator legendreHighPrecision(int numberOfPoints,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,91,"double lowerBound,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,92,double upperBound) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,93,"return new GaussIntegrator(transform(getRule(legendreHighPrecision, numberOfPoints),"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,94,"lowerBound, upperBound));"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,98,* @param factory Integration rule factory.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,99,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,100,* @return the integration nodes and weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,102,"private static Pair<double[], double[]> getRule(BaseRuleFactory factory,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,103,int numberOfPoints) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,104,return factory.getRule(numberOfPoints);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,108,* Performs a change of variable so that the integration can be performed
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,109,"* on an arbitrary interval {@code [a, b]}."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,110,"* It is assumed that the natural interval is {@code [-1, 1]}."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,112,* @param rule Original points and weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,113,* @param a Lower bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,114,* @param b Lower bound of the integration interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,115,* @return the points and weights adapted to the new interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,117,"private static Pair<double[], double[]> transform(Pair<double[], double[]> rule,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,118,"double a,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,119,double b) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,120,final double[] points = rule.getFirst();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,121,final double[] weights = rule.getSecond();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,123,// Scaling
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,124,final double scale = (b - a) / 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,125,final double shift = a + scale;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,127,for (int i = 0; i < points.length; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,128,points[i] = points[i] * scale + shift;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,129,weights[i] *= scale;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,132,"return new Pair<double[], double[]>(points, weights);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,19,import java.math.MathContext;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,20,import java.math.BigDecimal;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,21,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,24,* Factory that creates Gauss-type quadrature rule using Legendre polynomials.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,25,"* In this implementation, the lower and upper bounds of the natural interval"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,26,"* of integration are -1 and 1, respectively."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,27,* The Legendre polynomials are evaluated using the recurrence relation
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,28,"* presented in <a href=""http://en.wikipedia.org/wiki/Abramowitz_and_Stegun"""
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,29,"* Abramowitz and Stegun, 1964</a>."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,32,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,34,public class LegendreHighPrecisionRuleFactory extends BaseRuleFactory<BigDecimal> {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,35,private final MathContext mContext;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,36,/** The number {@code 2}. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,37,private final BigDecimal two;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,38,/** The number {@code -1}. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,39,private final BigDecimal minusOne;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,40,/** The number {@code 0.5}. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,41,private final BigDecimal oneHalf;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,44,* Default precision is {@link MathContext#DECIMAL128 DECIMAL128}.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,46,public LegendreHighPrecisionRuleFactory() {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,47,this(MathContext.DECIMAL128);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,51,* @param mContext Precision setting for computing the quadrature rules.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,53,public LegendreHighPrecisionRuleFactory(MathContext mContext) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,54,this.mContext = mContext;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,55,"two = new BigDecimal(""2"", mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,56,"minusOne = new BigDecimal(""-1"", mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,57,"oneHalf = new BigDecimal(""0.5"", mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,61,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,63,@Override
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,64,"protected Pair<BigDecimal[], BigDecimal[]> computeRule(int numberOfPoints) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,65,if (numberOfPoints == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,66,// Break recursion.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,67,"return new Pair<BigDecimal[], BigDecimal[]>(new BigDecimal[] { BigDecimal.ZERO },"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,68,new BigDecimal[] { two });
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,71,// Get previous rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,72,// If it has not been computed yet it will trigger a recursive call
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,73,// to this method.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,74,final BigDecimal[] previousPoints = getRuleInternal(numberOfPoints - 1).getFirst();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,76,// Compute next rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,77,final BigDecimal[] points = new BigDecimal[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,78,final BigDecimal[] weights = new BigDecimal[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,80,// Find i-th root of P[n+1] by bracketing.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,81,final int iMax = numberOfPoints / 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,82,for (int i = 0; i < iMax; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,83,// Lower-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,84,BigDecimal a = (i == 0) ? minusOne : previousPoints[i - 1];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,85,// Upper-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,86,BigDecimal b = (iMax == 1) ? BigDecimal.ONE : previousPoints[i];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,87,// P[j-1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,88,BigDecimal pma = BigDecimal.ONE;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,89,// P[j](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,90,BigDecimal pa = a;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,91,// P[j-1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,92,BigDecimal pmb = BigDecimal.ONE;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,93,// P[j](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,94,BigDecimal pb = b;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,95,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,96,"final BigDecimal b_two_j_p_1 = new BigDecimal(2 * j + 1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,97,"final BigDecimal b_j = new BigDecimal(j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,98,"final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,100,// Compute P[j+1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,101,// ppa = ((2 * j + 1) * a * pa - j * pma) / (j + 1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,103,"BigDecimal tmp1 = a.multiply(b_two_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,104,"tmp1 = pa.multiply(tmp1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,105,"BigDecimal tmp2 = pma.multiply(b_j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,106,// P[j+1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,107,"BigDecimal ppa = tmp1.subtract(tmp2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,108,"ppa = ppa.divide(b_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,110,// Compute P[j+1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,111,// ppb = ((2 * j + 1) * b * pb - j * pmb) / (j + 1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,113,"tmp1 = b.multiply(b_two_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,114,"tmp1 = pb.multiply(tmp1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,115,"tmp2 = pmb.multiply(b_j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,116,// P[j+1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,117,"BigDecimal ppb = tmp1.subtract(tmp2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,118,"ppb = ppb.divide(b_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,120,pma = pa;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,121,pa = ppa;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,122,pmb = pb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,123,pb = ppb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,125,"// Now pa = P[n+1](a), and pma = P[n](a). Same holds for b."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,126,// Middle of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,127,"BigDecimal c = a.add(b, mContext).multiply(oneHalf, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,128,// P[j-1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,129,BigDecimal pmc = BigDecimal.ONE;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,130,// P[j](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,131,BigDecimal pc = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,132,boolean done = false;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,133,while (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,134,"BigDecimal tmp1 = b.subtract(a, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,135,"BigDecimal tmp2 = c.ulp().multiply(BigDecimal.TEN, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,136,done = tmp1.compareTo(tmp2) <= 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,137,pmc = BigDecimal.ONE;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,138,pc = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,139,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,140,"final BigDecimal b_two_j_p_1 = new BigDecimal(2 * j + 1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,141,"final BigDecimal b_j = new BigDecimal(j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,142,"final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,144,// Compute P[j+1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,145,"tmp1 = c.multiply(b_two_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,146,"tmp1 = pc.multiply(tmp1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,147,"tmp2 = pmc.multiply(b_j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,148,// P[j+1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,149,"BigDecimal ppc = tmp1.subtract(tmp2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,150,"ppc = ppc.divide(b_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,152,pmc = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,153,pc = ppc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,155,// Now pc = P[n+1](c) and pmc = P[n](c).
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,156,if (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,157,if (pa.signum() * pc.signum() <= 0) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,158,b = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,159,pmb = pmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,160,pb = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,161,} else {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,162,a = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,163,pma = pmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,164,pa = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,166,"c = a.add(b, mContext).multiply(oneHalf, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,169,"final BigDecimal nP = new BigDecimal(numberOfPoints, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,170,"BigDecimal tmp1 = pmc.subtract(c.multiply(pc, mContext), mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,171,tmp1 = tmp1.multiply(nP);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,172,"tmp1 = tmp1.pow(2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,173,"BigDecimal tmp2 = c.pow(2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,174,"tmp2 = BigDecimal.ONE.subtract(tmp2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,175,"tmp2 = tmp2.multiply(two, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,176,"tmp2 = tmp2.divide(tmp1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,178,points[i] = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,179,weights[i] = tmp2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,181,final int idx = numberOfPoints - i - 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,182,points[idx] = c.negate(mContext);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,183,weights[idx] = tmp2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,185,"// If ""numberOfPoints"" is odd, 0 is a root."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,186,if (numberOfPoints % 2 == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,187,BigDecimal pmc = BigDecimal.ONE;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,188,for (int j = 1; j < numberOfPoints; j += 2) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,189,"final BigDecimal b_j = new BigDecimal(j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,190,"final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,192,// pmc = -j * pmc / (j + 1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,193,"pmc = pmc.multiply(b_j, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,194,"pmc = pmc.divide(b_j_p_1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,195,pmc = pmc.negate(mContext);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,198,"// 2 / pow(numberOfPoints * pmc, 2);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,199,"final BigDecimal nP = new BigDecimal(numberOfPoints, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,200,"BigDecimal tmp1 = pmc.multiply(nP, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,201,"tmp1 = tmp1.pow(2, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,202,"BigDecimal tmp2 = two.divide(tmp1, mContext);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,204,points[iMax] = BigDecimal.ZERO;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,205,weights[iMax] = tmp2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java,208,"return new Pair<BigDecimal[], BigDecimal[]>(points, weights);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,19,import java.math.MathContext;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,20,import java.math.BigDecimal;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,21,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,24,* Factory that creates Gauss-type quadrature rule using Legendre polynomials.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,25,"* In this implementation, the lower and upper bounds of the natural interval"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,26,"* of integration are -1 and 1, respectively."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,27,* The Legendre polynomials are evaluated using the recurrence relation
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,28,"* presented in <a href=""http://en.wikipedia.org/wiki/Abramowitz_and_Stegun"""
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,29,"* Abramowitz and Stegun, 1964</a>."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,32,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,34,public class LegendreRuleFactory extends BaseRuleFactory<Double> {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,36,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,38,@Override
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,39,"protected Pair<Double[], Double[]> computeRule(int numberOfPoints) {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,40,if (numberOfPoints == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,41,// Break recursion.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,42,"return new Pair<Double[], Double[]>(new Double[] { 0d },"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,43,new Double[] { 2d });
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,46,// Get previous rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,47,// If it has not been computed yet it will trigger a recursive call
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,48,// to this method.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,49,final Double[] previousPoints = getRuleInternal(numberOfPoints - 1).getFirst();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,51,// Compute next rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,52,final Double[] points = new Double[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,53,final Double[] weights = new Double[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,55,// Find i-th root of P[n+1] by bracketing.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,56,final int iMax = numberOfPoints / 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,57,for (int i = 0; i < iMax; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,58,// Lower-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,59,double a = (i == 0) ? -1 : previousPoints[i - 1].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,60,// Upper-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,61,double b = (iMax == 1) ? 1 : previousPoints[i].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,62,// P[j-1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,63,double pma = 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,64,// P[j](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,65,double pa = a;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,66,// P[j-1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,67,double pmb = 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,68,// P[j](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,69,double pb = b;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,70,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,71,final int two_j_p_1 = 2 * j + 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,72,final int j_p_1 = j + 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,73,// P[j+1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,74,final double ppa = (two_j_p_1 * a * pa - j * pma) / j_p_1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,75,// P[j+1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,76,final double ppb = (two_j_p_1 * b * pb - j * pmb) / j_p_1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,77,pma = pa;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,78,pa = ppa;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,79,pmb = pb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,80,pb = ppb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,82,"// Now pa = P[n+1](a), and pma = P[n](a) (same holds for b)."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,83,// Middle of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,84,double c = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,85,// P[j-1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,86,double pmc = 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,87,// P[j](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,88,double pc = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,89,boolean done = false;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,90,while (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,91,done = b - a <= Math.ulp(c);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,92,pmc = 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,93,pc = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,94,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,95,// P[j+1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,96,final double ppc = ((2 * j + 1) * c * pc - j * pmc) / (j + 1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,97,pmc = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,98,pc = ppc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,100,// Now pc = P[n+1](c) and pmc = P[n](c).
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,101,if (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,102,if (pa * pc <= 0) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,103,b = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,104,pmb = pmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,105,pb = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,106,} else {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,107,a = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,108,pma = pmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,109,pa = pc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,111,c = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,114,final double d = numberOfPoints * (pmc - c * pc);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,115,final double w = 2 * (1 - c * c) / (d * d);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,117,points[i] = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,118,weights[i] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,120,final int idx = numberOfPoints - i - 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,121,points[idx] = -c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,122,weights[idx] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,124,"// If ""numberOfPoints"" is odd, 0 is a root."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,125,if (numberOfPoints % 2 == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,126,double pmc = 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,127,for (int j = 1; j < numberOfPoints; j += 2) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,128,pmc = -j * pmc / (j + 1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,130,final double d = numberOfPoints * pmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,131,final double w = 2 / (d * d);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,133,points[iMax] = 0d;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,134,weights[iMax] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java,137,"return new Pair<Double[], Double[]>(points, weights);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,1,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,3,import org.apache.commons.math3.analysis.function.Power;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,4,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,5,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,8,"* Base class for standard testing of Gaussian quadrature rules,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,9,"* which are exact for polynomials up to a certain degree. In this test, each"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,10,* monomial in turn is tested against the specified quadrature rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,12,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,14,public abstract class GaussianQuadratureAbstractTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,16,* The maximum absolute error (for zero testing).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,18,private final double eps;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,20,* The maximum relative error (in ulps).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,22,private final double numUlps;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,24,* The quadrature rule under test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,26,private final GaussIntegrator integrator;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,28,* Maximum degree of monomials to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,30,private final int maxDegree;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,33,* Creates a new instance of this abstract test with the specified
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,34,* quadrature rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,35,"* If the expected value is non-zero, equality of actual and expected values"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,36,* is checked in the relative sense <center>
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,37,* |x<sub>act</sub>&nbsp;-&nbsp;x<sub>exp</sub>|&nbsp;&le;&nbsp; n&nbsp;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,38,"* <code>Math.ulp(</code>x<sub>exp</sub><code>)</code>, </center> where n is"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,39,"* the maximum relative error (in ulps). If the expected value is zero, the"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,40,"* test checks that <center> |x<sub>act</sub>|&nbsp;&le;&nbsp;&epsilon;,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,41,* </center> where &epsilon; is the maximum absolute error.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,43,* @param integrator Quadrature rule under test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,44,* @param maxDegree Maximum degree of monomials to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,45,* @param eps &epsilon;.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,46,* @param numUlps Value of the maximum relative error (in ulps).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,48,"public GaussianQuadratureAbstractTest(GaussIntegrator integrator,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,49,"int maxDegree,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,50,"double eps,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,51,double numUlps) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,52,this.integrator = integrator;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,53,this.maxDegree = maxDegree;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,54,this.eps = eps;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,55,this.numUlps = numUlps;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,59,* Returns the expected value of the integral of the specified monomial.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,60,* The integration is carried out on the natural interval of the quadrature
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,61,* rule under test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,63,* @param n Degree of the monomial.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,64,* @return the expected value of the integral of x<sup>n</sup>.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,66,public abstract double getExpectedValue(final int n);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,69,* Checks that the value of the integral of each monomial
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,70,"*   <code>x<sup>0</sup>, ... , x<sup>p</sup></code>"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,71,* returned by the quadrature rule under test conforms with the expected
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,72,* value.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,73,* Here {@code p} denotes the degree of the highest polynomial for which
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,74,* exactness is to be expected.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,76,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,77,public void testAllMonomials() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,78,for (int n = 0; n <= maxDegree; n++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,79,final double expected = getExpectedValue(n);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,81,final Power monomial = new Power(n);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,82,final double actual = integrator.integrate(monomial);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,84,"// System.out.println(n + ""/"" + maxDegree + "" "" + integrator.getNumberOfPoints()"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,85,"//                    + "" "" + expected + "" "" + actual + "" "" + Math.ulp(expected));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,86,if (expected == 0) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,87,"Assert.assertEquals(""while integrating monomial x**"" + n +"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,88,""" with a "" +"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,89,"integrator.getNumberOfPoints() + ""-point quadrature rule"","
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,90,"expected, actual, eps);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,91,} else {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,92,double err = Math.abs(actual - expected) / Math.ulp(expected);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,93,"Assert.assertEquals(""while integrating monomial x**"" + n + "" with a "" +"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,94,"+ integrator.getNumberOfPoints() + ""-point quadrature rule, "" +"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,95,""" error was "" + err + "" ulps"","
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java,96,"expected, actual, Math.ulp(expected) * numUlps);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,1,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,3,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,4,import java.util.Collection;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,6,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,7,import org.junit.runners.Parameterized;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,8,import org.junit.runners.Parameterized.Parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,11,* Test of the {@link LegendreHighPrecisionRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,12,* This parameterized test extends the standard test for Gaussian quadrature
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,13,"* rule, where each monomial is tested in turn."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,14,"* Parametrization allows to test automatically 0, 1, ... , {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,15,* quadrature rules.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,17,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,19,@RunWith(value=Parameterized.class)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,20,public class LegendreHighPrecisionParametricTest extends GaussianQuadratureAbstractTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,21,private static GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,24,* The highest order quadrature rule to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,26,public static final int MAX_NUM_POINTS = 30;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,29,"* Creates a new instance of this test, with the specified number of nodes"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,30,* for the Gauss-Legendre quadrature rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,32,* @param numberOfPoints Order of integration rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,33,* @param maxDegree Maximum degree of monomials to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,34,* @param eps Value of &epsilon;.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,35,* @param numUlps Value of the maximum relative error (in ulps).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,37,"public LegendreHighPrecisionParametricTest(int numberOfPoints,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,38,"int maxDegree,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,39,"double eps,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,40,double numUlps) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,41,"super(factory.legendreHighPrecision(numberOfPoints),"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,42,"maxDegree, eps, numUlps);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,46,* Returns the collection of parameters to be passed to the constructor of
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,47,* this class.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,48,"* Gauss-Legendre quadrature rules of order 1, ..., {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,49,* will be constructed.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,51,* @return the collection of parameters for this parameterized test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,53,@Parameters
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,54,public static Collection<Object[]> getParameters() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,55,final ArrayList<Object[]> parameters = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,56,for (int k = 1; k <= MAX_NUM_POINTS; k++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,57,"parameters.add(new Object[] { k, 2 * k - 1, Math.ulp(1d), 13d });"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,59,return parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,62,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,63,public double getExpectedValue(final int n) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,64,if (n % 2 == 1) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,65,return 0;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java,67,return 2d / (n + 1);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,1,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,3,import org.apache.commons.math3.analysis.function.Cos;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,4,import org.apache.commons.math3.analysis.function.Inverse;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,5,import org.apache.commons.math3.analysis.function.Log;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,6,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,7,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,8,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,11,* Test of the {@link LegendreHighPrecisionRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,13,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,15,public class LegendreHighPrecisionTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,16,private static GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,18,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,19,public void testCos() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,20,final UnivariateFunction cos = new Cos();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,22,"final GaussIntegrator integrator = factory.legendreHighPrecision(7, 0, Math.PI / 2);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,23,final double s = integrator.integrate(cos);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,24,"// System.out.println(""s="" + s + "" e="" + 1);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,25,"Assert.assertEquals(1, s, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,30,public void testInverse() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,31,final UnivariateFunction inv = new Inverse();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,32,final UnivariateFunction log = new Log();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,34,final double lo = 12.34;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,35,final double hi = 456.78;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,37,"final GaussIntegrator integrator = factory.legendreHighPrecision(60, lo, hi);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,38,final double s = integrator.integrate(inv);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,39,final double expected = log.value(hi) - log.value(lo);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,40,"// System.out.println(""s="" + s + "" e="" + expected);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java,41,"Assert.assertEquals(expected, s, 1e-15);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,1,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,3,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,4,import java.util.Collection;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,6,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,7,import org.junit.runners.Parameterized;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,8,import org.junit.runners.Parameterized.Parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,11,* Test of the {@link LegendreRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,12,* This parameterized test extends the standard test for Gaussian quadrature
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,13,"* rule, where each monomial is tested in turn."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,14,"* Parametrization allows to test automatically 0, 1, ... , {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,15,* quadrature rules.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,17,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,19,@RunWith(value=Parameterized.class)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,20,public class LegendreParametricTest extends GaussianQuadratureAbstractTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,21,private static GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,24,* The highest order quadrature rule to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,26,public static final int MAX_NUM_POINTS = 30;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,29,"* Creates a new instance of this test, with the specified number of nodes"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,30,* for the Gauss-Legendre quadrature rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,32,* @param numberOfPoints Order of integration rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,33,* @param maxDegree Maximum degree of monomials to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,34,* @param eps Value of &epsilon;.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,35,* @param numUlps Value of the maximum relative error (in ulps).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,37,"public LegendreParametricTest(int numberOfPoints,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,38,"int maxDegree,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,39,"double eps,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,40,double numUlps) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,41,"super(factory.legendre(numberOfPoints),"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,42,"maxDegree, eps, numUlps);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,46,* Returns the collection of parameters to be passed to the constructor of
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,47,* this class.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,48,"* Gauss-Legendre quadrature rules of order 1, ..., {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,49,* will be constructed.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,51,* @return the collection of parameters for this parameterized test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,53,@Parameters
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,54,public static Collection<Object[]> getParameters() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,55,final ArrayList<Object[]> parameters = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,56,for (int k = 1; k <= MAX_NUM_POINTS; k++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,57,"parameters.add(new Object[] { k, 2 * k - 1, Math.ulp(1d), 91d });"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,59,return parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,62,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,63,public double getExpectedValue(final int n) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,64,if (n % 2 == 1) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,65,return 0;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java,67,return 2d / (n + 1);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,1,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,3,import org.apache.commons.math3.analysis.function.Cos;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,4,import org.apache.commons.math3.analysis.function.Inverse;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,5,import org.apache.commons.math3.analysis.function.Log;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,6,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,7,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,8,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,11,* Test of the {@link LegendreRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,13,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,15,public class LegendreTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,16,private static GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,18,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,19,public void testCos() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,20,final UnivariateFunction cos = new Cos();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,22,"final GaussIntegrator integrator = factory.legendre(7, 0, Math.PI / 2);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,23,final double s = integrator.integrate(cos);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,24,"// System.out.println(""s="" + s + "" e="" + 1);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,25,"Assert.assertEquals(1, s, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,30,public void testInverse() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,31,final UnivariateFunction inv = new Inverse();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,32,final UnivariateFunction log = new Log();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,34,final double lo = 12.34;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,35,final double hi = 456.78;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,37,"final GaussIntegrator integrator = factory.legendre(60, lo, hi);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,38,final double s = integrator.integrate(inv);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,39,final double expected = log.value(hi) - log.value(lo);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,40,"// System.out.println(""s="" + s + "" e="" + expected);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java,41,"Assert.assertEquals(expected, s, 1e-14);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,569,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,570,Override
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,571,ublic RealVector unitVector() {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,572,inal double norm = getNorm();
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,573,f (norm == 0) {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,574,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,576,eturn mapDivide(norm);
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,579,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,580,Override
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,581,ublic void unitize() {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,582,inal double norm = getNorm();
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,583,f (norm == 0) {
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,584,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,586,apDivideToSelf(norm);
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,712,ealVector copy = copy();
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,713,opy.unitize();
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,714,eturn copy;
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,712,final double norm = getNorm();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,713,if (norm == 0) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,714,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,716,return mapDivide(norm);
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,727,final double norm = getNorm();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,728,if (norm == 0) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,729,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,774,.setIndex(i++);
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,775,eturn e;
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,780,if (i < dim) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,781,e.setIndex(i++);
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,782,return e;
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,783,} else {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,784,throw new NoSuchElementException();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,20,import java.util.Iterator;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,21,import java.util.NoSuchElementException;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,968,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,969,public void testSet() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,970,for (int i = 0; i < values.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,971,final double expected = values[i];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,972,final RealVector v = create(values);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,973,v.set(expected);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,974,for (int j = 0; j < values.length; j++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,975,"Assert.assertEquals(""entry #"" + j, expected, v.getEntry(j), 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,980,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,981,public void testToArray() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,982,final double[] data = create(values).toArray();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,983,"Assert.assertNotSame(values, data);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,984,for (int i = 0; i < values.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,985,"Assert.assertEquals(""entry #"" + i, values[i], data[i], 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,989,private void doTestUnitVector(final boolean inPlace) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,990,final double x = getPreferredEntryValue();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,991,final double[] data = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,992,"x, 1d, x, x, 2d, x, x, x, 3d, x, x, x, x"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,994,double norm = 0d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,995,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,996,norm += data[i] * data[i];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,998,norm = FastMath.sqrt(norm);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,999,final double[] expected = new double[data.length];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1000,for (int i = 0; i < expected.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1001,expected[i] = data[i] / norm;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1003,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1004,final RealVector actual;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1005,if (inPlace) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1006,v.unitize();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1007,actual = v;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1008,} else {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1009,actual = v.unitVector();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1010,"Assert.assertNotSame(v, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1012,"TestUtils.assertEquals("""", expected, actual, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1015,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1016,public void testUnitVector() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1017,doTestUnitVector(false);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1020,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1021,public void testUnitize() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1022,doTestUnitVector(true);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1025,private void doTestUnitVectorNullVector(final boolean inPlace) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1026,final double[] data = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1027,"0d, 0d, 0d, 0d, 0d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1029,if (inPlace) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1030,create(data).unitize();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1031,} else {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1032,create(data).unitVector();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1036,@Test(expected=ArithmeticException.class)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1037,public void testUnitVectorNullVector() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1038,doTestUnitVectorNullVector(false);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1041,@Test(expected=ArithmeticException.class)
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1042,public void testUnitizeNullVector() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1043,doTestUnitVectorNullVector(true);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1046,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1047,public void testIterator() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1048,final RealVector v = create(values);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1049,final Iterator<RealVector.Entry> it = v.iterator();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1050,for (int i = 0; i < values.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1051,"Assert.assertTrue(""entry #"" + i, it.hasNext());"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1052,final RealVector.Entry e = it.next();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1053,"Assert.assertEquals("""", i, e.getIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1054,"Assert.assertEquals("""", values[i], e.getValue(), 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1055,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1056,it.remove();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1057,"Assert.fail(""UnsupportedOperationException should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1058,} catch (UnsupportedOperationException exc) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1059,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1062,Assert.assertFalse(it.hasNext());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1063,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1064,it.next();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1065,"Assert.fail(""NoSuchElementException should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1066,} catch (NoSuchElementException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1067,// Expected behavior
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,994,inal RealVector v_set3 = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,995,_set3.set(13.0);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,996,"ssert.assertEquals(""testData is 13.0 "", 13.0, v_set3.getEntry(2), 0);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,998,ry {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,999,_set3.getEntry(23);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1000,"ssert.fail(""OutOfRangeException expected"");"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1001, catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1002,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1040,ealVector v_unitVector = v1.unitVector();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1041,ealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1042,"ssertClose(""compare vect"", v_unitVector.toArray(),"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1043,"_unitVector_2.toArray(), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1045,ry {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1046,_null.unitVector();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1047,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1048, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1049,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1052,ealVector v_unitize = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1053,_unitize.unitize();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1054,"ssertClose(""compare vect"" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1055,ry {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1056,_null.unitize();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1057,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1058, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,1059,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,358,Test
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,359,ublic void testIterator() throws Exception {
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,360,ealVector v = new TestVectorImpl(vec2.clone());
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,361,ntry e;
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,362,nt i = 0;
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,363,or(Iterator<Entry> it = v.iterator(); it.hasNext() && (e = it.next()) != null; i++) {
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,364,"ssert.assertEquals(vec2[i], e.getValue(), 0);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,72,// org.apache.commons.math.optimization.LeastSquaresConverter
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,108,/ org.apache.commons.math.estimation.AbstractEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,109,// org.apache.commons.math.optimization.general.AbstractEstimator
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,116,/ org.apache.commons.math.estimation.GaussNewtonEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,117,// org.apache.commons.math.optimization.general.GaussNewtonEstimator
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,120,/ org.apache.commons.math.estimation.LevenbergMarquardtEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,// org.apache.commons.math.optimization.general.LevenbergMarquardtEstimator
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,170,/ org.apache.commons.math.optimization.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,171,// org.apache.commons.math.optimization.direct.DirectSearchOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,174,/ org.apache.commons.math.optimization.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,175,// org.apache.commons.math.optimization.direct.DirectSearchOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,201," ""vector length mismatch: got {0} but expected {1}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,202,"dimension de vecteur erronn\u00e9e : {0} \u00e0 la place de {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,205,// org.apache.commons.math.linear.decomposition.CholeskyDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,206,// org.apache.commons.math.linear.decomposition.EigenDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,207,// org.apache.commons.math.linear.decomposition.LUDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,208,// org.apache.commons.math.linear.decomposition.QRDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,209,// org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,210,// org.apache.commons.math.linear.RealVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,211,// org.apache.commons.math.linear.SparseRealVector
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,212,"{ ""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,213,"""dimension de vecteur erronn\u00e9e : {0} \u00e0 la place de {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,216,// org.apache.commons.math.linear.SparseRealVector
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,219,"{ ""vector must have at least one element"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,220,"""un vecteur doit comporter au moins un \u00e9l\u00e9ment"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,221,"{ ""position {0} and size {1} don't fit to the size of the input array {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,222,"""la position {0} et la taille {1} sont incompatibles avec la taille du tableau d''entr\u00e9e {2}""},"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,101,"hrow new IllegalArgumentException(""Vector must have at least one element."");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,101,"throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,114,"hrow new IllegalArgumentException(""Position "" + pos + "" and size "" + size +"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,115," don't fit to the size of the input array "" +"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,116,.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,114,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,115,"""position {0} and size {1} don't fit to the size of the input array {2}"","
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,116,"pos, size, d.length);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,141,"hrow new IllegalArgumentException(""Position "" + pos + "" and size "" + size +"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,142," don't fit to the size of the input array "" +"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,143,.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,141,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,142,"""position {0} and size {1} don't fit to the size of the input array {2}"","
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,143,"pos, size, d.length);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1287,"hrow new IllegalArgumentException(""vector dimension is "" + data.length +"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1288,", not "" + n + "" as expected"");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1287,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1288,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1289,"data.length, n);"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,30,/** Default Tolerance for having a value considered zero. */
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,31,public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,31,rivate  OpenIntToDoubleHashMap entries;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,34,private final OpenIntToDoubleHashMap entries;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,37,rivate double epsilon = 1.0e-12;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,40,private double epsilon;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,49,irtualSize = 0;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,50,ntries = new OpenIntToDoubleHashMap(0.0);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,52,"this(0, DEFAULT_ZERO_TOLERANCE);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,58,irtualSize = dimension;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,59,ntries = new OpenIntToDoubleHashMap(0.0);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,60,"this(dimension, DEFAULT_ZERO_TOLERANCE);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,63," Construct a (dimension)-length vector of zeros, specifying zero tolerance"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,64,"* Construct a (dimension)-length vector of zeros, specifying zero tolerance."
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,67,"ublic SparseRealVector(int dimension, double epsilon){"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,68,"public SparseRealVector(int dimension, double epsilon) {"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,74," Resize the vector, for use with append"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,75,"* Build a resized vector, for use with append."
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,82,epsilon = DEFAULT_ZERO_TOLERANCE;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,84," For advanced use, when you know the sparseness"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,86,* Build a vector with known the sparseness (for advanced use only).
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,86, @param expectedSize The excpected number of non-zero entries
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,88,* @param expectedSize The expected number of non-zero entries
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,89,"ntries = new OpenIntToDoubleHashMap(expectedSize, 0.0);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,90,irtualSize = dimension;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,91,"this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,94," For advanced use, when you know the sparseness and want to specify zero tolerance"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,95,* Build a vector with known the sparseness and zero tolerance setting (for advanced use only).
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,99,"ublic SparseRealVector(int dimension, int expectedSize, double epsilon){"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,100,"public SparseRealVector(int dimension, int expectedSize, double epsilon) {"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,111,irtualSize = values.length;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,112,romDoubleArray(values);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,112,"this(values, DEFAULT_ZERO_TOLERANCE);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,119, @param epsilon The tolerance for having a value considered zero
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,119,* @param epsilon The tolerance for having a value considered zero
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,121,"ublic SparseRealVector(double [] values, double epsilon){"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,121,"public SparseRealVector(double[] values, double epsilon) {"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,123,entries = new OpenIntToDoubleHashMap(0.0);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,124,for (int key = 0; key < values.length; key++) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,125,double value = values[key];
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,126,if (!isZero(value)) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,127,"entries.put(key, value);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,124,romDoubleArray(values);
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,132,ublic SparseRealVector(Double [] values) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,133,irtualSize = values.length;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,134,ouble[] vals = new double[values.length];
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,135,or(int i=0; i < values.length; i++){
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,136,als[i] = values[i].doubleValue();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,138,romDoubleArray(vals);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,138,public SparseRealVector(Double[] values) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,139,"this(values, DEFAULT_ZERO_TOLERANCE);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,147,"ublic SparseRealVector(Double [] values, double epsilon){"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,148,"public SparseRealVector(Double[] values, double epsilon) {"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,149,his.epsilon = epsilon;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,150,ouble[] vals = new double[values.length];
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,151,or(int i=0; i < values.length; i++){
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,152,als[i] = values[i].doubleValue();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,150,entries = new OpenIntToDoubleHashMap(0.0);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,151,for (int key = 0; key < values.length; key++) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,152,double value = values[key].doubleValue();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,153,if (!isZero(value)) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,154,"entries.put(key, value);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,154,romDoubleArray(vals);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,157,this.epsilon = epsilon;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,158, Copy constructer
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,161,* Copy constructor.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,161,ublic SparseRealVector(SparseRealVector v){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,164,public SparseRealVector(SparseRealVector v) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,163,psilon = v.getEpsilon();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,167,epsilon = v.getEpsilon();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,168, Generic copy constructer
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,171,* Generic copy constructor.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,173,romDoubleArray(v.getData());
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,178, Fill in the values from a double array
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,179, @param values The set of values to use
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,181,rivate void fromDoubleArray(double[] values) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,183,or (int key = 0; key < values.length; key++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,184,ouble value = values[key];
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,177,for (int key = 0; key < virtualSize; key++) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,178,double value = v.getEntry(key);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,183,epsilon = DEFAULT_ZERO_TOLERANCE;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,193, @return The entries of this instance
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,187,* Get the entries of this instance.
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,188,* @return entries of this instance
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,201, Determine if this value is zero
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,195,* Determine if this value is zero.
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,204,* Get the tolerance for having a value considered zero.
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,212,* Set the tolerance for having a value considered zero.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,228,f (v instanceof SparseRealVector)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,222,if (v instanceof SparseRealVector) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,235, Optimized method to add two SparseRealVectors
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,229,* Optimized method to add two SparseRealVectors.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,267, Optimized method to append a SparseRealVector
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,261,* Optimized method to append a SparseRealVector.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,330,f (idx < v.length)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,324,if (idx < v.length) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,388,heckIndex(index+n-1);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,383,checkIndex(index + n - 1);
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,419, Optimized method to compute distance
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,414,* Optimized method to compute distance.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,439,es += iter.value() * iter.value();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,434,final double value = iter.value();
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,435,res += value * value;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,524, Optimized method to compute LInfDistance
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,520,* Optimized method to compute LInfDistance.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,534,f(delta > max)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,530,if (delta > max) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,542,f(iter.value() > max)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,539,if (iter.value() > max) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,564,f(delta > max)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,562,if (delta > max) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,597,f (Double.isInfinite(iter.value()))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,596,if (Double.isInfinite(iter.value())) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,608,f (Double.isNaN(iter.value()))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,608,if (Double.isNaN(iter.value())) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,636,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,637,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,722,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,723,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,735,or(int i = 0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,736,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,806,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,807,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,824,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,825,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,847,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,848,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1014, Optimized method to compute the outer product
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1015,* Optimized method to compute the outer product.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1023,hile(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1024,while (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1026,hile(iter2.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1027,while (iter2.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1038,f(v instanceof SparseRealVector){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1039,if (v instanceof SparseRealVector) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1043,hile(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1044,while (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1046,or(int col=0; col < virtualSize; col++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1047,for (int col = 0; col < virtualSize; col++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1109,or(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1110,for (int i = 0; i < virtualSize; i++) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1115, Optimized method to subtract SparseRealVectors
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1116,* Optimized method to subtract SparseRealVectors.
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1170,f(isZero(norm)){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1171,if (isZero(norm)) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1234,f (this == obj)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1234,if (this == obj) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1236,f (obj == null)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1237,if (obj == null) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1238,f (!(obj instanceof SparseRealVector))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1240,if (!(obj instanceof SparseRealVector)) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1241,f (virtualSize != other.virtualSize)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1244,if (virtualSize != other.virtualSize) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1243,f (Double.doubleToLongBits(epsilon) != Double
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1244,doubleToLongBits(other.epsilon))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1247,if (Double.doubleToLongBits(epsilon) !=
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1248,Double.doubleToLongBits(other.epsilon)) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1247,hile(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1252,while (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1250,f(Math.abs(test) > epsilon)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1255,if (Math.abs(test) > epsilon) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1254,hile(iter.hasNext()){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1260,while (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1257,f(!isZero(test))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1263,if (!isZero(test)) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,22,mport java.text.ParseException;
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,26,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,27,import org.apache.commons.math.exception.MathParseException;
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,40,ublic class ComplexFormat extends CompositeFormat {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,39,public class ComplexFormat {
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,62,"his(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,56,"this(DEFAULT_IMAGINARY_CHARACTER, CompositeFormat.getDefaultNumberFormat());"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,90,"his(imaginaryCharacter, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,84,"this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat());"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,129, This static method calls {@link #format(Object)} on a default instance of
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,130, ComplexFormat.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,123,"* This method calls {@link #format(Object,StringBuffer,FieldPosition)}."
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,125,* @param c Complex object to format.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,126,"* @return A formatted number in the form ""Re(c) + Im(c)i""."
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,128,public String format(Complex c) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,129,"return format(c, new StringBuffer(), new FieldPosition(0)).toString();"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,133,"* This method calls {@link #format(Object,StringBuffer,FieldPosition)}."
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,132, @param c Complex object to format
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,133," @return A formatted number in the form ""Re(c) + Im(c)i"""
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,135,* @param c Double object to format.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,136,* @return A formatted number.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,135,ublic static String formatComplex(Complex c) {
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,136,eturn getInstance().format(c);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,138,public String format(Double c) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,139,"return format(new Complex(c, 0), new StringBuffer(), new FieldPosition(0)).toString();"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,149,ieldPosition pos) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,152,FieldPosition pos) {
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,156,"ormatDouble(re, getRealFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,158,"CompositeFormat.formatDouble(re, getRealFormat(), toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,162,"ormatDouble(-im, getImaginaryFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,164,"CompositeFormat.formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,166,"ormatDouble(im, getImaginaryFormat(), toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,168,"CompositeFormat.formatDouble(im, getImaginaryFormat(), toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,186,Override
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,188,ieldPosition pos) {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,189,FieldPosition pos) {
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,195,"et = format( new Complex(((Number)obj).doubleValue(), 0.0),"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,196,"oAppendTo, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,196,"ret = format(new Complex(((Number)obj).doubleValue(), 0.0),"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,197,"toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,235,umberFormat f = getDefaultNumberFormat(locale);
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,236,NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,250, @param source the string to parse
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,251,* @param source the string to parse.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,252, @exception ParseException if the beginning of the specified string
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,253,            cannot be parsed.
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,253,* @throws MathParseException if the beginning of the specified string
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,254,* cannot be parsed.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,255,ublic Complex parse(String source) throws ParseException {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,256,public Complex parse(String source) {
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,259,hrow MathRuntimeException.createParseException(
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,260,"arsePosition.getErrorIndex(),"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,261,"ocalizedFormats.UNPARSEABLE_COMPLEX_NUMBER, source);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,260,"throw new MathParseException(source,"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,261,"parsePosition.getErrorIndex(),"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,262,Complex.class);
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,277,"arseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,278,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,280,"umber re = parseNumber(source, getRealFormat(), pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,281,"Number re = CompositeFormat.parseNumber(source, getRealFormat(), pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,290,"har c = parseNextCharacter(source, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,291,"char c = CompositeFormat.parseNextCharacter(source, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,313,"arseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,314,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,316,"umber im = parseNumber(source, getRealFormat(), pos);"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,317,"Number im = CompositeFormat.parseNumber(source, getRealFormat(), pos);"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,325,"f (!parseFixedstring(source, getImaginaryCharacter(), pos)) {"
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,326,"if (!CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos)) {"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,334, Parses a string to produce a object.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,336, @param source the string to parse
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,337, @param pos input/ouput parsing parameter.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,338, @return the parsed object.
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,339," @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,341,Override
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,342,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,343,"eturn parse(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,22,mport java.text.ParseException;
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,26,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,27,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,26,import org.apache.commons.math.exception.MathParseException;
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,43,ublic class Vector3DFormat extends CompositeFormat {
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,41,public class Vector3DFormat {
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,84,"his(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,71,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,72,CompositeFormat.getDefaultNumberFormat());
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,103,"his(prefix, suffix, separator, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,91,"this(prefix, suffix, separator, CompositeFormat.getDefaultNumberFormat());"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,180,eturn new Vector3DFormat(getDefaultNumberFormat(locale));
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,168,return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,184, This static method calls {@link #format(Object)} on a default instance of
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,185, Vector3DFormat.
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,172,"* This method calls {@link #format(Vector3D,StringBuffer,FieldPosition)}."
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,187, @param v Vector3D object to format
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,188, @return A formatted vector
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,174,* @param v Vector3D object to format.
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,175,* @return a formatted vector.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,190,ublic static String formatVector3D(Vector3D v) {
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,191,eturn getInstance().format(v);
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,177,public String format(Vector3D v) {
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,178,"return format(v, new StringBuffer(), new FieldPosition(0)).toString();"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,212,"ormatDouble(vector.getX(), format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,199,"CompositeFormat.formatDouble(vector.getX(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,214,"ormatDouble(vector.getY(), format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,201,"CompositeFormat.formatDouble(vector.getY(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,216,"ormatDouble(vector.getZ(), format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,203,"CompositeFormat.formatDouble(vector.getZ(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,226, Formats a object to produce a string.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,227, <p><code>obj</code> must be a  {@link Vector3D} object. Any other type of
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,228, object will result in an {@link IllegalArgumentException} being thrown.</p>
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,229, @param obj the object to format.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,230, @param toAppendTo where the text is to be appended
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,231," @param pos On input: an alignment field, if desired. On output: the"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,232,            offsets of the alignment field
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,233, @return the value passed in as toAppendTo.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,234," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,235, @throws IllegalArgumentException is <code>obj</code> is not a valid type.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,237,Override
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,238,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,239,ieldPosition pos) {
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,241,f (obj instanceof Vector3D) {
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,242,"eturn format( (Vector3D)obj, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,245,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR,"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,246,bj.getClass().getName());
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,254, @exception ParseException if the beginning of the specified string
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,255,            cannot be parsed.
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,215,* @throws MathParseException if the beginning of the specified string
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,216,* cannot be parsed.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,257,ublic Vector3D parse(String source) throws ParseException {
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,218,public Vector3D parse(String source) {
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,261,hrow MathRuntimeException.createParseException(
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,262,"arsePosition.getErrorIndex(),"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,263,"ocalizedFormats.UNPARSEABLE_3D_VECTOR, source);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,222,"throw new MathParseException(source,"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,223,"parsePosition.getErrorIndex(),"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,224,Vector3D.class);
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,278,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,279,"f (!parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,239,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,240,"if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,284,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,285,"umber x = parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,245,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,246,"Number x = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,294,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,295,"f (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,255,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,256,"if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,298,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,299,"umber y = parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,259,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,260,"Number y = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,308,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,309,"f (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,269,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,270,"if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,312,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,313,"umber z = parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,273,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,274,"Number z = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,322,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,323,"f (!parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,283,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,284,"if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,332, Parses a string to produce a object.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,333, @param source the string to parse
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,334, @param pos input/ouput parsing parameter.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,335, @return the parsed object.
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,336," @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,338,Override
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,339,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java,340,"eturn parse(source, pos);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,41,rivate static final RealVectorFormat DEFAULT_FORMAT =
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,42,ealVectorFormat.getInstance();
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,41,private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,28,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,29,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,46,ublic class RealVectorFormat extends CompositeFormat {
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,44,public class RealVectorFormat {
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,87,"his(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,74,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,75,CompositeFormat.getDefaultNumberFormat());
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,106,"his(prefix, suffix, separator, getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,94,"this(prefix, suffix, separator,"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,95,CompositeFormat.getDefaultNumberFormat());
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,183,eturn new RealVectorFormat(getDefaultNumberFormat(locale));
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,172,return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,187, This static method calls {@link #format(Object)} on a default instance of
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,188, RealVectorFormat.
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,176,"* This method calls {@link #format(RealVector,StringBuffer,FieldPosition)}."
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,190, @param v RealVector object to format
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,191, @return A formatted vector
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,178,* @param v RealVector object to format.
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,179,* @return a formatted vector.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,193,ublic static String formatRealVector(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,194,eturn getInstance().format(v);
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,181,public String format(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,182,"return format(v, new StringBuffer(), new FieldPosition(0)).toString();"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,219,"ormatDouble(vector.getEntry(i), format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,207,"CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,230, Formats a object to produce a string.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,231, <p><code>obj</code> must be a  {@link RealVector} object. Any other type of
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,232, object will result in an {@link IllegalArgumentException} being thrown.</p>
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,233, @param obj the object to format.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,234, @param toAppendTo where the text is to be appended
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,235," @param pos On input: an alignment field, if desired. On output: the"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,236,            offsets of the alignment field
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,237, @return the value passed in as toAppendTo.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,238," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,239, @throws MathIllegalArgumentException is {@code obj} is not a valid type.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,241,Override
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,242,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,243,ieldPosition pos) {
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,245,f (obj instanceof RealVector) {
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,246,"eturn format((RealVector) obj, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,249,"hrow new MathIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR,"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,250,bj.getClass().getName());
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,284,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,285,"f (!parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,246,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,247,"if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,294,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,295,"f (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,256,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,257,"if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,301,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,302,"umber component = parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,263,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,264,"Number component = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,316,"arseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,317,"f (!parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,278,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,279,"if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,330, Parses a string to produce a object.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,331, @param source the string to parse
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,332, @param pos input/ouput parsing parameter.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,333, @return the parsed object.
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,334," @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,336,Override
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,337,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,src/main/java/org/apache/commons/math/linear/RealVectorFormat.java,338,"eturn parse(source, pos);"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,20,mport java.text.Format;
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,30,ublic abstract class CompositeFormat extends Format {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,29,public class CompositeFormat {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,34,* Class contains only static methods.
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,36,private CompositeFormat() {}
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,41,rotected static NumberFormat getDefaultNumberFormat() {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,44,public static NumberFormat getDefaultNumberFormat() {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,52,rotected static NumberFormat getDefaultNumberFormat(final Locale locale) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,55,public static NumberFormat getDefaultNumberFormat(final Locale locale) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,65,"rotected void parseAndIgnoreWhitespace(final String source,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,66,inal ParsePosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,68,"public static void parseAndIgnoreWhitespace(final String source,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,69,final ParsePosition pos) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,78,"rotected char parseNextCharacter(final String source,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,79,inal ParsePosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,81,"public static char parseNextCharacter(final String source,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,82,final ParsePosition pos) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,108,"rivate Number parseNumber(final String source, final double value,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,109,inal ParsePosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,111,"private static Number parseNumber(final String source, final double value,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,112,final ParsePosition pos) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,140,"rotected Number parseNumber(final String source, final NumberFormat format,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,141,inal ParsePosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,143,"public static Number parseNumber(final String source, final NumberFormat format,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,144,final ParsePosition pos) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,170,"rotected boolean parseFixedstring(final String source, final String expected,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,171,inal ParsePosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,173,"public static boolean parseFixedstring(final String source,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,174,"final String expected,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,175,final ParsePosition pos) {
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,207,"rotected StringBuffer formatDouble(final double value, final NumberFormat format,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,208,"inal StringBuffer toAppendTo,"
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,209,inal FieldPosition pos) {
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,210,"public static StringBuffer formatDouble(final double value, final NumberFormat format,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,211,"final StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,212,final FieldPosition pos) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,191,"omplex z, double epsilon) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,191,"Complex z, double epsilon) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,205," Unable to find "" + ComplexFormat.formatComplex(z));"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,205,""" Unable to find "" + (new ComplexFormat()).format(z));"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,21,mport java.text.ParseException;
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,31,import org.apache.commons.math.exception.MathParseException;
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,30,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,32,ublic abstract class ComplexFormatAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,33,public abstract class ComplexFormatAbstractTest {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,34,ompositeFormat complexFormat = null;
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,35,ComplexFormat complexFormat = null;
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,41,Override
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,42,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,42,protected ComplexFormatAbstractTest() {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,48,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,52,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,53,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,56,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,59,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,61,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,64,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,66,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,72,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,73,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,77,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,80,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,80,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,85,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,88,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,87,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,93,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,96,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,94,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,101,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,104,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,101,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,109,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,112,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,108,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,117,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,111,ublic void testStaticFormatComplex() {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,120,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,121,public void testDefaultFormatComplex() {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,117,tring actual = ComplexFormat.formatComplex(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,118,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,127,String actual = (new ComplexFormat()).format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,128,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,133,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,127,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,138,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,141,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,134,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,146,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,149,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,141,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,154,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,157,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,148,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,149,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,150, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,151,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,162,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,163,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,164,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,165,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,169,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,159,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,160,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,161, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,162,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,174,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,175,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,176,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,177,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,181,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,170,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,171,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,172, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,173,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,186,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,187,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,188,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,189,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,193,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,181,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,182,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,183, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,184,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,198,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,199,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,200,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,201,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,205,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,192,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,193,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,194, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,195,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,210,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,211,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,212,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,213,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,217,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,203,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,204,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,205, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,206,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,222,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,223,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,224,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,225,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,229,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,214,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,215,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,216, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,217,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,234,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,235,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,236,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,237,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,241,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,225,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,226,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,227, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,228,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,246,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,247,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,248,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,249,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,253,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,236,omplex actual = (Complex)complexFormatJ.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,237,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,238, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,239,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,258,Complex actual = (Complex)complexFormatJ.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,259,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,260,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,261,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,265,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,247,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,248,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,249, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,250,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,270,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,271,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,272,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,273,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,277,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,258,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,259,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,260, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,261,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,282,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,283,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,284,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,285,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,289,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,269,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,270,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,271, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,272,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,294,Complex actual = (Complex)complexFormat.parse(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,295,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,296,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,297,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,301,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,279,ssertNotNull(cf);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,280,"ssertEquals(nf, cf.getRealFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,305,Assert.assertNotNull(cf);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,306,"Assert.assertEquals(nf, cf.getRealFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,309,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,287,"ssertNotSame(nf, cf.getImaginaryFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,314,"Assert.assertNotSame(nf, cf.getImaginaryFormat());"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,289,"ssertSame(nf, cf.getImaginaryFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,316,"Assert.assertSame(nf, cf.getImaginaryFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,319,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,296,ail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,324,Assert.fail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,330,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,306,ail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,335,Assert.fail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,341,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,316,"ssertNotSame(nf, cf.getRealFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,346,"Assert.assertNotSame(nf, cf.getRealFormat());"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,318,"ssertSame(nf, cf.getRealFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,348,"Assert.assertSame(nf, cf.getRealFormat());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,351,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,325,ail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,356,Assert.fail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,362,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,335,ail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,367,Assert.fail();
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,373,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,342,ompositeFormat cf = ComplexFormat.getInstance(getLocale());
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,375,ComplexFormat cf = ComplexFormat.getInstance(getLocale());
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,345,"ssertEquals(""3"" + getDecimalCharacter() + ""14"", text);"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,348,ublic void testFormatObject() {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,349,ry {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,350,ompositeFormat cf = new ComplexFormat();
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,351,bject object = new Object();
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,352,f.format(object);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,353,ail();
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,354, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,355,/ success
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,378,"Assert.assertEquals(""3"" + getDecimalCharacter() + ""14"", text);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,381,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,361,"ssertNull(new ComplexFormat().parse(""1 + 1"", pos));"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,362,"ssertEquals(5, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,384,"Assert.assertNull(new ComplexFormat().parse(""1 + 1"", pos));"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,385,"Assert.assertEquals(5, pos.getErrorIndex());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,21,mport java.text.ParseException;
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,25,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,28,import org.apache.commons.math.exception.MathParseException;
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,29,ublic abstract class Vector3DFormatAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,30,public abstract class Vector3DFormatAbstractTest {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,38,Override
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,39,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,39,protected Vector3DFormatAbstractTest() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,46,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,50,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,51,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,54,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,61,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,63,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,66,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,72,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,75,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,78,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,83,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,87,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,90,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,94,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,99,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,102,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,105,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,111,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,114,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,112,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,119,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,115,ublic void testStaticFormatVector3D() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,122,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,123,public void testDefaultFormatVector3D() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,125,tring actual = Vector3DFormat.formatVector3D(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,126,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,133,String actual = (new Vector3DFormat()).format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,134,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,139,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,135,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,144,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,147,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,142,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,152,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,155,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,149,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,160,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,163,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,156,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,157,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,158, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,159,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,168,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,169,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,170,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,171,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,175,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,167,"ssertEquals(expected, vector3DFormat.parseObject(source1, pos1));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,168,"ssertEquals(source1.length(), pos1.getIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,180,"Assert.assertEquals(expected, vector3DFormat.parse(source1, pos1));"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,181,"Assert.assertEquals(source1.length(), pos1.getIndex());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,171,"ssertEquals(expected, vector3DFormat.parseObject(source2, pos2));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,172,"ssertEquals(source2.length() - 1, pos2.getIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,184,"Assert.assertEquals(expected, vector3DFormat.parse(source2, pos2));"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,185,"Assert.assertEquals(source2.length() - 1, pos2.getIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,188,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,183,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,184,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,185, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,186,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,197,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,199,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,200,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,204,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,199,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,200, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,201,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,214,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,215,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,216,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,220,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,214,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,215, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,216,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,229,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,230,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,231,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,232,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,236,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,229,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,230, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,231,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,245,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,246,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,247,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,248,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,252,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,243,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,244,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,245, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,246,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,261,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,262,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,263,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,264,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,268,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,258,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,259,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,260, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,261,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,277,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,278,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,279,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,280,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,284,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,273,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,274,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,275, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,276,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,293,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,294,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,295,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,296,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,300,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,288,ector3D actual = (Vector3D) vector3DFormatSquare.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,289,"ssertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,290, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,291,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,309,Vector3D actual = (Vector3D) vector3DFormatSquare.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,310,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,311,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,312,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,316,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,298,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,299,"ssertEquals(Vector3D.NaN, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,300, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,301,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,320,Vector3D actual = (Vector3D) vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,321,"Assert.assertEquals(Vector3D.NaN, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,322,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,323,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,327,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,308,ector3D actual = (Vector3D)vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,309,"ssertEquals(Vector3D.POSITIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,310, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,311,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,331,Vector3D actual = (Vector3D)vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,332,"Assert.assertEquals(Vector3D.POSITIVE_INFINITY, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,333,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,334,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,338,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,318,ector3D actual = (Vector3D)vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,319,"ssertEquals(Vector3D.NEGATIVE_INFINITY, actual);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,320, catch (ParseException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,321,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,342,Vector3D actual = (Vector3D)vector3DFormat.parse(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,343,"Assert.assertEquals(Vector3D.NEGATIVE_INFINITY, actual);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,344,} catch (MathParseException ex) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,345,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,349,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,328,ssertNotNull(cf);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,329,"ssertEquals(nf, cf.getFormat());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,332,ublic void testFormatObject() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,333,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,334,ompositeFormat cf = new Vector3DFormat();
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,335,bject object = new Object();
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,336,f.format(object);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,337,ail();
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,338, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,339,/ success
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,353,Assert.assertNotNull(cf);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,354,"Assert.assertEquals(nf, cf.getFormat());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,357,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,345,"ssertNull(new Vector3DFormat().parse(""1; 1; 1}"", pos));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,346,"ssertEquals(0, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,360,"Assert.assertNull(new Vector3DFormat().parse(""1; 1; 1}"", pos));"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,361,"Assert.assertEquals(0, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,364,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,351,"ssertNull(new Vector3DFormat().parse(""{1; 1 1}"", pos));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,352,"ssertEquals(6, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,367,"Assert.assertNull(new Vector3DFormat().parse(""{1; 1 1}"", pos));"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,368,"Assert.assertEquals(6, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,371,@Test
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,357,"ssertNull(new Vector3DFormat().parse(""{1; 1; 1 "", pos));"
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,358,"ssertEquals(8, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,374,"Assert.assertNull(new Vector3DFormat().parse(""{1; 1; 1 "", pos));"
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,375,"Assert.assertEquals(8, pos.getErrorIndex());"
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,124,ublic void testStaticFormatRealVectorImpl() {
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,124,public void testDefaultFormatRealVectorImpl() {
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,134,tring actual = RealVectorFormat.formatRealVector(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,134,String actual = (new RealVectorFormat()).format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,382,Test
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,383,ublic void testFormatObject() {
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,384,ry {
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,385,ompositeFormat cf = new RealVectorFormat();
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,386,bject object = new Object();
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,387,f.format(object);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,388,ssert.fail();
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,389, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,390,/ success

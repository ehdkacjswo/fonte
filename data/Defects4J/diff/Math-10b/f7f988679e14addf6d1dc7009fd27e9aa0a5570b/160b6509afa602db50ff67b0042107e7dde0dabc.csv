is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,756,// org.apache.commons.math.distribution.AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,757,// org.apache.commons.math.distribution.AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,758,"{ ""Sample size must be positive"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,759,"""Taille de l'\u00e9chantillon doit \u00eatre positif"" },"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28,import org.apache.commons.math.random.RandomDataImpl;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,45,* RandomData instance used to generate samples from the distribution
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,46,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,48,protected final RandomDataImpl randomData = new RandomDataImpl();
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,"/ Try to bracket root, test domain endoints if this fails"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,112,"// Try to bracket root, test domain endpoints if this fails"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,145,* Reseeds the random generator used to generate samples.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,147,* @param seed the new seed
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,148,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,150,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,151,randomData.reSeed(seed);
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,155,* Generates a random value sampled from this distribution. The default
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,156,* implementation uses the
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,157,"* <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling""> inversion method.</a>"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,159,* @return random value
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,160,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,161,* @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,163,public double sample() throws MathException {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,164,return randomData.nextInversionDeviate(this);
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,168,* Generates a random sample from the distribution.  The default implementation
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,169,* generates the sample by calling {@link #sample()} in a loop.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,171,* @param sampleSize number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,172,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,173,* @return an array representing the random sample
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,174,* @throws MathException if an error occurs generating the sample
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,175,* @throws IllegalArgumentException if sampleSize is not positive
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,177,public double[] sample(int sampleSize) throws MathException {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,178,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,179,"MathRuntimeException.createIllegalArgumentException(""Sample size must be positive"");"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,181,double[] out = new double[sampleSize];
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,182,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,183,out[i] = sample();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,185,return out;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,24,import org.apache.commons.math.random.RandomDataImpl;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,49,* RandomData instance used to generate samples from the distribution
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,50,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,52,protected final RandomDataImpl randomData = new RandomDataImpl();
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,212, Computes the cumulative probablity function and checks for NaN values returned.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,219,* Reseeds the random generator used to generate samples.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,221,* @param seed the new seed
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,222,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,224,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,225,randomData.reSeed(seed);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,229,* Generates a random value sampled from this distribution. The default
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,230,* implementation uses the
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,231,"* <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling""> inversion method.</a>"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,233,* @return random value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,234,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,235,* @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,237,public int sample() throws MathException {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,238,return randomData.nextInversionDeviate(this);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,242,* Generates a random sample from the distribution.  The default implementation
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,243,* generates the sample by calling {@link #sample()} in a loop.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,245,* @param sampleSize number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,246,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,247,* @return an array representing the random sample
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,248,* @throws MathException if an error occurs generating the sample
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,249,* @throws IllegalArgumentException if sampleSize is not positive
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,251,public int[] sample(int sampleSize) throws MathException {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,252,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,253,"MathRuntimeException.createIllegalArgumentException(""Sample size must be positive"");"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,255,int[] out = new int[sampleSize];
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,256,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,257,out[i] = sample();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,259,return out;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,263,* Computes the cumulative probability function and checks for NaN values returned.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,179,* Generates a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,181,* <p><strong>Algorithm Description</strong>: Uses the <a
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,182,"* href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html""> Inversion"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,183,* Method</a> to generate exponentially distributed random values from
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,184,* uniform deviates. </p>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,186,* @return random value
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,187,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,188,* @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,190,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,191,public double sample() throws MathException {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,192,return randomData.nextExponential(mean);
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,232,* Generates a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,234,* @return random value
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,235,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,236,* @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,238,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,239,public double sample() throws MathException {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,240,"return randomData.nextGaussian(mean, standardDeviation);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,241,* Generates a random value sampled from this distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,243,* <p><strong>Algorithm Description</strong>:
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,244,"* <ul><li> For small means, uses simulation of a Poisson process"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,245,"* using Uniform deviates, as described"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,246,"* <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here.</a>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,247,* The Poisson process (and hence value returned) is bounded by 1000 * mean.</li><
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,249,"* <li> For large means, uses the rejection algorithm described in <br/>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,250,"* Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,251,* <strong>Computing</strong> vol. 26 pp. 197-207.</li></ul></p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,253,* @return random value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,254,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,255,* @throws MathException if an error occurs generating the random value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,257,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,258,public int sample() throws MathException {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,259,"return (int) Math.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,32,import org.apache.commons.math.distribution.ContinuousDistribution;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,443,* Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,444,* statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,446,* @param expected expected counts
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,447,* @param observed observed counts
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,448,* @param alpha significance level of the test
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,450,"public static void assertChiSquareAccept(double[] expected, long[] observed, double alpha) throws Exception {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,451,String[] labels = new String[expected.length];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,452,for (int i = 0; i < labels.length; i++) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,453,labels[i] = Integer.toString(i + 1);
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,455,"assertChiSquareAccept(labels, expected, observed, alpha);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,459,"* Computes the 25th, 50th and 75th percentiles of the given distribution and returns"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,460,* these values in an array.
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,462,public static double[] getDistributionQuartiles(ContinuousDistribution distribution) throws Exception {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,463,double[] quantiles = new double[3];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,464,quantiles[0] = distribution.inverseCumulativeProbability(0.25d);
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,465,quantiles[1] = distribution.inverseCumulativeProbability(0.5d);
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,466,quantiles[2] = distribution.inverseCumulativeProbability(0.75d);
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,467,return quantiles;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,471,* Updates observed counts of values in quartiles.
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,472,* counts[0] <-> 1st quartile ... counts[3] <-> top quartile
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,474,"public static void updateCounts(double value, long[] counts, double[] quartiles) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,475,if (value < quartiles[0]) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,476,counts[0]++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,477,} else if (value > quartiles[2]) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,478,counts[3]++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,479,} else if (value > quartiles[1]) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,480,counts[2]++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,481,} else {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,482,counts[1]++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,487,* Eliminates points with zero mass from densityPoints and densityValues parallel
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,488,* arrays.  Returns the number of positive mass points and collapses the arrays so
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,489,* that the first <returned value> elements of the input arrays represent the positive
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,490,* mass points.
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,492,"public static int eliminateZeroMassPoints(int[] densityPoints, double[] densityValues) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,493,int positiveMassCount = 0;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,494,for (int i = 0; i < densityValues.length; i++) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,495,if (densityValues[i] > 0) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,496,positiveMassCount++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,499,if (positiveMassCount < densityValues.length) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,500,int[] newPoints = new int[positiveMassCount];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,501,double[] newValues = new double[positiveMassCount];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,502,int j = 0;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,503,for (int i = 0; i < densityValues.length; i++) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,504,if (densityValues[i] > 0) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,505,newPoints[j] = densityPoints[i];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,506,newValues[j] = densityValues[i];
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,507,j++;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,510,"System.arraycopy(newPoints,0,densityPoints,0,positiveMassCount);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,511,"System.arraycopy(newValues,0,densityValues,0,positiveMassCount);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,513,return positiveMassCount;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,261,* Test sampling
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,263,public void testSampling() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,264,AbstractContinuousDistribution dist = (AbstractContinuousDistribution) makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,265,final int sampleSize = 1000;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,266,double[] sample = dist.sample(sampleSize);
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,267,double[] quartiles = TestUtils.getDistributionQuartiles(dist);
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,268,"double[] expected = {250, 250, 250, 250};"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,269,long[] counts = new long[4];
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,270,dist.reseedRandomGenerator(1000);  // Use fixed seed
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,271,for (int i = 0; i < sampleSize; i++) {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,272,"TestUtils.updateCounts(sample[i], counts, quartiles);"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,274,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,276,* Test sampling
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,278,public void testSampling() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,279,int[] densityPoints = makeDensityTestPoints();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,280,double[] densityValues = makeDensityTestValues();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,281,int sampleSize = 1000;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,282,"int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,283,AbstractIntegerDistribution distribution = (AbstractIntegerDistribution) makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,284,double[] expectedCounts = new double[length];
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,285,long[] observedCounts = new long[length];
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,286,for (int i = 0; i < length; i++) {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,287,expectedCounts[i] = sampleSize * densityValues[i];
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,289,distribution.reseedRandomGenerator(1000); // Use fixed seed
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,290,int[] sample = distribution.sample(sampleSize);
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,291,for (int i = 0; i < sampleSize; i++) {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,292,for (int j = 0; j < length; j++) {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,293,if (sample[i] == densityPoints[j]) {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,294,observedCounts[j]++;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,298,"TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,818,"ouble[] quartiles = getDistributionQuartiles(new BetaDistributionImpl(2,5));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,818,"double[] quartiles = TestUtils.getDistributionQuartiles(new BetaDistributionImpl(2,5));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,823,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,823,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,825,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,825,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,829,"ouble[] quartiles = getDistributionQuartiles(new CauchyDistributionImpl(1.2, 2.1));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,829,"double[] quartiles = TestUtils.getDistributionQuartiles(new CauchyDistributionImpl(1.2, 2.1));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,834,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,834,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,836,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,836,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,840,ouble[] quartiles = getDistributionQuartiles(new ChiSquaredDistributionImpl(12));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,840,double[] quartiles = TestUtils.getDistributionQuartiles(new ChiSquaredDistributionImpl(12));
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,845,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,845,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,847,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,847,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,851,"ouble[] quartiles = getDistributionQuartiles(new FDistributionImpl(12, 5));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,851,"double[] quartiles = TestUtils.getDistributionQuartiles(new FDistributionImpl(12, 5));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,856,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,856,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,858,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,858,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,862,"ouble[] quartiles = getDistributionQuartiles(new GammaDistributionImpl(4, 2));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,862,"double[] quartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(4, 2));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,867,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,867,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,869,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,869,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,873,ouble[] quartiles = getDistributionQuartiles(new TDistributionImpl(10));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,873,double[] quartiles = TestUtils.getDistributionQuartiles(new TDistributionImpl(10));
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,878,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,878,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,880,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,880,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,884,"ouble[] quartiles = getDistributionQuartiles(new WeibullDistributionImpl(1.2, 2.1));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,884,"double[] quartiles = TestUtils.getDistributionQuartiles(new WeibullDistributionImpl(1.2, 2.1));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,889,"pdateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,889,"TestUtils.updateCounts(value, counts, quartiles);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,891,"estUtils.assertChiSquareAccept(quartiles, expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,895," Computes the 25th, 50th and 75th percentiles of the given distribution and returns"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,896, these values in an array.
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,898,rivate double[] getDistributionQuartiles(ContinuousDistribution distribution) throws Exception {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,899,ouble[] quantiles = new double[3];
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,900,uantiles[0] = distribution.inverseCumulativeProbability(0.25d);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,901,uantiles[1] = distribution.inverseCumulativeProbability(0.5d);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,902,uantiles[2] = distribution.inverseCumulativeProbability(0.75d);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,903,eturn quantiles;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,907, Updates observed counts of values in quartiles.
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,908, counts[0] <-> 1st quartile ... counts[3] <-> top quartile
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,910,"rivate void updateCounts(double value, long[] counts, double[] quantiles) {"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,911,f (value < quantiles[0]) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,912,ounts[0]++;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,913, else if (value > quantiles[2]) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,914,ounts[3]++;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,915, else if (value > quantiles[1]) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,916,ounts[2]++;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,917, else {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,918,ounts[1]++;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,891,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,927,"nt length = eliminateZeroMassPoints(densityPoints, densityValues);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,899,"int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,952,"nt length = eliminateZeroMassPoints(densityPoints, densityValues);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,924,"int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,977,"nt length = eliminateZeroMassPoints(densityPoints, densityValues);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,949,"int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1001,"nt length = eliminateZeroMassPoints(densityPoints, densityValues);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,973,"int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1021, Eliminates points with zero mass from densityPoints and densityValues parallel
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1022, arrays.  Returns the number of positive mass points and collapses the arrays so
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1023, that the first <returned value> elements of the input arrays represent the positive
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1024, mass points.
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1026,"rivate int eliminateZeroMassPoints(int[] densityPoints, double[] densityValues) {"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1027,nt positiveMassCount = 0;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1028,or (int i = 0; i < densityValues.length; i++) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1029,f (densityValues[i] > 0) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1030,ositiveMassCount++;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1033,f (positiveMassCount < densityValues.length) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1034,nt[] newPoints = new int[positiveMassCount];
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1035,ouble[] newValues = new double[positiveMassCount];
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1036,nt j = 0;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1037,or (int i = 0; i < densityValues.length; i++) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1038,f (densityValues[i] > 0) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1039,ewPoints[j] = densityPoints[i];
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1040,ewValues[j] = densityValues[i];
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1041,++;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1044,"ystem.arraycopy(newPoints,0,densityPoints,0,positiveMassCount);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1045,"ystem.arraycopy(newValues,0,densityValues,0,positiveMassCount);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1047,eturn positiveMassCount;

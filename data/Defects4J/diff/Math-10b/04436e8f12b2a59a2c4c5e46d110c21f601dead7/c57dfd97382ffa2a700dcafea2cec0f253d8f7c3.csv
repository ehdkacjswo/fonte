is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,21,* Treats the distribution of the two-sided
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,22,* {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23,* where {@code D<sub>n</sup> = sup_x | G(x) - Gn (x) |} for the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,24,* theoretical cdf G and the emperical cdf Gn.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,26,* This implementation is based on [1] with certain quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,27,* decisions for extreme values given in [2].
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,29,"* In short, when wanting to evaluate {@code P(D<sub>n</sup> &lt; d)},"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,30,* the method in [1] is to write {@code d = (k - h) / n} for positive
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,31,* integer {@code k} and {@code 0 <= h < 1}. Then
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,32,* {@code P(D<sub>n</sup> &lt; d) = (n!/n^n) * t_kk}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,33,"* where {@code t_kk} is the (k, k)'th entry in the special matrix {@code H^n},"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,34,* i.e. {@code H} to the {@code n}'th power.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,"* See also <a href=""http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,37,* Kolmogorov-Smirnov test on Wikipedia</a> for details.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,39,* References:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,40,"* [1] Evaluating Kolmogorov's Distribution by George Marsaglia, Wai"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,41,"* Wan Tsang, Jingbo Wang http://www.jstatsoft.org/v08/i18/paper"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,43,"* [2] <a href=""http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,44,* Computing the Two-Sided Kolmogorov-Smirnov Distribution</a> by Richard Simard
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,45,* and Pierre L'Ecuyer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,47,"* Note that [1] contains an error in computing h, refer to"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,48,"* <a href=""https://issues.apache.org/jira/browse/MATH-437"">MATH-437</a> for details."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,50,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,52,public interface KolmogorovSmirnovDistribution {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,54,public double cdf(double d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,21,import java.math.BigDecimal;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,23,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,24,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,25,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,26,import org.apache.commons.math.fraction.BigFraction;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,27,import org.apache.commons.math.fraction.FractionConversionException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,28,import org.apache.commons.math.linear.Array2DRowFieldMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,29,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,30,import org.apache.commons.math.linear.FieldMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,31,import org.apache.commons.math.linear.RealMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,34,* The default implementation of {@link KolmogorovSmirnovDistribution}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,36,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,38,"public class KolmogorovSmirnovDistributionImpl implements KolmogorovSmirnovDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,40,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,41,private static final long serialVersionUID = -4670676796862967187L;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,43,private int n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,46,* @param n Number of observations
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,47,* @throws NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48,*             if n <= 0
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,50,public KolmogorovSmirnovDistributionImpl(int n) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,51,if (n <= 0) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,52,"throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, n);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,55,this.n = n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,59,* Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,60,* [1] with quick decisions for extreme values given in [2] (see above). The
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,61,* result is not exact as with
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,62,* {@link KolmogorovSmirnovDistributionImpl#cdfExact(double)} because
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,63,* calculations are based on double rather than
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,64,* {@link org.apache.commons.math.fraction.BigFraction}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,66,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,67,* @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,68,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,69,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,70,"*             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,72,@Override
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,73,public double cdf(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,74,"return this.cdf(d, false);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,78,* Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,79,* [1] with quick decisions for extreme values given in [2] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,80,* The result is exact in the sense that BigFraction/BigReal is used everywhere
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,81,* at the expense of very slow execution time. Almost never choose this in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,82,* real applications unless you are very sure; this is almost solely for
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,83,"* verification purposes. Normally, you would choose"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,84,* {@link KolmogorovSmirnovDistributionImpl#cdf(double)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,86,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,87,* @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,88,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,89,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,90,"*             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,92,public double cdfExact(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,93,"return this.cdf(d, true);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,97,* Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,98,* [1] with quick decisions for extreme values given in [2] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,100,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,101,* @param exact
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,102,*            whether the probability should be calculated exact using
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,103,*            BigFraction everywhere at the expense of very
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,104,"*            slow execution time, or if double should be used convenient"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,105,*            places to gain speed. Never choose true in real applications
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,106,*            unless you are very sure; true is almost solely for
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,107,*            verification purposes.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,108,* @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,109,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,110,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,111,"*             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,113,"public double cdf(double d, boolean exact)"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,114,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,116,final int n = this.n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,118,final double ninv = 1 / ((double) n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,119,final double ninvhalf = 0.5 * ninv;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,121,if (d <= ninvhalf) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,123,return 0;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,125,} else if (ninvhalf < d && d <= ninv) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,127,double res = 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,128,double f = 2 * d - ninv;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,130,// n! f^n = n*f * (n-1)*f * ... * 1*x
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,131,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,132,res *= i * f;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,135,return res;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,137,} else if (1 - ninv <= d && d < 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,139,"return 1 - 2 * Math.pow(1 - d, n);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,141,} else if (1 <= d) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,143,return 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,146,return (exact) ? this.exactK(d) : this.roundedK(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,150,* Calculates {@code P(D<sub>n</sup> &lt; d)} exact using method
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,151,* described in [1] and BigFraction (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,153,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,154,* @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,155,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,156,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,157,"*             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,159,private double exactK(double d)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,160,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,162,final int n = this.n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,163,final int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,165,final FieldMatrix<BigFraction> H = this.createH(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,166,final FieldMatrix<BigFraction> Hpower = H.power(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,168,"BigFraction pFrac = Hpower.getEntry(k - 1, k - 1);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,170,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,171,pFrac = pFrac.multiply(i).divide(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,175,* BigFraction.doubleValue converts numerator to double and the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,176,* denominator to double and divides afterwards. That gives NaN quite
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,177,* easy. This does not (scale is the number of digits):
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,179,"return pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP)"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,180,.doubleValue();
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,184,* Calculates <code>P(D<sub>n</sup> &lt; d)</code> using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,185,* [1] and doubles (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,187,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,188,* @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,189,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,190,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,191,"*             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,193,private double roundedK(double d)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,194,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,196,final int n = this.n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,197,final int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,198,final FieldMatrix<BigFraction> HBigFraction = this.createH(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,199,final int m = HBigFraction.getRowDimension();
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,202,* Here the rounding part comes into play: use
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,203,* RealMatrix instead of FieldMatrix<BigFraction>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,205,"final RealMatrix H = new Array2DRowRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,207,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,208,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,209,"H.setEntry(i, j, HBigFraction.getEntry(i, j).doubleValue());"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,213,final RealMatrix Hpower = H.power(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,215,"double pFrac = Hpower.getEntry(k - 1, k - 1);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,217,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,218,pFrac *= (double)i / (double)n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,221,return pFrac;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,225,* Creates H of size m x m as described in [1] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,227,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,229,* @throws MathArithmeticException
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,230,*             if algorithm fails to convert h to a BigFraction in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,231,"*             expressing x as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,233,private FieldMatrix<BigFraction> createH(double d)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,234,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,236,int n = this.n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,237,int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,239,int m = 2 * k - 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,240,double hDouble = k - n * d;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,242,if (hDouble >= 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,243,"throw new ArithmeticException(""Could not "");"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,246,BigFraction h = null;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,248,try {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,249,"h = new BigFraction(hDouble, 1.0e-20, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,250,} catch (FractionConversionException e1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,251,try {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,252,"h = new BigFraction(hDouble, 1.0e-10, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,253,} catch (FractionConversionException e2) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,254,try {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,255,"h = new BigFraction(hDouble, 1.0e-5, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,256,} catch (FractionConversionException e3) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,257,"//throw new MathArithmeticException(hDouble, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,258,"throw new MathArithmeticException(LocalizedFormats.CANNOT_CONVERT_OBJECT_TO_FRACTION, hDouble);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,263,final BigFraction[][] Hdata = new BigFraction[m][m];
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,266,* Start by filling everything with either 0 or 1.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,268,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,269,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,270,if (i - j + 1 < 0)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,271,Hdata[i][j] = BigFraction.ZERO;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,272,else
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,273,Hdata[i][j] = BigFraction.ONE;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,278,* Setting up power-array to avoid calculating the same value twice:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,279,* hPowers[0] = h^1 ... hPowers[m-1] = h^m
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,281,final BigFraction[] hPowers = new BigFraction[m];
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,282,hPowers[0] = h;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,283,for (int i = 1; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,284,hPowers[i] = h.multiply(hPowers[i - 1]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,288,* First column and last row has special values (each other reversed).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,290,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,291,Hdata[i][0] = Hdata[i][0].subtract(hPowers[i]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,292,Hdata[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,296,"* [1] states: ""For 1/2 < h < 1 the bottom left element of the matrix"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,297,"* should be (1 - 2*h^m + (2h - 1)^m )/m!"" Since 0 <= h < 1, then if h >"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,298,* 1/2 is sufficient to check:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,300,if (h.compareTo(BigFraction.ONE_HALF) == 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,301,Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,302,.pow(m));
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,306,"* Aside from the first column and last row, the (i, j)-th element is"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,307,"* 1/(i - j + 1)! if i − j + 1 >= 0, else 0. 1's and 0's are already"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,308,"* put, so only division with (i - j + 1)! is needed in the elements"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,309,* that have 1's. There is no need to calculate (i - j + 1)! and then
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,310,* divide - small steps avoid overflows.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,312,* Note that i - j + 1 > 0 <=> i + 1 > j instead of j'ing all the way to
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,313,* m. Also note that it is started at g = 2 because dividing by 1 isn't
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,314,* really necessary.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,316,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,317,for (int j = 0; j < i + 1; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,318,if (i - j + 1 > 0) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,319,for (int g = 2; g <= i - j + 1; ++g) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,320,Hdata[i][j] = Hdata[i][j].divide(g);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,326,return new Array2DRowFieldMatrix<BigFraction>(Hdata);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,20,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,23,* Test cases for {@link KolmogorovSmirnovDistributionImpl}.
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,25,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,27,public class KolmogorovSmirnovDistributionTest extends TestCase {
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,29,private static final double TOLERANCE = 10e-10;
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,31,public void testCumulativeDensityFunction() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,33,KolmogorovSmirnovDistributionImpl dist;
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,35,/* The code below is generated using the R-script located in
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,36,* /src/test/R/KolmogorovSmirnovDistributionTestCases.R
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,39,/* R version 2.11.1 (2010-05-31) */
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,42,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.005), n = as.integer(200), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,43,* 4.907829957616471622388047046469198862537e-86
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,45,dist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,46,"assertEquals(4.907829957616471622388047046469198862537e-86, dist.cdf(0.005, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,48,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.02), n = as.integer(200), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,49,* 5.151982014280041957199687829849210629618e-06
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,51,dist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,52,"assertEquals(5.151982014280041957199687829849210629618e-06, dist.cdf(0.02, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,54,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.031111), n = as.integer(200), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,55,* 0.01291614648162886340443389343590752105229
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,57,dist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,58,"assertEquals(0.01291614648162886340443389343590752105229, dist.cdf(0.031111, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,60,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.04), n = as.integer(200), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,61,* 0.1067137011362679355208626930107129737735
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,63,dist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,64,"assertEquals(0.1067137011362679355208626930107129737735, dist.cdf(0.04, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,66,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.005), n = as.integer(341), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,67,* 1.914734701559404553985102395145063418825e-53
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,69,dist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,70,"assertEquals(1.914734701559404553985102395145063418825e-53, dist.cdf(0.005, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,72,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.02), n = as.integer(341), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,73,* 0.001171328985781981343872182321774744195864
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,75,dist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,76,"assertEquals(0.001171328985781981343872182321774744195864, dist.cdf(0.02, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,78,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.031111), n = as.integer(341), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,79,* 0.1142955196267499418105728636874118819833
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,81,dist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,82,"assertEquals(0.1142955196267499418105728636874118819833, dist.cdf(0.031111, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,84,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.04), n = as.integer(341), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,85,* 0.3685529520496805266915885113121476024389
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,87,dist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,88,"assertEquals(0.3685529520496805266915885113121476024389, dist.cdf(0.04, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,90,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.005), n = as.integer(389), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,91,* 1.810657144595055888918455512707637574637e-47
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,93,dist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,94,"assertEquals(1.810657144595055888918455512707637574637e-47, dist.cdf(0.005, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,96,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.02), n = as.integer(389), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,97,* 0.003068542559702356568168690742481885536108
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,99,dist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,100,"assertEquals(0.003068542559702356568168690742481885536108, dist.cdf(0.02, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,102,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.031111), n = as.integer(389), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,103,* 0.1658291700122746237244797384846606291831
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,105,dist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,106,"assertEquals(0.1658291700122746237244797384846606291831, dist.cdf(0.031111, false), TOLERANCE);"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,108,"/* formatC(.C(""pkolmogorov2x"", p = as.double(0.04), n = as.integer(389), PACKAGE = ""stats"")$p, 40) gives"
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,109,* 0.4513143712128902529379104180407011881471
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,111,dist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,112,"assertEquals(0.4513143712128902529379104180407011881471, dist.cdf(0.04, false), TOLERANCE);"

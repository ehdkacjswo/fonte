is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,20,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,21,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,25,* Cache-friendly implementation of FieldMatrix using a flat arrays to store
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,26,* square blocks of the matrix.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,27,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,28,* This implementation is specially designed to be cache-friendly. Square blocks are
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,29,* stored as small arrays and allow efficient traversal of data both in row major direction
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,30,"* and columns major direction, one block at a time. This greatly increases performances"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,31,* for algorithms that use crossed directions loops like multiplication or transposition.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,32,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,33,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,34,* The size of square blocks is a static parameter. It may be tuned according to the cache
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,35,"* size of the target computer processor. As a rule of thumbs, it should be the largest"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,36,* value that allows three blocks to be simultaneously cached (this is necessary for example
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,37,* for matrix multiplication). The default value is to use 36x36 blocks.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,38,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,39,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,40,* The regular blocks represent {@link #BLOCK_SIZE} x {@link #BLOCK_SIZE} squares. Blocks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,41,* at right hand side and bottom side which may be smaller to fit matrix dimensions. The square
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,42,* blocks are flattened in row major order in single dimension arrays which are therefore
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,43,* {@link #BLOCK_SIZE}<sup>2</sup> elements long for regular blocks. The blocks are themselves
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,44,* organized in row major order.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,45,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,46,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,47,"* As an example, for a block size of 36x36, a 100x60 matrix would be stored in 6 blocks."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,48,"* Block 0 would be a Field[1296] array holding the upper left 36x36 square, block 1 would be"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,49,"* a Field[1296] array holding the upper center 36x36 square, block 2 would be a Field[1008]"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,50,"* array holding the upper right 36x28 rectangle, block 3 would be a Field[864] array holding"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,51,"* the lower left 24x36 rectangle, block 4 would be a Field[864] array holding the lower center"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,52,* 24x36 rectangle and block 5 would be a Field[672] array holding the lower right 24x28
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,53,* rectangle.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,54,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,55,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,56,* The layout complexity overhead versus simple mapping of matrices to java
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,57,* arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,58,* to up to 3-fold improvements for matrices of moderate to large size.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,59,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,60,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,61,* @since 2.0
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,63,public class DenseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,65,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,66,private static final long serialVersionUID = -4602336630143123183L;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,68,/** Block size. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,69,public static final int BLOCK_SIZE = 36;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,71,/** Blocks of matrix entries. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,72,private final T blocks[][];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,74,/** Number of rows of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,75,private final int rows;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,77,/** Number of columns of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,78,private final int columns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,80,/** Number of block rows of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,81,private final int blockRows;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,83,/** Number of block columns of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,84,private final int blockColumns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,87,* Create a new matrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,89,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,90,* @param rows  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,91,* @param columns  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,92,* @throws IllegalArgumentException if row or column dimension is not
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,93,*  positive
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,95,"public DenseFieldMatrix(final Field<T> field, final int rows, final int columns)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,96,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,98,"super(field, rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,99,this.rows    = rows;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,100,this.columns = columns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,102,// number of blocks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,103,blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,104,blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,106,"// allocate storage blocks, taking care of smaller ones at right and bottom"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,107,"blocks = createBlocksLayout(field, rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,112,* Create a new dense matrix copying entries from raw layout data.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,113,* <p>The input array <em>must</em> already be in raw layout.</p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,114,* <p>Calling this constructor is equivalent to call:
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,115,"* <pre>matrix = new DenseFieldMatrix<T>(getField(), rawData.length, rawData[0].length,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,116,"*                                   toBlocksLayout(rawData), false);</pre>"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,117,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,118,"* @param rawData data for new matrix, in raw layout"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,120,* @exception IllegalArgumentException if <code>blockData</code> shape is
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,121,* inconsistent with block layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,122,"* @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,124,public DenseFieldMatrix(final T[][] rawData)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,125,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,126,"this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,130,* Create a new dense matrix copying entries from block layout data.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,131,* <p>The input array <em>must</em> already be in blocks layout.</p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,132,* @param rows  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,133,* @param columns  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,134,* @param blockData data for new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,135,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,136,* it will be referenced
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,138,* @exception IllegalArgumentException if <code>blockData</code> shape is
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,139,* inconsistent with block layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,140,"* @see #createBlocksLayout(int, int)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,141,* @see #toBlocksLayout(T[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,142,* @see #DenseFieldMatrix(T[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,144,"public DenseFieldMatrix(final int rows, final int columns,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,145,"final T[][] blockData, final boolean copyArray)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,146,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,148,"super(extractField(blockData), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,149,this.rows    = rows;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,150,this.columns = columns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,152,// number of blocks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,153,blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,154,blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,156,if (copyArray) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,157,"// allocate storage blocks, taking care of smaller ones at right and bottom"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,158,"blocks = buildArray(getField(), blockRows * blockColumns, -1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,159,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,160,// reference existing array
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,161,blocks = blockData;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,164,int index = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,165,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,166,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,167,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,168,if (blockData[index].length != iHeight * blockWidth(jBlock)) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,169,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,170,"""wrong array shape (block length = {0}, expected {1})"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,171,"blockData[index].length, iHeight * blockWidth(jBlock));"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,173,if (copyArray) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,174,blocks[index] = blockData[index].clone();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,182,* Convert a data array from raw layout to blocks layout.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,183,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,184,* Raw layout is the straightforward layout where element at row i and
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,185,* column j is in array element <code>rawData[i][j]</code>. Blocks layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,186,"* is the layout used in {@link DenseFieldMatrix} instances, where the matrix"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,187,* is split in square blocks (except at right and bottom side where blocks may
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,188,* be rectangular to fit matrix size) and each block is stored in a flattened
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,189,* one-dimensional array.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,190,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,191,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,192,* This method creates an array in blocks layout from an input array in raw layout.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,193,* It can be used to provide the array argument of the {@link
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,194,"* DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,195,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,196,* @param rawData data array in raw layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,197,* @return a new data array containing the same entries but in blocks layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,198,* @exception IllegalArgumentException if <code>rawData</code> is not rectangular
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,199,*  (not all rows have the same length)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,200,"* @see #createBlocksLayout(int, int)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,201,"* @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,203,public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,204,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,206,final int rows         = rawData.length;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,207,final int columns      = rawData[0].length;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,208,final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,209,final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,211,// safety checks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,212,for (int i = 0; i < rawData.length; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,213,final int length = rawData[i].length;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,214,if (length != columns) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,215,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,216,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,217,"columns, length);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,221,// convert array
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,222,final Field<T> field = extractField(rawData);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,223,"final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,224,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,225,final int pStart  = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,226,"final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,227,final int iHeight = pEnd - pStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,228,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,229,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,230,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,231,final int jWidth = qEnd - qStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,233,// allocate new block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,234,"final T[] block = buildArray(field, iHeight * jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,235,blocks[blockIndex] = block;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,237,// copy data
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,238,"for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,239,"System.arraycopy(rawData[p], qStart, block, index, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,245,return blocks;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,250,* Create a data array in blocks layout.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,251,* <p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,252,* This method can be used to create the array argument of the {@link
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,253,"* DenseFieldMatrix#DenseFieldMatrix(int, int, T[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,254,* </p>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,255,* @param rows  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,256,* @param columns  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,257,* @return a new data array in blocks layout
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,258,* @see #toBlocksLayout(T[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,259,"* @see #DenseFieldMatrix(int, int, T[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,261,"public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,262,"final int rows, final int columns) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,264,final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,265,final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,267,"final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,268,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,269,final int pStart  = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,270,"final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,271,final int iHeight = pEnd - pStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,272,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,273,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,274,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,275,final int jWidth = qEnd - qStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,276,"blocks[blockIndex] = buildArray(field, iHeight * jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,280,return blocks;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,284,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,285,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,286,"public FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,287,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,288,"return new DenseFieldMatrix<T>(getField(), rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,291,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,292,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,293,public FieldMatrix<T> copy() {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,295,// create an empty matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,296,"DenseFieldMatrix<T> copied = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,298,// copy the blocks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,299,for (int i = 0; i < blocks.length; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,300,"System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,303,return copied;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,307,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,308,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,309,public FieldMatrix<T> add(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,310,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,311,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,312,return add((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,313,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,315,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,316,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,318,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,320,"// perform addition block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,321,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,322,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,323,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,325,// perform addition on the current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,326,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,327,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,328,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,329,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,330,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,331,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,332,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,333,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,334,"outBlock[k] = tBlock[k].add(m.getEntry(p, q));"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,338,// go to next block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,339,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,344,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,350,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,352,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,353,* @return     this + m
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,354,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,356,public DenseFieldMatrix<T> add(final DenseFieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,357,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,359,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,360,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,362,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,364,"// perform addition block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,365,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,366,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,367,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,368,final T[] mBlock   = m.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,369,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,370,outBlock[k] = tBlock[k].add(mBlock[k]);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,374,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,378,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,379,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,380,public FieldMatrix<T> subtract(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,381,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,382,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,383,return subtract((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,384,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,386,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,387,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,389,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,391,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,392,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,393,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,394,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,396,// perform subtraction on the current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,397,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,398,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,399,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,400,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,401,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,402,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,403,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,404,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,405,"outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,409,// go to next block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,410,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,415,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,421,* Compute this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,423,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,424,* @return     this - m
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,425,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,427,public DenseFieldMatrix<T> subtract(final DenseFieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,428,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,430,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,431,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,433,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,435,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,436,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,437,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,438,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,439,final T[] mBlock   = m.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,440,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,441,outBlock[k] = tBlock[k].subtract(mBlock[k]);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,445,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,449,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,450,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,451,public FieldMatrix<T> scalarAdd(final T d)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,452,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,454,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,456,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,457,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,458,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,459,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,460,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,461,outBlock[k] = tBlock[k].add(d);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,465,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,469,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,470,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,471,public FieldMatrix<T> scalarMultiply(final T d)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,472,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,474,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,476,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,477,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,478,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,479,final T[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,480,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,481,outBlock[k] = tBlock[k].multiply(d);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,485,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,489,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,490,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,491,public FieldMatrix<T> multiply(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,492,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,493,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,494,return multiply((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,495,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,497,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,498,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,500,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,501,final T zero = getField().getZero();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,503,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,504,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,505,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,507,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,508,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,510,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,512,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,513,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,515,// select current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,516,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,518,// perform multiplication on current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,519,for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,520,final int kWidth      = blockWidth(kBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,521,final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,522,final int rStart      = kBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,523,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,524,final int lStart = (p - pStart) * kWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,525,final int lEnd   = lStart + kWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,526,for (int q = qStart; q < qEnd; ++q) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,527,T sum = zero;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,528,"for (int l = lStart, r = rStart; l < lEnd; ++l, ++r) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,529,"sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,531,outBlock[k] = outBlock[k].add(sum);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,532,++k;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,537,// go to next block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,538,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,543,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,549,* Returns the result of postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,551,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,552,* @return     this * m
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,553,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,554,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,556,public DenseFieldMatrix<T> multiply(DenseFieldMatrix<T> m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,558,// safety check
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,559,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,561,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, m.columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,562,final T zero = getField().getZero();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,564,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,565,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,566,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,568,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,569,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,571,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,572,final int jWidth = out.blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,573,final int jWidth2 = jWidth  + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,574,final int jWidth3 = jWidth2 + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,575,final int jWidth4 = jWidth3 + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,577,// select current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,578,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,580,// perform multiplication on current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,581,for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,582,final int kWidth = blockWidth(kBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,583,final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,584,final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,585,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,586,final int lStart = (p - pStart) * kWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,587,final int lEnd   = lStart + kWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,588,for (int nStart = 0; nStart < jWidth; ++nStart) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,589,T sum = zero;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,590,int l = lStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,591,int n = nStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,592,while (l < lEnd - 3) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,593,sum = sum.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,594,add(tBlock[l].multiply(mBlock[n])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,595,add(tBlock[l + 1].multiply(mBlock[n + jWidth])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,596,add(tBlock[l + 2].multiply(mBlock[n + jWidth2])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,597,add(tBlock[l + 3].multiply(mBlock[n + jWidth3]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,598,l += 4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,599,n += jWidth4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,601,while (l < lEnd) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,602,sum = sum.add(tBlock[l++].multiply(mBlock[n]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,603,n += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,605,outBlock[k] = outBlock[k].add(sum);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,606,++k;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,611,// go to next block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,612,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,617,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,621,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,622,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,623,public T[][] getData() {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,625,"final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,626,final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,628,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,629,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,630,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,631,int regularPos   = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,632,int lastPos      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,633,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,634,final T[] dataP = data[p];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,635,int blockIndex = iBlock * blockColumns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,636,int dataPos    = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,637,for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,638,"System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,639,dataPos += BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,641,"System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,642,regularPos += BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,643,lastPos    += lastColumns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,647,return data;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,651,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,652,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,653,"public FieldMatrix<T> getSubMatrix(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,654,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,655,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,657,// safety checks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,658,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,660,// create the output matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,661,final DenseFieldMatrix<T> out =
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,662,"new DenseFieldMatrix<T>(getField(), endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,664,// compute blocks shifts
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,665,final int blockStartRow    = startRow    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,666,final int rowsShift        = startRow    % BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,667,final int blockStartColumn = startColumn / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,668,final int columnsShift     = startColumn % BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,670,"// perform extraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,671,"for (int iBlock = 0, pBlock = blockStartRow; iBlock < out.blockRows; ++iBlock, ++pBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,672,final int iHeight = out.blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,673,"for (int jBlock = 0, qBlock = blockStartColumn; jBlock < out.blockColumns; ++jBlock, ++qBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,674,final int jWidth = out.blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,676,// handle one block of the output matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,677,final int      outIndex = iBlock * out.blockColumns + jBlock;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,678,final T[] outBlock = out.blocks[outIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,679,final int      index    = pBlock * blockColumns + qBlock;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,680,final int      width    = blockWidth(qBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,682,final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,683,final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,684,if (heightExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,685,// the submatrix block spans on two blocks rows from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,686,if (widthExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,687,// the submatrix block spans on two blocks columns from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,688,final int width2 = blockWidth(qBlock + 1);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,689,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,690,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,691,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,692,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,693,"copyBlockPart(blocks[index + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,694,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,695,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,696,"outBlock, jWidth, 0, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,697,"copyBlockPart(blocks[index + blockColumns], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,698,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,699,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,700,"outBlock, jWidth, iHeight - heightExcess, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,701,"copyBlockPart(blocks[index + blockColumns + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,702,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,703,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,704,"outBlock, jWidth, iHeight - heightExcess, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,705,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,706,// the submatrix block spans on one block column from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,707,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,708,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,709,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,710,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,711,"copyBlockPart(blocks[index + blockColumns], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,712,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,713,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,714,"outBlock, jWidth, iHeight - heightExcess, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,716,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,717,// the submatrix block spans on one block row from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,718,if (widthExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,719,// the submatrix block spans on two blocks columns from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,720,final int width2 = blockWidth(qBlock + 1);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,721,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,722,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,723,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,724,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,725,"copyBlockPart(blocks[index + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,726,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,727,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,728,"outBlock, jWidth, 0, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,729,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,730,// the submatrix block spans on one block column from the original matrix
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,731,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,732,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,733,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,734,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,741,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,746,* Copy a part of a block into another one
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,747,* <p>This method can be called only when the specified part fits in both
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,748,"* blocks, no verification is done here.</p>"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,749,* @param srcBlock source block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,750,* @param srcWidth source block width ({@link #BLOCK_SIZE} or smaller)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,751,* @param srcStartRow start row in the source block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,752,* @param srcEndRow end row (exclusive) in the source block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,753,* @param srcStartColumn start column in the source block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,754,* @param srcEndColumn end column (exclusive) in the source block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,755,* @param dstBlock destination block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,756,* @param dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,757,* @param dstStartRow start row in the destination block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,758,* @param dstStartColumn start column in the destination block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,760,"private void copyBlockPart(final T[] srcBlock, final int srcWidth,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,761,"final int srcStartRow, final int srcEndRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,762,"final int srcStartColumn, final int srcEndColumn,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,763,"final T[] dstBlock, final int dstWidth,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,764,"final int dstStartRow, final int dstStartColumn) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,765,final int length = srcEndColumn - srcStartColumn;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,766,int srcPos = srcStartRow * srcWidth + srcStartColumn;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,767,int dstPos = dstStartRow * dstWidth + dstStartColumn;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,768,for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,769,"System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,770,srcPos += srcWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,771,dstPos += dstWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,775,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,776,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,777,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,778,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,780,// safety checks
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,781,final int refLength = subMatrix[0].length;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,782,if (refLength < 1) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,783,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,785,final int endRow    = row + subMatrix.length - 1;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,786,final int endColumn = column + refLength - 1;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,787,"checkSubMatrixIndex(row, endRow, column, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,788,for (final T[] subRow : subMatrix) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,789,if (subRow.length != refLength) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,790,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,791,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,792,"refLength, subRow.length);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,796,// compute blocks bounds
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,797,final int blockStartRow    = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,798,final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,799,final int blockStartColumn = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,800,final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,802,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,803,for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,804,final int iHeight  = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,805,final int firstRow = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,806,"final int iStart   = Math.max(row,    firstRow);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,807,"final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,809,for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,810,final int jWidth      = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,811,final int firstColumn = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,812,"final int jStart      = Math.max(column,    firstColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,813,"final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,814,final int jLength     = jEnd - jStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,816,"// handle one block, row by row"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,817,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,818,for (int i = iStart; i < iEnd; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,819,"System.arraycopy(subMatrix[i - row], jStart - column,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,820,"block, (i - firstRow) * jWidth + (jStart - firstColumn),"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,821,jLength);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,828,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,829,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,830,public FieldMatrix<T> getRowMatrix(final int row)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,831,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,833,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,834,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), 1, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,836,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,837,final int iBlock  = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,838,final int iRow    = row - iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,839,int outBlockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,840,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,841,T[] outBlock = out.blocks[outBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,842,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,843,final int jWidth     = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,844,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,845,final int available  = outBlock.length - outIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,846,if (jWidth > available) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,847,"System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,848,outBlock = out.blocks[++outBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,849,"System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,850,outIndex = jWidth - available;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,851,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,852,"System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,853,outIndex += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,857,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,861,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,862,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,863,"public void setRowMatrix(final int row, final FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,864,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,865,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,866,"setRowMatrix(row, (DenseFieldMatrix<T>) matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,867,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,868,"super.setRowMatrix(row, matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,873,* Sets the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,874,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,876,* @param row the row to be set
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,877,* @param matrix row matrix (must have one row and the same number of columns
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,878,* as the instance)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,879,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,880,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,881,* instance row
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,883,"public void setRowMatrix(final int row, final DenseFieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,884,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,886,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,887,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,888,if ((matrix.getRowDimension() != 1) ||
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,889,(matrix.getColumnDimension() != nCols)) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,890,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,891,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,892,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,893,"1, nCols);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,896,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,897,final int iBlock = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,898,final int iRow   = row - iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,899,int mBlockIndex  = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,900,int mIndex       = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,901,T[] mBlock  = matrix.blocks[mBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,902,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,903,final int jWidth     = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,904,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,905,final int available  = mBlock.length - mIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,906,if (jWidth > available) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,907,"System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,908,mBlock = matrix.blocks[++mBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,909,"System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,910,mIndex = jWidth - available;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,911,} else {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,912,"System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,913,mIndex += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,919,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,920,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,921,public FieldMatrix<T> getColumnMatrix(final int column)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,922,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,924,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,925,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,927,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,928,final int jBlock  = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,929,final int jColumn = column - jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,930,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,931,int outBlockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,932,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,933,T[] outBlock = out.blocks[outBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,934,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,935,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,936,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,937,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,938,if (outIndex >= outBlock.length) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,939,outBlock = out.blocks[++outBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,940,outIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,942,outBlock[outIndex++] = block[i * jWidth + jColumn];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,946,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,950,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,951,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,952,"public void setColumnMatrix(final int column, final FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,953,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,954,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,955,"setColumnMatrix(column, (DenseFieldMatrix<T>) matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,956,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,957,"super.setColumnMatrix(column, matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,962,* Sets the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,963,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,965,* @param column the column to be set
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,966,* @param matrix column matrix (must have one column and the same number of rows
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,967,* as the instance)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,968,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,969,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,970,* instance column
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,972,"void setColumnMatrix(final int column, final DenseFieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,973,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,975,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,976,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,977,if ((matrix.getRowDimension() != nRows) ||
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,978,(matrix.getColumnDimension() != 1)) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,979,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,980,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,981,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,982,"nRows, 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,985,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,986,final int jBlock  = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,987,final int jColumn = column - jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,988,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,989,int mBlockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,990,int mIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,991,T[] mBlock = matrix.blocks[mBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,992,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,993,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,994,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,995,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,996,if (mIndex >= mBlock.length) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,997,mBlock = matrix.blocks[++mBlockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,998,mIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1000,block[i * jWidth + jColumn] = mBlock[mIndex++];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1006,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1007,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1008,public FieldVector<T> getRowVector(final int row)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1009,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1011,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1012,"final T[] outData = buildArray(getField(), columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1014,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1015,final int iBlock  = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1016,final int iRow    = row - iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1017,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1018,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1019,final int jWidth     = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1020,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1021,"System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1022,outIndex += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1025,"return new FieldVectorImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1029,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1030,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1031,"public void setRowVector(final int row, final FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1032,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1033,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1034,"setRow(row, ((FieldVectorImpl<T>) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1035,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1036,"super.setRowVector(row, vector);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1040,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1041,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1042,public FieldVector<T> getColumnVector(final int column)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1043,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1045,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1046,"final T[] outData = buildArray(getField(), rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1048,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1049,final int jBlock  = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1050,final int jColumn = column - jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1051,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1052,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1053,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1054,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1055,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1056,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1057,outData[outIndex++] = block[i * jWidth + jColumn];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1061,"return new FieldVectorImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1065,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1066,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1067,"public void setColumnVector(final int column, final FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1068,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1069,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1070,"setColumn(column, ((FieldVectorImpl<T>) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1071,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1072,"super.setColumnVector(column, vector);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1076,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1077,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1078,public T[] getRow(final int row)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1079,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1081,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1082,"final T[] out = buildArray(getField(), columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1084,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1085,final int iBlock  = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1086,final int iRow    = row - iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1087,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1088,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1089,final int jWidth     = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1090,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1091,"System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1092,outIndex += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1095,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1099,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1100,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1101,"public void setRow(final int row, final T[] array)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1102,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1104,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1105,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1106,if (array.length != nCols) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1107,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1108,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1109,"1, array.length, 1, nCols);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1112,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1113,final int iBlock  = row / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1114,final int iRow    = row - iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1115,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1116,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1117,final int jWidth     = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1118,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1119,"System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1120,outIndex += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1125,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1126,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1127,public T[] getColumn(final int column)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1128,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1130,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1131,"final T[] out = buildArray(getField(), rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1133,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1134,final int jBlock  = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1135,final int jColumn = column - jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1136,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1137,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1138,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1139,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1140,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1141,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1142,out[outIndex++] = block[i * jWidth + jColumn];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1146,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1150,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1151,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1152,"public void setColumn(final int column, final T[] array)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1153,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1155,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1156,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1157,if (array.length != nRows) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1158,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1159,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1160,"array.length, 1, nRows, 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1163,"// perform copy block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1164,final int jBlock  = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1165,final int jColumn = column - jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1166,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1167,int outIndex      = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1168,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1169,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1170,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1171,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1172,block[i * jWidth + jColumn] = array[outIndex++];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1178,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1179,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1180,"public T getEntry(final int row, final int column)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1181,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1182,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1183,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1184,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1185,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1186,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1187,return blocks[iBlock * blockColumns + jBlock][k];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1188,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1189,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1190,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1191,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1195,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1196,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1197,"public void setEntry(final int row, final int column, final T value)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1198,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1199,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1200,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1201,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1202,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1203,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1204,blocks[iBlock * blockColumns + jBlock][k] = value;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1205,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1206,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1207,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1208,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1212,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1213,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1214,"public void addToEntry(final int row, final int column, final T increment)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1215,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1216,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1217,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1218,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1219,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1220,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1221,final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1222,blockIJ[k] = blockIJ[k].add(increment);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1223,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1224,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1225,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1226,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1230,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1231,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1232,"public void multiplyEntry(final int row, final int column, final T factor)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1233,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1234,try {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1235,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1236,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1237,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1238,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1239,final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1240,blockIJ[k] = blockIJ[k].multiply(factor);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1241,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1242,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1243,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1244,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1248,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1249,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1250,public FieldMatrix<T> transpose() {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1252,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1253,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1254,"final DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), nCols, nRows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1256,"// perform transpose block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1257,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1258,for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1259,for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1261,// transpose current block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1262,final T[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1263,final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1264,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1265,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1266,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1267,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1268,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1269,final int lInc = pEnd - pStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1270,"for (int q = qStart, l = p - pStart; q < qEnd; ++q, l+= lInc) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1271,outBlock[k++] = tBlock[l];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1275,// go to next block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1276,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1281,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1285,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1286,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1287,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1288,return rows;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1291,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1292,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1293,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1294,return columns;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1297,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1298,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1299,public T[] operate(final T[] v)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1300,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1302,if (v.length != columns) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1303,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1304,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1305,"v.length, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1307,"final T[] out = buildArray(getField(), rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1308,final T zero = getField().getZero();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1310,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1311,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1312,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1313,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1314,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1315,final T[] block  = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1316,final int      qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1317,"final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1318,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1319,T sum = zero;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1320,int q = qStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1321,while (q < qEnd - 3) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1322,sum = sum.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1323,add(block[k].multiply(v[q])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1324,add(block[k + 1].multiply(v[q + 1])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1325,add(block[k + 2].multiply(v[q + 2])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1326,add(block[k + 3].multiply(v[q + 3]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1327,k += 4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1328,q += 4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1330,while (q < qEnd) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1331,sum = sum.add(block[k++].multiply(v[q++]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1333,out[p] = out[p].add(sum);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1338,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1342,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1343,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1344,public T[] preMultiply(final T[] v)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1345,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1347,if (v.length != rows) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1348,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1349,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1350,"v.length, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1352,"final T[] out = buildArray(getField(), columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1353,final T zero = getField().getZero();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1355,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1356,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1357,final int jWidth  = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1358,final int jWidth2 = jWidth  + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1359,final int jWidth3 = jWidth2 + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1360,final int jWidth4 = jWidth3 + jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1361,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1362,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1363,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1364,final T[] block  = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1365,final int      pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1366,"final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1367,for (int q = qStart; q < qEnd; ++q) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1368,int k = q - qStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1369,T sum = zero;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1370,int p = pStart;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1371,while (p < pEnd - 3) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1372,sum = sum.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1373,add(block[k].multiply(v[p])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1374,add(block[k + jWidth].multiply(v[p + 1])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1375,add(block[k + jWidth2].multiply(v[p + 2])).
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1376,add(block[k + jWidth3].multiply(v[p + 3]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1377,k += jWidth4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1378,p += 4;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1380,while (p < pEnd) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1381,sum = sum.add(block[k].multiply(v[p++]));
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1382,k += jWidth;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1384,out[q] = out[q].add(sum);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1389,return out;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1393,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1394,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1395,public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1396,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1397,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1398,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1399,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1400,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1401,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1402,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1403,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1404,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1405,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1406,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1407,"for (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1408,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1413,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1416,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1417,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1418,public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1419,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1420,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1421,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1422,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1423,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1424,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1425,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1426,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1427,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1428,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1429,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1430,"for (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1431,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1436,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1439,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1440,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1441,"public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1442,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1443,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1444,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1445,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1446,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1447,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1448,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1449,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1450,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1451,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1452,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1453,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1454,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1455,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1456,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1457,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1458,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1459,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1464,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1467,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1468,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1469,"public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1470,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1471,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1472,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1473,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1474,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1475,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1476,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1477,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1478,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1479,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1480,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1481,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1482,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1483,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1484,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1485,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1486,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1487,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1492,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1495,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1496,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1497,public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1498,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1499,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1500,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1501,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1502,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1503,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1504,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1505,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1506,final T[] block = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1507,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1508,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1509,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1514,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1517,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1518,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1519,public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1520,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1521,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1522,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1523,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1524,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1525,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1526,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1527,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1528,final T[] block = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1529,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1530,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1531,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1536,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1539,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1540,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1541,"public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1542,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1543,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1544,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1545,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1546,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1547,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1548,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1549,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1550,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1551,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1552,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1553,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1554,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1555,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1556,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1557,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1558,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1559,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1564,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1567,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1568,@Override
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1569,"public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1570,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1571,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1572,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1573,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1574,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1575,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1576,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1577,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1578,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1579,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1580,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1581,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1582,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1583,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1584,final T[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1585,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1586,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1587,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1592,return visitor.end();
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1596,* Get the height of a block.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1597,* @param blockRow row index (in block sense) of the block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1598,* @return height (number of rows) of the block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1600,private int blockHeight(final int blockRow) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1601,return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1605,* Get the width of a block.
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1606,* @param blockColumn column index (in block sense) of the block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1607,* @return width (number of columns) of the block
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1609,private int blockWidth(final int blockColumn) {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,1610,return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,20,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,24,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,25,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,54,* Returns a {@link FieldMatrix} with specified dimensions.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,55,* <p>The matrix elements are all set to field.getZero().</p>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,56,* @param field field to which the matrix elements belong
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,57,* @param rows number of rows of the matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,58,* @param columns number of columns of the matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,59,* @return  FieldMatrix with specified dimensions
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,60,* @see #createFieldMatrix(FieldElement[][])
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,61,* @since 2.0
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,63,"public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,64,"final int rows,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,65,final int columns) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,66,"return new DenseFieldMatrix<T>(field, rows, columns);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,85,* Returns a {@link FieldMatrix} whose entries are the the values in the
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,86,* the input array.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,87,* <p>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,88,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,89,* </p>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,90,* @param data input array
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,91,* @return  RealMatrix containing the values of the array
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,92,* @throws IllegalArgumentException if <code>data</code> is not rectangular
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,93,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,94,* @throws NullPointerException if <code>data</code> is null
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,95,"* @see #createFieldMatrix(Field, int, int)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,96,* @since 2.0
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,98,public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,99,return new DenseFieldMatrix<T>(data);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,119,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,121,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,122,* @return identity matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,123,* @throws IllegalArgumentException if dimension is not positive
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,124,* @since 2.0
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,126,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,127,public static <T extends FieldElement<T>> FieldMatrix<T>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,128,"createFieldIdentityMatrix(final Field<T> field, final int dimension) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,129,final T zero = field.getZero();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,130,final T one  = field.getOne();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,131,"final T[][] d = (T[][]) Array.newInstance(zero.getClass(), dimension, dimension);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,132,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,133,final T[] dRow = d[row];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,134,"Arrays.fill(dRow, zero);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,135,dRow[row] = one;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,137,"return new FieldMatrixImpl<T>(d, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,141,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,143,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,144,* @return identity matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,145,* @throws IllegalArgumentException if dimension is not positive
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,146,* @since 1.1
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,147,"* @deprecated since 2.0, replaced by {@link #createFieldIdentityMatrix(Field, int)}"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,149,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,150,public static BigMatrix createBigIdentityMatrix(int dimension) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,151,final BigDecimal[][] d = new BigDecimal[dimension][dimension];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,152,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,153,final BigDecimal[] dRow = d[row];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,154,"Arrays.fill(dRow, BigMatrixImpl.ZERO);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,155,dRow[row] = BigMatrixImpl.ONE;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,157,"return new BigMatrixImpl(d, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,177,* Returns a diagonal matrix with specified elements.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,179,* @param diagonal diagonal elements of the matrix (the array elements
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,180,* will be copied)
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,181,* @return diagonal matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,182,* @since 2.0
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,184,public static <T extends FieldElement<T>> FieldMatrix<T>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,185,createFieldDiagonalMatrix(final T[] diagonal) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,186,final FieldMatrix<T> m =
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,187,"createFieldMatrix(diagonal[0].getField(), diagonal.length, diagonal.length);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,188,for (int i = 0; i < diagonal.length; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,189,"m.setEntry(i, i, diagonal[i]);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,191,return m;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,203,* @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,205,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,219,* @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,221,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,241,* @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,243,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,257,* @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,259,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,277,* Creates a {@link FieldVector} using the data from the input array.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,279,* @param data the input data
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,280,* @return a data.length FieldVector
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,281,* @throws IllegalArgumentException if <code>data</code> is empty
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,282,* @throws NullPointerException if <code>data</code>is null
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,284,public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,285,"return new FieldVectorImpl<T>(data, true);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,307,* Creates a row {@link FieldMatrix} using the data from the input
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,308,* array.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,310,* @param rowData the input row data
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,311,* @return a 1 x rowData.length FieldMatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,312,* @throws IllegalArgumentException if <code>rowData</code> is empty
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,313,* @throws NullPointerException if <code>rowData</code>is null
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,315,public static <T extends FieldElement<T>> FieldMatrix<T>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,316,createRowFieldMatrix(final T[] rowData) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,317,final int nCols = rowData.length;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,318,"final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,319,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,320,"m.setEntry(0, i, rowData[i]);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,322,return m;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,333,* @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,335,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,353,* @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,355,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,371,* @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,373,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,402,* Creates a column {@link FieldMatrix} using the data from the input
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,403,* array.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,405,* @param columnData  the input column data
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,406,* @return a columnData x 1 FieldMatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,407,* @throws IllegalArgumentException if <code>columnData</code> is empty
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,408,* @throws NullPointerException if <code>columnData</code>is null
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,410,public static <T extends FieldElement<T>> FieldMatrix<T>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,411,createColumnFieldMatrix(final T[] columnData) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,412,final int nRows = columnData.length;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,413,"final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,414,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,415,"m.setEntry(i, 0, columnData[i]);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,417,return m;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,428,* @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,430,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,448,* @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,450,@Deprecated
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,468,* @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,470,@Deprecated
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,313, Returns <code>dimension x dimension</code> identity matrix.
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,315, @param dimension dimension of identity matrix to generate
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,316, @return identity matrix
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,317, @throws IllegalArgumentException if dimension is not positive
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,318, @since 1.1
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,320,ublic static BigMatrix createBigIdentityMatrix(int dimension) {
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,321,inal BigDecimal[][] d = new BigDecimal[dimension][dimension];
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,322,or (int row = 0; row < dimension; row++) {
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,323,inal BigDecimal[] dRow = d[row];
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,324,"rrays.fill(dRow, BigMatrixImpl.ZERO);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,325,Row[row] = BigMatrixImpl.ONE;
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,327,"eturn new BigMatrixImpl(d, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,19,import java.util.Arrays;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,20,import java.util.Random;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,26,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,27,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,28,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,29,import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,30,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,33,* Test cases for the {@link DenseFieldMatrix} class.
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,35,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,38,public final class DenseFieldMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,40,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,41,protected Fraction[][] id = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,42,"{new Fraction(1),new Fraction(0),new Fraction(0)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,43,"{new Fraction(0),new Fraction(1),new Fraction(0)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,44,"{new Fraction(0),new Fraction(0),new Fraction(1)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,47,// Test data for group operations
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,48,protected Fraction[][] testData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,49,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,50,"{new Fraction(2),new Fraction(5),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,51,"{new Fraction(1),new Fraction(0),new Fraction(8)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,53,protected Fraction[][] testDataLU = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,54,"{new Fraction(2), new Fraction(5), new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,55,"{new Fraction(1, 2), new Fraction(-5, 2), new Fraction(13, 2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,56,"{new Fraction(1, 2), new Fraction(1, 5), new Fraction(1, 5)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,58,protected Fraction[][] testDataPlus2 = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,59,"{new Fraction(3),new Fraction(4),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,60,"{new Fraction(4),new Fraction(7),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,61,"{new Fraction(3),new Fraction(2),new Fraction(10)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,63,protected Fraction[][] testDataMinus = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,64,"{new Fraction(-1),new Fraction(-2),new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,65,"{new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,66,"{new Fraction(-1),new Fraction(0),new Fraction(-8)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,68,"protected Fraction[] testDataRow1 = {new Fraction(1),new Fraction(2),new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,69,"protected Fraction[] testDataCol3 = {new Fraction(3),new Fraction(3),new Fraction(8)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,70,protected Fraction[][] testDataInv = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,71,"{new Fraction(-40),new Fraction(16),new Fraction(9)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,72,"{new Fraction(13),new Fraction(-5),new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,73,"{new Fraction(5),new Fraction(-2),new Fraction(-1)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,75,"protected Fraction[] preMultTest = {new Fraction(8), new Fraction(12), new Fraction(33)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,76,protected Fraction[][] testData2 = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,77,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,78,"{new Fraction(2),new Fraction(5),new Fraction(3)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,80,protected Fraction[][] testData2T = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,81,"{new Fraction(1),new Fraction(2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,82,"{new Fraction(2),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,83,"{new Fraction(3),new Fraction(3)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,85,protected Fraction[][] testDataPlusInv = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,86,"{new Fraction(-39),new Fraction(18),new Fraction(12)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,87,"{new Fraction(15),new Fraction(0),new Fraction(0)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,88,"{new Fraction(6),new Fraction(-2),new Fraction(7)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,91,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,92,protected Fraction[][] luData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,93,"{new Fraction(2),new Fraction(3),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,94,"{new Fraction(0),new Fraction(5),new Fraction(7)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,95,"{new Fraction(6),new Fraction(9),new Fraction(8)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,97,protected Fraction[][] luDataLUDecomposition = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,98,"{new Fraction(6),new Fraction(9),new Fraction(8)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,99,"{new Fraction(0),new Fraction(5),new Fraction(7)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,100,"{new Fraction(1, 3),new Fraction(0),new Fraction(1, 3)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,103,// singular matrices
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,104,"protected Fraction[][] singular = { {new Fraction(2),new Fraction(3)}, {new Fraction(2),new Fraction(3)} };"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,105,protected Fraction[][] bigSingular = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,106,"{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,107,"{new Fraction(2),new Fraction(5),new Fraction(3),new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,108,"{new Fraction(7),new Fraction(3),new Fraction(256),new Fraction(1930)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,109,"{new Fraction(3),new Fraction(7),new Fraction(6),new Fraction(8)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,110,}; // 4th row = 1st + 2nd
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,111,protected Fraction[][] detData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,112,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,113,"{new Fraction(4),new Fraction(5),new Fraction(6)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,114,"{new Fraction(7),new Fraction(8),new Fraction(10)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,116,"protected Fraction[][] detData2 = { {new Fraction(1), new Fraction(3)}, {new Fraction(2), new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,118,// vectors
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,119,"protected Fraction[] testVector = {new Fraction(1),new Fraction(2),new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,120,"protected Fraction[] testVector2 = {new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,122,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,123,protected Fraction[][] subTestData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,124,"{new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,125,"{new Fraction(3, 2), new Fraction(5, 2), new Fraction(7, 2), new Fraction(9, 2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,126,"{new Fraction(2), new Fraction(4), new Fraction(6), new Fraction(8)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,127,"{new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,129,// array selections
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,130,"protected Fraction[][] subRows02Cols13 = { {new Fraction(2), new Fraction(4)}, {new Fraction(4), new Fraction(8)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,131,"protected Fraction[][] subRows03Cols12 = { {new Fraction(2), new Fraction(3)}, {new Fraction(5), new Fraction(6)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,132,protected Fraction[][] subRows03Cols123 = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,133,"{new Fraction(2), new Fraction(3), new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,134,"{new Fraction(5), new Fraction(6), new Fraction(7)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,136,// effective permutations
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,137,protected Fraction[][] subRows20Cols123 = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,138,"{new Fraction(4), new Fraction(6), new Fraction(8)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,139,"{new Fraction(2), new Fraction(3), new Fraction(4)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,141,"protected Fraction[][] subRows31Cols31 = {{new Fraction(7), new Fraction(5)}, {new Fraction(9, 2), new Fraction(5, 2)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,142,// contiguous ranges
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,143,"protected Fraction[][] subRows01Cols23 = {{new Fraction(3),new Fraction(4)} , {new Fraction(7, 2), new Fraction(9, 2)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,144,"protected Fraction[][] subRows23Cols00 = {{new Fraction(2)} , {new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,145,protected Fraction[][] subRows00Cols33 = {{new Fraction(4)}};
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,146,// row matrices
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,147,"protected Fraction[][] subRow0 = {{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,148,"protected Fraction[][] subRow3 = {{new Fraction(4),new Fraction(5),new Fraction(6),new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,149,// column matrices
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,150,"protected Fraction[][] subColumn1 = {{new Fraction(2)}, {new Fraction(5, 2)}, {new Fraction(4)}, {new Fraction(5)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,151,"protected Fraction[][] subColumn3 = {{new Fraction(4)}, {new Fraction(9, 2)}, {new Fraction(8)}, {new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,153,// tolerances
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,154,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,155,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,157,public DenseFieldMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,158,super(name);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,161,public static Test suite() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,162,TestSuite suite = new TestSuite(DenseFieldMatrixTest.class);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,163,"suite.setName(""DenseFieldMatrix<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,164,return suite;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,167,/** test dimensions */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,168,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,169,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,170,DenseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,171,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,172,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,173,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,174,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,175,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,176,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,179,/** test copy functions */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,180,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,181,Random r = new Random(66636328996002l);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,182,"DenseFieldMatrix<Fraction> m1 = createRandomMatrix(r, 47, 83);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,183,DenseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(m1.getData());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,184,"assertEquals(m1, m2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,185,DenseFieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,186,DenseFieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(m3.getData());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,187,"assertEquals(m3, m4);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,190,/** test add */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,191,public void testAdd() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,192,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,193,DenseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,194,FieldMatrix<Fraction> mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,195,Fraction[][] sumEntries = mPlusMInv.getData();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,196,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,197,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,198,"assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,203,/** test add failure */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,204,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,205,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,206,DenseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,207,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,208,m.add(m2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,209,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,210,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,211,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,215,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,216,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,217,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,218,DenseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,219,"TestUtils.assertEquals(m.subtract(m2), m2.scalarMultiply(new Fraction(-1)).add(m));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,220,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,221,m.subtract(new DenseFieldMatrix<Fraction>(testData2));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,222,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,223,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,224,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,228,/** test multiply */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,229,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,230,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,231,DenseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,232,DenseFieldMatrix<Fraction> identity = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,233,DenseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,234,"TestUtils.assertEquals(m.multiply(mInv), identity);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,235,"TestUtils.assertEquals(mInv.multiply(m), identity);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,236,"TestUtils.assertEquals(m.multiply(identity), m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,237,"TestUtils.assertEquals(identity.multiply(mInv), mInv);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,238,"TestUtils.assertEquals(m2.multiply(identity), m2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,239,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,240,m.multiply(new DenseFieldMatrix<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,241,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,242,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,243,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,247,public void testSeveralBlocks() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,249,FieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,250,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), 37, 41);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,251,for (int i = 0; i < m.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,252,for (int j = 0; j < m.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,253,"m.setEntry(i, j, new Fraction(i * 11 + j, 11));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,257,FieldMatrix<Fraction> mT = m.transpose();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,258,"assertEquals(m.getRowDimension(), mT.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,259,"assertEquals(m.getColumnDimension(), mT.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,260,for (int i = 0; i < mT.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,261,for (int j = 0; j < mT.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,262,"assertEquals(m.getEntry(j, i), mT.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,266,FieldMatrix<Fraction> mPm = m.add(m);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,267,for (int i = 0; i < mPm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,268,for (int j = 0; j < mPm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,269,"assertEquals(m.getEntry(i, j).multiply(new Fraction(2)), mPm.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,273,FieldMatrix<Fraction> mPmMm = mPm.subtract(m);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,274,for (int i = 0; i < mPmMm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,275,for (int j = 0; j < mPmMm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,276,"assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,280,FieldMatrix<Fraction> mTm = mT.multiply(m);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,281,for (int i = 0; i < mTm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,282,for (int j = 0; j < mTm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,283,Fraction sum = Fraction.ZERO;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,284,for (int k = 0; k < mT.getColumnDimension(); ++k) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,285,"sum = sum.add(new Fraction(k * 11 + i, 11).multiply(new Fraction(k * 11 + j, 11)));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,287,"assertEquals(sum, mTm.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,291,FieldMatrix<Fraction> mmT = m.multiply(mT);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,292,for (int i = 0; i < mmT.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,293,for (int j = 0; j < mmT.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,294,Fraction sum = Fraction.ZERO;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,295,for (int k = 0; k < m.getColumnDimension(); ++k) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,296,"sum = sum.add(new Fraction(i * 11 + k, 11).multiply(new Fraction(j * 11 + k, 11)));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,298,"assertEquals(sum, mmT.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,302,"FieldMatrix<Fraction> sub1 = m.getSubMatrix(2, 9, 5, 20);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,303,for (int i = 0; i < sub1.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,304,for (int j = 0; j < sub1.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,305,"assertEquals(new Fraction((i + 2) * 11 + (j + 5), 11), sub1.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,309,"FieldMatrix<Fraction> sub2 = m.getSubMatrix(10, 12, 3, 40);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,310,for (int i = 0; i < sub2.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,311,for (int j = 0; j < sub2.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,312,"assertEquals(new Fraction((i + 10) * 11 + (j + 3), 11), sub2.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,316,"FieldMatrix<Fraction> sub3 = m.getSubMatrix(30, 34, 0, 5);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,317,for (int i = 0; i < sub3.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,318,for (int j = 0; j < sub3.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,319,"assertEquals(new Fraction((i + 30) * 11 + (j + 0), 11), sub3.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,323,"FieldMatrix<Fraction> sub4 = m.getSubMatrix(30, 32, 32, 35);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,324,for (int i = 0; i < sub4.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,325,for (int j = 0; j < sub4.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,326,"assertEquals(new Fraction((i + 30) * 11 + (j + 32), 11), sub4.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,332,//Additional Test for DenseFieldMatrix<Fraction>Test.testMultiply
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,334,private Fraction[][] d3 = new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,335,"{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,336,"{new Fraction(5),new Fraction(6),new Fraction(7),new Fraction(8)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,338,private Fraction[][] d4 = new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,339,"{new Fraction(1)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,340,"{new Fraction(2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,341,"{new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,342,{new Fraction(4)}
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,344,"private Fraction[][] d5 = new Fraction[][] {{new Fraction(30)},{new Fraction(70)}};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,346,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,347,FieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,348,FieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,349,FieldMatrix<Fraction> m5 = new DenseFieldMatrix<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,350,"TestUtils.assertEquals(m3.multiply(m4), m5);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,353,/** test trace */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,354,public void testTrace() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,355,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,356,"assertEquals(new Fraction(3),m.getTrace());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,357,m = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,358,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,359,m.getTrace();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,360,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,361,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,362,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,366,/** test scalarAdd */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,367,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,368,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,369,"TestUtils.assertEquals(new DenseFieldMatrix<Fraction>(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,370,m.scalarAdd(new Fraction(2)));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,373,/** test operate */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,374,public void testOperate() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,375,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,376,"TestUtils.assertEquals(testVector, m.operate(testVector));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,377,"TestUtils.assertEquals(testVector, m.operate(new FieldVectorImpl<Fraction>(testVector)).getData());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,378,m = new DenseFieldMatrix<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,379,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,380,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,381,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,382,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,383,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,387,public void testOperateLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,388,int p = (3 * DenseFieldMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,389,int q = (5 * DenseFieldMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,390,int r =  2 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,391,Random random = new Random(111007463902334l);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,392,"FieldMatrix<Fraction> m1 = createRandomMatrix(random, p, q);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,393,"FieldMatrix<Fraction> m2 = createRandomMatrix(random, q, r);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,394,FieldMatrix<Fraction> m1m2 = m1.multiply(m2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,395,for (int i = 0; i < r; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,396,"TestUtils.assertEquals(m1m2.getColumn(i), m1.operate(m2.getColumn(i)));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,400,public void testOperatePremultiplyLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,401,int p = (3 * DenseFieldMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,402,int q = (5 * DenseFieldMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,403,int r =  2 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,404,Random random = new Random(111007463902334l);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,405,"FieldMatrix<Fraction> m1 = createRandomMatrix(random, p, q);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,406,"FieldMatrix<Fraction> m2 = createRandomMatrix(random, q, r);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,407,FieldMatrix<Fraction> m1m2 = m1.multiply(m2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,408,for (int i = 0; i < p; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,409,"TestUtils.assertEquals(m1m2.getRow(i), m2.preMultiply(m1.getRow(i)));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,413,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,414,public void testMath209() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,415,FieldMatrix<Fraction> a = new DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,416,"{ new Fraction(1), new Fraction(2) },"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,417,"{ new Fraction(3), new Fraction(4) },"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,418,"{ new Fraction(5), new Fraction(6) }"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,420,"Fraction[] b = a.operate(new Fraction[] { new Fraction(1), new Fraction(1) });"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,421,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,422,"assertEquals( new Fraction(3), b[0]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,423,"assertEquals( new Fraction(7), b[1]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,424,"assertEquals(new Fraction(11), b[2]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,427,/** test transpose */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,428,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,429,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,430,FieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,431,FieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,432,"TestUtils.assertEquals(mIT, mTI);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,433,m = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,434,FieldMatrix<Fraction> mt = new DenseFieldMatrix<Fraction>(testData2T);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,435,"TestUtils.assertEquals(mt, m.transpose());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,438,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,439,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,440,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,441,"TestUtils.assertEquals(m.preMultiply(testVector), preMultTest);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,442,"TestUtils.assertEquals(m.preMultiply(new FieldVectorImpl<Fraction>(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,443,preMultTest);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,444,m = new DenseFieldMatrix<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,445,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,446,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,447,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,448,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,449,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,453,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,454,FieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,455,FieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,456,FieldMatrix<Fraction> m5 = new DenseFieldMatrix<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,457,"TestUtils.assertEquals(m4.preMultiply(m3), m5);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,459,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,460,DenseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,461,DenseFieldMatrix<Fraction> identity = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,462,"TestUtils.assertEquals(m.preMultiply(mInv), identity);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,463,"TestUtils.assertEquals(mInv.preMultiply(m), identity);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,464,"TestUtils.assertEquals(m.preMultiply(identity), m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,465,"TestUtils.assertEquals(identity.preMultiply(mInv), mInv);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,466,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,467,m.preMultiply(new DenseFieldMatrix<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,468,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,469,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,470,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,474,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,475,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,476,"TestUtils.assertEquals(m.getRow(0), testDataRow1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,477,"TestUtils.assertEquals(m.getColumn(2), testDataCol3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,478,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,479,m.getRow(10);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,480,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,481,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,482,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,484,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,485,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,486,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,487,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,488,// ignored
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,492,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,493,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,494,"assertEquals(m.getEntry(0,1),new Fraction(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,495,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,496,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,497,"fail (""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,498,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,499,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,503,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,504,public void testExamples() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,505,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,506,Fraction[][] matrixData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,507,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,508,"{new Fraction(2),new Fraction(5),new Fraction(3)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,510,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(matrixData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,511,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,512,Fraction[][] matrixData2 = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,513,"{new Fraction(1),new Fraction(2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,514,"{new Fraction(2),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,515,"{new Fraction(1), new Fraction(7)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,517,FieldMatrix<Fraction> n = new DenseFieldMatrix<Fraction>(matrixData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,518,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,519,FieldMatrix<Fraction> p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,520,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,521,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,522,// Invert p
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,523,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,524,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,525,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,527,// Solve example
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,528,Fraction[][] coefficientsData = {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,529,"{new Fraction(2), new Fraction(3), new Fraction(-2)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,530,"{new Fraction(-1), new Fraction(7), new Fraction(6)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,531,"{new Fraction(4), new Fraction(-3), new Fraction(-5)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,533,FieldMatrix<Fraction> coefficients = new DenseFieldMatrix<Fraction>(coefficientsData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,534,"Fraction[] constants = {new Fraction(1), new Fraction(-2), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,535,Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,536,assertEquals(new Fraction(2).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,537,add(new Fraction(3).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,538,"subtract(new Fraction(2).multiply(solution[2])),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,539,constants[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,540,assertEquals(new Fraction(-1).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,541,add(new Fraction(7).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,542,"add(new Fraction(6).multiply(solution[2])),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,543,constants[1]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,544,assertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,545,subtract(new Fraction(3).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,546,"subtract(new Fraction(5).multiply(solution[2])),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,547,constants[2]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,551,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,552,public void testGetSubMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,553,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,554,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,555,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,556,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,557,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,558,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,559,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,560,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,561,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,562,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,563,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,564,"checkGetSubMatrix(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,565,"checkGetSubMatrix(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,566,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,567,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,568,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,571,"private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,572,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,573,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,574,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,575,"FieldMatrix<Fraction> sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,576,"assertEquals(new DenseFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,577,if (mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,578,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,580,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,581,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,582,throw e;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,587,"private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,588,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,589,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,590,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,591,"FieldMatrix<Fraction> sub = m.getSubMatrix(selectedRows, selectedColumns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,592,"assertEquals(new DenseFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,593,if (mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,594,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,596,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,597,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,598,throw e;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,603,public void testGetSetMatrixLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,604,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,605,FieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,606,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,607,FieldMatrix<Fraction> sub =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,608,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n - 4, n - 4).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,610,"m.setSubMatrix(sub.getData(), 2, 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,611,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,612,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,613,if ((i < 2) || (i > n - 3) || (j < 2) || (j > n - 3)) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,614,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,615,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,616,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,620,"assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,624,public void testCopySubMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,625,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,626,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,627,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,628,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,629,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,630,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,631,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,632,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,633,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,634,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,636,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,637,"checkCopy(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,638,"checkCopy(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,639,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,640,"checkCopy(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,641,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,644,"private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,645,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,646,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,647,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,648,Fraction[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,649,new Fraction[1][1] :
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,650,new Fraction[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,651,"m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,652,"assertEquals(new DenseFieldMatrix<Fraction>(reference), new DenseFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,653,if (mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,654,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,656,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,657,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,658,throw e;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,663,"private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,664,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,665,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,666,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,667,Fraction[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,668,new Fraction[1][1] :
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,669,new Fraction[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,670,"m.copySubMatrix(selectedRows, selectedColumns, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,671,"assertEquals(new DenseFieldMatrix<Fraction>(reference), new DenseFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,672,if (mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,673,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,675,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,676,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,677,throw e;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,682,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,683,FieldMatrix<Fraction> m     = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,684,FieldMatrix<Fraction> mRow0 = new DenseFieldMatrix<Fraction>(subRow0);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,685,FieldMatrix<Fraction> mRow3 = new DenseFieldMatrix<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,686,"assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,687,"assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,688,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,689,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,690,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,691,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,692,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,694,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,695,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,696,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,697,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,698,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,702,public void testSetRowMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,703,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,704,FieldMatrix<Fraction> mRow3 = new DenseFieldMatrix<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,705,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,706,"m.setRowMatrix(0, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,707,"assertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,708,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,709,"m.setRowMatrix(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,710,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,711,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,712,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,714,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,715,"m.setRowMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,716,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,717,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,718,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,722,public void testGetSetRowMatrixLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,723,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,724,FieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,725,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,726,FieldMatrix<Fraction> sub =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,727,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), 1, n).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,729,"m.setRowMatrix(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,730,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,731,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,732,if (i != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,733,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,734,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,735,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,739,"assertEquals(sub, m.getRowMatrix(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,743,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,744,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,745,FieldMatrix<Fraction> mColumn1 = new DenseFieldMatrix<Fraction>(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,746,FieldMatrix<Fraction> mColumn3 = new DenseFieldMatrix<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,747,"assertEquals(mColumn1, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,748,"assertEquals(mColumn3, m.getColumnMatrix(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,749,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,750,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,751,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,752,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,753,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,755,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,756,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,757,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,758,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,759,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,763,public void testSetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,764,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,765,FieldMatrix<Fraction> mColumn3 = new DenseFieldMatrix<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,766,"assertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,767,"m.setColumnMatrix(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,768,"assertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,769,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,770,"m.setColumnMatrix(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,771,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,772,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,773,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,775,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,776,"m.setColumnMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,777,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,778,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,779,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,783,public void testGetSetColumnMatrixLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,784,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,785,FieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,786,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,787,FieldMatrix<Fraction> sub =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,788,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, 1).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,790,"m.setColumnMatrix(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,791,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,792,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,793,if (j != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,794,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,795,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,796,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,800,"assertEquals(sub, m.getColumnMatrix(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,804,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,805,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,806,FieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,807,FieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,808,"assertEquals(mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,809,"assertEquals(mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,810,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,811,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,812,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,813,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,814,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,816,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,817,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,818,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,819,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,820,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,824,public void testSetRowVector() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,825,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,826,FieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,827,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,828,"m.setRowVector(0, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,829,"assertEquals(mRow3, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,830,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,831,"m.setRowVector(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,832,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,833,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,834,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,836,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,837,"m.setRowVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,838,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,839,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,840,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,844,public void testGetSetRowVectorLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,845,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,846,"FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,847,"FieldVector<Fraction> sub = new FieldVectorImpl<Fraction>(n, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,849,"m.setRowVector(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,850,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,851,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,852,if (i != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,853,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,854,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,855,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,859,"assertEquals(sub, m.getRowVector(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,863,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,864,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,865,FieldVector<Fraction> mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,866,FieldVector<Fraction> mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,867,"assertEquals(mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,868,"assertEquals(mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,869,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,870,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,871,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,872,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,873,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,875,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,876,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,877,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,878,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,879,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,883,public void testSetColumnVector() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,884,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,885,FieldVector<Fraction> mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,886,"assertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,887,"m.setColumnVector(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,888,"assertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,889,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,890,"m.setColumnVector(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,891,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,892,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,893,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,895,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,896,"m.setColumnVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,897,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,898,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,899,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,903,public void testGetSetColumnVectorLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,904,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,905,"FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,906,"FieldVector<Fraction> sub = new FieldVectorImpl<Fraction>(n, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,908,"m.setColumnVector(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,909,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,910,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,911,if (j != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,912,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,913,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,914,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,918,"assertEquals(sub, m.getColumnVector(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,922,private FieldVector<Fraction> columnToVector(Fraction[][] column) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,923,Fraction[] data = new Fraction[column.length];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,924,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,925,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,927,"return new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,930,public void testGetRow() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,931,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,932,"checkArrays(subRow0[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,933,"checkArrays(subRow3[0], m.getRow(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,934,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,935,m.getRow(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,936,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,937,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,938,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,940,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,941,m.getRow(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,942,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,943,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,944,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,948,public void testSetRow() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,949,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,950,assertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,951,"m.setRow(0, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,952,"checkArrays(subRow3[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,953,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,954,"m.setRow(-1, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,955,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,956,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,957,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,959,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,960,"m.setRow(0, new Fraction[5]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,961,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,962,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,963,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,967,public void testGetSetRowLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,968,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,969,"FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,970,Fraction[] sub = new Fraction[n];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,971,"Arrays.fill(sub, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,973,"m.setRow(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,974,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,975,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,976,if (i != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,977,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,978,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,979,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,983,"checkArrays(sub, m.getRow(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,987,public void testGetColumn() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,988,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,989,Fraction[] mColumn1 = columnToArray(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,990,Fraction[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,991,"checkArrays(mColumn1, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,992,"checkArrays(mColumn3, m.getColumn(3));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,993,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,994,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,995,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,996,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,997,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,999,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1000,m.getColumn(4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1001,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1002,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1003,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1007,public void testSetColumn() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1008,FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1009,Fraction[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1010,assertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1011,"m.setColumn(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1012,"checkArrays(mColumn3, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1013,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1014,"m.setColumn(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1015,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1016,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1017,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1019,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1020,"m.setColumn(0, new Fraction[5]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1021,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1022,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1023,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1027,public void testGetSetColumnLarge() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1028,int n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1029,"FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1030,Fraction[] sub = new Fraction[n];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1031,"Arrays.fill(sub, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1033,"m.setColumn(2, sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1034,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1035,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1036,if (j != 2) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1037,"assertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1038,} else {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1039,"assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1043,"checkArrays(sub, m.getColumn(2));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1047,private Fraction[] columnToArray(Fraction[][] column) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1048,Fraction[] data = new Fraction[column.length];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1049,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1050,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1052,return data;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1055,"private void checkArrays(Fraction[] expected, Fraction[] actual) {"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1056,"assertEquals(expected.length, actual.length);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1057,for (int i = 0; i < expected.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1058,"assertEquals(expected[i], actual[i]);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1062,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1063,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1064,DenseFieldMatrix<Fraction> m1 = (DenseFieldMatrix<Fraction>) m.copy();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1065,DenseFieldMatrix<Fraction> mt = (DenseFieldMatrix<Fraction>) m.transpose();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1066,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1067,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1068,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1069,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1070,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1071,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1072,assertFalse(m.equals(new DenseFieldMatrix<Fraction>(bigSingular)));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1075,public void testToString() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1076,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1077,"assertEquals(""DenseFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1080,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1081,DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1082,"m.setSubMatrix(detData2,1,1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1083,FieldMatrix<Fraction> expected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1084,"(new Fraction[][] {{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1085,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1087,"m.setSubMatrix(detData2,0,0);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1088,expected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1089,"(new Fraction[][] {{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1090,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1092,"m.setSubMatrix(testDataPlus2,0,0);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1093,expected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1094,"(new Fraction[][] {{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1095,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1097,// javadoc example
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1098,DenseFieldMatrix<Fraction> matrix =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1099,new DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1100,"{new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1101,"{new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1102,"{new Fraction(9), new Fraction(0), new Fraction(1) , new Fraction(2)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1104,matrix.setSubMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1105,"{new Fraction(3), new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1106,"{new Fraction(5), new Fraction(6)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1107,"}, 1, 1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1108,expected =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1109,new DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1110,"{new Fraction(1), new Fraction(2), new Fraction(3),new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1111,"{new Fraction(5), new Fraction(3), new Fraction(4), new Fraction(8)},"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1112,"{new Fraction(9), new Fraction(5) ,new Fraction(6), new Fraction(2)}"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1114,"assertEquals(expected, matrix);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1116,// dimension overflow
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1117,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1118,"m.setSubMatrix(testData,1,1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1119,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1120,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1121,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1123,// dimension underflow
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1124,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1125,"m.setSubMatrix(testData,-1,1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1126,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1127,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1128,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1130,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1131,"m.setSubMatrix(testData,1,-1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1132,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1133,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1134,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1137,// null
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1138,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1139,"m.setSubMatrix(null,1,1);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1140,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1141,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1142,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1145,// ragged
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1146,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1147,"m.setSubMatrix(new Fraction[][] {{new Fraction(1)}, {new Fraction(2), new Fraction(3)}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1148,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1149,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1150,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1153,// empty
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1154,try {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1155,"m.setSubMatrix(new Fraction[][] {{}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1156,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1157,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1158,// expected
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1163,public void testWalk() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1164,int rows    = 150;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1165,int columns = 75;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1167,"FieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1168,m.walkInRowOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1169,GetVisitor getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1170,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1171,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1173,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1174,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1175,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1176,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1177,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1178,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1179,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1180,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1182,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1183,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1184,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1187,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1188,m.walkInColumnOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1189,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1190,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1191,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1193,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1194,"m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1195,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1196,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1197,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1198,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1199,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1200,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1202,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1203,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1204,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1207,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1208,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1209,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1210,m.walkInRowOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1211,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1213,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1214,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1215,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1216,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1217,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1218,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1219,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1220,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1222,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1223,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1224,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1227,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1228,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1229,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1230,m.walkInColumnOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1231,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1233,"m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1234,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1235,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1236,"m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1237,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1238,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1239,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1240,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1242,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1243,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1244,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1249,private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1250,private static final long serialVersionUID = 6586716383170553060L;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1251,public SetVisitor() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1252,super(Fraction.ZERO);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1254,@Override
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1255,"public Fraction visit(int i, int j, Fraction value) {"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1256,"return new Fraction(i * 11 + j, 11);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1260,private static class GetVisitor extends DefaultFieldMatrixPreservingVisitor<Fraction> {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1261,private static final long serialVersionUID = 8363001284977267825L;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1262,private int count;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1263,public GetVisitor() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1264,super(Fraction.ZERO);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1265,count = 0;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1267,@Override
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1268,"public void visit(int i, int j, Fraction value) {"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1269,++count;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1270,"assertEquals(new Fraction(i * 11 + j, 11), value);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1272,public int getCount() {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1273,return count;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1277,"private DenseFieldMatrix<Fraction> createRandomMatrix(Random r, int rows, int columns) {"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1278,DenseFieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1279,"new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1280,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1281,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1282,int p = r.nextInt(20) - 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1283,int q = r.nextInt(20) - 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1284,if (q == 0) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1285,q = 1;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1287,"m.setEntry(i, j, new Fraction(p, q));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1290,return m;

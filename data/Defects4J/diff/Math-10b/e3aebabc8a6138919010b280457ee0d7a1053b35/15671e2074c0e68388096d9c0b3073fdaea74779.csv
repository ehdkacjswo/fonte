is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,40, @param wrong Wrong dimensionq.
False,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,41, @param expected Expected dimensionq.
True,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,40,* @param wrong Wrong dimensions.
True,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,41,* @param expected Expected dimensions.
False,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,85, @return an the expected dimension stored at {@code index}..
True,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,85,* @param index Dimension index.
True,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java,86,* @return the expected dimension stored at {@code index}.
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,74,"COLUMN_INDEX(""column index ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,253,"OUT_OF_RANGE(""out of range""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,270,"ROW_INDEX(""row index ({0})""), /* keep */"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,25,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,26,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,27,import org.apache.commons.math.exception.NoDataException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,28,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,29,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,30,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,31,import org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,61, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,62, @param rowDimension  the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,63, @param columnDimension  the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,64, @throws IllegalArgumentException if row or column dimension is not positive
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,65,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,66,* @param rowDimension Number of rows in the new matrix.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,67,* @param columnDimension Number of columns in the new matrix.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,68,* @throws NotStrictlyPositiveException if row or column dimension is not
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,* positive.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,67,"inal int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,68,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,f (rowDimension < 1 ) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,70,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,71,"ocalizedFormats.INSUFFICIENT_DIMENSION, rowDimension, 1);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,72,"final int rowDimension,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,73,final int columnDimension) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,74,if (rowDimension <= 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,75,"throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,76,rowDimension);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,73,f (columnDimension < 1) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,74,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,75,"ocalizedFormats.INSUFFICIENT_DIMENSION, columnDimension, 1);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,78,if (columnDimension <= 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,79,"throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,80,columnDimension);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,82, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,83, @param d data array
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,84, @return field to which array elements belong
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,85, @exception IllegalArgumentException if array is empty
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,88,* @param <T> Type of the field elements.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,89,* @param d Data array.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,* @return the field to which the array elements belong.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,91,* @throws NullArgumentException if the array is {@code null}.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,92,* @throws NoDataException if the array is empty.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,87,rotected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,88,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,94,protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,95,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,96,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,99,throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,93,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,102,throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,100, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,101, @param d data array
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,102, @return field to which array elements belong
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,103, @exception IllegalArgumentException if array is empty
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,110,* @param <T> Type of the field elements.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,111,* @param d Data array.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,112,* @return the field to which the array elements belong.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,113,* @throws NoDataException if array is empty.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,105,rotected static <T extends FieldElement<T>> Field<T> extractField(final T[] d)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,106,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,115,protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,108,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,117,throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,117, @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,126,* @param <T> Type of the field elements
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,288,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,289,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,297,"final int startColumn, final int endColumn) {"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,306,"ublic FieldMatrix<T> getSubMatrix(final int[] selectedRows, final int[] selectedColumns)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,307,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,314,"public FieldMatrix<T> getSubMatrix(final int[] selectedRows,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,315,final int[] selectedColumns) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,332,inal T[][] destination)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,333,"hrows MatrixIndexException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,340,final T[][] destination) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,340,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,341,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,342,"estination.length, destination[0].length,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,343,"owsCount, columnsCount);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,346,"throw new MatrixDimensionMismatchException(destination.length,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,347,"destination[0].length,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,348,"rowsCount,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,349,columnsCount);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,375,"ublic void copySubMatrix(int[] selectedRows, int[] selectedColumns, T[][] destination)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,376,"hrows MatrixIndexException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,381,"public void copySubMatrix(int[] selectedRows, int[] selectedColumns, T[][] destination) {"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,382,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,383,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,384,"estination.length, destination[0].length,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,385,"electedRows.length, selectedColumns.length);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,386,"throw new MatrixDimensionMismatchException(destination.length,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,387,"destination[0].length,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,388,"selectedRows.length,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,389,selectedColumns.length);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,399,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,400,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,403,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,404,if (subMatrix == null) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,405,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,404,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,409,throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,409,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,414,throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,414,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,415,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,416,"Cols, subMatrix[r].length);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,419,"throw new DimensionMismatchException(nCols, subMatrix[r].length);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,434,ublic FieldMatrix<T> getRowMatrix(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,435,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,436,public FieldMatrix<T> getRowMatrix(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,465,ublic FieldMatrix<T> getColumnMatrix(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,466,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,465,public FieldMatrix<T> getColumnMatrix(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,496,ublic FieldVector<T> getRowVector(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,497,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,495,public FieldVector<T> getRowVector(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,516,ublic FieldVector<T> getColumnVector(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,517,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,514,public FieldVector<T> getColumnVector(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,536,ublic T[] getRow(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,537,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,533,public T[] getRow(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,564,ublic T[] getColumn(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,565,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,559,public T[] getColumn(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,591,"ublic abstract T getEntry(int row, int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,592,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,584,"public abstract T getEntry(int row, int column);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,595,"ublic abstract void setEntry(int row, int column, T value)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,596,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,587,"public abstract void setEntry(int row, int column, T value);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,599,"ublic abstract void addToEntry(int row, int column, T increment)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,600,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,590,"public abstract void addToEntry(int row, int column, T increment);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,603,"ublic abstract void multiplyEntry(int row, int column, T factor)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,604,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,593,"public abstract void multiplyEntry(int row, int column, T factor);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,655,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,656,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,657,".length, nCols);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,644,"throw new DimensionMismatchException(v.length, nCols);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,681,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,682,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,683,".getDimension(), nCols);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,668,"throw new DimensionMismatchException(v.getDimension(), nCols);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,706,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,707,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,708,".length, nRows);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,691,"throw new DimensionMismatchException(v.length, nRows);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,733,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,734,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,735,".getDimension(), nRows);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,716,"throw new DimensionMismatchException(v.getDimension(), nRows);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,785,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,766,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,803,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,784,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,849,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,830,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,867,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,848,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,895,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,876,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,903,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,884,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,992, @param row row index to check
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,993, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,974,* @param row Row index to check.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,975,* @throws OutOfRangeException if {@code index} is not valid.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,997,"hrow new MatrixIndexException(LocalizedFormats.ROW_INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,998,"ow, 0, getRowDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,979,"throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,980,"row, 0, getRowDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1004, @param column column index to check
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1005, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,987,* @param column Column index to check.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,988,* @throws OutOfRangeException if {@code index} is not valid.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1007,rotected void checkColumnIndex(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1008,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,990,protected void checkColumnIndex(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1010,"hrow new MatrixIndexException(LocalizedFormats.COLUMN_INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1011,"olumn, 0, getColumnDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,992,"throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,993,"column, 0, getColumnDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1019, @param startRow Initial row index
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1020, @param endRow Final row index
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1021, @param startColumn Initial column index
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1022, @param endColumn Final column index
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1023, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1001,* @param startRow Initial row index.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1002,* @param endRow Final row index.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1003,* @param startColumn Initial column index.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1004,* @param endColumn Final column index.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1005,* @throws OutOfRangeException if the indices are not valid.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1006,* @throws NumberIsTooSmallException if {@code endRow < startRow} or
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1007,* {@code endColumn < startColumn}.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1029,f (startRow > endRow) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1030,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1031,"tartRow, endRow);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1013,if (endRow < startRow) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1014,"throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1015,"endRow, startRow, true);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1036,f (startColumn > endColumn) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1037,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1038,"tartColumn, endColumn);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1020,if (endColumn < startColumn) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1021,"throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1022,"endColumn, startColumn, true);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1048, @exception MatrixIndexException if row or column selections are not valid
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1032,* @throws NullArgumentException if the arrays are {@code null}.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1033,* @throws NoDataException if the arrays have zero length.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1034,* @throws OutOfRangeException if row or column selections are not valid.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1051,f (selectedRows.length * selectedColumns.length == 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1052,f (selectedRows.length == 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1053,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1055,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1037,if (selectedRows == null ||
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1038,selectedColumns == null) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1039,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1041,if (selectedRows.length == 0 ||
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1042,selectedColumns.length == 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1043,throw new NoDataException();
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1067, Check if a matrix is addition compatible with the instance
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1068, @param m matrix to check
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1069, @exception IllegalArgumentException if matrix is not addition compatible with instance
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1055,* Check if a matrix is addition compatible with the instance.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1057,* @param m Matrix to check.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1058,* @throws MatrixDimensionMismatchException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1059,* addition-compatible with instance.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1072,f ((getRowDimension()    != m.getRowDimension()) ||
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1062,if ((getRowDimension() != m.getRowDimension()) ||
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1074,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1075,"ocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1076,"etRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1077,".getRowDimension(), m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1064,"throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1065,"getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1082, Check if a matrix is subtraction compatible with the instance
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1083, @param m matrix to check
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1084, @exception IllegalArgumentException if matrix is not subtraction compatible with instance
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1070,* Check if a matrix is subtraction compatible with the instance.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1072,* @param m Matrix to check.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1073,* @throws MatrixDimensionMismatchException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1074,* subtraction-compatible with instance.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1087,f ((getRowDimension()    != m.getRowDimension()) ||
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1077,if ((getRowDimension() != m.getRowDimension()) ||
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1089,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1090,"ocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1091,"etRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1092,".getRowDimension(), m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1079,"throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1080,"getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1097, Check if a matrix is multiplication compatible with the instance
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1098, @param m matrix to check
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1099, @exception IllegalArgumentException if matrix is not multiplication compatible with instance
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1085,* Check if a matrix is multiplication compatible with the instance.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1087,* @param m Matrix to check.
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1088,* @throws DimensionMismatchException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1089,* multiplication-compatible with instance.
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1103,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1104,"ocalizedFormats.NOT_MULTIPLICATION_COMPATIBLE_MATRICES,"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1105,"etRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1106,".getRowDimension(), m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1093,"throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,306,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,307,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,306,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,344,"ublic T getEntry(final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,345,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,346,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,347,eturn data[row][column];
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,348, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,349,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,350,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,343,"public T getEntry(final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,344,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,345,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,347,return data[row][column];
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,356,"ublic void setEntry(final int row, final int column, final T value)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,357,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,358,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,359,ata[row][column] = value;
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,360, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,361,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,362,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,352,"public void setEntry(final int row, final int column, final T value) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,353,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,354,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,356,data[row][column] = value;
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,368,"ublic void addToEntry(final int row, final int column, final T increment)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,369,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,370,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,371,ata[row][column] = data[row][column].add(increment);
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,372, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,373,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,374,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,361,"public void addToEntry(final int row, final int column, final T increment) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,362,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,363,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,365,data[row][column] = data[row][column].add(increment);
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,380,"ublic void multiplyEntry(final int row, final int column, final T factor)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,381,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,382,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,383,ata[row][column] = data[row][column].multiply(factor);
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,384, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,385,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,386,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,370,"public void multiplyEntry(final int row, final int column, final T factor) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,371,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,372,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,374,data[row][column] = data[row][column].multiply(factor);
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,486,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,473,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,504,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,491,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,553,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,540,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,571,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,558,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,75,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,73,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,96, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,97, @param rows  the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,98, @param columns  the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,99, @throws IllegalArgumentException if row or column dimension is not
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,100,  positive
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,89,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,90,* @param rows Number of rows in the new matrix.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,91,* @param columns Number of columns in the new matrix.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,92,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,93,* if row or column dimension is not positive.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,102,"ublic BlockFieldMatrix(final Field<T> field, final int rows, final int columns)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,103,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,95,"public BlockFieldMatrix(final Field<T> field, final int rows, final int columns) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,125," @param rawData data for new matrix, in raw layout"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,115,"* @param rawData Data for the new matrix, in raw layout."
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,127, @exception IllegalArgumentException if <code>blockData</code> shape is
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,128, inconsistent with block layout
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,117,* @exception DimensionMismatchException if the {@code blockData} shape is
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,118,* inconsistent with block layout.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,131,ublic BlockFieldMatrix(final T[][] rawData)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,132,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,121,public BlockFieldMatrix(final T[][] rawData) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,145, @exception IllegalArgumentException if <code>blockData</code> shape is
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,146, inconsistent with block layout
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,134,* @exception DimensionMismatchException if the {@code blockData} shape is
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,135,* inconsistent with block layout.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,152,"inal T[][] blockData, final boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,153,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,141,"final T[][] blockData, final boolean copyArray) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,203, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,204, @param rawData data array in raw layout
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,189,* @param <T> Type of the field elements.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,190,* @param rawData Data array in raw layout.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,206, @exception IllegalArgumentException if <code>rawData</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,207,  (not all rows have the same length)
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,192,* @throws DimensionMismatchException if {@code rawData} is not rectangular
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,193,*  (not all rows have the same length).
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,211,ublic static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,212,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,197,public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,267, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,268, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,269, @param rows  the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,270, @param columns  the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,271, @return a new data array in blocks layout
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,250,* @param <T> Type of the field elements.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,251,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,252,* @param rows Number of rows in the new matrix.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,253,* @param columns Number of columns in the new matrix.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,254,* @return a new data array in blocks layout.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,302,"ublic FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,303,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,283,"public FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,325,ublic FieldMatrix<T> add(final FieldMatrix<T> m)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,326,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,304,public FieldMatrix<T> add(final FieldMatrix<T> m) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,374,ublic BlockFieldMatrix<T> add(final BlockFieldMatrix<T> m)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,375,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,351,public BlockFieldMatrix<T> add(final BlockFieldMatrix<T> m) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,447,ublic BlockFieldMatrix<T> subtract(final BlockFieldMatrix<T> m)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,448,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,421,public BlockFieldMatrix<T> subtract(final BlockFieldMatrix<T> m) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,471,ublic FieldMatrix<T> scalarAdd(final T d)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,472,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,442,public FieldMatrix<T> scalarAdd(final T d) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,491,ublic FieldMatrix<T> scalarMultiply(final T d)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,492,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,459,public FieldMatrix<T> scalarMultiply(final T d) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,511,ublic FieldMatrix<T> multiply(final FieldMatrix<T> m)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,512,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,477,public FieldMatrix<T> multiply(final FieldMatrix<T> m) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,579,ublic BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,543,public BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,678,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,679,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,639,"final int startColumn, final int endColumn) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,807,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,808,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,762,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,858,ublic FieldMatrix<T> getRowMatrix(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,859,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,811,public FieldMatrix<T> getRowMatrix(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,906, @throws MatrixIndexException if the specified row index is invalid
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,907, @throws MatrixDimensionMismatchException if the matrix dimensions do not match one
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,908, instance row
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,856,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,857,* specified row index is invalid.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,858,* @throws MatrixDimensionMismatchException if the matrix dimensions do
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,859,* not match one instance row.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,945,ublic FieldMatrix<T> getColumnMatrix(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,946,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,895,public FieldMatrix<T> getColumnMatrix(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,985, Sets the entries in column number <code>column</code>
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,932,* Sets the entries in column number {@code column}
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,988, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,989, @param matrix column matrix (must have one column and the same number of rows
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,990, as the instance)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,991, @throws MatrixIndexException if the specified column index is invalid
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,992, @throws MatrixDimensionMismatchException if the matrix dimensions do not match one
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,993, instance column
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,935,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,936,* @param matrix Column matrix (must have one column and the same number of rows
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,937,* as the instance).
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,938,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,939,* the specified column index is invalid.
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,940,* @throws MatrixDimensionMismatchException if the matrix dimensions do
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,941,* not match one instance column.
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1027,ublic FieldVector<T> getRowVector(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1028,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,975,public FieldVector<T> getRowVector(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1060,ublic FieldVector<T> getColumnVector(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1061,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1005,public FieldVector<T> getColumnVector(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1095,ublic T[] getRow(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1096,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1037,public T[] getRow(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1139,ublic T[] getColumn(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1140,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1078,public T[] getColumn(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1186,"ublic T getEntry(final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1187,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1188,ry {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1189,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1190,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1191,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1192,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1193,eturn blocks[iBlock * blockColumns + jBlock][k];
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1194, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1195,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1196,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1197,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1123,"public T getEntry(final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1124,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1125,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1127,final int iBlock = row    / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1128,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1129,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1130,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1132,return blocks[iBlock * blockColumns + jBlock][k];
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1203,"ublic void setEntry(final int row, final int column, final T value)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1204,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1205,ry {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1206,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1207,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1208,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1209,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1210,locks[iBlock * blockColumns + jBlock][k] = value;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1211, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1212,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1213,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1214,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1137,"public void setEntry(final int row, final int column, final T value) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1138,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1139,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1141,final int iBlock = row    / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1142,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1143,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1144,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1146,blocks[iBlock * blockColumns + jBlock][k] = value;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1220,"ublic void addToEntry(final int row, final int column, final T increment)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1221,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1222,ry {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1223,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1224,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1225,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1226,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1227,inal T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1228,lockIJ[k] = blockIJ[k].add(increment);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1229, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1230,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1231,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1232,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1151,"public void addToEntry(final int row, final int column, final T increment) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1152,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1153,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1155,final int iBlock = row    / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1156,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1157,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1158,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1159,final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1161,blockIJ[k] = blockIJ[k].add(increment);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1238,"ublic void multiplyEntry(final int row, final int column, final T factor)"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1239,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1240,ry {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1241,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1242,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1243,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1244,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1245,inal T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1246,lockIJ[k] = blockIJ[k].multiply(factor);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1247, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1248,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1249,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1250,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1166,"public void multiplyEntry(final int row, final int column, final T factor) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1167,checkRowIndex(row);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1168,checkColumnIndex(column);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1170,final int iBlock = row    / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1171,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1172,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1173,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1174,final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1176,blockIJ[k] = blockIJ[k].multiply(factor);
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1452,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1376,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1482,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1406,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1564,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1488,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1594,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1518,throws MatrixVisitorException {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,28,import org.apache.commons.math.exception.NoDataException;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,29,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,30,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,31,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,32,import org.apache.commons.math.exception.NullArgumentException;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,471,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,472, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,476,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,477,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,477,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,478, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,482,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,483,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,488,"ail (""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,489, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,493,"fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,494,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,569,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,574,"fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,575,"+ "" or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,571, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,577,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,578,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,579,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,581,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,582,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,583,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,585,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,586,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,587,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,589,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,585,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,603,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,605,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,606,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,607,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,609,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,610,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,611,throw e;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,587, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,613,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,614,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,615,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,617,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,631,"heckCopy(m, null, new int[] {},    new int[] { 0 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,661,"checkCopy(m, null, new int[] {}, new int[] { 0 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,645,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,675,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,677,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,678,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,679,throw e;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,647, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,681,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,682,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,683,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,685,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,664,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,702,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,704,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,705,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,706,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,708,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,709,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,710,throw e;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,666, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,712,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,681,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,682, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,727,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,728,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,687,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,688, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,733,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,734,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,701,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,702, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,747,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,748,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,742,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,743, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,788,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,789,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,748,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,749, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,794,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,795,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,762,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,763, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,808,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,809,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,803,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,804, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,849,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,850,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,809,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,810, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,855,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,856,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,823,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,824, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,869,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,870,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,862,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,863, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,908,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,909,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,868,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,869, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,914,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,915,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,882,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,883, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,928,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,929,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,927,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,928, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,973,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,974,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,933,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,934, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,979,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,980,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,946,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,947, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,992,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,993,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,986,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,987, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1032,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1033,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,992,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,993, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1038,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1039,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1006,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1007, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1052,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1053,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1110,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1111, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1156,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1157,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1117,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1118, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1163,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1164,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1123,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1124, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1169,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1170,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,25,import org.apache.commons.math.exception.NoDataException;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,26,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,27,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,28,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,29,import org.apache.commons.math.exception.NullArgumentException;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,288,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,289, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,293,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,294,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,294,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,295, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,299,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,300,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,302,"ssertEquals(""get entry"",m.getEntry(0,1),new Fraction(2));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,307,"assertEquals(""get entry"", m.getEntry(0,1), new Fraction(2));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,305,"ail (""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,306, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,310,"fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,311,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,383,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,"fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,389,"+ "" or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,385, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,391,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,392,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,393,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,395,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,396,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,397,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,399,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,400,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,401,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,403,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,399,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,417,"fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,418,"+ "" or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,426,throw e;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,401, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,428,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,429,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,430,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,432,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,438,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,469,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,471,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,472,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,473,throw e;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,440, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,475,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,476,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,477,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,479,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,457,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,496,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,498,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,499,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,500,throw e;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,502,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,503,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,504,throw e;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,459, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,506,} catch (NoDataException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,476,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,477, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,523,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,524,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,482,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,483, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,529,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,530,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,496,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,497, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,543,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,544,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,518,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,519, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,565,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,566,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,524,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,525, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,571,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,572,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,538,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,539, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,585,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,586,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,558,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,559, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,605,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,606,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,564,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,565, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,611,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,612,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,578,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,579, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,625,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,626,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,598,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,599, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,645,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,646,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,604,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,605, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,651,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,652,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,618,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,619, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,665,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,666,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,644,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,645, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,691,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,692,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,650,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,651, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,697,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,698,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,663,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,664, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,710,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,711,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,683,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,684, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,730,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,731,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,689,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,690, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,736,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,737,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,703,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,704, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,750,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,751,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,782,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,783, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,829,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,830,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,789,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,790, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,836,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,837,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,795,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,796, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,842,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,843,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,802,".setSubMatrix(null,1,1);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,803,"ail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,804, catch (NullPointerException e) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,849,"m.setSubMatrix(null, 1, 1);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,850,"fail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,851,} catch (NullArgumentException e) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,25,import org.apache.commons.math.exception.NoDataException;
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,26,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,27,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,28,import org.apache.commons.math.exception.NullArgumentException;
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,339,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,340, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,343,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,344,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,345,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,346, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,349,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,350,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,356,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,357, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,360,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,361,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,423,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,427,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,428,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,429,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,430, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,433,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,434,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,435,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,436, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,439,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,440,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,441,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,442, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,445,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,446,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,447,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,448, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,451,"fail(""Expecting NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,452,} catch (NoDataException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,453,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,454, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,457,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,458,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,467,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,468, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,471,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,472,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,473,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,474, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,477,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,478,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,487,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,488, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,491,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,492,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,493,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,494, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,497,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,498,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,507,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,508, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,511,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,512,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,513,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,514, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,517,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,518,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,527,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,528, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,531,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,532,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,533,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,534, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,537,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,538,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,599,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,600, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,603,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,604,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,606,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,607, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,610,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,611,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,612,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,613, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,616,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,617,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,620,"ail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,621, catch (NullPointerException e) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,624,"fail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,625,} catch (NullArgumentException e) {

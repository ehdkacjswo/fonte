is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,26,mport java.io.Serializable;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,31,import org.apache.commons.math3.distribution.AbstractRealDistribution;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,32,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,33,import org.apache.commons.math3.distribution.RealDistribution;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,35,import org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,37,import org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,42," Represents an <a href=""http://http://en.wikipedia.org/wiki/Empirical_distribution_function"">"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,46,"* <p>Represents an <a href=""http://http://en.wikipedia.org/wiki/Empirical_distribution_function"">"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,45, of the population distribution that the data come from.<p>
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,46," An <code>EmpiricalDistribution</code> maintains data structures, called"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,49,* of the population distribution that the data come from.</p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,51,"* <p>An <code>EmpiricalDistribution</code> maintains data structures, called"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,74,     bin and std dev = std dev of associated bin.</li></ol></p><p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,80,*     bin and std dev = std dev of associated bin.</li></ol></p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,82,* <p>EmpiricalDistribution implements the {@link RealDistribution} interface
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,83,"* as follows.  Given x within the range of values in the dataset, let B"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,84,* be the bin containing x and let K be the within-bin kernel for B.  Let P(B-)
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,85,* be the sum of the probabilities of the bins below B and let K(B) be the
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,86,"* mass of B under K (i.e., the integral of the kernel density over B).  Then"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,87,* set P(X < x) = P(B-) + K(x) / K(B) where K(x) is the kernel distribution
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,88,* evaluated at x. This results in a cdf that matches the grouped frequency
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,89,* distribution at the bin endpoints and interpolates within bins using
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,90,* within-bin kernels.</p>
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,85,ublic class EmpiricalDistribution implements Serializable {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,102,public class EmpiricalDistribution extends AbstractRealDistribution {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,195, @throws MathIllegalStateException if an IOException occurs
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,197,"ublic void load(double[] in) throws NullArgumentException, MathIllegalStateException {"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,213,public void load(double[] in) throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,203, catch (IOException e) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,204,"hrow new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,219,} catch (IOException ex) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,220,// Can't happen
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,221,throw new MathInternalError();
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,216, @param url  url of the input file
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,233,* @param url url of the input file
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,432,"astMath.max((int) FastMath.ceil((value- min) / delta) - 1, 0),"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,449,"FastMath.max((int) FastMath.ceil((value - min) / delta) - 1, 0),"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,516,inUpperBounds[0] = min + delta;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,517,or (int i = 1; i < binCount - 1; i++) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,518,inUpperBounds[i] = binUpperBounds[i-1] + delta;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,533,for (int i = 0; i < binCount - 1; i++) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,534,binUpperBounds[i] = min + delta * (i + 1);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,577,// Distribution methods ---------------------------
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,580,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,581,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,583,public double probability(double x) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,584,return 0;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,588,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,590,* <p>Returns the kernel density normalized so that its integral over each bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,591,* equals the bin mass.</p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,593,* <p>Algorithm description: <ol>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,594,* <li>Find the bin B that x belongs to.</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,595,"* <li>Compute K(B) = the mass of B with respect to the within-bin kernel (i.e., the"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,596,* integral of the kernel density over B).</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,597,"* <li>Return k(x) * P(B) / K(B), where k is the within-bin kernel density"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,598,* and P(B) is the mass of B.</li></ol></p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,599,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,601,public double density(double x) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,602,if (x < min || x > max) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,603,return 0d;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,605,final int binIndex = findBin(x);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,606,final RealDistribution kernel = getKernel(binStats.get(binIndex));
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,607,return kernel.density(x) * pB(binIndex) / kB(binIndex);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,611,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,613,* <p>Algorithm description:<ol>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,614,* <li>Find the bin B that x belongs to.</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,615,* <li>Compute P(B) = the mass of B and P(B-) = the combined mass of the bins below B.</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,616,* <li>Compute K(B) = the probability mass of B with respect to the within-bin kernel
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,617,* and K(B-) = the kernel distribution evaluated at the lower endpoint of B</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,618,* <li>Return P(B-) + P(B) * [K(x) - K(B-)] / K(B) where
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,619,* K(x) is the within-bin kernel distribution function evaluated at x.</li></ol></p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,621,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,623,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,624,if (x < min) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,625,return 0d;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,626,} else if (x >= max) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,627,return 1d;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,629,final int binIndex = findBin(x);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,630,final double pBminus = pBminus(binIndex);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,631,final double pB = pB(binIndex);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,632,final double[] binBounds = getUpperBounds();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,633,final double kB = kB(binIndex);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,634,final double lower = binIndex == 0 ? min : binBounds[binIndex - 1];
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,635,final RealDistribution kernel = k(x);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,636,final double withinBinCum =
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,637,(kernel.cumulativeProbability(x) -  kernel.cumulativeProbability(lower)) / kB;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,638,return pBminus + pB * withinBinCum;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,642,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,644,* <p>Algorithm description:<ol>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,645,* <li>Find the smallest i such that the sum of the masses of the bins
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,646,*  through i is at least p.</li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,647,* <li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,648,*   Let K be the within-bin kernel distribution for bin i.</br>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,649,*   Let K(B) be the mass of B under K. <br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,650,*   Let K(B-) be K evaluated at the lower endpoint of B (the combined
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,651,*   mass of the bins below B under K).<br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,652,*   Let P(B) be the probability of bin i.<br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,653,*   Let P(B-) be the sum of the bin masses below bin i. <br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,654,*   Let pCrit = p - P(B-)<br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,655,* <li>Return the inverse of K evaluated at <br/>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,656,*    K(B-) + pCrit * K(B) / P(B) </li>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,657,*  </ol></p>
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,659,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,661,public double inverseCumulativeProbability(final double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,662,if (p < 0.0 || p > 1.0) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,663,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,666,if (p == 0.0) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,667,return getSupportLowerBound();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,670,if (p == 1.0) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,671,return getSupportUpperBound();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,674,int i = 0;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,675,while (cumBinP(i) < p) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,676,i++;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,679,final RealDistribution kernel = getKernel(binStats.get(i));
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,680,final double kB = kB(i);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,681,final double[] binBounds = getUpperBounds();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,682,final double lower = i == 0 ? min : binBounds[i - 1];
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,683,final double kBminus = kernel.cumulativeProbability(lower);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,684,final double pB = pB(i);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,685,final double pBminus = pBminus(i);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,686,final double pCrit = p - pBminus;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,687,if (pCrit <= 0) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,688,return lower;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,690,return kernel.inverseCumulativeProbability(kBminus + pCrit * kB / pB);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,694,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,695,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,697,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,698,return sampleStats.getMean();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,702,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,703,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,705,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,706,return sampleStats.getVariance();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,710,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,711,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,713,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,714,return min;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,718,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,719,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,721,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,722,return max;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,726,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,727,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,729,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,730,return true;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,734,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,735,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,737,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,738,return true;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,742,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,743,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,745,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,746,return true;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,750,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,751,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,753,@Override
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,754,public double sample() {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,755,return getNextValue();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,759,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,760,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,762,@Override
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,763,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,764,randomData.reSeed(seed);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,768,* The probability of bin i.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,770,* @param i the index of the bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,771,* @return the probability that selection begins in bin i
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,773,private double pB(int i) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,774,return i == 0 ? upperBounds[0] :
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,775,upperBounds[i] - upperBounds[i - 1];
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,779,* The combined probability of the bins up to but not including bin i.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,781,* @param i the index of the bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,782,* @return the probability that selection begins in a bin below bin i.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,784,private double pBminus(int i) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,785,return i == 0 ? 0 : upperBounds[i - 1];
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,789,* Mass of bin i under the within-bin kernel of the bin.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,791,* @param i index of the bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,792,* @return the difference in the within-bin kernel cdf between the
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,793,* upper and lower endpoints of bin i
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,795,"@SuppressWarnings(""deprecation"")"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,796,private double kB(int i) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,797,final double[] binBounds = getUpperBounds();
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,798,final RealDistribution kernel = getKernel(binStats.get(i));
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,799,"return i == 0 ? kernel.cumulativeProbability(min, binBounds[0]) :"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,800,"kernel.cumulativeProbability(binBounds[i - 1], binBounds[i]);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,804,* The within-bin kernel of the bin that x belongs to.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,806,* @param x the value to locate within a bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,807,* @return the within-bin kernel of the bin containing x
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,809,private RealDistribution k(double x) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,810,final int binIndex = findBin(x);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,811,return getKernel(binStats.get(binIndex));
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,815,* The combined probability of the bins up to and including binIndex.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,817,* @param binIndex maximum bin index
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,818,* @return sum of the probabilities of bins through binIndex
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,820,private double cumBinP(int binIndex) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,821,return upperBounds[binIndex];
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,825,* The within-bin smoothing kernel.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,827,* @param bStats summary statistics for the bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,828,* @return within-bin kernel parameterized by bStats
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,830,private RealDistribution getKernel(SummaryStatistics bStats) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,831,"// For now, hard-code Gaussian (only kernel supported)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,832,return new NormalDistribution(
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,833,"bStats.getMean(), bStats.getStandardDeviation());"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,27,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,28,import org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,29,import org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,30,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,31,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,32,import org.apache.commons.math3.distribution.RealDistributionAbstractTest;
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,39,ublic final class EmpiricalDistributionTest {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,45,public final class EmpiricalDistributionTest extends RealDistributionAbstractTest {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,52,protected final int n = 10000;
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,48,ublic void setUp() throws IOException {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,55,public void setUp() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,56,super.setUp();
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,52,mpiricalDistribution2 = new EmpiricalDistribution(100);
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,53,ufferedReader in =
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,59,final ArrayList<Double> list = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,60,try {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,61,empiricalDistribution2 = new EmpiricalDistribution(100);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,62,BufferedReader in =
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,56,tring str = null;
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,57,rrayList<Double> list = new ArrayList<Double>();
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,58,hile ((str = in.readLine()) != null) {
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,59,ist.add(Double.valueOf(str));
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,65,String str = null;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,66,while ((str = in.readLine()) != null) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,67,list.add(Double.valueOf(str));
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,69,in.close();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,70,in = null;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,71,} catch (IOException ex) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,72,"Assert.fail(""IOException "" + ex);"
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,61,n.close();
False,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,62,n = null;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,301,//  Setup for distribution tests
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,303,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,304,public RealDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,305,"// Create a uniform distribution on [0, 10,000]"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,306,final double[] sourceData = new double[n + 1];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,307,for (int i = 0; i < n + 1; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,308,sourceData[i] = i;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,310,EmpiricalDistribution dist = new EmpiricalDistribution();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,311,dist.load(sourceData);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,312,return dist;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,315,/** Uniform bin mass = 10/10001 == mass of all but the first bin */
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,316,private final double binMass = 10d / (double) (n + 1);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,318,/** Mass of first bin = 11/10001 */
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,319,private final double firstBinMass = 11d / (double) (n + 1);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,321,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,322,public double[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,323,"final double[] testPoints = new double[] {9, 10, 15, 1000, 5004, 9999};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,324,return testPoints;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,328,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,329,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,331,"* Bins should be [0, 10], (10, 20], ..., (9990, 10000]"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,332,"* Kernels should be N(4.5, 3.02765), N(14.5, 3.02765)..."
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,333,* Each bin should have mass 10/10000 = .001
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,335,final double[] testPoints = getCumulativeTestPoints();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,336,final double[] cumValues = new double[testPoints.length];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,337,final EmpiricalDistribution empiricalDistribution = (EmpiricalDistribution) makeDistribution();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,338,final double[] binBounds = empiricalDistribution.getUpperBounds();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,339,for (int i = 0; i < testPoints.length; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,340,final int bin = findBin(testPoints[i]);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,341,final double lower = bin == 0 ? empiricalDistribution.getSupportLowerBound() :
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,342,binBounds[bin - 1];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,343,final double upper = binBounds[bin];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,344,// Compute bMinus = sum or mass of bins below the bin containing the point
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,345,"// First bin has mass 11 / 10000, the rest have mass 10 / 10000."
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,346,final double bMinus = bin == 0 ? 0 : (bin - 1) * binMass + firstBinMass;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,347,"final RealDistribution kernel = findKernel(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,348,"final double withinBinKernelMass = kernel.cumulativeProbability(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,349,"final double kernelCum = kernel.cumulativeProbability(lower, testPoints[i]);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,350,cumValues[i] = bMinus + (bin == 0 ? firstBinMass : binMass) * kernelCum/withinBinKernelMass;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,352,return cumValues;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,355,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,356,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,357,final double[] testPoints = getCumulativeTestPoints();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,358,final double[] densityValues = new double[testPoints.length];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,359,final EmpiricalDistribution empiricalDistribution = (EmpiricalDistribution) makeDistribution();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,360,final double[] binBounds = empiricalDistribution.getUpperBounds();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,361,for (int i = 0; i < testPoints.length; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,362,final int bin = findBin(testPoints[i]);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,363,final double lower = bin == 0 ? empiricalDistribution.getSupportLowerBound() :
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,364,binBounds[bin - 1];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,365,final double upper = binBounds[bin];
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,366,"final RealDistribution kernel = findKernel(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,367,"final double withinBinKernelMass = kernel.cumulativeProbability(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,368,final double density = kernel.density(testPoints[i]);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,369,densityValues[i] = density * (bin == 0 ? firstBinMass : binMass) / withinBinKernelMass;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,371,return densityValues;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,375,* Modify test integration bounds from the default. Because the distribution
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,376,"* has discontinuities at bin boundaries, integrals spanning multiple bins"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,377,* will face convergence problems.  Only test within-bin integrals and spans
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,378,* across no more than 3 bin boundaries.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,380,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,381,@Test
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,382,public void testDensityIntegrals() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,383,final RealDistribution distribution = makeDistribution();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,384,final double tol = 1.0e-9;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,385,final BaseAbstractUnivariateIntegrator integrator =
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,386,"new IterativeLegendreGaussIntegrator(5, 1.0e-12, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,387,final UnivariateFunction d = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,388,public double value(double x) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,389,return distribution.density(x);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,392,"final double[] lower = {0, 5, 1000, 5001, 9995};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,393,"final double[] upper = {5, 12, 1030, 5010, 10000};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,394,for (int i = 1; i < 5; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,395,Assert.assertEquals(
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,396,distribution.cumulativeProbability(
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,397,"lower[i], upper[i]),"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,398,integrator.integrate(
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,399,"1000000, // Triangle integrals are very slow to converge"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,400,"d, lower[i], upper[i]), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,405,* Find the bin that x belongs (relative to {@link #makeDistribution()}).
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,407,private int findBin(double x) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,408,// Number of bins below x should be trunc(x/10)
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,409,final double nMinus = Math.floor(x / 10);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,410,final int bin =  (int) Math.round(nMinus);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,411,"// If x falls on a bin boundary, it is in the lower bin"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,412,return Math.floor(x / 10) == x / 10 ? bin - 1 : bin;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,416,* Find the within-bin kernel for the bin with lower bound lower
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,417,* and upper bound upper. All bins other than the first contain 10 points
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,418,* exclusive of the lower bound and are centered at (lower + upper + 1) / 2.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,419,"* The first bin includes its lower bound, 0, so has different mean and"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,420,* standard deviation.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,422,"private RealDistribution findKernel(double lower, double upper) {"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,423,if (lower < 1) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,424,"return new NormalDistribution(5d, 3.3166247903554);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,425,} else {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,426,"return new NormalDistribution((upper + lower + 1) / 2d, 3.0276503540974917);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,186,/ org.apache.commons.math.linear.RankDeficientMatrixException
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,187," ""matrix is rank-deficient"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,188,"le rang de la matrice est inf\u00e9rieur \u00e0 sa dimension"" },"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,22,import org.apache.commons.math.linear.DecompositionSolver;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,24,import org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,182,"eturn ((RealMatrixImpl) new RealMatrixImpl(jTj, false).inverse()).getDataRef();"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,184,"DecompositionSolver solver = new DecompositionSolver(new RealMatrixImpl(jTj, false));"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,185,RealMatrix inverse = solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,return ((RealMatrixImpl) inverse).getDataRef();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,22,import org.apache.commons.math.linear.DecompositionSolver;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,23,mport org.apache.commons.math.linear.LUDecompositionImpl;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,156,ealVector dX = new LUDecompositionImpl(a).solve(b);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,156,DecompositionSolver solver = new DecompositionSolver(a);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,157,"RealVector dX = solver.solve(b, solver.luDecompose());"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,22,import org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,23, A base interface to decomposition algorithms that can solve A &times; X = B.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,24, <p>This interface is the common base of decomposition algorithms like
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,25,* Class handling decomposition algorithms that can solve A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,26,* <p>This class is the entry point for decomposition algorithms like
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,39,ublic interface DecompositionSolver extends Serializable {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,41,public class DecompositionSolver implements Serializable {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,44,private static final long serialVersionUID = 182675257956465253L;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,46,/** Matrix to decompose. */
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,47,private final RealMatrix matrix;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,42, Decompose a matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,50,* Build a decomposition solver for a matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,53,public DecompositionSolver(final RealMatrix matrix) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,54,this.matrix = matrix;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,58,* Decompose a matrix using eigendecomposition.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,59,* <p>The split tolerance is set by default to {@link MathUtils#SAFE_MIN}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,60,* @exception InvalidMatrixException if matrix does not fulfill
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,* the decomposition requirements (for example non-square matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,62,* for {@link LUDecomposition})
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,64,public EigenDecomposition eigenDecompose()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,65,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,66,"return new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,70,* Decompose a matrix using eigendecomposition.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,71,* @param splitTolerance tolerance on the off-diagonal elements relative to the
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,72,* geometric mean to split the tridiagonal matrix (a suggested value is
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,73,* {@link MathUtils#SAFE_MIN})
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74,* @exception InvalidMatrixException if matrix does not fulfill
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,75,* the decomposition requirements (for example non-square matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,76,* for {@link LUDecomposition})
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,78,public EigenDecomposition eigenDecompose(final double splitTolerance)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,79,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,80,"return new EigenDecompositionImpl(matrix, splitTolerance);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,83,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,84,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,85,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,86,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,88,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,89,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,90,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,92,"public double[] solve(final double[] b, final EigenDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,93,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,95,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,96,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,99,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,100,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,101,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,102,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,105,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,106,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,107,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,108,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,109,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,110,bp[j] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,114,return bp;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,118,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,119,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,120,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,121,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,122,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,123,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,124,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,125,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,127,"public RealVector solve(final RealVector b, final EigenDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,128,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,130,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,131,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,134,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,135,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,136,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,137,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,140,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,141,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,142,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,143,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,144,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,145,bp[j] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,149,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,153,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,154,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,155,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,156,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,157,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,158,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,159,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,160,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,162,"public RealMatrix solve(final RealMatrix b, final EigenDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,163,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,165,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,166,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,169,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,170,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,171,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,172,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,175,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,176,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,177,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,178,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,179,final RealVector v = decomposition.getEigenvector(i);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,180,double s = 0;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,181,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,182,"s += v.getEntry(j) * b.getEntry(j, k);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,184,s /= eigenvalues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,185,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,186,bp[j][k] += s * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,191,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,196,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,197,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,198,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,199,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,201,public double getDeterminant(final EigenDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,202,double determinant = 1;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,203,for (double lambda : decomposition.getEigenvalues()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,204,determinant *= lambda;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,206,return determinant;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,210,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,211,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,212,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,214,public boolean isNonSingular(final EigenDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,215,for (double lambda : decomposition.getEigenvalues()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,216,if (lambda == 0) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,217,return false;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,220,return true;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,223,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,224,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,225,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,226,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,228,public RealMatrix getInverse(final EigenDecomposition decomposition)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,229,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,231,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,232,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,235,final double[] eigenvalues = decomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,236,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,237,final double[][] invData = new double[m][m];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,239,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,240,final double[] invI = invData[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,241,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,242,double invIJ = 0;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,243,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,244,final RealVector vK = decomposition.getEigenvector(k);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,245,invIJ += vK.getEntry(i) * vK.getEntry(j) / eigenvalues[k];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,247,invI[j] = invIJ;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,250,"return new RealMatrixImpl(invData, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,255,* Decompose a matrix using singular value composition.
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,48,oid decompose(RealMatrix matrix)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,49,hrows InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,260,public SingularValueDecomposition singularDecompose()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,261,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,262,return new SingularValueDecompositionImpl(matrix);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,269,* @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,56, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,57, has not been called
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,ouble[] solve(double[] b)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,62,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,274,"public double[] solve(final double[] b, final SingularValueDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,275,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,277,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,278,if (b.length != singularValues.length) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,279,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,282,final double[] w = decomposition.getUT().operate(b);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,283,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,284,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,285,if (si == 0) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,286,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,288,w[i] /= si;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,290,return decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,298,* @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,69, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,70, has not been called
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74,ealVector solve(RealVector b)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,75,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,303,"public RealVector solve(final RealVector b, final SingularValueDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,304,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,306,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,307,if (b.getDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,308,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,311,final RealVector w = decomposition.getUT().operate(b);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,312,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,313,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,314,if (si == 0) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,315,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,317,"w.set(i, w.getEntry(i) / si);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,319,return decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,327,* @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,82, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,83, has not been called
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87,ealMatrix solve(RealMatrix b)
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,88,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,332,"public RealMatrix solve(final RealMatrix b, final SingularValueDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,333,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,335,final double[] singularValues = decomposition.getSingularValues();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,336,if (b.getRowDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,337,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,340,final RealMatrixImpl w = (RealMatrixImpl) decomposition.getUT().multiply(b);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,341,final double[][] wData = w.getDataRef();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,342,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,343,final double si  = singularValues[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,344,if (si == 0) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,345,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,347,final double inv = 1.0 / si;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,348,final double[] wi = wData[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,349,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,350,wi[j] *= inv;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,353,return decomposition.getV().multiply(w);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,358,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,359,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,360,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,362,public boolean isNonSingular(final SingularValueDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,363,return decomposition.getRank() == decomposition.getSingularValues().length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,366,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,367,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,368,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,369,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,371,public RealMatrix getInverse(final SingularValueDecomposition decomposition)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,372,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,374,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,375,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,378,"return solve(MatrixUtils.createRealIdentityMatrix(decomposition.getSingularValues().length),"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,379,decomposition);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,384,* Decompose a matrix using QR decomposition.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,386,public QRDecomposition qrDecompose() {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,387,return new QRDecompositionImpl(matrix);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,390,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,391,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,392,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,393,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,394,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,395,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,396,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,397,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,399,"public double[] solve(final double[] b, final QRDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,400,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,402,if (decomposition.getR().getRowDimension() != b.length) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,403,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,405,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,406,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,409,"// solve Q.y = b, using the fact Q is orthogonal"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,410,final double[] y = decomposition.getQT().operate(b);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,412,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,413,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,414,final double[] x = new double[r.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,415,"System.arraycopy(y, 0, x, 0, r.getRowDimension());"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,416,for (int i = r.getRowDimension() - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,417,"x[i] /= r.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,418,final double lastX = x[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,419,for (int j = i - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,420,"x[j] -= lastX * r.getEntry(j, i);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,424,return x;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,428,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,429,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,430,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,431,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,432,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,433,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,434,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,435,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,437,"public RealVector solve(final RealVector b, final QRDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,438,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,439,"return new RealVectorImpl(solve(b.getData(), decomposition), false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,442,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,443,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,444,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,445,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,446,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,447,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,448,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,449,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,451,"public RealMatrix solve(final RealMatrix b, final QRDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,452,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,454,if (decomposition.getR().getRowDimension() != b.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,455,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,457,if (!isNonSingular(decomposition)) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,458,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,461,"// solve Q.y = b, using the fact Q is orthogonal"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,462,final RealMatrix y = decomposition.getQT().multiply(b);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,464,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,465,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,466,final double[][] xData =
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,467,new double[r.getColumnDimension()][b.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,468,for (int i = 0; i < r.getRowDimension(); ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,469,final double[] xi = xData[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,470,for (int k = 0; k < xi.length; ++k) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,471,"xi[k] = y.getEntry(i, k);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,474,for (int i = r.getRowDimension() - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,475,"final double rii = r.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,476,final double[] xi = xData[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,477,for (int k = 0; k < xi.length; ++k) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,478,xi[k] /= rii;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,479,final double lastX = xi[k];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,480,for (int j = i - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,481,"xData[j][k] -= lastX * r.getEntry(j, i);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,486,"return new RealMatrixImpl(xData, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,491,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,492,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,493,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,495,public boolean isNonSingular(final QRDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,496,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,497,"final int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,498,for (int i = 0; i < p; ++i) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,499,"if (r.getEntry(i, i) == 0) {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,500,return false;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,503,return true;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,506,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,507,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,508,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,509,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,511,public RealMatrix getInverse(final QRDecomposition decomposition)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,512,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,513,final RealMatrix r = decomposition.getR();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,514,"final int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,515,"return solve(MatrixUtils.createRealIdentityMatrix(p), decomposition);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,519,* Decompose a matrix using LU decomposition.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,520,* @exception InvalidMatrixException if matrix is non-square)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,522,public LUDecomposition luDecompose()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,523,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,524,return new LUDecompositionImpl(matrix);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,528,* Decompose a matrix using LU decomposition.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,529,* @param singularityThreshold threshold (based on partial row norm)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,530,* under which a matrix is considered singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,531,* @exception InvalidMatrixException if matrix is non-square)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,533,public LUDecomposition luDecompose(final double singularityThreshold)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,534,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,535,"return new LUDecompositionImpl(matrix, singularityThreshold);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,538,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,539,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,540,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,541,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,542,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,543,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,544,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,545,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,547,"public double[] solve(final double[] b, final LUDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,548,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,550,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,551,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,552,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,553,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,555,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,556,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,559,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,561,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,562,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,563,bp[row] = b[pivot[row]];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,566,// Solve LY = b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,567,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,568,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,569,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,570,"bp[i] -= bp[col] * l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,574,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,575,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,576,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,577,"bp[col] /= u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,578,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,579,"bp[i] -= bp[col] * u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,583,return bp;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,588,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,589,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,590,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,591,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,592,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,593,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,594,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,595,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,597,"public RealVector solve(final RealVector b, final LUDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,598,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,600,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,601,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,602,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,603,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,605,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,606,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,609,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,611,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,612,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,613,bp[row] = b.getEntry(pivot[row]);
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,616,// Solve LY = b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,617,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,618,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,619,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,620,"bp[i] -= bp[col] * l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,624,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,625,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,626,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,627,"bp[col] /= u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,628,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,629,"bp[i] -= bp[col] * u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,633,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,637,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,638,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,639,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,640,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,641,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,642,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,643,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,644,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,646,"public RealMatrix solve(final RealMatrix b, final LUDecomposition decomposition)"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,647,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,649,final int[] pivot = decomposition.getPivot();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,650,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,651,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,652,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,654,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,655,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,658,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,660,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,661,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,662,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,663,final double[] bpRow = bp[row];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,664,final int pRow = pivot[row];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,665,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,666,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,670,// Solve LY = b
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,671,final RealMatrix l = decomposition.getL();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,672,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,673,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,674,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,675,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,676,"final double luICol = l.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,677,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,678,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,683,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,684,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,685,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,686,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,687,"final double luDiag = u.getEntry(col, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,688,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,689,bpCol[j] /= luDiag;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,691,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,692,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,693,"final double luICol = u.getEntry(i, col);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,694,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,695,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,700,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,706,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,707,* @param decomposition decomposition of the matrix A
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,708,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,709,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,711,public double getDeterminant(final LUDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,712,if (decomposition.isSingular()) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,713,return 0;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,714,} else {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,715,final int m = decomposition.getPivot().length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,716,final RealMatrix u = decomposition.getU();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,717,double determinant = decomposition.evenPermutation() ? 1 : -1;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,718,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,719,"determinant *= u.getEntry(i, i);"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,721,return determinant;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,727,* @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,93, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,94, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,96,oolean isNonSingular() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,730,public boolean isNonSingular(final LUDecomposition decomposition) {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,731,return !decomposition.isSingular();
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,735,* @param decomposition decomposition of the matrix A
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,100, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,101, has not been called
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,104,ealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,105,"hrows IllegalStateException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,739,public RealMatrix getInverse(final LUDecomposition decomposition)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,740,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,741,final int m = decomposition.getPivot().length;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,742,"return solve(MatrixUtils.createRealIdentityMatrix(m), decomposition);"
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,51,ublic interface EigenDecomposition extends DecompositionSolver {
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,53,public interface EigenDecomposition extends Serializable {
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,58, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,59, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,61,ealMatrix getV() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,61,RealMatrix getV();
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,68, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,69, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,72,ealMatrix getD() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,70,RealMatrix getD();
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,79, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,80, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,82,ealMatrix getVT() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,78,RealMatrix getVT();
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,87, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,88, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,91,ouble[] getEigenvalues() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,85,double[] getEigenvalues();
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,97, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,98, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,99, @exception ArrayIndexOutOfBoundsException if i is not
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,102,ouble getEigenvalue(int i) throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,93,double getEigenvalue(int i);
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,108, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,109, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,112,ealVector getEigenvector(int i) throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,115, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,116, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,117, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,118, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,119, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,121,ouble getDeterminant() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,101,RealVector getEigenvector(int i);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,25,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,59,rivate static final long serialVersionUID = -4976315828448620858L;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,58,private static final long serialVersionUID = 3125911889630623276L;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,152, Build a new instance.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,153, <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,154," before any of the {@link #getV()}, {@link #getD()}, {@link #getVT()},"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,155," {@link #getEignevalues()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,156, {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,157, called.</p>
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,158, @see #decompose(RealMatrix)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,160,ublic EigenDecompositionImpl() {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,161,etRelativeAccuracySplitTolerance(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,157,* @param splitTolerance tolerance on the off-diagonal elements relative to the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,158,* geometric mean to split the tridiagonal matrix (a suggested value is
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159,* {@link MathUtils#SAFE_MIN})
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,174,ublic EigenDecompositionImpl(final RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,163,"public EigenDecompositionImpl(final RealMatrix matrix,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,164,final double splitTolerance)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,176,etRelativeAccuracySplitTolerance(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,177,ecompose(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,166,this.splitTolerance = splitTolerance;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,167,transformToTridiagonal(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,168,decompose();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,177,* @param splitTolerance tolerance on the off-diagonal elements relative to the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,178,* geometric mean to split the tridiagonal matrix (a suggested value is
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,179,* {@link MathUtils#SAFE_MIN})
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189,"ublic EigenDecompositionImpl(final double[] main, double[] secondary)"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,191,etRelativeAccuracySplitTolerance(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,192,"ecompose(main, secondary);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,196, Set split tolerance based on absolute off-diagonal elements.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,197, @param tolerance tolerance to set
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,199,ublic void setAbsoluteSplitTolerance(final double tolerance) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,200,plitTolerance = -Math.abs(tolerance);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,204, Set split tolerance preserving relative accuracy.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,205, @param tolerance tolerance to set
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,207,ublic void setRelativeAccuracySplitTolerance(final double tolerance) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,208,plitTolerance = Math.abs(tolerance);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,212, Decompose a <strong>symmetric</strong> matrix.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,213, <p>The specified matrix is assumed to be symmetrical without any check.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,214, Only the upper triangular part of the matrix is used.</p>
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,215, @param matrix symmetric matrix to decompose
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,216, @exception InvalidMatrixException if matrix cannot be diagonalized
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,218,ublic void decompose(final RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,183,"public EigenDecompositionImpl(final double[] main, double[] secondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,184,final double splitTolerance)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,220,ransformToTridiagonal(matrix);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,221,ecompose();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,225, Decompose a tridiagonal symmetric matrix.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,226, @param main the main diagonal of the matrix
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227, @param secondary the secondary diagonal of the matrix
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,228, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229, if algorithm fails to converge
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,231,"ublic void decompose(final double[] main, final double[] secondary) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,198,this.splitTolerance = splitTolerance;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,290,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,311,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,334,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,341,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,348,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,355,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,356,ublic boolean isNonSingular()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,357,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,358,or (double lambda : eigenvalues) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,359,f (lambda == 0) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,360,eturn false;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,363,eturn true;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,366,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,367,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,370,heckNonSingular();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,372,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,373,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,374,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,377,f (eigenvectors == null) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,indEigenVectors();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,381,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,382,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,383,inal RealVectorImpl v = eigenvectors[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,384,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,385,inal double[] vData = v.getDataRef();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,386,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,387,p[j] += s * vData[j];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,391,eturn bp;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,395,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,396,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,397,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,398,ry {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,399,eturn solve((RealVectorImpl) b);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,400, catch (ClassCastException cce) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,402,heckNonSingular();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,404,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,405,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,406,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,409,f (eigenvectors == null) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,410,indEigenVectors();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,413,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,414,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,415,inal RealVectorImpl v = eigenvectors[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,416,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,417,inal double[] vData = v.getDataRef();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,418,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,419,p[j] += s * vData[j];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423,"eturn new RealVectorImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,429, Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,430, <p>The A matrix is implicit here. It <strong>must</strong> have
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,431, already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,432, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,433, @return a vector X such that A &times; X = B
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,434, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,435, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,437,ublic RealVectorImpl solve(final RealVectorImpl b)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,438,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,439,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,442,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,443,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,446,heckNonSingular();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,448,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,449,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,450,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,453,f (eigenvectors == null) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,454,indEigenVectors();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,457,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,458,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,459,or (int k = 0; k < nColB; ++k) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,460,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,461,inal double[] vData = eigenvectors[i].getDataRef();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,462,ouble s = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,463,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,464," += vData[j] * b.getEntry(j, k);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,466, /= eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,467,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,468,p[j][k] += s * vData[j];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,473,"eturn new RealMatrixImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,477,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,478,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,479,"hrows IllegalStateException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,481,heckNonSingular();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,483,inal double[][] invData = new double[m][m];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,485,f (eigenvectors == null) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,486,indEigenVectors();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,489,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,490,inal double[] invI = invData[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,491,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,492,ouble invIJ = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,493,or (int k = 0; k < m; ++k) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,494,inal double[] vK = eigenvectors[k].getDataRef();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,495,nvIJ += vK[i] * vK[j] / eigenvalues[k];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,nvI[j] = invIJ;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,500,"eturn new RealMatrixImpl(invData, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,504,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,505,ublic double getDeterminant()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,506,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,507,ouble determinant = 1;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,508,or (double lambda : eigenvalues) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,509,eterminant *= lambda;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,511,eturn determinant;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,656,f (splitTolerance < 0) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,657,/ splitting based on absolute off-diagonal value
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,658,inal double max = Math.abs(splitTolerance) * (upperSpectra - lowerSpectra);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,659,or (int i = 0; i < secondary.length; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,660,f (Math.abs(secondary[i]) <= max) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,661,ist.add(i + 1);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,662,econdary[i] = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,663,quaredSecondary[i] = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,446,// splitting preserving relative accuracy
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,447,double absDCurrent = Math.abs(main[0]);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,448,for (int i = 0; i < secondary.length; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,449,final double absDPrevious = absDCurrent;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,450,absDCurrent = Math.abs(main[i + 1]);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,451,final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,452,if (Math.abs(secondary[i]) <= max) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,453,list.add(i + 1);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,454,secondary[i] = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,455,squaredSecondary[i] = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,666, else {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,667,/ splitting preserving relative accuracy
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,668,ouble absDCurrent = Math.abs(0);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,669,or (int i = 0; i < secondary.length; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,670,inal double absDPrevious = absDCurrent;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,671,bsDCurrent = Math.abs(i + 1);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,672,inal double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,673,f (Math.abs(secondary[i]) <= max) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,674,ist.add(i + 1);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,675,econdary[i] = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,676,quaredSecondary[i] = 0;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1814, Check if decomposition has been performed.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1815, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1816, has not been called
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1818,rivate void checkDecomposed()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1819,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1820,f (eigenvalues == null) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1821,"hrow MathRuntimeException.createIllegalStateException(""no matrix have been decomposed yet"", null);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1826, Check if decomposed matrix is non singular.
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1827, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1828, has not been called
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1829, @exception SingularMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1831,rivate void checkNonSingular()
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1832,"hrows IllegalStateException, SingularMatrixException {"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1833,heckDecomposed();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1834,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1835,hrow new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,47,ublic interface LUDecomposition extends DecompositionSolver {
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,49,public interface LUDecomposition extends Serializable {
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,105, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,106, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,107, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,108, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,109, @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,107,* Get permutation parity.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,108,* @return true if there was an even number of permutations
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,110,boolean evenPermutation();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,113,* Get the singularity indicator.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,114,* @return singularity indicator
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,111,ouble getDeterminant() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,116,public boolean isSingular();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,46,rivate int parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,45,private boolean even;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,64, Build a new instance.
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,65, <p>Note that either {@link #decompose(RealMatrix)} or
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,66," {@link #decompose(RealMatrix, double)} <strong>must</strong> be called"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,67," before any of the {@link #getP()}, {@link #getPivot()}, {@link #getL()},"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,68," {@link #getU()}, {@link #getDeterminant()}, {@link #isNonSingular()},"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,69," {@link #solve(double[])}, {@link #solve(RealMatrix)}, {@link #solve(RealVector)}"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,70, or {@link #solve(RealVectorImpl)} methods can be called.</p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,71, @see #decompose(RealMatrix)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,72," @see #decompose(RealMatrix, double)"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,74,ublic LUDecompositionImpl() {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,126,arity = 1;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,even     = true;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,179,arity = -parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,164,even = !even;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,194,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,210,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,225,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,240,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,241,eturn pivot.clone();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,222,return pivot;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,245,ublic boolean isNonSingular()
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,246,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,247,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,248,eturn !singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,226,public boolean evenPermutation() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,227,return even;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,252,ublic double getDeterminant()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,231,public boolean isSingular()
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,254,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,255,f (singular) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,256,eturn 0;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,257, else {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,258,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,259,ouble determinant = parity;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,260,or (int i = 0; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,261,eterminant *= lu[i][i];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,263,eturn determinant;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,267,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,268,ublic double[] solve(double[] b)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,269,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,271,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,272,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,273,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,274,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,276,f (singular) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,277,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,280,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,282,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,283,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,284,p[row] = b[pivot[row]];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,287,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,288,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,289,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,290,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,294,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,295,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,296,p[col] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,297,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,298,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,302,eturn bp;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,306,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,307,ublic RealVector solve(RealVector b)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,308,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,309,ry {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,310,eturn solve((RealVectorImpl) b);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311, catch (ClassCastException cce) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,313,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,314,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,315,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,316,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,318,f (singular) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,319,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,322,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,324,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,325,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,326,p[row] = b.getEntry(pivot[row]);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,329,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,330,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,331,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,332,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,336,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,337,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,338,p[col] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,339,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,340,p[i] -= bp[col] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,344,"eturn new RealVectorImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,349,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,350, <p>The A matrix is implicit here. It is </p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352, @return a vector X such that A &times; X = B
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354, has not been called
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355, @exception IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,356, @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,358,ublic RealVectorImpl solve(RealVectorImpl b)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,363,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,364,ublic RealMatrix solve(RealMatrix b)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,365,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,367,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,368,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,369,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,370,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,372,f (singular) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,373,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,376,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,378,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,379,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,380,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,381,inal double[] bpRow = bp[row];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,382,inal int pRow = pivot[row];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,383,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,384,"pRow[col] = b.getEntry(pRow, col);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,388,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,389,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,390,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,391,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,392,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,393,inal double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,394,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,395,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,400,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,401,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,402,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,403,inal double luDiag = lu[col][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,404,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,405,pCol[j] /= luDiag;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,407,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,408,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,409,inal double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,410,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,411,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,416,"eturn new RealMatrixImpl(bp, false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,420,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,421,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,422,"hrows IllegalStateException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,423,heckDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,424,eturn solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,428, Check if either {@link #decompose(RealMatrix)} or {@link
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,429," #decompose(RealMatrix, double) has been called."
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,430, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,431, has not been called
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,433,rivate void checkDecomposed()
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,434,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,435,f (lu == null) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,436,"hrow MathRuntimeException.createIllegalStateException(""no matrix have been decomposed yet"", null);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,233,return singular;
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,42,ublic interface QRDecomposition extends DecompositionSolver {
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,44,public interface QRDecomposition extends Serializable {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,41,rivate static final long serialVersionUID = -5179446891802932307L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,40,private static final long serialVersionUID = 3107050419319784520L;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,67, Build a new instance.
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,68, <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,69," before any of the {@link #getQ()}, {@link #getR()}, {@link #getH()},"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,70," {@link #isFullRank()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,71, {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,72, called.</p>
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,73, @see #decompose(RealMatrix)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,75,ublic QRDecompositionImpl() {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,85,ecompose(matrix);
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,88,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,89,ublic void decompose(RealMatrix matrix) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,171,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,212,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,263,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,285,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,286,ublic boolean isNonSingular()
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,287,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,289,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,291,or (double diag : rDiag) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,292,f (diag == 0) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,293,eturn false;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,296,eturn true;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,300,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,301,ublic double[] solve(double[] b)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,302,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,304,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,306,inal int n = qrt.length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,307,inal int m = qrt[0].length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,308,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,309,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,311,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,312,hrow new RankDeficientMatrixException();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,315,inal double[] x = new double[n];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,316,inal double[] y = b.clone();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,318,/ apply Householder transforms to solve Q.y = b
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,319,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,321,inal double[] qrtMinor = qrt[minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,322,ouble dotProduct = 0;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,323,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,324,otProduct += y[row] * qrtMinor[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,326,otProduct /= rDiag[minor] * qrtMinor[minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,328,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,329,[row] += dotProduct * qrtMinor[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,334,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,335,or (int row = n - 1; row >= 0; --row) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,336,[row] /= rDiag[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,337,inal double yRow   = y[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,338,inal double[] qrtRow = qrt[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,339,[row] = yRow;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,341,[i] -= yRow * qrtRow[i];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,345,eturn x;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,349,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,350,ublic RealVector solve(RealVector b)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,352,ry {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,eturn solve((RealVectorImpl) b);
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,354, catch (ClassCastException cce) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,355,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,356,"eturn new RealVectorImpl(solve(b.getData()), false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,360,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,361, <p>The A matrix is implicit here. It is </p>
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,362, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,363, @return a vector X that minimizes the two norm of A &times; X - B
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,364, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,365, has not been called
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,366, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,367, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,369,ublic RealVectorImpl solve(RealVectorImpl b)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,370,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,371,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,374,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,375,ublic RealMatrix solve(RealMatrix b)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,376,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,378,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,380,inal int n = qrt.length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,381,inal int m = qrt[0].length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,382,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,383,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,385,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,386,hrow new RankDeficientMatrixException();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,inal int cols = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,390,inal double[][] xData = new double[n][cols];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,391,inal double[] y = new double[b.getRowDimension()];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,393,or (int k = 0; k < cols; ++k) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,395,/ get the right hand side vector
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,396,or (int j = 0; j < y.length; ++j) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,397,"[j] = b.getEntry(j, k);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,400,/ apply Householder transforms to solve Q.y = b
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,401,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,403,inal double[] qrtMinor = qrt[minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,404,ouble dotProduct = 0;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,405,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,406,otProduct += y[row] * qrtMinor[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,408,otProduct /= rDiag[minor] * qrtMinor[minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,410,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,411,[row] += dotProduct * qrtMinor[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,416,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,417,or (int row = n - 1; row >= 0; --row) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,418,[row] /= rDiag[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,419,inal double yRow = y[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,420,inal double[] qrtRow = qrt[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,Data[row][k] = yRow;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,422,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,423,[i] -= yRow * qrtRow[i];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,429,"eturn new RealMatrixImpl(xData, false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,433,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,434,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,435,"hrows IllegalStateException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,436,heckDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,437,eturn solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,441, Check if {@link #decompose(RealMatrix)} has been called.
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,442, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,443, has not been called
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,445,rivate void checkDecomposed()
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,446,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,447,f (qrt == null) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,448,"hrow MathRuntimeException.createIllegalStateException(""no matrix have been decomposed yet"", null);"
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,15, limitations under the License.
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,18,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,21, Thrown when a matrix is singular.
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,22, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,23, @since 2.0
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,25,ublic class RankDeficientMatrixException extends InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,27,** Serializable version identifier. */
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,28,rivate static final long serialVersionUID = 7051890448195709736L;
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,31, Construct an exception with a default message.
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,33,ublic RankDeficientMatrixException() {
False,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java,34,"uper(""matrix is rank-deficient"", null);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,62,/** Cached decomposition solver.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,63,"* @deprecated as of release 2.0, since all methods using this are deprecated"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65,private DecompositionSolver ds;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,87,u = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,92,ds = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,105,u = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,110,ds = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,145,u = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,150,ds = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,544,u = null;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,549,ds = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,629,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,630,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,634,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,635,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,636,lu = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,632,eturn lu.getInverse();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638,return ds.getInverse(lu);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,639,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,644,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,645,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,646,lu = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,641,eturn lu.getDeterminant();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,648,return ds.getDeterminant(lu);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,652,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,653,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,659,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,660,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,661,lu = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,655,eturn !lu.isNonSingular();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,663,return !ds.isNonSingular(lu);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,787,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,788,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,795,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,796,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,797,lu = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,790,eturn lu.solve(b);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,799,"return ds.solve(b, lu);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,796,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,797,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,805,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,806,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,807,lu = ds.luDecompose(MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,799,eturn lu.solve(b);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,809,"return ds.solve(b, lu);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,823,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,824,u = new LUDecompositionImpl(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,833,if (ds == null) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,834,ds = new DecompositionSolver(this);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,835,lu = ds.luDecompose(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,52,ublic interface SingularValueDecomposition extends DecompositionSolver {
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,54,public interface SingularValueDecomposition extends Serializable {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,21,mport org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,21,import org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,rivate static final long serialVersionUID = -2357152028714378552L;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,private static final long serialVersionUID = -238768772547767847L;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,82, Build a new instance.
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,83, <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,84," before any of the {@link #getU()}, {@link #getS()}, {@link #getV()},"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,85," {@link #getSingularValues()}, {@link #getNorm()}, {@link #getConditionNumber()},"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,86," {@link #getRank()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,87, {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,88, called.</p>
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,89, @see #decompose(RealMatrix)
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,91,ublic SingularValueDecompositionImpl() {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,104,ecompose(matrix);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,107,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,108,ublic void decompose(final RealMatrix matrix) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,136,"igenDecomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,118,eigenDecomposition =
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,119,"new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal,"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,120,MathUtils.SAFE_MIN);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,150,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,210,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,228,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,238,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,295,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,302,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,310,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,323,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,324,ublic boolean isNonSingular()
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,325,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,326,eturn getRank() == singularValues.length;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,329,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,330,ublic double[] solve(final double[] b)
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,331,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,333,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,335,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,336,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,339,inal double[] w = getUT().operate(b);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,340,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,341,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,342,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,343,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,345,[i] /= si;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,347,eturn getV().operate(w);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,351,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,352,ublic RealVector solve(final RealVector b)
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,353,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,354,ry {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,355,eturn solve((RealVectorImpl) b);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,356, catch (ClassCastException cce) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,358,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,360,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,361,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,364,inal RealVector w = getUT().operate(b);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,365,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,366,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,367,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,368,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,370,".set(i, w.getEntry(i) / si);"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,372,eturn getV().operate(w);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,377,** Solve the linear equation A &times; X = B.
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,378, <p>The A matrix is implicit here. It is </p>
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,379, @param b right-hand side of the equation A &times; X = B
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,380, @return a vector X such that A &times; X = B
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,381, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,382, @throws InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,384,ublic RealVectorImpl solve(final RealVectorImpl b)
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,385,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,386,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,389,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,390,ublic RealMatrix solve(final RealMatrix b)
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,391,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,393,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,395,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,396,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,399,inal RealMatrixImpl w = (RealMatrixImpl) getUT().multiply(b);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,400,inal double[][] wData = w.getDataRef();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,401,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,402,inal double si  = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,403,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,404,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,406,inal double inv = 1.0 / si;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,407,inal double[] wi = wData[i];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,408,or (int j = 0; j < b.getColumnDimension(); ++j) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,409,i[j] *= inv;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,412,eturn getV().multiply(w);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,416,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,417,ublic RealMatrix getInverse()
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,418,"hrows IllegalStateException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,419,heckDecomposed();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,420,eturn solve(MatrixUtils.createRealIdentityMatrix(singularValues.length));
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,424, Check if {@link #decompose(RealMatrix)} has been called.
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,425, @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,426, has not been called
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,428,rivate void checkDecomposed()
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,429,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,430,f (singularValues == null) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,431,"hrow MathRuntimeException.createIllegalStateException(""no matrix have been decomposed yet"", null);"
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,mport org.apache.commons.math.linear.LUDecompositionImpl;
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,import org.apache.commons.math.linear.DecompositionSolver;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,81,megaInverse = new LUDecompositionImpl(Omega).getInverse();
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,81,DecompositionSolver solver = new DecompositionSolver(Omega);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,82,OmegaInverse = solver.getInverse(solver.luDecompose());
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,97,eturn new LUDecompositionImpl(XTOIX).getInverse().multiply(XT).multiply(OI).multiply(Y);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,98,DecompositionSolver solver = new DecompositionSolver(XTOIX);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,99,return solver.getInverse(solver.luDecompose()).multiply(XT).multiply(OI).multiply(Y);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,110,eturn new LUDecompositionImpl(XTOIX).getInverse();
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,112,DecompositionSolver solver = new DecompositionSolver(XTOIX);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,113,return solver.getInverse(solver.luDecompose());
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,19,import org.apache.commons.math.linear.DecompositionSolver;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,111,eturn new LUDecompositionImpl(XTX).getInverse();
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,112,DecompositionSolver solver = new DecompositionSolver(XTX);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,113,return solver.getInverse(solver.luDecompose());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,23,import org.apache.commons.math.util.MathUtils;
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,47,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,49,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,57,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,59,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,69,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,71,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,83,igenDecomposition ed = new EigenDecompositionImpl(matrix);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,84,"ssertEquals(1.0, ed.getEigenvalue(0), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,85,"ssertEquals(0.4, ed.getEigenvalue(1), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,86,"ssertEquals(0.2, ed.getEigenvalue(2), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,87,"ssertEquals(0.1, ed.getEigenvalue(3), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,90,ublic void testAbsoluteSplit() {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,91,ealMatrix matrix =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,92,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,93,"      0.784,     -0.288,       0.000,  0.000 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,94," Double.NaN,      0.616,       0.000,  0.000 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,95," Double.NaN, Double.NaN,       0.164, -0.048 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,96," Double.NaN, Double.NaN,  Double.NaN,  0.136 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,97,", false);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,98,igenDecompositionImpl ed = new EigenDecompositionImpl();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,99,d.setAbsoluteSplitTolerance(1.0e-13);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,d.decompose(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,85,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,115,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,138,.getSecondaryDiagonalRef());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,123,"t.getSecondaryDiagonalRef(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,124,MathUtils.SAFE_MIN);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,150,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,136,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,161,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,147,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,177,"igenDecomposition ed = new EigenDecompositionImpl(createTestMatrix(r, bigValues));"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,163,EigenDecomposition ed =
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,164,"new DecompositionSolver(createTestMatrix(r, bigValues)).eigenDecompose();"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,187,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,174,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,198,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,185,EigenDecomposition ed = new DecompositionSolver(matrix).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,208,ealMatrix v = new EigenDecompositionImpl(matrix).getV();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,195,RealMatrix v = new DecompositionSolver(matrix).eigenDecompose().getV();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,217,igenDecomposition ed =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,218,"ew EigenDecompositionImpl(createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 }));"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,219,ssertFalse(ed.isNonSingular());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,204,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,205,"new DecompositionSolver(createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 }));"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,206,EigenDecomposition ed = ds.eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,207,assertFalse(ds.isNonSingular(ed));
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,221,d.getInverse();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,209,ds.getInverse(ed);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,igenDecomposition ed = new EigenDecompositionImpl(m);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,236,ssertTrue(ed.isNonSingular());
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,237,ealMatrix inverse = ed.getInverse();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,223,DecompositionSolver ds = new DecompositionSolver(m);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,224,EigenDecomposition ed = ds.eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,225,assertTrue(ds.isNonSingular(ed));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,226,RealMatrix inverse = ds.getInverse(ed);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,246,igenDecomposition ed =
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,247,"ew EigenDecompositionImpl(createDiagonalMatrix(diagonal, diagonal.length, diagonal.length));"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,"RealMatrix m = createDiagonalMatrix(diagonal, diagonal.length, diagonal.length);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,236,EigenDecomposition ed = new DecompositionSolver(m).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,256,igenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,245,DecompositionSolver ds = new DecompositionSolver(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,246,EigenDecomposition  ed = ds.eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,259,d.solve(b);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,249,"ds.solve(b, ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,267,d.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,257,"ds.solve(b.getColumn(0), ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,275,d.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,265,"ds.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), ed);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,294,igenDecomposition ed = new EigenDecompositionImpl(m);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,295,"ssertEquals(184041, ed.getDeterminant(), 2.0e-8);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,284,DecompositionSolver ds = new DecompositionSolver(m);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,285,EigenDecomposition  ed = ds.eigenDecompose();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,286,"assertEquals(184041, ds.getDeterminant(ed), 2.0e-8);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,314,"ssertEquals(0, ed.solve(b).subtract(xRef).getNorm(), 2.0e-12);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,305,"assertEquals(0, ds.solve(b, ed).subtract(xRef).getNorm(), 2.0e-12);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,319,"ew RealVectorImpl(ed.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,310,"new RealVectorImpl(ds.solve(b.getColumn(i), ed)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,326,"d.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,317,"ds.solve(b.getColumnVector(i), ed).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,335,"d.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,326,"ds.solve(v, ed).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,350,igenDecomposition ed = new EigenDecompositionImpl(repeated);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,341,EigenDecomposition ed = new DecompositionSolver(repeated).eigenDecompose();
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,364,igenDecomposition ed = new EigenDecompositionImpl(distinct);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,355,EigenDecomposition ed = new DecompositionSolver(distinct).eigenDecompose();
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,91,** test no call to decompose */
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,92,ublic void testNoDecompose() {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,ry {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,94,ew LUDecompositionImpl().getPivot();
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,95,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,96, catch (IllegalStateException ise) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,97,/ expected behavior
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,98, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,110,"ssertFalse(new LUDecompositionImpl(matrix, 1.0e-5).isNonSingular());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,111,"ssertTrue(new LUDecompositionImpl(matrix, 1.0e-10).isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,98,DecompositionSolver solver = new DecompositionSolver(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,assertFalse(solver.isNonSingular(solver.luDecompose(1.0e-5)));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,100,assertTrue(solver.isNonSingular(solver.luDecompose(1.0e-10)));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,142,ssertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,131,assertTrue(lu.isSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,149,ssertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,138,assertTrue(lu.isSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,233,ssertTrue(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,222,assertFalse(lu.isSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,235,ssertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,224,assertTrue(lu.isSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,237,ssertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,226,assertTrue(lu.isSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,242,UDecomposition lu =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,243,"ew LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,231,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,232,"new DecompositionSolver(new RealMatrixImpl(testData, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,246,u.solve(b);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,235,"solver.solve(b, solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,254,u.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,243,"solver.solve(b.getColumn(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,262,u.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,251,"solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,252,solver.luDecompose());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,273,UDecomposition lu =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,274,"ew LUDecompositionImpl(new RealMatrixImpl(singular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,263,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,264,"new DecompositionSolver(new RealMatrixImpl(singular, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,277,u.solve(b);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,267,"solver.solve(b, solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,285,u.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,275,"solver.solve(b.getColumn(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,293,u.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,283,"solver.solve(b.getColumnVector(0), solver.luDecompose());"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,301,u.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,291,"solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,292,solver.luDecompose());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,312,UDecomposition lu =
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,313,"ew LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,303,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,304,"new DecompositionSolver(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,305,LUDecomposition lu = solver.luDecompose();
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,322,"ssertEquals(0, lu.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,314,"assertEquals(0, solver.solve(b, lu).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,327,"ew RealVectorImpl(lu.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,319,"new RealVectorImpl(solver.solve(b.getColumn(i), lu)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,334,"u.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,326,"solver.solve(b.getColumnVector(i), lu).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,343,"u.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,335,"solver.solve(v, lu).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,431,"ssertEquals(-1,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,432,"ew LUDecompositionImpl(new RealMatrixImpl(testData, false)).getDeterminant(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,433,.0e-15);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,434,"ssertEquals(-10,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,435,"ew LUDecompositionImpl(new RealMatrixImpl(luData, false)).getDeterminant(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,436,.0e-14);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,437,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,438,"ew LUDecompositionImpl(new RealMatrixImpl(singular, false)).getDeterminant(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,439,.0e-17);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,440,"ssertEquals(0,"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,441,"ew LUDecompositionImpl(new RealMatrixImpl(bigSingular, false)).getDeterminant(),"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,442,.0e-17);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,423,"assertEquals( -1, getDeterminant(new RealMatrixImpl(testData, false)), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,424,"assertEquals(-10, getDeterminant(new RealMatrixImpl(luData, false)), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,425,"assertEquals(  0, getDeterminant(new RealMatrixImpl(singular, false)), 1.0e-17);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,426,"assertEquals(  0, getDeterminant(new RealMatrixImpl(bigSingular, false)), 1.0e-10);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,429,private double getDeterminant(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,430,DecompositionSolver ds = new DecompositionSolver(m);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,431,return ds.getDeterminant(ds.luDecompose());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,201,RDecomposition qr =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,ssertTrue(qr.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,201,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,"new DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,assertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,205,"r = new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,206,ssertFalse(qr.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,205,"ds = new DecompositionSolver(new RealMatrixImpl(testData3x3Singular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,206,assertFalse(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,208,"r = new QRDecompositionImpl(new RealMatrixImpl(testData3x4, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,209,ssertFalse(qr.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,208,"ds = new DecompositionSolver(new RealMatrixImpl(testData3x4, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,209,assertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,211,"r = new QRDecompositionImpl(new RealMatrixImpl(testData4x3, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,212,ssertTrue(qr.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,211,"ds = new DecompositionSolver(new RealMatrixImpl(testData4x3, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,212,assertTrue(ds.isNonSingular(ds.qrDecompose()));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,218,RDecomposition qr =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,219,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,218,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,219,"new DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,222,r.solve(b);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,222,"solver.solve(b, solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,230,r.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,230,"solver.solve(b.getColumn(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,238,r.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,238,"solver.solve(b.getColumnVector(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,249,RDecomposition qr =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,250,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,249,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,250,"new DecompositionSolver(new RealMatrixImpl(testData3x3Singular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,253,r.solve(b);
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,253,"solver.solve(b, solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,261,r.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,261,"solver.solve(b.getColumn(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,269,r.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,269,"solver.solve(b.getColumnVector(0), solver.qrDecompose());"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,280,RDecomposition qr =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,281,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,280,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,281,"new DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,282,QRDecomposition qr = ds.qrDecompose();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,290,"ssertEquals(0, qr.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,291,"assertEquals(0, ds.solve(b, qr).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,295,"ew RealVectorImpl(qr.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,296,"new RealVectorImpl(ds.solve(b.getColumn(i), qr)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,302,"r.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,303,"ds.solve(b.getColumnVector(i), qr).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,311,"r.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,312,"ds.solve(v, qr).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,319,RDecomposition qr =
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,320,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,320,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,321,"new DecompositionSolver(new RealMatrixImpl(testData3x3NonSingular, false));"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,322,QRDecomposition qr = ds.qrDecompose();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,354,** test no call to decompose */
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,355,ublic void testNoDecompose() {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,356,ry {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,357,ew QRDecompositionImpl().isNonSingular();
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,358,"ail(""an exception should have been caught"");"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,359, catch (IllegalStateException ise) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,360,/ expected behavior
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,361, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,362,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,ealMatrix mIT = new LUDecompositionImpl(m).getInverse().transpose();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getInverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,DecompositionSolver ds1 = new DecompositionSolver(m);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265,RealMatrix mIT = ds1.getInverse(ds1.luDecompose()).transpose();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,266,DecompositionSolver ds2 = new DecompositionSolver(m.transpose());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,267,RealMatrix mTI = ds2.getInverse(ds2.luDecompose());
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,355,ealMatrix pInverse = new LUDecompositionImpl(p).getInverse();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,357,DecompositionSolver ds1 = new DecompositionSolver(p);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,358,RealMatrix pInverse = ds1.getInverse(ds1.luDecompose());
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,ouble[] solution = new LUDecompositionImpl(coefficients).solve(constants);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,366,DecompositionSolver ds2 = new DecompositionSolver(coefficients);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,367,"double[] solution = ds2.solve(constants, ds2.luDecompose());"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,134,ingularValueDecomposition svd =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,134,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,"new DecompositionSolver(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,SingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,138,vd.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,139,"ds.solve(b, svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,146,vd.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,147,"ds.solve(b.getColumn(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,154,vd.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,155,"ds.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,165,ingularValueDecomposition svd =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,166,ew SingularValueDecompositionImpl(new RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167," 1.0, 0.0 },"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,168," 0.0, 0.0 }"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,169,", false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,166,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167,new DecompositionSolver(new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,168,"{ 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,169,"{ 0.0, 0.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,170,"}, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,171,SingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,172,vd.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,174,"ds.solve(b, svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,180,vd.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,182,"ds.solve(b.getColumn(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,188,vd.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,190,"ds.solve(b.getColumnVector(0), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,196,vd.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,198,"ds.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)), svd);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,207,ingularValueDecomposition svd =
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,208,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,209,DecompositionSolver ds =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,210,"new DecompositionSolver(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,211,SingularValueDecomposition svd = ds.singularDecompose();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,218,"ssertEquals(0, svd.solve(b).subtract(xRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,221,"assertEquals(0, ds.solve(b, svd).subtract(xRef).getNorm(), normTolerance);"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,223,"ew RealVectorImpl(svd.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,226,"new RealVectorImpl(ds.solve(b.getColumn(i), svd)).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,230,"vd.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,233,"ds.solve(b.getColumnVector(i), svd).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,239,"vd.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,242,"ds.solve(v, svd).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,298,ingularValueDecomposition svd = new SingularValueDecompositionImpl();
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,299,"vd.decompose(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,301,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,302,"new DecompositionSolver(new RealMatrixImpl(testNonSquare, false)).singularDecompose();"

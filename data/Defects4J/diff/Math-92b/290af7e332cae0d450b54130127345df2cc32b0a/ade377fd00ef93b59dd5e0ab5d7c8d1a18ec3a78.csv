is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,61, @version $Revision: 1.2 $ $Date: 2003/05/29 19:45:35 $
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,61,* @version $Revision: 1.3 $ $Date: 2003/06/04 02:45:49 $
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,66, <code>len</code>.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,66,* <code>len</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,67,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,71,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,72,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,73,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,74,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,75,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,71, @throws IllegalArgumentException if <code>len</code> is not positive.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,78,* @return random string of hex characters of length <code>len</code>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,73,ublic String nextHexString(int len);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,80,String nextHexString(int len);
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,77, <code>lower</code> and <code>upper</code> (endpoints included).<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,84,* <code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,85,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,89,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,90,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,91,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,92,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,93,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,83, @exception IllegalArgumentException thrown if
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,84, <code>lower</code> is not strictly less than <code>upper</code>.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,88,"ublic int nextInt(int lower, int upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,100,"int nextInt(int lower, int upper);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,91, Generates a uniformly distributed random long integer between <
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,92, code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,103,* Generates a uniformly distributed random long integer between
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,104,* <code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,105,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,94, cryptographically secure.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,107,* cryptographically secure.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,110,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,111,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,112,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,113,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,114,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,99, @exception IllegalArgumentException Thrown if lower > upper
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,103,"ublic long nextLong(long lower, long upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,121,"long nextLong(long lower, long upper);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,106, Generates a random string of hex characters from a secure random sequence.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,124,* Generates a random string of hex characters from a secure random
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,125,* sequence.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,126,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,129,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,130,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,131,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,132,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,133,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,110, @exception IllegalArgumentException thrown if len <= 0
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,113,ublic String nextSecureHexString(int len);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,137,String nextSecureHexString(int len);
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,118, from a secure random sequence.<br>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,119, The generated sequence will be cryptographically secure.<br>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,120," If cryptographic security is not required, <code>nextInt</code>"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,121, should be used.<br>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,122, <strong>Definition</strong>(secure random sequence):
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,123, http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,142,* from a secure random sequence.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,143,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,144,* Sequences of integers generated using this method will be
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,145,"* cryptographically secure. If cryptographic security is not required,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,146,* <code>nextInt</code> should be used instead of this method.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,147,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,148,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,149,"* <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,150,"* Cryptographically_secure_pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,151,* Secure Random Sequence</a>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,152,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,153,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,154,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,155,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,156,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,126, @exception IllegalArgumentException thrown if
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,127, <code>lower</code> is not strictly less than <code>upper</code>.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,131,"ublic int nextSecureInt(int lower, int upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,163,"int nextSecureInt(int lower, int upper);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,135, and <code>upper</code> (endpoints included).<br>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,136, The generated long sequence will be cryptographically secure.<br>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,137," If cryptographic security is not required,"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,138, use <code>nextLong</code><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,167,* and <code>upper</code> (endpoints included).<p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,168,* Sequences of long values generated using this method will be
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,169,"* cryptographically secure. If cryptographic security is not required,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,170,* <code>nextLong</code> should be used instead of this method.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,171,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,140, <a href=http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,173,"* <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,174,"* Cryptographically_secure_pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,176,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,177,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,178,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,179,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,180,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,144, @exception IllegalArgumentException thrown if
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,145, <code>lower</code> is not strictly less than <code>upper</code>.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,149,"ublic long nextSecureLong(long lower, long upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,187,"long nextSecureLong(long lower, long upper);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,153, the given mean.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,191,* the given mean.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,192,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,155, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,156, Poisson Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,194,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,195,"* eda/section3/eda366j.htm"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,196,* Poisson Distribution</a>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,197,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,158, <li>The specified mean <i>must</i> be positive </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,199,* <li>The specified mean <i>must</i> be positive (otherwise an
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,200,*     IllegalArgumentException is thrown.)</li>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,161, @returns long
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,162, @throws IllegalArgumentException if mean <= 0
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,203,* @return poisson deviate with the specified mean
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,164,ublic long nextPoisson(double mean);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,205,long nextPoisson(double mean);
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,168, Normal (a.k.a. Gaussian) distribution with the given mean
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,169, and standard deviation.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,209,* Normal (or Gaussian) distribution with the given mean
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,210,* and standard deviation.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,211,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,171, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,172, Normal Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,213,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,214,"* eda/section3/eda3661.htm"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,215,* Normal Distribution</a>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,216,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,174, <li>The specified standard deviation <i>must</i> be positive </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,218,* <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,219,*     is thrown.)</li>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,180, @throws IllegalArgumentExcption if sigma <= 0
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,182,"ublic double nextGaussian(double mu,double sigma);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,226,"double nextGaussian(double mu, double sigma);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,186, with expected value = <code>mean</code><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,230,* with expected value = <code>mean</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,231,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,188, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,189, Exponential Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,233,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,234,"* eda/section3/eda3667.htm"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,235,* Exponential Distribution</a>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,236,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,191, <li>The specified mean <i>must</i> be non-negative</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,238,* <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,239,*     is thrown.)</li>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,193, @param mu Mean of the distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,241,* @param mean Mean of the distribution
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,196,ublic double nextExponential(double mean);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,244,double nextExponential(double mean);
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,200," (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,248,"* (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)."
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,249,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,202, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,203, Uniform Distribution</a> <code>lower</code> and <code>upper - lower</code>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,204, are the
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,205, <a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,206," location and scale parameters</a>, respectively<br>"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,251,"* <a href=""http://www.itl.nist.gov/div898/handbook/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,252,"* eda/section3/eda3662.htm"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,253,* Uniform Distribution</a> <code>lower</code> and
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,254,* <code>upper - lower</code> are the
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,255,"* <a href = ""http://www.itl.nist.gov/div898/handbook/eda/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,256,"* section3/eda364.htm"">"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,257,"* location and scale parameters</a>, respectively."
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,258,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,259,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,260,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,261,*     is thrown.)</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,262,* </ul>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,211, @exception IllegalArgumentException thrown if
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,212, <code>lower</code> is not strictly less than <code>upper</code>.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,214,"ublic double nextUniform(double lower, double upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,269,"double nextUniform(double lower, double upper);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,218," are selected randomly, without repetition, from the integers"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,219," {0, ... , n-1} -- i.e., generated arrays represent permutations"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,220, of <code>n</code> taken <code>k</code> at a time. <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,273,"* are selected randomly, without repetition, from the integers <code>"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,274,* 0 through n-1</code> (inclusive).
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,275,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,276,* Generated arrays represent permutations
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,277,* of <code>n</code> taken <code>k</code> at a time.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,278,* <p>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,223, <li> k must be less than or equal to n </li>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,224, <li> n must be positive (i.e. greater than 0) </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,280,* <li> <code>k <= n</code></li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,281,* <li> <code>n > 0</code> </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,283,"* If the preconditions are not met, an IllegalArgumentException is"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,284,* thrown.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,231,"ublic int[] nextPermutation(int n, int k);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,290,"int[] nextPermutation(int n, int k);"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,235, from the Collection <code>c</code>. Sampling from <code>c</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,294,* from the Collection <code>c</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,295,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,296,* Sampling from <code>c</code>
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,239, <a href=http://rkb.home.cern.ch/rkb/AN16pp/node250.html#SECTION0002500000000000000000>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,300,"* <a href=""http://rkb.home.cern.ch/rkb/AN16pp/"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,301,"* node250.html#SECTION0002500000000000000000"">"
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,241, <code>k</code> from the elements of <code>c</code>.<p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,303,* <code>k</code> from the elements of <code>c</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,304,* <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,309,"* If the preconditions are not met, an IllegalArgumentException is"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,310,* thrown.
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,252,"ublic Object[] nextSample(Collection c, int k);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,316,"Object[] nextSample(Collection c, int k);"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,67, <code>java.util.Random.SecureRandom</code> instances to generate data.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,67,* <code>java.util.Random.SecureRandom</code> instances to generate data.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,68,* <p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,69, <a href=http://www.wikipedia.org/wiki/Pseudo-random_number_generator>PRNG</a>.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,70, The <code>SecurityProvider</code> and <code>Algorithm</code>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,71, used by the <code>SecureRandom</code> instance can also be reset.<p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,70,"* <a href=""http://www.wikipedia.org/wiki/Pseudo-random_number_generator"">"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,71,* PRNG</a>. The <code>SecurityProvider</code> and <code>Algorithm</code>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,72,* used by the <code>SecureRandom</code> instance can also be reset.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,73,* <p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,74, <code>java.util.Random.SecureRandom</code></p><p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,76,* <code>java.util.Random.SecureRandom</code>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,77,* <p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,76, <li>Instance variables are used to maintain <code>Random</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,79,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,80,* Instance variables are used to maintain <code>Random</code> and
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,80," <li>The ""secure"" methods are *much* slower.  These should be used only when"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,81, a <a href=http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,82, Secure Random Sequence</a> is required.</li>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,83,"<li>When a new <code>RandomDataImpl</code> is created, the underlying random"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,84,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,85,"* The ""secure"" methods are *much* slower.  These should be used only when"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,86,"* a <a href=""http://www.wikipedia.org/wiki/"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,87,"* Cryptographically_secure_pseudo-random_number_generator""> Secure Random"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,88,* Sequence</a> is required.</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,89,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,90,"* When a new <code>RandomDataImpl</code> is created, the underlying random"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,88, <li>The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,89, the corresponding methods on the underlying <code>Random</code> and <code>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,90," SecureRandom</code> instances.  Therefore, the contracts of these methods"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,91," are as defined in the JDK documentation.  In particular, <code>reSeed(long)"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,92, </code> fully resets the initial state of the non-secure random number
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,93, generator (so that reseeding with a specific value always results in the
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,94, same subsequent random sequence); whereas reSeedSecure(long) does <strong> not
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,95, </strong> reinitialize the secure random number generator (so secure sequences
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,96, started with calls to reseedSecure(long) won't be identical).</li></ul>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,97,</p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,95,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,96,* The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,97,* to the corresponding methods on the underlying <code>Random</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,98,"* <code>SecureRandom</code> instances.  Therefore, the contracts of these"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,99,"* methods are as defined in the JDK documentation.  In particular,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,100,* <code>reSeed(long)</code> fully resets the initial state of the non-secure
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,101,* random number generator (so that reseeding with a specific value always
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,102,* results in the same subsequent random sequence); whereas reSeedSecure(long)
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,103,* does <strong>not</strong> reinitialize the secure random number generator
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,104,* (so secure sequences started with calls to reseedSecure(long) won't be
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,105,* identical).</li></ul>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,100, @version $Revision: 1.2 $ $Date: 2003/05/29 19:45:35 $
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,108,* @version $Revision: 1.3 $ $Date: 2003/06/04 02:45:49 $
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,102,ublic class RandomDataImpl implements RandomData{
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,110,public class RandomDataImpl implements RandomData {
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,110,ublic RandomDataImpl(){
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,119,* Construct a RandomDataImpl.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,121,public RandomDataImpl() {
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,114, Generates a random string of hex characters
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,115," If cryptographic security is required, use"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,116, <code>nextSecureHexString()</code>.<br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,119, <li>len/2+1 binary bytes are generated using the underlying Random</li>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,120, <li>Each binary byte is translated into 2 hex digits</li></ol>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,121, @param len length of return string
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,122, @exception IllegalArgumentException thrown if len <= 0
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,123, @return the random hex string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,127,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,128,* len/2+1 binary bytes are generated using the underlying Random</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,129,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,130,* Each binary byte is translated into 2 hex digits</li></ol>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,149,tring hex = Integer.toHexString(c.intValue()+128);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,156,String hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,152,"f (hex.length() == 1) hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,159,if (hex.length() == 1)  {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,160,"hex = ""0"" + hex;"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,165,eturn lower + (int)(Math.random() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,173,return lower + (int) (Math.random() * (upper - lower + 1));
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,174,eturn lower + (long)(rand.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,182,return lower + (long) (rand.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,178, Generates a random string of hex characters from a secure random sequence.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,179," If cryptographic security is not required,"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,180, use <code>nextHexString()</code>.<br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,181, <strong>Algorithm Description:</strong> hex strings are generated in 40-byte
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,182, segments using a 3-step process. <ol>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,183, <li>20 random bytes are generated using the underlying SecureRandom</li>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,184, <li>SHA-1 hash is applied to yield a 20-byte binary digest</li>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,185, <li>Each byte of the binary digest is converted to 2 hex digits</li></ol><p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,186, TODO: find external reference or provide justification for the claim that this
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,187, yields a cryptographically secure sequence of hex strings.</p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,188, @param len length of return string
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,189, @exception IllegalArgumentException thrown if len <= 0
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,190, @return the random hex string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,186,* <strong>Algorithm Description:</strong> hex strings are generated in
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,187,* 40-byte segments using a 3-step process. <ol>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,188,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,189,* 20 random bytes are generated using the underlying
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,190,* <code>SecureRandom</code>.</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,191,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,192,* SHA-1 hash is applied to yield a 20-byte binary digest.</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,193,* <li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,194,* Each byte of the binary digest is converted to 2 hex digits</li></ol>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,195,* <p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,196,* TODO: find external reference or provide justification for the claim
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,197,* that this yields a cryptographically secure sequence of hex strings.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,203,eturn null; // gulp FIXME? -- this *should* never fail. OK to swallow????
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,210,return null; // gulp FIXME? -- this *should* never fail.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,228,tring hex = Integer.toHexString(c.intValue()+128);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,235,String hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,231,"f (hex.length() == 1) hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,238,if (hex.length() == 1) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,239,"hex = ""0"" + hex;"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,244,eturn lower + (int)(sec.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,253,return lower + (int) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,254,eturn lower + (long)(sec.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,262,return lower + (long) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,258, Generates a random value from the Poisson distribution with
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,259, the given mean.<br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,260, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,261, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,262, Poisson Distribution</a><br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,264," Uses simulation of a Poisson process using Uniform deviates, as described"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,265, <a href = http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,267,"* Uses simulation of a Poisson process using Uniform deviates, as"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,268,* described
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,269,"* <a href =""http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm"">"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,267, @param mean Mean of the distribution
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,268, @returns long
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,269, @throws IllegalArgumentException if mean <= 0
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,290,"ublic double nextGaussian(double mu,double sigma) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,292,"public double nextGaussian(double mu, double sigma) {"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,295,eturn sigma*rand.nextGaussian() + mu;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,297,return sigma * rand.nextGaussian() + mu;
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,299, Generates a random value from the exponential distribution
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,300, with expected value = <code>mean</code><br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,301, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,302, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,303, Exponential Distribution</a><br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,304, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,305, <li>The specified mean <i>must</i> be non-negative</li>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,306, </ul>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,308, <a href=http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,302,"* <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,310, @param mu Mean of the distribution
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,311, @return random value from exponential distribution
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,314,f (mean < 0.0) throw new IllegalArgumentException
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,315,"""Exponential mean must be >= 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,306,if (mean < 0.0)  {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,307,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,308,"(""Exponential mean must be >= 0"");"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,321,eturn -mean*Math.log(unif);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,315,return -mean * Math.log(unif);
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,325, Generates a uniformly distributed random value from the open interval
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,326," (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,327, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,328, <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,329, Uniform Distribution</a> <code>lower</code> and <code>upper - lower</code>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,330, are the
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,331, <a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,332," location and scale parameters</a>, respectively<br>"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,335, random double if Random.nextDouble() returns 0).  This is necessary to
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,336, provide a symmetric output interval (both endpoints excluded).
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,337, @param lower lower endpoint of the interval of support
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,338, @param upper upper endpoint of the interval of support
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,339, @return uniformly distributed random value between lower
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,340, and upper (exclusive)
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,341, @exception IllegalArgumentException thrown if
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,342, <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,321,* random double if Random.nextDouble() returns 0).
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,322,* This is necessary to provide a symmetric output interval
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,323,* (both endpoints excluded).
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,350,ouble result = lower + rand.nextDouble()*(upper-lower);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,331,double result = lower + rand.nextDouble() * (upper - lower);
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,352,esult = lower + rand.nextDouble()*(upper-lower);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,333,result = lower + rand.nextDouble() * (upper - lower);
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,358, Returns the static Random used to generate random data.<br>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,359, Creates and initializes if null
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,339,* Returns the static Random used to generate random data.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,340,* <p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,341,* Creates and initializes if null.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,371, Returns the static SecureRandom used to generate secure random data.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,354,* Returns the static SecureRandom used to generate secure random data.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,355,* <p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,384, Reseeds the random number generator with the supplied seed.  Will
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,385, create and initialize if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,369,* Reseeds the random number generator with the supplied seed.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,370,* <p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,371,* Will create and initialize if null.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,397, in milliseconds.  Will create and initialize if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,384,* in milliseconds.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,385,* <p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,386,* Will create and initialize if null.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,400,f (rand == null) {
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,401,and = new Random();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,389,if (secRand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,390,secRand = new SecureRandom();
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,403,and.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,392,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,397,* <p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,420, in milliseconds
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,411,* in milliseconds.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,432, <a href=http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,433, Java Cryptography Architecture API Specification & Reference</a><p>
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,434, <strong>USAGE NOTE:</strong> This method carries <i>significant</i> overhead
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,435, and may take several seconds to execute.</p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,423,"* <a href=""http://java.sun.com/j2se/1.3/docs/guide/security/"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,424,"* CryptoSpec.html#AppA"">"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,425,* Java Cryptography Architecture API Specification & Reference.</a>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,426,* <p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,427,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,428,* overhead and may take several seconds to execute.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,438, @throws NoSuchAlgorithmException if the specified algorithm is not available
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,439, @throws NoSuchProviderException if the specified provider is not installed
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,432,* @throws NoSuchAlgorithmException if the specified algorithm
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,433,* is not available
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,434,* @throws NoSuchProviderException if the specified provider
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,435,* is not installed
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,442,"hrows NoSuchAlgorithmException,NoSuchProviderException {"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,443,"ecRand = SecureRandom.getInstance(algorithm,provider);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,438,"throws NoSuchAlgorithmException, NoSuchProviderException {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,439,"secRand = SecureRandom.getInstance(algorithm, provider);"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,463,"huffle(index,n-k);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,459,"shuffle(index, n - k);"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,466,esult[i] = index[n-i-1];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,462,result[i] = index[n - i - 1];
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,473, Uses a 2-cycle permutation shuffle to generate a random
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,474, permutation of <code>c.size()</code> and then returns the
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,475, elements whose indexes correspond to the elements of the
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,476," generated permutation.  This technique is described, and"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,477," proven to generate random samples,"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,478, <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,469,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,470,* shuffle to generate a random permutation of <code>c.size()</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,471,* then returns the elements whose indexes correspond to the elements of
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,472,* the generated permutation.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,473,"* This technique is described, and proven to generate random samples,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,474,"* <a href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,493,"nt[] index = nextPermutation(len,k);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,489,"int[] index = nextPermutation(len, k);"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,495,or (int i = 0; i < k; i ++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,491,for (int i = 0; i < k; i++) {
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,504, Uses a 2-cycle permutation shuffle to randomly re-order the last
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,505, end elements of list
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,500,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,501,* shuffle to randomly re-order the last <code>end</code> elements of list.
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,512,or (int i = list.length-1 ; i >= end; i--) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,508,for (int i = list.length - 1 ; i >= end; i--) {
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,516,"arget = nextInt(0,i);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,512,"target = nextInt(0, i);"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,525, Returns an array representing n
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,521,* Returns an array representing n.
False,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,72, @version $Revision: 1.4 $ $Date: 2003/05/29 20:35:45 $
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,72,* @version $Revision: 1.5 $ $Date: 2003/06/04 02:45:49 $
False,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,465,"* TODO: probably should remove this test as the package grows,"
False,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,466, since it takes about 4 seconds
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,465,"/* remove this test back soon,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,466,* since it takes about 4 seconds */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,485,// test reseeding without first using the generators
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,486,RandomDataImpl rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,487,rd.reSeed(100);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,488,"double ret = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,489,RandomDataImpl rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,490,rd2.reSeedSecure(2000);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,491,"ret = rd2.nextSecureLong(1,2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,492,rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,493,rd.reSeed();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,494,"ret = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,495,rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,496,rd2.reSeedSecure();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,497,"ret = rd2.nextSecureLong(1,2);"

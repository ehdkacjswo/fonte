is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,94,his.step = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,94,this.step = Math.abs(step);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,119,tepSize  = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,119,stepSize  = forward ? step : -step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,110,his.step = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,110,this.step = Math.abs(step);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,135,tepSize  = step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,135,stepSize  = forward ? step : -step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,74,his.minStep     = minStep;
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,75,his.maxStep     = maxStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,74,this.minStep     = Math.abs(minStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,75,this.maxStep     = Math.abs(maxStep);
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,76,his.step       = step;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,76,this.step       = Math.abs(step);
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,112,tepSize  = step;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,112,stepSize  = forward ? step : -step;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,tepSize = step;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,stepSize = forward ? step : -step;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,202,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,203,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,205,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,206,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,208,"FirstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,209,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,210,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,211,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,212,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,214,assertTrue(handler.getLastError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,215,assertTrue(handler.getMaximalValueError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,216,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,217,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,212,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,213,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,215,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,216,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,218,"FirstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,219,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,220,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,221,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,222,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,224,assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,225,assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,226,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,227,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,148,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,149,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,151,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,152,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,154,FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,155,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,156,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,157,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,158,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,160,assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,161,assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,162,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,163,"assertEquals(""classical Runge-Kutta"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,104,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,105,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,107,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,108,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,109,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,110,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,111,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,113,"FirstOrderIntegrator integ = new DormandPrince54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,114,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,115,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,116,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,117,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,118,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,119,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,121,assertTrue(handler.getLastError() < 2.0e-7);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,122,assertTrue(handler.getMaximalValueError() < 2.0e-7);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,123,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,124,"assertEquals(""Dormand-Prince 5(4)"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,128,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,129,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,131,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,132,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,133,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,134,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,135,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,137,"FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,138,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,139,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,140,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,141,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,142,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,143,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,145,assertTrue(handler.getLastError() < 8.0e-8);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,146,assertTrue(handler.getMaximalValueError() < 2.0e-7);
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,147,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,148,"assertEquals(""Dormand-Prince 8 (5, 3)"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,130,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,131,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,133,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,134,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,136,FirstOrderIntegrator integ = new EulerIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,137,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,138,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,139,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,140,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,142,assertTrue(handler.getLastError() < 0.45);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,143,assertTrue(handler.getMaximalValueError() < 0.45);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,144,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,145,"assertEquals(""Euler"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,128,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,129,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,131,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,132,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,134,FirstOrderIntegrator integ = new GillIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,135,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,136,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,137,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,138,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,140,assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,141,assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,142,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,143,"assertEquals(""Gill"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,93,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,94,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,96,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,97,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,98,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,99,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,100,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,102,"FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,103,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,104,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,105,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,106,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,107,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,108,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,110,assertTrue(handler.getLastError() < 9.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,111,assertTrue(handler.getMaximalValueError() < 9.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,112,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,113,"assertEquals(""Gragg-Bulirsch-Stoer"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,141,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,142,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,144,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,145,double minStep = 0;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,146,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,147,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,148,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,150,"FirstOrderIntegrator integ = new HighamHall54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,151,"scalAbsoluteTolerance,"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,152,scalRelativeTolerance);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,153,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,154,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,155,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,156,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,158,assertTrue(handler.getLastError() < 5.0e-7);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,159,assertTrue(handler.getMaximalValueError() < 5.0e-7);
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,160,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,161,"assertEquals(""Higham-Hall 5(4)"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,130,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,131,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,133,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,134,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,136,FirstOrderIntegrator integ = new MidpointIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,137,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,138,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,139,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,140,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,142,assertTrue(handler.getLastError() < 6.0e-4);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,143,assertTrue(handler.getMaximalValueError() < 6.0e-4);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,144,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,145,"assertEquals(""midpoint"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,128,public void testBackward()
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,129,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,131,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,132,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,134,FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,135,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,136,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,137,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,138,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,140,assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,141,assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,142,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,143,"assertEquals(""3/8"", integ.getName());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,38,"   <li>a {@link #getVt() getVt} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,38,"*   <li>a {@link #getVT() getVt} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,39,*   <li>a {@link #getEigenvalue(int) getEigenvalue} method to pick up a single
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,40,"*   eigenvalue has been added,</li>"
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,41,*   <li>a {@link #getEigenvector(int) getEigenvector} method to pick up a single
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,42,"*   eigenvector has been added,</li>"
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,79,ealMatrix getVt() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,83,RealMatrix getVT() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,82, Returns the eigenvalues of the original matrix.
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,83, @return eigenvalues of the original matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,86,* Returns a copy of the eigenvalues of the original matrix.
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,87,* @return a copy of the eigenvalues of the original matrix
False,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,88,ouble[] getEigenValues() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,92,double[] getEigenvalues() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,95,* Returns the i<sup>th</sup> eigenvalue of the original matrix.
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,96,* @return i<sup>th</sup> eigenvalue of the original matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,97,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,98,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,99,* @exception ArrayIndexOutOfBoundsException if i is not
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,100,* @see #getD()
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,102,double getEigenvalue(int i) throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,105,* Returns a copy of the i<sup>th</sup> eigenvector of the original matrix.
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,106,* @return copy of the i<sup>th</sup> eigenvector of the original matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,107,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,108,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,109,* @see #getD()
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,111,RealVector getEigenvector(int i) throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,114,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,115,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,116,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,117,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,118,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,120,double getDeterminant() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,22,import java.util.List;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,23,import java.util.SortedSet;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,24,import java.util.TreeSet;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,26,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,29,* Calculates the eigen decomposition of a matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,30,* <p>The eigen decomposition of matrix A is a set of two matrices:
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,31,* V and D such that A = V &times; D &times; V<sup>T</sup>.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,32,"* Let A be an m &times; n matrix, then V is an m &times; m orthogonal matrix"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,33,* and D is a m &times; n diagonal matrix.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,34,* <p>This implementation is based on Inderjit Singh Dhillon thesis
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,35,"* <a href=""http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf"">A"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,36,* New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,37,* Problem</a>.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,39,* @since 2.0
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,41,public class EigenDecompositionImpl implements EigenDecomposition {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,43,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,44,private static final long serialVersionUID = -8550254713195393577L;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,46,/** Eigenvalues. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,47,private double[] eigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,49,/** Eigenvectors. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,50,private RealVectorImpl[] eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,52,/** Cached value of V. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,53,private RealMatrix cachedV;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,55,/** Cached value of D. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,56,private RealMatrix cachedD;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,58,/** Cached value of Vt. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,59,private RealMatrix cachedVt;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,62,* Build a new instance.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,63,* <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,64,"* before any of the {@link #getV()}, {@link #getD()}, {@link #getVT()},"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,65,"* {@link #getEignevalues()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,66,* {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,67,* called.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,68,* @see #decompose(RealMatrix)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,70,public EigenDecompositionImpl() {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,74,* Calculates the eigen decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,75,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,76,* constructor and then call {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,77,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,78,* @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,79,* if algorithm fails to converge
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,81,public EigenDecompositionImpl(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,82,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,83,decompose(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,86,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,87,public void decompose(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,88,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,90,cachedV  = null;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,91,cachedD  = null;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,92,cachedVt = null;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,94,// transform the matrix to tridiagonal
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,95,TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,96,final double[] main      = transformer.getMainDiagonalRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,97,final double[] secondary = transformer.getSecondaryDiagonalRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,98,final int m = main.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,100,// pre-compute the square of the secondary diagonal
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,101,double[] squaredSecondary = new double[secondary.length];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,102,for (int i = 0; i < squaredSecondary.length; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,103,final double s = secondary[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,104,squaredSecondary[i] = s * s;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,107,// compute the eigenvalues bounds
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,108,List<GershgorinCirclesUnion> bounds =
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,109,"getEigenvaluesBounds(main, secondary);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,111,// TODO this implementation is not finished yet
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,112,"// the MRRR algorithm is NOT implemented, Gershgorin circles are"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,113,"// merged together when they could be separated, we only perform blindly"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,114,"// the basic steps, we search all eigenvalues with an arbitrary"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,115,"// threshold, we use twisted factorization afterwards with no"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,116,// heuristic to speed up the selection of the twist index ...
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,117,// The decomposition does work in its current state and seems reasonably
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,118,"// efficient when eigenvalues are separated. However, it is expected to"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,119,// fail in difficult cases and its performances can obviously be improved
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,120,"// for now, it is slower than JAMA for dimensions below 100 and faster"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,121,// for dimensions above 100. The speed gain with respect to JAMA increase
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,122,// regularly with dimension
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,124,// find eigenvalues using bisection
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,125,eigenvalues = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,126,final double low  = bounds.get(0).getLow();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,127,final double high = bounds.get(bounds.size() - 1).getHigh();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,128,final double threshold =
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,129,"1.0e-15 * Math.max(Math.abs(low), Math.abs(high));"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,130,"findEigenvalues(main, squaredSecondary, low, high, threshold, 0, m);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,132,// find eigenvectors
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,133,eigenvectors = new RealVectorImpl[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,134,final double[] eigenvector = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,135,final double[] lp          = new double[m - 1];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,136,final double[] dp          = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,137,final double[] um          = new double[m - 1];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,138,final double[] dm          = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,139,final double[] gamma       = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,140,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,142,// find the eigenvector of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,143,"findEigenvector(eigenvalues[i], eigenvector,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,144,"main, secondary, lp, dp, um, dm, gamma);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,146,// find the eigenvector of the original matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,147,eigenvectors[i] =
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,148,"new RealVectorImpl(transformer.getQ().operate(eigenvector), true);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,154,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,155,public RealMatrix getV()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,156,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,158,if (cachedV == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159,cachedV = getVT().transpose();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,162,// return the cached matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,163,return cachedV;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,167,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,168,public RealMatrix getD()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,169,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,171,if (cachedD == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,173,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,175,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,176,final double[][] sData = new double[m][m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,177,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,178,sData[i][i] = eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,181,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,182,"cachedD = new RealMatrixImpl(sData, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,185,return cachedD;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,188,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189,public RealMatrix getVT()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,192,if (cachedVt == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,194,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,196,final double[][] vtData = new double[eigenvectors.length][];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,197,for (int k = 0; k < eigenvectors.length; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,198,vtData[k] = eigenvectors[k].getData();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,201,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,202,"cachedVt = new RealMatrixImpl(vtData, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,206,// return the cached matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,207,return cachedVt;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,211,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,212,public double[] getEigenvalues()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,213,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,214,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,215,return eigenvalues.clone();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,218,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,219,public double getEigenvalue(final int i)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,220,"throws InvalidMatrixException, ArrayIndexOutOfBoundsException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,221,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,222,return eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,225,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,226,public RealVector getEigenvector(final int i)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227,"throws InvalidMatrixException, ArrayIndexOutOfBoundsException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,228,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229,return eigenvectors[i].copy();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,232,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,233,public boolean isNonSingular()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,234,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,235,for (double lambda : eigenvalues) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,236,if (lambda == 0) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,237,return false;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,240,return true;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,243,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,244,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,245,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,247,checkNonSingular();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,249,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,250,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,251,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,254,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,255,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,256,final RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,257,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,258,final double[] vData = v.getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,259,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,260,bp[j] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,264,return bp;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,268,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,269,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,270,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,271,try {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,272,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,273,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,275,checkNonSingular();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,277,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,278,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,279,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,282,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,283,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,284,final RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,285,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,286,final double[] vData = v.getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,287,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,288,bp[j] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,292,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,297,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,298,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,299,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,300,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,301,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,302,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,304,public RealVectorImpl solve(final RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,305,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,306,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,309,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,310,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,311,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,313,checkNonSingular();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,315,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,316,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,317,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,320,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,321,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,322,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,323,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,324,final double[] vData = eigenvectors[i].getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,325,double s = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,326,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,327,"s += vData[j] * b.getEntry(j, k);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,329,s /= eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,330,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,331,bp[j][k] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,336,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,340,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,341,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,342,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,344,checkNonSingular();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,345,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,346,final double[][] invData = new double[m][m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,348,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,349,final double[] invI = invData[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,350,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,351,double invIJ = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,352,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,353,final double[] vK = eigenvectors[k].getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,354,invIJ += vK[i] * vK[j] / eigenvalues[k];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,356,invI[j] = invIJ;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,359,"return new RealMatrixImpl(invData, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,363,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,364,public double getDeterminant()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,365,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,366,double determinant = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,367,for (double lambda : eigenvalues) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,determinant *= lambda;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,370,return determinant;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,374,* Compute a set of possible bounding intervals for eigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,375,* of a symmetric tridiagonal matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,376,* <p>The intervals are computed by applying the Gershgorin circle theorem.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,377,* @param main main diagonal
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,* @param secondary secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,379,"* @return a collection of disjoint intervals where eigenvalues must lie,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,* sorted in increasing order
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,382,"private List<GershgorinCirclesUnion> getEigenvaluesBounds(final double[] main,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,383,final double[] secondary) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,385,final SortedSet<GershgorinCirclesUnion> rawCircles =
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,386,new TreeSet<GershgorinCirclesUnion>();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,387,final int m = main.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,389,// compute all the Gershgorin circles independently
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,390,"rawCircles.add(new GershgorinCirclesUnion(main[0],"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,391,Math.abs(secondary[0])));
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,392,for (int i = 1; i < m - 1; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,393,"rawCircles.add(new GershgorinCirclesUnion(main[i],"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,394,Math.abs(secondary[i - 1]) +
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,395,Math.abs(secondary[i])));
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,397,"rawCircles.add(new GershgorinCirclesUnion(main[m - 1],"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,398,Math.abs(secondary[m - 2])));
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,400,// combine intersecting circles
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,401,final ArrayList<GershgorinCirclesUnion> combined =
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,402,new ArrayList<GershgorinCirclesUnion>();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,403,GershgorinCirclesUnion current = null;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,404,for (GershgorinCirclesUnion rawCircle : rawCircles) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,405,if (current == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,406,current = rawCircle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,407,} else if (current.intersects(rawCircle)) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,current.swallow(rawCircle);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,409,} else {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,410,combined.add(current);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,411,current = rawCircle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,414,if (current != null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,415,combined.add(current);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,418,return combined;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,422,/** Find eigenvalues in an interval.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423,* @param main main diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,424,* @param squaredSecondary squared secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,425,* @param low lower bound of the search interval
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,426,* @param high higher bound of the search interval
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,427,* @param threshold convergence threshold
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,428,* @param iStart index of the first eigenvalue to find
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,429,* @param iEnd index one unit past the last eigenvalue to find
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,431,"private void findEigenvalues(final double[] main, final double[] squaredSecondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,432,"final double low, final double high, final double threshold,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,433,"final int iStart, final int iEnd) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,435,// use a simple loop to handle tail-recursion cases
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,436,double currentLow   = low;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,437,double currentHigh  = high;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,438,int    currentStart = iStart;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,439,while (true) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,441,final double middle = 0.5 * (currentLow + currentHigh);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,443,if (currentHigh - currentLow < threshold) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,// we have found an elementary interval containing one or more eigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,445,"Arrays.fill(eigenvalues, currentStart, iEnd, middle);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,446,return;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,449,// compute the number of eigenvalues below the middle interval point
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,450,"final int iMiddle = countEigenValues(main, squaredSecondary, middle);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,451,if (iMiddle == currentStart) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,452,// all eigenvalues are in the upper half of the search interval
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,453,// update the interval and iterate
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,454,currentLow = middle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,455,} else if (iMiddle == iEnd) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,456,// all eigenvalues are in the lower half of the search interval
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,457,// update the interval and iterate
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,458,currentHigh = middle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,459,} else {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,460,// split the interval and search eigenvalues in both sub-intervals
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,461,"findEigenvalues(main, squaredSecondary, currentLow, middle, threshold,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,462,"currentStart, iMiddle);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,463,currentLow   = middle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,464,currentStart = iMiddle;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,472,* Count the number of eigenvalues below a point.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,473,* @param main main diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,474,* @param squaredSecondary squared secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,475,* @param mu value below which we must count the number of eigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,476,* @return number of eigenvalues smaller than mu
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,478,"private int countEigenValues(final double[] main, final double[] squaredSecondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,479,final double mu) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,480,double ratio = main[0] - mu;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,481,int count = (ratio > 0) ? 0 : 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,for (int i = 1; i < main.length; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,483,ratio = main[i] - squaredSecondary[i - 1] / ratio - mu;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,484,if (ratio <= 0) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,485,++count;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,488,return count;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,492,* Decompose the shifted tridiagonal matrix A - lambda I as L<sub>+</sub>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,493,* &times; D<sub>+</sub> &times; U<sub>+</sub>.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,494,* <p>A shifted symmetric tridiagonal matrix can be decomposed as
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,495,* L<sub>+</sub> &times; D<sub>+</sub> &times; U<sub>+</sub> where L<sub>+</sub>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,496,"* is a lower bi-diagonal matrix with unit diagonal, D<sub>+</sub> is a diagonal"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,* matrix and U<sub>+</sub> is the transpose of L<sub>+</sub>. The '+' indice
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,498,* comes from Dhillon's notation since decomposition is done in
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,499,* increasing rows order).</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,500,* @param main main diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,501,* @param secondary secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,502,* @param lambda shift to apply to the matrix before decomposing it
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,503,* @param r index at which factorization should stop (if r is
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,504,"* <code>main.length</code>, complete factorization is performed)"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,505,* @param lp placeholder where to put the (r-1) first off-diagonal
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,506,* elements of the L<sub>+</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,507,* @param dp placeholder where to put the r first diagonal elements
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,508,* of the D<sub>+</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,510,"private void lduDecomposition(final double[] main, final double[] secondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,511,"final double lambda, final int r,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,512,"final double[] lp, final double[] dp) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,513,double di = main[0] - lambda;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,514,dp[0] = di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,515,for (int i = 1; i < r; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,516,final double eiM1 = secondary[i - 1];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,517,final double ratio = eiM1 / di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,518,di = main[i] - lambda - eiM1 * ratio;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,519,lp[i - 1] = ratio;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,520,dp[i] = di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,525,* Decompose the shifted tridiagonal matrix A - lambda I as U<sub>-</sub>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,526,* &times; D<sub>-</sub> &times; L<sub>-</sub>.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,527,* <p>A shifted symmetric tridiagonal matrix can be decomposed as
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,528,* U<sub>-</sub> &times; D<sub>-</sub> &times; L<sub>-</sub> where U<sub>-</sub>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,529,"* is an upper bi-diagonal matrix with unit diagonal, D<sub>-</sub> is a diagonal"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,530,* matrix and L<sub>-</sub> is the transpose of U<sub>-</sub>. The '-' indice
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,531,* comes from Dhillon's notation since decomposition is done in
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,532,* decreasing rows order).</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,533,* @param main main diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,534,* @param secondary secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,535,* @param lambda shift to apply to the matrix before decomposing it
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,536,"* @param r index at which factorization should stop (if r is 0, complete"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,537,* factorization is performed)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,538,* @param um placeholder where to put the m-(r-1) last off-diagonal elements
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,539,"* of the U<sub>-</sub> matrix, where m is the size of the original matrix"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,540,* @param dm placeholder where to put the m-r last diagonal elements
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,541,"* of the D<sub>-</sub> matrix, where m is the size of the original matrix"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,543,"private void udlDecomposition(final double[] main, final double[] secondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,544,"final double lambda, final int r,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,545,"final double[] um, final double[] dm) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,546,final int mM1 = main.length - 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,547,double di = main[mM1] - lambda;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,548,dm[mM1] = di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,549,for (int i = mM1 - 1; i >= r; --i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,550,final double ei = secondary[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,551,final double ratio = ei / di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,552,di = main[i] - lambda - ei * ratio;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,553,um[i] = ratio;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,554,dm[i] = di;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,559,* Find an eigenvector corresponding to an eigenvalue.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,560,* @param eigenvalue eigenvalue for which eigenvector is desired
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,561,* @param eigenvector placeholder where to put the eigenvector
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,562,* @param main main diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,563,* @param secondary secondary diagonal of the tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,564,* @param lp placeholder where to put the off-diagonal elements of the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,565,* L<sub>+</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,566,* @param dp placeholder where to put the diagonal elements of the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,567,* D<sub>+</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,568,* @param um placeholder where to put the off-diagonal elements of the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,569,* U<sub>-</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,570,* @param dm placeholder where to put the diagonal elements of the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,571,* D<sub>-</sub> matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,572,* @param gamma placeholder where to put the twist elements for all
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,573,* possible twist indices
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,575,"private void findEigenvector(final double eigenvalue, final double[] eigenvector,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,576,"final double[] main, final double[] secondary,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,577,"final double[] lp, final double[] dp,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,578,"final double[] um, final double[] dm,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,579,final double[] gamma) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,581,// compute the LDU and UDL decomposition of the
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,582,// perfectly shifted tridiagonal matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,583,final int m = main.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,584,"lduDecomposition(main, secondary, eigenvalue, m, lp, dp);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,585,"udlDecomposition(main, secondary, eigenvalue, 0, um, dm);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,587,// select the twist index leading to
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,588,// the least diagonal element in the twisted factorization
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,589,int r = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,590,double g = dp[0] + dm[0] + eigenvalue - main[0];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,591,gamma[0] = g;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,592,double minG = Math.abs(g);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,593,for (int i = 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,594,if (i < m - 1) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,595,g *= dm[i + 1] / dp[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,596,} else {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,597,g = dp[m - 1] + dm[m - 1] + eigenvalue - main[m - 1];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,599,gamma[i] = g;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,600,final double absG = Math.abs(g);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,601,if (absG < minG) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,602,r = i;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,603,minG = absG;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,607,// solve the singular system by ignoring the equation
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,608,// at twist index and propagating upwards and downwards
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,609,double n2 = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,610,eigenvector[r] = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,611,double z = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,612,for (int i = r - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,613,z *= -lp[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,614,eigenvector[i] = z;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,615,n2 += z * z;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,617,z = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,618,for (int i = r + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,619,z *= -um[i-1];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,620,eigenvector[i] = z;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,621,n2 += z * z;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,624,// normalize vector
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,625,final double inv = 1.0 / Math.sqrt(n2);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,626,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,627,eigenvector[i] *= inv;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,633,* Check if decomposition has been performed.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,634,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,635,* has not been called
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,637,private void checkDecomposed()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,638,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,639,if (eigenvalues == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,640,"throw new IllegalStateException(""no matrix have been decomposed yet"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,645,* Check if decomposed matrix is non singular.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,646,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,647,* has not been called
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,648,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,650,private void checkNonSingular()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,651,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,652,checkDecomposed();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,653,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,654,"throw new IllegalStateException(""matrix is singular"");"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,20,/** Class representing a union of Gershgorin circles.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,21,* <p>Gershgorin circles are bounding areas where eigenvalues must lie.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,22,* They are used as starting values for eigen decomposition algorithms.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,23,"* In the real case, Gershgorin circles are simple intervals.</p>"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,24,* @see EigenDecompositionImpl
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,26,* @since 2.0
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,28,class GershgorinCirclesUnion implements Comparable<GershgorinCirclesUnion> {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,30,/** Lower bound of the interval. */
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,31,private double low;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,33,/** Higher bound of the interval. */
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,34,private double high;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,36,/** Create a simple Gershgorin circle.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,37,* @param d diagonal element of the current row
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,38,* @param sum sum of the absolute values of the off-diagonal elements
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,39,* of the current row
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,41,"public GershgorinCirclesUnion(final double d, final double sum) {"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,42,low  = d - sum;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,43,high = d + sum;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,47,* Get the lower bound of the interval.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,48,* @return lower bound of the interval
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,50,public double getLow() {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,51,return low;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,55,* Get the higher bound of the interval.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,56,* @return higher bound of the interval
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,58,public double getHigh() {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,59,return high;
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,63,* Check if a Gershgorin circles union intersects instance.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,64,* @param other Gershgorin circles union to test against instance
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,65,* @return true if the other Gershgorin circles union intersects instance
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,67,public boolean intersects(final GershgorinCirclesUnion other) {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,68,return (other.low <= this.high) && (other.high >= this.low);
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,72,* Swallow another Gershgorin circles union.
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,73,* <p>Swallowing another Gershgorin circles union changes the
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,74,* instance such that it contains everything that was formerly in
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,75,* either circles union. It is mainly intended for circles unions
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,76,* that {@link #intersects(GershgorinCirclesUnion) intersect}
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,77,* each other beforehand.</p>
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,79,public void swallow(final GershgorinCirclesUnion other) {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,80,"low  = Math.min(low,  other.low);"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,81,"high = Math.max(high, other.high);"
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,84,/** Comparator class for sorting intervals. */
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,85,public int compareTo(GershgorinCirclesUnion other) {
True,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,src/java/org/apache/commons/math/linear/GershgorinCirclesUnion.java,86,"return Double.compare(low, other.low);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,20,import java.util.Random;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,26,public class EigenDecompositionImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,28,private double[] refValues;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,29,private RealMatrix matrix;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,31,private static final double normTolerance = 1.e-10;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,33,public EigenDecompositionImplTest(String name) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,34,super(name);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,37,public static Test suite() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,38,TestSuite suite = new TestSuite(EigenDecompositionImplTest.class);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,39,"suite.setName(""EigenDecompositionImpl Tests"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,40,return suite;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,43,/** test dimensions */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,44,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,45,final int m = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,46,EigenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,47,"assertEquals(m, ed.getV().getRowDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,48,"assertEquals(m, ed.getV().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,49,"assertEquals(m, ed.getD().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,50,"assertEquals(m, ed.getD().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,51,"assertEquals(m, ed.getVT().getRowDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,52,"assertEquals(m, ed.getVT().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,55,/** test eigenvalues */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,56,public void testEigenvalues() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,57,EigenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,58,double[] eigenValues = ed.getEigenvalues();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,59,"assertEquals(refValues.length, eigenValues.length);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,60,for (int i = 0; i < refValues.length; ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,61,"assertEquals(refValues[i], eigenValues[eigenValues.length - 1 - i], 3.0e-15);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,65,/** test eigenvectors */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,66,public void testEigenvectors() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,67,EigenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,68,for (int i = 0; i < matrix.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,69,double lambda = ed.getEigenvalue(i);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,70,RealVector v  = ed.getEigenvector(i);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,71,RealVector mV = matrix.operate(v);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,72,"assertEquals(0, mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,76,/** test A = VDVt */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,77,public void testAEqualVDVt() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,78,EigenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,79,RealMatrix v  = ed.getV();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,80,RealMatrix d  = ed.getD();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,81,RealMatrix vT = ed.getVT();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,82,double norm = v.multiply(d).multiply(vT).subtract(matrix).getNorm();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,83,"assertEquals(0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,86,/** test that V is orthogonal */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,87,public void testVOrthogonal() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,88,RealMatrix v = new EigenDecompositionImpl(matrix).getV();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,89,RealMatrix vTv = v.transpose().multiply(v);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,90,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,91,"assertEquals(0, vTv.subtract(id).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,94,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,95,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,96,EigenDecomposition ed = new EigenDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,97,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,98,try {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,99,ed.solve(b);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,101,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,102,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,103,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,104,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,106,try {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,107,ed.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,108,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,109,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,110,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,111,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,112,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,114,try {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,115,ed.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,116,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,117,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,118,// expected behavior
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,119,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,120,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,124,/** test solve */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,125,public void testSolve() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,126,RealMatrix m = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,127,"{ 91,  5, 29, 32, 40, 14 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,128,"{  5, 34, -1,  0,  2, -1 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,129,"{ 29, -1, 12,  9, 21,  8 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,130,"{ 32,  0,  9, 14,  9,  0 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,131,"{ 40,  2, 21,  9, 51, 19 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,132,"{ 14, -1,  8,  0, 19, 14 }"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,134,EigenDecomposition ed = new EigenDecompositionImpl(m);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,135,"assertEquals(184041, ed.getDeterminant(), 2.0e-8);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,136,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,137,"{ 1561, 269, 188 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,138,"{   69, -21,  70 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,139,"{  739, 108,  63 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,140,"{  324,  86,  59 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,141,"{ 1624, 194, 107 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,142,"{  796,  69,  36 }"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,144,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,145,"{ 1,   2, 1 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,146,"{ 2,  -1, 2 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,147,"{ 4,   2, 3 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,148,"{ 8,  -1, 0 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,149,"{ 16,  2, 0 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,150,"{ 32, -1, 0 }"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,153,// using RealMatrix
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,154,"assertEquals(0, ed.solve(b).subtract(xRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,156,// using double[]
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,157,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,158,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,159,"new RealVectorImpl(ed.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,160,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,163,// using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,164,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,165,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,166,"ed.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,167,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,170,// using RealMatrix with an alternate implementation
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,171,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,172,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,173,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,174,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,175,"ed.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,176,2.0e-11);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,181,public void setUp() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,182,refValues = new double[] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,183,"2.003, 2.002, 2.001, 1.001, 1.000, 0.001"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,185,"matrix = createTestMatrix(new Random(35992629946426l), refValues);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,188,public void tearDown() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,189,refValues = null;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,190,matrix    = null;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,193,"private RealMatrix createTestMatrix(final Random r, final double[] eigenValues) {"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,194,"final RealMatrix v = createOrthogonalMatrix(r, eigenValues.length);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,195,"final RealMatrix d = createDiagonalMatrix(eigenValues, eigenValues.length);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,196,return v.multiply(d).multiply(v.transpose());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,199,"private RealMatrix createOrthogonalMatrix(final Random r, final int size) {"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,200,final double[][] data = new double[size][size];
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,201,for (int i = 0; i < size; ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,202,for (int j = 0; j < size; ++j) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,203,data[i][j] = 2 * r.nextDouble() - 1;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,206,"final RealMatrix m = new RealMatrixImpl(data, false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,207,return new QRDecompositionImpl(m).getQ();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,210,"private RealMatrix createDiagonalMatrix(final double[] data, final int rows) {"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,211,final double[][] dData = new double[rows][rows];
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,212,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,213,dData[i][i] = data[i];
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,215,"return new RealMatrixImpl(dData, false);"

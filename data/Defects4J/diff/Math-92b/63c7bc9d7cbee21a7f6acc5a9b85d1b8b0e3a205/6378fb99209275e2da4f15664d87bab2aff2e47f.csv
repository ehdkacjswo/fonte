is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,303,// org.apache.commons.math.analysis.integration.LegendreGaussIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,304,"{ ""{0} points Legendre-Gauss integrator not supported,"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,305,""" number of points must be in the {1}-{2} range"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,306,"""int\u00e9grateur de Legendre-Gauss non support\u00e9 en {0} points, "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,"""le nombre de points doit \u00eatre entre {1} et {2}"" },"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,17,package org.apache.commons.math.analysis.integration;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,19,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,22,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,23,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,26,"* Implements the <a href=""http://mathworld.wolfram.com/Legendre-GaussQuadrature.html"">"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,27,* Legendre-Gauss</a> quadrature formula.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,28,* <p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,29,* Legendre-Gauss integrators are efficient integrators that can
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,30,* accurately integrate functions with few functions evaluations. A
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,31,* Legendre-Gauss integrator using an n-points quadrature formula can
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,32,* integrate exactly 2n-1 degree polynomialss.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,33,* </p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,34,* <p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,35,* These integrators evaluate the function on n carefully chosen
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,36,* abscissas in each step interval (mapped to the canonical [-1  1] interval).
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,37,* The evaluation abscissas are not evenly spaced and none of them are
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,38,* at the interval endpoints. This implies the function integrated can be
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,39,* undefined at integration interval endpoints.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,40,* </p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,41,* <p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,42,* The evaluation abscissas x<sub>i</sub> are the roots of the degree n
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,43,* Legendre polynomial. The weights a<sub>i</sub> of the quadrature formula
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,44,* integrals from -1 to +1 &int; Li<sup>2</sup> where Li (x) =
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,45,* &prod; (x-x<sub>k</sub>)/(x<sub>i</sub>-x<sub>k</sub>) for k != i.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,46,* </p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,47,* <p>
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,48,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,49,* @since 1.2
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,52,public class LegendreGaussIntegrator extends UnivariateRealIntegratorImpl {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,54,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,55,private static final long serialVersionUID = -331962723352824098L;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,57,/** Abscissas for the 2 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,58,private static final double[] ABSCISSAS_2 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,59,"-1.0 / Math.sqrt(3.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,60,1.0 / Math.sqrt(3.0)
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,63,/** Weights for the 2 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,64,private static final double[] WEIGHTS_2 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,65,"1.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,66,1.0
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,69,/** Abscissas for the 3 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,70,private static final double[] ABSCISSAS_3 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,71,"-Math.sqrt(0.6),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,72,"0.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,73,Math.sqrt(0.6)
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,76,/** Weights for the 3 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,77,private static final double[] WEIGHTS_3 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,78,"5.0 / 9.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,79,"8.0 / 9.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,80,5.0 / 9.0
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,83,/** Abscissas for the 4 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,84,private static final double[] ABSCISSAS_4 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,85,"-Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,86,"-Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,87,"Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,88,Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0)
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,91,/** Weights for the 4 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,92,private static final double[] WEIGHTS_4 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,93,"(90.0 - 5.0 * Math.sqrt(30.0)) / 180.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,94,"(90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,95,"(90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,96,(90.0 - 5.0 * Math.sqrt(30.0)) / 180.0
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,99,/** Abscissas for the 5 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,100,private static final double[] ABSCISSAS_5 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,101,"-Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,102,"-Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,103,"0.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,104,"Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,105,Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0)
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,108,/** Weights for the 5 points method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,109,private static final double[] WEIGHTS_5 = {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,110,"(322.0 - 13.0 * Math.sqrt(70.0)) / 900.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,111,"(322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,112,"128.0 / 225.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,113,"(322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,114,(322.0 - 13.0 * Math.sqrt(70.0)) / 900.0
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,117,/** Abscissas for the current method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,118,private final double[] abscissas;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,120,/** Weights for the current method. */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,121,private final double[] weights;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,123,/** Build a Legendre-Gauss integrator.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,124,* @param n number of points desired (must be between 2 and 5 inclusive)
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,125,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,126,* @exception IllegalArgumentException if the number of points is not
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,127,* in the supported range
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,129,"public LegendreGaussIntegrator(final int n, final int defaultMaximalIterationCount)"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,130,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,131,super(defaultMaximalIterationCount);
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,132,switch(n) {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,133,case 2 :
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,134,abscissas = ABSCISSAS_2;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,135,weights   = WEIGHTS_2;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,136,break;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,137,case 3 :
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,138,abscissas = ABSCISSAS_3;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,139,weights   = WEIGHTS_3;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,140,break;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,141,case 4 :
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,142,abscissas = ABSCISSAS_4;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,143,weights   = WEIGHTS_4;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,144,break;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,145,case 5 :
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,146,abscissas = ABSCISSAS_5;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,147,weights   = WEIGHTS_5;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,148,break;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,149,default :
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,150,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,151,"""{0} points Legendre-Gauss integrator not supported, "" +"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,152,"""number of points must be in the {1}-{2} range"","
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,153,"new Object[] { n, 2, 5 });"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,158,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,159,@Deprecated
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,160,"public double integrate(final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,161,"throws ConvergenceException,  FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,162,"return integrate(f, min, max);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,165,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,166,"public double integrate(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,167,"final double min, final double max)"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,168,"throws ConvergenceException,  FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,170,clearResult();
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,171,"verifyInterval(min, max);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,172,verifyIterationCount();
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,174,// compute first estimate with a single step
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,175,"double oldt = stage(f, min, max, 1);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,177,int n = 2;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,178,for (int i = 0; i < maximalIterationCount; ++i) {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,180,// improve integral with a larger number of steps
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,181,"final double t = stage(f, min, max, n);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,183,// estimate error
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,184,final double delta = Math.abs(t - oldt);
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,185,final double limit =
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,186,"Math.max(absoluteAccuracy,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,187,relativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5);
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,189,// check convergence
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,190,if ((i + 1 >= minimalIterationCount) && (delta <= limit)) {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,191,"setResult(t, i);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,192,return result;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,195,// prepare next iteration
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,196,"double ratio = Math.min(4, Math.pow(delta / limit, 0.5 / abscissas.length));"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,197,"n = Math.max((int) (ratio * n), n + 1);"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,198,oldt = t;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,202,throw new MaxIterationsExceededException(maximalIterationCount);
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,207,* Compute the n-th stage integral.
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,208,* @param f the integrand function
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,209,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,210,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,211,* @param n number of steps
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,212,* @return the value of n-th stage integral
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,213,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,214,* function
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,216,"private double stage(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,217,"final double min, final double max, final int n)"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,218,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,220,// set up the step for the current stage
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,221,final double step     = (max - min) / n;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,222,final double halfStep = step / 2.0;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,224,// integrate over all elementary steps
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,225,double midPoint = min + halfStep;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,226,double sum = 0.0;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,227,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,228,for (int j = 0; j < abscissas.length; ++j) {
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,229,sum += weights[j] * f.value(midPoint + halfStep * abscissas[j]);
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,231,midPoint += step;
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,234,return halfStep * sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,23,** This class implements a Gauss-Legendre integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,25, <p>Gauss-Legendre integrators are efficient integrators that can
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,26, accurately integrate functions with few functions evaluations. A
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,27, Gauss-Legendre integrator using an n-points quadrature formula can
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,28, integrate exactly 2n-1 degree polynoms.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,30, <p>These integrators evaluate the function on n carefully chosen
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,31, points in each step interval. These points are not evenly
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,32, spaced. The function is <emph>never</emph> evaluated at the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,33," boundary points, which means it can be undefined at these"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,34, points.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,36, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,37, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,41,ublic class GaussLegendreIntegrator
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,42,mplements ComputableFunctionIntegrator {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,43,** Build a Gauss-Legendre integrator.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,45, <p>A Gauss-Legendre integrator is a formula like:
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,46, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,47,    int (f) from -1 to +1 = Sum (ai * f(xi))
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,48, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,49, </p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,51, <p>The coefficients of the formula are computed as follow:
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,52, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,53,   let n be the desired number of points
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,54,   the xi are the roots of the degree n Legendre polynomial
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,55,   the ai are the integrals int (Li^2) from -1 to +1
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,56,   where Li (x) = Prod (x-xk)/(xi-xk) for k != i
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,57, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,58, </p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,60, <p>A formula in n points can integrate exactly polynoms of degree
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,61, up to 2n-1.</p>
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,63, @param minPoints minimal number of points desired
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,64, @param rawStep raw integration step (the precise step will be
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,65, adjusted in order to have an integer number of steps in the
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,66, integration range).
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,68,"ublic GaussLegendreIntegrator(int minPoints, double rawStep) {"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,69,f (minPoints <= 2) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,70,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,71," 1.0, -1.0 / Math.sqrt(3.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,72," 1.0,  1.0 / Math.sqrt(3.0) }"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,74, else if (minPoints <= 3) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,75,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,76," 5.0 / 9.0, -Math.sqrt(0.6) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,77," 8.0 / 9.0,            0.0  },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,78," 5.0 / 9.0,  Math.sqrt(0.6) }"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,80, else if (minPoints <= 4) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,81,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,82," (90.0 - 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,83,"Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,84," (90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,85,"Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,86," (90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,87,"ath.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,88," (90.0 - 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,89,ath.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0) }
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,91, else {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,92,eightedRoots = new double[][] {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,93," (322.0 - 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,94,"Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,95," (322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,96,"Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,97," 128.0 / 225.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,98,".0 },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,99," (322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,100,"ath.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0) },"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,101," (322.0 - 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,102,ath.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0) }
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,106,his.rawStep = rawStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,110,** Get the number of functions evaluation per step.
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,111, @return number of function evaluation per step
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,113,ublic int getEvaluationsPerStep() {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,114,eturn weightedRoots.length;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,117,"ublic double integrate(ComputableFunction f, double a, double b)"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,118,hrows FunctionException {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,120,/ swap the bounds if they are not in ascending order
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,121,f (b < a) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,122,ouble tmp = b;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,123,          = a;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,124,          = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,127,/ adjust the step according to the bounds
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,128,ong   n     = Math.round(0.5 + (b - a) / rawStep);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,129,ouble step  = (b - a) / n;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,131,/ integrate over all elementary steps
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,132,ouble halfStep = step / 2.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,133,ouble midPoint = a + halfStep;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,134,ouble sum = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,135,or (long i = 0; i < n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,136,or (int j = 0; j < weightedRoots.length; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,137,um += weightedRoots[j][0]
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,138, f.valueAt(midPoint + halfStep * weightedRoots[j][1]);
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,140,idPoint += step;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,143,eturn halfStep * sum;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,147,ouble[][] weightedRoots;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegrator.java,149,ouble rawStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,18,ackage org.spaceroots.mantissa.quadrature.scalar;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,20,mport org.spaceroots.mantissa.functions.scalar.ComputableFunction;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,21,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,23,mport java.util.Random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,25,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,27,ublic class GaussLegendreIntegratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,28,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,30,ublic GaussLegendreIntegratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,31,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,34,ublic void testExactIntegration()
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,35,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,36,andom random = new Random(86343623467878363l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,37,nt order = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,38,hile (true) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,39,"aussLegendreIntegrator integrator = new GaussLegendreIntegrator(order,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,40,.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,41,nt availableOrder = integrator.getEvaluationsPerStep();
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,42,f (availableOrder < order) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,43,/ we have tested all available orders
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,44,eturn;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,47,/ an order n Gauss-Legendre integrator integrates
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,48,/ 2n-1 degree polynoms exactly
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,49,or (int degree = 0; degree <= 2 * availableOrder - 1; ++degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,50,or (int i = 0; i < 10; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,51,"olynom p = new Polynom(degree, random, 100.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,52,"ouble s0 = integrator.integrate(p, -5.0, 15.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,53,"ouble s1 = p.exactIntegration(-5.0, 15.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,54,ssertTrue(Math.abs(s0 - s1) < 1.0e-12 * (1.0 + Math.abs(s0)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,58,+order;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,63,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,64,eturn new TestSuite(GaussLegendreIntegratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,67,rivate static class Polynom implements ComputableFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,69,"ublic Polynom(int degree, Random random, double max) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,70,oeffs = new double[degree + 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,71,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,72,oeffs[i] = 2.0 * max * (random.nextDouble() - 0.5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,76,ublic double valueAt(double t)
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,77,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,78,ouble y = coeffs[coeffs.length - 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,79,or (int i = coeffs.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,80, = y * t + coeffs[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,82,eturn y;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,85,"ublic double exactIntegration(double a, double b)"
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,86,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,87,ouble yb = coeffs[coeffs.length - 1] / coeffs.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,88,ouble ya = yb;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,89,or (int i = coeffs.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,90,b = yb * b + coeffs[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,91,a = ya * a + coeffs[i] / (i + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,93,eturn yb * b - ya * a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,96,rivate double[] coeffs;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,98,rivate static final long serialVersionUID = -7304282612679254557L;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,17,package org.apache.commons.math.analysis.integration;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,19,import java.util.Random;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,21,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,23,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,24,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,25,import org.apache.commons.math.analysis.SinFunction;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,26,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,27,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,29,import junit.framework.*;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,31,public class LegendreGaussIntegratorTest
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,32,extends TestCase {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,34,public LegendreGaussIntegratorTest(String name) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,35,super(name);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,38,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,39,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,40,"UnivariateRealIntegrator integrator = new LegendreGaussIntegrator(5, 64);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,41,integrator.setAbsoluteAccuracy(1.0e-10);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,42,integrator.setRelativeAccuracy(1.0e-14);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,43,integrator.setMinimalIterationCount(2);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,44,integrator.setMaximalIterationCount(15);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,45,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,47,min = 0; max = Math.PI; expected = 2;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,48,"tolerance = Math.max(integrator.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,49,Math.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,50,"result = integrator.integrate(f, min, max);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,51,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,53,min = -Math.PI/3; max = 0; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,54,"tolerance = Math.max(integrator.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,55,Math.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,56,"result = integrator.integrate(f, min, max);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,57,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,60,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,61,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,62,"UnivariateRealIntegrator integrator = new LegendreGaussIntegrator(3, 64);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,63,"double min, max, expected, result;"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,65,min = 0; max = 1; expected = -1.0/48;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,66,"result = integrator.integrate(f, min, max);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,67,"assertEquals(expected, result, 1.0e-16);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,69,min = 0; max = 0.5; expected = 11.0/768;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,70,"result = integrator.integrate(f, min, max);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,71,"assertEquals(expected, result, 1.0e-16);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,73,min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,74,"result = integrator.integrate(f, min, max);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,75,"assertEquals(expected, result, 1.0e-16);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,78,public void testExactIntegration()
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,79,"throws ConvergenceException, FunctionEvaluationException {"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,80,Random random = new Random(86343623467878363l);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,81,for (int n = 2; n < 6; ++n) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,82,LegendreGaussIntegrator integrator =
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,83,"new LegendreGaussIntegrator(n, 64);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,85,// an n points Gauss-Legendre integrator integrates 2n-1 degree polynoms exactly
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,86,for (int degree = 0; degree <= 2 * n - 1; ++degree) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,87,for (int i = 0; i < 10; ++i) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,88,double[] coeff = new double[degree + 1];
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,89,for (int k = 0; k < coeff.length; ++k) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,90,coeff[k] = 2 * random.nextDouble() - 1;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,92,PolynomialFunction p = new PolynomialFunction(coeff);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,93,"double result    = integrator.integrate(p, -5.0, 15.0);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,94,"double reference = exactIntegration(p, -5.0, 15.0);"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,95,"assertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + Math.abs(reference)));"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,102,"private double exactIntegration(PolynomialFunction p, double a, double b) {"
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,103,final double[] coeffs = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,104,double yb = coeffs[coeffs.length - 1] / coeffs.length;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,105,double ya = yb;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,106,for (int i = coeffs.length - 2; i >= 0; --i) {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,107,yb = yb * b + coeffs[i] / (i + 1);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,108,ya = ya * a + coeffs[i] / (i + 1);
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,110,return yb * b - ya * a;
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,113,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,114,return new TestSuite(LegendreGaussIntegratorTest.class);

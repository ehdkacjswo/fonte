is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,153,* Returns the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,154,* as a vector.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,156,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,157,* @return row vector
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,158,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,160,RealVector getRowVector(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,163,* Returns the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,164,* as a column vector.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,166,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,167,* @return column vector
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,168,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,170,RealVector getColumnVector(int column) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,279,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,281,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,282,* @return this*v
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,283,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,285,RealVector operate(RealVector v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,297,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,299,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,300,* @return v*this
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,301,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,303,RealVector preMultiply(RealVector v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,317,* Returns the solution vector for a linear system with coefficient
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,318,* matrix = this and constant vector = <code>b</code>.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,320,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,321,"* @return vector of solution values to AX = b, where A is *this"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,322,* @throws IllegalArgumentException if this.rowDimension != b.length
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,323,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,325,"RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,55,rivate static final long serialVersionUID = -4828886979278117018L;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,55,private static final long serialVersionUID = 4970229902484487012L;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,603,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,604,public RealVector getColumnVector(int column) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,605,"return new RealVectorImpl(getColumn(column), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,608,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,609,public RealVector getRowVector(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,610,"return new RealVectorImpl(getRow(row), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,801,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,802,public RealVector operate(RealVector v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,803,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,804,return operate((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,805,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,806,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,807,final int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,808,if (v.getDimension() != nCols) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,809,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,811,final double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,812,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,813,final double[] dataRow = data[row];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,814,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,815,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,816,sum += dataRow[i] * v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,818,out[row] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,820,"return new RealVectorImpl(out, false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,825,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,827,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,828,* @return this*v
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,829,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,831,public RealVectorImpl operate(RealVectorImpl v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,832,"return new RealVectorImpl(operate(v.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,857,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,858,public RealVector preMultiply(RealVector v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,859,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,860,return preMultiply((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,861,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,862,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,863,if (v.getDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,864,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,866,final int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,867,final double[] out = new double[nCols];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,868,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,869,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,870,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,871,sum += data[i][col] * v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,873,out[col] = sum;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,875,"return new RealVectorImpl(out, false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,880,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,882,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,883,* @return v*this
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,884,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,886,RealVectorImpl preMultiply(RealVectorImpl v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,887,"return new RealVectorImpl(preMultiply(v.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,904,final int nCol  = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,829,inal RealMatrix bMatrix = new RealMatrixImpl(b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,830,inal double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,831,inal double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,909,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,910,"throw new InvalidMatrixException(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,912,if (isSingular()) { // side effect: compute LU decomp
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,913,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,916,final double[] bp = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,918,// Apply permutations to b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,833,ut[row] = solution[row][0];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,920,bp[row] = b[permutation[row]];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,835,eturn out;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,923,// Solve LY = b
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,924,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,925,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,926,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,930,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,931,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,932,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,933,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,934,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,938,return bp;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,942,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,943,public RealVector solve(RealVector b)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,944,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,945,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,946,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,947,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,949,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,950,final int nCol  = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,952,if (b.getDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,953,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,955,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,956,"throw new InvalidMatrixException(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,958,if (isSingular()) { // side effect: compute LU decomp
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,959,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,962,final double[] bp = new double[nRows];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,964,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,965,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,966,bp[row] = b.getEntry(permutation[row]);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,969,// Solve LY = b
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,970,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,971,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,972,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,976,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,977,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,978,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,979,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,980,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,984,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,990,* Returns the solution vector for a linear system with coefficient
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,991,* matrix = this and constant vector = <code>b</code>.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,993,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,994,"* @return vector of solution values to AX = b, where A is *this"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,995,* @throws IllegalArgumentException if this.rowDimension != b.length
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,996,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,998,RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,999,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1000,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1033,final int pRow = permutation[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,869,"pRow[col] = b.getEntry(permutation[row], col);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1035,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1041,final double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,877,inal double[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1044,final double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,879,pI[j] -= bp[col][j] * luI[col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1046,bpI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,893,inal double[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1060,final double luICol = lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,895,pI[j] -= bp[col][j] * luI[col];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,1062,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,20,* Interface defining a real-valued vector with basic algebraic operations.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,21,* <p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,22,"* vector element indexing is 0-based -- e.g., <code>getEntry(0)</code>"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,23,* returns the first element of the vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,24,* </p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,25,* <p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,26,* The various <code>mapXxx</code> and <code>mapXxxToSelf</code> methods operate
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,27,"* on vectors element-wise, i.e. they perform the same operation (adding a scalar,"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,28,* applying a function ...) on each element in turn. The <code>mapXxx</code>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,29,* versions create a new vector to hold the result and do not change the instance.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,30,* The <code>mapXxxToSelf</code> versions use the instance itself to store the
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,31,"* results, so the instance is changed by these methods. In both cases, the result"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,32,"* vector is returned by the methods, this allows to use the <i>fluent API</i>"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,33,"* style, like this:"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,34,* </p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,35,* <pre>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,36,*   RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,37,* </pre>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,39,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,40,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,42,public interface RealVector {
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,45,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,46,* @return vector copy
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,48,RealVector copy();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,51,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,52,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,53,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,54,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,56,RealVector add(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,57,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,60,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,61,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,62,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,63,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,65,RealVector subtract(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,66,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,69,* Map an addition operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,70,* @param d value to be added to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,71,* @return this + d
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,73,RealVector mapAdd(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,76,* Map an addition operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,77,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,78,* @param d value to be added to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,79,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,81,RealVector mapAddToSelf(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,84,* Map a subtraction operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,85,* @param d value to be subtracted to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,86,* @return this - d
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,88,RealVector mapSubtract(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,91,* Map a subtraction operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,92,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,93,* @param d value to be subtracted to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,94,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,96,RealVector mapSubtractToSelf(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,99,* Map a multiplication operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,100,* @param d value to multiply all entries by
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,101,* @return this * d
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,103,RealVector mapMultiply(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,106,* Map a multiplication operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,107,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,108,* @param d value to multiply all entries by
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,109,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,111,RealVector mapMultiplyToSelf(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,114,* Map a division operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,115,* @param d value to divide all entries by
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,116,* @return this / d
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,118,RealVector mapDivide(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,121,* Map a division operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,122,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,123,* @param d value to divide all entries by
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,124,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,126,RealVector mapDivideToSelf(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,129,* Map a power operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,130,* @param d value to raise all entries to
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,131,* @return this ^ d
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,133,RealVector mapPow(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,136,* Map a power operation to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,137,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,138,* @param d value to raise all entries to
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,139,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,141,RealVector mapPowToSelf(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,144,* Map the {@link Math#exp(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,145,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,147,RealVector mapExp();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,150,* Map the {@link Math#exp(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,151,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,152,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,154,RealVector mapExpToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,157,* Map the {@link Math#expm1(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,158,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,160,RealVector mapExpm1();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,163,* Map the {@link Math#expm1(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,164,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,165,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,167,RealVector mapExpm1ToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,170,* Map the {@link Math#log(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,171,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,173,RealVector mapLog();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,176,* Map the {@link Math#log(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,177,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,178,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,180,RealVector mapLogToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,183,* Map the {@link Math#log10(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,184,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,186,RealVector mapLog10();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,189,* Map the {@link Math#log10(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,190,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,191,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,193,RealVector mapLog10ToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,196,* Map the {@link Math#log1p(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,197,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,199,RealVector mapLog1p();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,202,* Map the {@link Math#log1p(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,203,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,204,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,206,RealVector mapLog1pToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,209,* Map the {@link Math#cosh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,210,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,212,RealVector mapCosh();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,215,* Map the {@link Math#cosh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,216,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,217,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,219,RealVector mapCoshToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,222,* Map the {@link Math#sinh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,223,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,225,RealVector mapSinh();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,228,* Map the {@link Math#sinh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,229,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,230,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,232,RealVector mapSinhToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,235,* Map the {@link Math#tanh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,236,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,238,RealVector mapTanh();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,241,* Map the {@link Math#tanh(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,242,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,243,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,245,RealVector mapTanhToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,248,* Map the {@link Math#cos(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,249,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,251,RealVector mapCos();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,254,* Map the {@link Math#cos(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,255,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,256,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,258,RealVector mapCosToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,261,* Map the {@link Math#sin(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,262,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,264,RealVector mapSin();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,267,* Map the {@link Math#sin(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,268,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,269,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,271,RealVector mapSinToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,274,* Map the {@link Math#tan(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,275,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,277,RealVector mapTan();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,280,* Map the {@link Math#tan(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,281,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,282,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,284,RealVector mapTanToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,287,* Map the {@link Math#acos(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,288,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,290,RealVector mapAcos();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,293,* Map the {@link Math#acos(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,294,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,295,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,297,RealVector mapAcosToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,300,* Map the {@link Math#asin(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,301,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,303,RealVector mapAsin();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,306,* Map the {@link Math#asin(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,307,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,308,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,310,RealVector mapAsinToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,313,* Map the {@link Math#atan(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,314,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,316,RealVector mapAtan();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,319,* Map the {@link Math#atan(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,320,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,321,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,323,RealVector mapAtanToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,326,* Map the 1/x function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,327,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,329,RealVector mapInv();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,332,* Map the 1/x function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,333,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,334,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,336,RealVector mapInvToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,339,* Map the {@link Math#abs(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,340,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,342,RealVector mapAbs();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,345,* Map the {@link Math#abs(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,346,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,347,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,349,RealVector mapAbsToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,352,* Map the {@link Math#sqrt(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,353,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,355,RealVector mapSqrt();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,358,* Map the {@link Math#sqrt(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,359,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,360,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,362,RealVector mapSqrtToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,365,* Map the {@link Math#cbrt(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,366,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,368,RealVector mapCbrt();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,371,* Map the {@link Math#cbrt(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,372,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,373,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,375,RealVector mapCbrtToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,378,* Map the {@link Math#ceil(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,379,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,381,RealVector mapCeil();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,384,* Map the {@link Math#ceil(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,385,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,386,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,388,RealVector mapCeilToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,391,* Map the {@link Math#floor(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,392,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,394,RealVector mapFloor();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,397,* Map the {@link Math#floor(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,398,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,399,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,401,RealVector mapFloorToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,404,* Map the {@link Math#rint(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,405,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,407,RealVector mapRint();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,410,* Map the {@link Math#rint(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,411,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,412,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,414,RealVector mapRintToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,417,* Map the {@link Math#signum(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,418,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,420,RealVector mapSignum();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,423,* Map the {@link Math#signum(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,424,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,425,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,427,RealVector mapSignumToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,430,* Map the {@link Math#ulp(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,431,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,433,RealVector mapUlp();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,436,* Map the {@link Math#ulp(double)} function to each entry.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,437,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,438,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,440,RealVector mapUlpToSelf();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,443,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,444,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,445,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,446,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,448,public RealVector ebeMultiply(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,449,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,452,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,453,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,454,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,455,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,457,public RealVector ebeDivide(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,458,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,461,* Returns vector entries as a double array.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,462,* @return double array of entries
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,464,double[] getData();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,467,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,468,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,469,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,470,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,472,double dotProduct(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,473,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,476,* Returns the L<sub>2</sub> norm of the vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,477,* <p>The L<sub>2</sub> norm is the root of the sum of
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,478,* the squared elements.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,479,* @return norm
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,480,* @see #getL1Norm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,481,* @see #getLInfNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,482,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,484,double getNorm();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,487,* Returns the L<sub>1</sub> norm of the vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,488,* <p>The L<sub>1</sub> norm is the sum of the absolute
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,489,* values of elements.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,490,* @return norm
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,491,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,492,* @see #getLInfNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,493,* @see #getL1Distance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,495,double getL1Norm();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,498,* Returns the L<sub>&infty;</sub> norm of the vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,499,* <p>The L<sub>&infty;</sub> norm is the max of the absolute
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,500,* values of elements.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,501,* @return norm
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,502,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,503,* @see #getL1Norm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,504,* @see #getLInfDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,506,double getLInfNorm();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,509,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,510,* <p>This method computes the distance consistent with the
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,511,"* L<sub>2</sub> norm, i.e. the square root of the sum of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,512,"* elements differences, or euclidian distance.</p>"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,513,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,514,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,515,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,516,* @see #getL1Distance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,517,* @see #getLInfDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,518,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,520,double getDistance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,521,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,524,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,525,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,526,"* L<sub>1</sub> norm, i.e. the sum of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,527,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,528,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,529,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,530,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,531,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,532,* @see #getLInfDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,533,* @see #getL1Norm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,535,double getL1Distance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,536,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,539,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,540,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,541,"* L<sub>&infty;</sub> norm, i.e. the max of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,542,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,543,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,544,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,545,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,546,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,547,* @see #getL1Distance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,548,* @see #getLInfNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,550,double getLInfDistance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,551,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,553,/** Creates a unit vector pointing in the direction of this vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,554,* <p>The instance is not changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,555,* @return a unit vector pointing in direction of this vector
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,556,* @exception ArithmeticException if the norm is null
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,558,RealVector unitVector();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,560,/** Converts this vector into a unit vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,561,* <p>The instance itself is changed by this method.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,562,* @exception ArithmeticException if the norm is null
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,564,void unitize();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,566,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,567,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,568,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,569,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,571,RealVector projection(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,572,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,575,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,576,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,577,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,578,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,580,RealMatrix outerProduct(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,581,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,584,* Returns the entry in the specified index.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,585,* <p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,586,"* The index start at 0 and must be lesser than the size,"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,587,* otherwise a {@link MatrixIndexException} is thrown.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,588,* </p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,589,* @param index  index location of entry to be fetched
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,590,* @return vector entry at index
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,591,* @throws MatrixIndexException if the index is not valid
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,593,double getEntry(int index)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,594,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,597,* Returns the size of the vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,598,* @return size
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,600,int getDimension();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,603,* Construct a vector by appending a vector to this vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,604,* @param v vector to append to this one.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,605,* @return a new vector
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,607,RealVector append(RealVector v);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,610,* Construct a vector by appending a double to this vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,611,* @param d double to append.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,612,* @return a new vector
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,614,RealVector append(double d);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,617,* Construct a vector by appending a double array to this vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,618,* @param a double array to append.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,619,* @return a new vector
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,621,RealVector append(double[] a);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,624,* Get a subvector from consecutive elements.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,625,* @param index index of first element.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,626,* @param n number of elements to be retrieved.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,627,* @return a vector containing n elements.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,628,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,629,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,631,"RealVector get(int index, int n)"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,632,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,635,* Set a single element.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,636,* @param index element index.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,637,* @param value new value for the element.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,638,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,639,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,641,"void set(int index, double value)"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,642,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,645,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,646,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,647,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,648,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,649,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,651,"void set(int index, RealVector v)"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,652,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,655,* Set all elements to a single value.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,656,* @param value single value to set for all elements
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,658,void set(double value);
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,661,* Convert the vector to a double array.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,662,"* <p>The array is independent from vector data, it's elements"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,663,* are copied.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,664,* @return array containing a copy of vector elements
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,666,double[] toArray();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,669,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,670,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,672,public boolean isNaN();
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,675,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,676,* false otherwise
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,677,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,678,* false otherwise
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,680,public boolean isInfinite();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,20,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,21,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,22,import java.text.ParseException;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,23,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,24,import java.util.ArrayList;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,25,import java.util.List;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,26,import java.util.Locale;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,28,import org.apache.commons.math.util.CompositeFormat;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,31,"* Formats a vector in components list format ""{v0; v1; ...; vk-1}""."
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,32,"* <p>The prefix and suffix ""{"" and ""}"" and the separator ""; "" can be replaced by"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,33,* any user-defined strings. The number format for components can be configured.</p>
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,34,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,35,* or separator specifications. So even if the default separator does include a space
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,36,"* character that is used at format time, both input string ""{1;1;1}"" and"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,37,"* "" { 1 ; 1 ; 1 } "" will be parsed without error and the same vector will be"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,38,"* returned. In the second case, however, the parse position after parsing will be"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,39,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,41,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,42,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,44,public class RealVectorFormat extends CompositeFormat {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,46,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,47,private static final long serialVersionUID = -708767813036157690L;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,49,"/** The default prefix: ""{"". */"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,50,"private static final String DEFAULT_PREFIX = ""{"";"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,52,"/** The default suffix: ""}"". */"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,53,"private static final String DEFAULT_SUFFIX = ""}"";"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,55,"/** The default separator: "", "". */"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,56,"private static final String DEFAULT_SEPARATOR = ""; "";"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,58,/** Prefix. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,59,private final String prefix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,61,/** Suffix. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,62,private final String suffix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,64,/** Separator. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,65,private final String separator;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,67,/** Trimmed prefix. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,68,private final String trimmedPrefix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,70,/** Trimmed suffix. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,71,private final String trimmedSuffix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,73,/** Trimmed separator. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,74,private final String trimmedSeparator;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,76,/** The format used for components. */
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,77,private NumberFormat format;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,80,* Create an instance with default settings.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,81,"* <p>The instance uses the default prefix, suffix and separator:"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,82,"* ""{"", ""}"", and ""; "" and the default number format for components.</p>"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,84,public RealVectorFormat() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,85,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,89,* Create an instance with a custom number format for components.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,90,* @param format the custom format for components.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,92,public RealVectorFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,93,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,97,"* Create an instance with custom prefix, suffix and separator."
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,98,"* @param prefix prefix to use instead of the default ""{"""
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,99,"* @param suffix suffix to use instead of the default ""}"""
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,100,"* @param separator separator to use instead of the default ""; """
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,102,"public RealVectorFormat(final String prefix, final String suffix,"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,103,final String separator) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,104,"this(prefix, suffix, separator, getDefaultNumberFormat());"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,108,"* Create an instance with custom prefix, suffix, separator and format"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,109,* for components.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,110,"* @param prefix prefix to use instead of the default ""{"""
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,111,"* @param suffix suffix to use instead of the default ""}"""
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,112,"* @param separator separator to use instead of the default ""; """
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,113,* @param format the custom format for components.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,115,"public RealVectorFormat(final String prefix, final String suffix,"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,116,"final String separator, final NumberFormat format) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,117,this.prefix      = prefix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,118,this.suffix      = suffix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,119,this.separator   = separator;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,120,trimmedPrefix    = prefix.trim();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,121,trimmedSuffix    = suffix.trim();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,122,trimmedSeparator = separator.trim();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,123,this.format      = format;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,127,* Get the set of locales for which real vectors formats are available.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,128,* <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,129,* @return available real vector format locales.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,131,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,132,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,136,* Get the format prefix.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,137,* @return format prefix.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,139,public String getPrefix() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,140,return prefix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,144,* Get the format suffix.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,145,* @return format suffix.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,147,public String getSuffix() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,148,return suffix;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,152,* Get the format separator between components.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,153,* @return format separator.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,155,public String getSeparator() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,156,return separator;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,160,* Get the components format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,161,* @return components format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,163,public NumberFormat getFormat() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,164,return format;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,168,* Returns the default real vector format for the current locale.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,169,* @return the default real vector format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,171,public static RealVectorFormat getInstance() {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,172,return getInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,176,* Returns the default real vector format for the given locale.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,177,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,178,* @return the real vector format specific to the given locale.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,180,public static RealVectorFormat getInstance(final Locale locale) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,181,return new RealVectorFormat(getDefaultNumberFormat(locale));
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,185,* This static method calls {@link #format(Object)} on a default instance of
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,186,* RealVectorFormat.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,188,* @param v RealVector object to format
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,189,* @return A formatted vector
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,191,public static String formatRealVector(RealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,192,return getInstance().format(v);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,196,* Formats a {@link RealVector} object to produce a string.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,197,* @param vector the object to format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,198,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,199,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,200,*            offsets of the alignment field
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,201,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,203,"public StringBuffer format(RealVector vector, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,204,FieldPosition pos) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,206,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,207,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,209,// format prefix
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,210,toAppendTo.append(prefix);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,212,// format components
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,213,for (int i = 0; i < vector.getDimension(); ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,214,if (i > 0) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,215,toAppendTo.append(separator);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,217,"formatDouble(vector.getEntry(i), format, toAppendTo, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,220,// format suffix
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,221,toAppendTo.append(suffix);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,223,return toAppendTo;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,228,* Formats a object to produce a string.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,229,* <p><code>obj</code> must be a  {@link RealVector} object. Any other type of
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,230,* object will result in an {@link IllegalArgumentException} being thrown.</p>
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,231,* @param obj the object to format.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,232,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,233,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,234,*            offsets of the alignment field
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,235,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,236,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,237,* @throws IllegalArgumentException is <code>obj</code> is not a valid type.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,239,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,240,FieldPosition pos) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,242,if (obj instanceof RealVector) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,243,"return format( (RealVector)obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,246,"throw new IllegalArgumentException(""Cannot format given Object as a RealVector"");"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,251,* Parses a string to produce a {@link RealVector} object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,252,* @param source the string to parse
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,253,* @return the parsed {@link RealVector} object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,254,* @exception ParseException if the beginning of the specified string
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,255,*            cannot be parsed.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,257,public RealVectorImpl parse(String source) throws ParseException {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,258,ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,259,"RealVectorImpl result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,260,if (parsePosition.getIndex() == 0) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,261,"throw new ParseException(""Unparseable real vector: \"""" + source +"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,262,"""\"""", parsePosition.getErrorIndex());"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,264,return result;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,268,* Parses a string to produce a {@link RealVector} object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,269,* @param source the string to parse
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,270,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,271,* @return the parsed {@link RealVector} object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,273,"public RealVectorImpl parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,274,int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,276,// parse prefix
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,277,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,278,"if (!parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,279,return null;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,282,// parse components
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,283,List<Number> components = new ArrayList<Number>();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,284,for (boolean loop = true; loop;){
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,286,if (!components.isEmpty()) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,287,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,288,"if (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,289,loop = false;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,293,if (loop) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,294,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,295,"Number component = parseNumber(source, format, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,296,if (component != null) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,297,components.add(component);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,298,} else {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,299,// invalid component
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,300,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,301,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,302,return null;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,308,// parse suffix
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,309,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,310,"if (!parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,311,return null;
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,314,// build vector
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,315,double[] data = new double[components.size()];
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,316,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,317,data[i] = components.get(i).doubleValue();
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,319,"return new RealVectorImpl(data, false);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,324,* Parses a string to produce a object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,325,* @param source the string to parse
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,326,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,327,* @return the parsed object.
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,328,"* @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,330,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,331,"return parse(source, pos);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,25,* This class implements the {@link RealVector} interface with a double array.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,27,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,29,"public class RealVectorImpl implements RealVector, Serializable {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,32,private static final long serialVersionUID = 7838747548772166404L;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,34,/** Default format. */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,35,private static final RealVectorFormat DEFAULT_FORMAT =
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,36,RealVectorFormat.getInstance();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,38,/** Entries of the vector. */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,39,protected double data[];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,42,* Build a 0-length vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,43,* <p>Zero-length vectors may be used to initialized construction of vectors
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,44,* by data gathering. We start with zero-length and use either the {@link
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,45,"* #RealVectorImpl(RealVectorImpl, RealVectorImpl)} constructor"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,46,"* or one of the <code>append</code> method ({@link #append(double)}, {@link"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,47,"* #append(double[])}, {@link #append(RealVectorImpl)}) to gather data"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,48,* into this vector.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,50,public RealVectorImpl() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,51,data = new double[0];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,55,* Construct a (size)-length vector of zeros.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,56,* @param size size of the vector
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,58,public RealVectorImpl(int size) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,59,data = new double[size];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,63,* Construct an (size)-length vector with preset values.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,64,* @param size size of the vector
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,65,* @param preset fill the vector with this scalar value
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,67,"public RealVectorImpl(int size, double preset) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,68,data = new double[size];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,69,"Arrays.fill(data, preset);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,73,"* Construct a vector from an array, copying the input array."
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,74,* @param d array of doubles.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,76,public RealVectorImpl(double[] d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,77,data = d.clone();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,81,* Create a new RealVectorImpl using the input array as the underlying
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,82,* data array.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,83,* <p>If an array is built specially in order to be embedded in a
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,84,"* RealVectorImpl and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,85,* set to <code>false</code. This will prevent the copying and improve
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,86,* performance as no new array will be built and no data will be copied.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,87,* @param d data for new vector
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,88,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,89,* it will be referenced
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,90,* @throws IllegalArgumentException if <code>d</code> is empty
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,91,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,92,* @see #RealVectorImpl(double[])
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,94,"public RealVectorImpl(double[] d, boolean copyArray)"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,95,"throws NullPointerException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,96,if (d == null) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,97,throw new NullPointerException();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,99,if (d.length == 0) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,100,"throw new IllegalArgumentException(""Vector must have at least one element."");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,102,data = copyArray ? d.clone() :  d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,106,* Construct a vector from part of a array.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,107,* @param d array of doubles.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,108,* @param pos position of first entry
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,109,* @param size number of entries to copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,111,"public RealVectorImpl(double[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,112,if (d.length < pos + size) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,113,"throw new IllegalArgumentException(""Position "" + pos + "" and size "" + size +"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,114,""" don't fit to the size of the input array "" +"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,115,d.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,117,data = new double[size];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,118,"System.arraycopy(d, pos, data, 0, size);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,122,* Construct a vector from an array.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,123,* @param d array of Doubles.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,125,public RealVectorImpl(Double[] d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,126,data = new double[d.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,127,for (int i = 0; i < d.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,128,data[i] = d[i].doubleValue();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,133,* Construct a vector from part of a Double array
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,134,* @param d array of Doubles.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,135,* @param pos position of first entry
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,136,* @param size number of entries to copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,138,"public RealVectorImpl(Double[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,139,if (d.length < pos + size) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,140,"throw new IllegalArgumentException(""Position "" + pos + "" and size "" + size +"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,141,""" don't fit to the size of the input array "" +"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,142,d.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,144,data = new double[size];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,145,for (int i = pos; i < pos + size; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,146,data[i-pos] = d[i].doubleValue();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,151,"* Construct a vector from another vector, using a deep copy."
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,152,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,154,public RealVectorImpl(RealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,155,data = new double[v.getDimension()];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,156,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,157,data[i] = v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,162,"* Construct a vector from another vector, using a deep copy."
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,163,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,165,public RealVectorImpl(RealVectorImpl v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,166,data = v.data.clone();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,170,* Construct a vector from another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,171,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,172,* @param deep if true perform a deep copy otherwise perform a shallow copy
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,174,"public RealVectorImpl(RealVectorImpl v, boolean deep) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,175,data = deep ? v.data.clone() : v.data;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,179,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,180,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,181,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,183,"public RealVectorImpl(RealVectorImpl v1, RealVectorImpl v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,184,data = new double[v1.data.length + v2.data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,185,"System.arraycopy(v1.data, 0, data, 0, v1.data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,186,"System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,189,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,190,public RealVector copy() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,191,"return new RealVectorImpl(this, true);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,194,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,195,public RealVector add(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,196,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,197,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,198,return add((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,199,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,200,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,201,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,202,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,203,out[i] = data[i] + v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,205,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,210,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,211,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,212,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,213,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,215,public RealVectorImpl add(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,216,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,217,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,218,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,219,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,220,out[i] = data[i] + v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,222,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,225,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,226,public RealVector subtract(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,227,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,228,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,229,return subtract((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,230,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,231,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,232,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,233,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,234,out[i] = data[i] - v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,236,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,241,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,242,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,243,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,244,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,246,public RealVectorImpl subtract(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,247,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,248,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,249,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,250,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,251,out[i] = data[i] - v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,253,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,256,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,257,public RealVector mapAdd(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,258,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,259,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,260,out[i] = data[i] + d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,262,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,265,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,266,public RealVector mapAddToSelf(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,267,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,268,data[i] = data[i] + d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,270,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,273,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,274,public RealVector mapSubtract(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,275,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,276,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,277,out[i] = data[i] - d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,279,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,282,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,283,public RealVector mapSubtractToSelf(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,284,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,285,data[i] = data[i] - d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,287,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,290,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,291,public RealVector mapMultiply(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,292,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,293,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,294,out[i] = data[i] * d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,296,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,299,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,300,public RealVector mapMultiplyToSelf(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,301,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,302,data[i] = data[i] * d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,304,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,307,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,308,public RealVector mapDivide(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,309,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,310,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,311,out[i] = data[i] / d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,313,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,316,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,317,public RealVector mapDivideToSelf(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,318,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,319,data[i] = data[i] / d;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,321,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,324,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,325,public RealVector mapPow(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,326,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,327,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,328,"out[i] = Math.pow(data[i], d);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,330,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,333,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,334,public RealVector mapPowToSelf(double d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,335,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,336,"data[i] = Math.pow(data[i], d);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,338,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,341,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,342,public RealVector mapExp() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,343,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,344,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,345,out[i] = Math.exp(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,347,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,350,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,351,public RealVector mapExpToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,352,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,353,data[i] = Math.exp(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,355,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,358,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,359,public RealVector mapExpm1() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,360,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,361,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,362,out[i] = Math.expm1(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,364,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,367,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,368,public RealVector mapExpm1ToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,369,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,370,data[i] = Math.expm1(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,372,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,375,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,376,public RealVector mapLog() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,377,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,378,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,379,out[i] = Math.log(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,381,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,384,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,385,public RealVector mapLogToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,386,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,387,data[i] = Math.log(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,389,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,392,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,393,public RealVector mapLog10() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,394,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,395,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,396,out[i] = Math.log10(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,398,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,401,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,402,public RealVector mapLog10ToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,403,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,404,data[i] = Math.log10(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,406,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,409,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,410,public RealVector mapLog1p() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,411,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,412,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,413,out[i] = Math.log1p(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,415,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,418,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,419,public RealVector mapLog1pToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,420,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,421,data[i] = Math.log1p(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,423,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,426,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,427,public RealVector mapCosh() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,428,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,429,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,430,out[i] = Math.cosh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,432,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,435,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,436,public RealVector mapCoshToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,437,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,438,data[i] = Math.cosh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,440,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,443,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,444,public RealVector mapSinh() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,445,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,446,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,447,out[i] = Math.sinh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,449,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,452,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,453,public RealVector mapSinhToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,454,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,455,data[i] = Math.sinh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,457,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,460,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,461,public RealVector mapTanh() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,462,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,463,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,464,out[i] = Math.tanh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,466,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,469,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,470,public RealVector mapTanhToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,471,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,472,data[i] = Math.tanh(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,474,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,477,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,478,public RealVector mapCos() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,479,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,480,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,481,out[i] = Math.cos(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,483,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,486,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,487,public RealVector mapCosToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,488,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,489,data[i] = Math.cos(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,491,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,494,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,495,public RealVector mapSin() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,496,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,497,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,498,out[i] = Math.sin(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,500,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,503,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,504,public RealVector mapSinToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,505,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,506,data[i] = Math.sin(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,508,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,511,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,512,public RealVector mapTan() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,513,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,514,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,515,out[i] = Math.tan(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,517,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,520,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,521,public RealVector mapTanToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,522,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,523,data[i] = Math.tan(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,525,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,528,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,529,public RealVector mapAcos() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,530,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,531,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,532,out[i] = Math.acos(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,534,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,537,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,538,public RealVector mapAcosToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,539,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,540,data[i] = Math.acos(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,542,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,545,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,546,public RealVector mapAsin() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,547,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,548,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,549,out[i] = Math.asin(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,551,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,554,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,555,public RealVector mapAsinToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,556,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,557,data[i] = Math.asin(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,559,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,562,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,563,public RealVector mapAtan() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,564,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,565,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,566,out[i] = Math.atan(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,568,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,571,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,572,public RealVector mapAtanToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,573,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,574,data[i] = Math.atan(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,576,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,579,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,580,public RealVector mapInv() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,581,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,582,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,583,out[i] = 1.0 / data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,585,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,588,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,589,public RealVector mapInvToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,590,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,591,data[i] = 1.0 / data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,593,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,596,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,597,public RealVector mapAbs() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,598,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,599,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,600,out[i] = Math.abs(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,602,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,605,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,606,public RealVector mapAbsToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,607,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,608,data[i] = Math.abs(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,610,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,613,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,614,public RealVector mapSqrt() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,615,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,616,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,617,out[i] = Math.sqrt(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,619,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,622,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,623,public RealVector mapSqrtToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,624,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,625,data[i] = Math.sqrt(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,627,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,630,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,631,public RealVector mapCbrt() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,632,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,633,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,634,out[i] = Math.cbrt(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,636,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,639,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,640,public RealVector mapCbrtToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,641,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,642,data[i] = Math.cbrt(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,644,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,647,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,648,public RealVector mapCeil() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,649,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,650,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,651,out[i] = Math.ceil(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,653,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,656,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,657,public RealVector mapCeilToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,658,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,659,data[i] = Math.ceil(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,661,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,664,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,665,public RealVector mapFloor() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,666,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,667,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,668,out[i] = Math.floor(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,670,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,673,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,674,public RealVector mapFloorToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,675,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,676,data[i] = Math.floor(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,678,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,681,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,682,public RealVector mapRint() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,683,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,684,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,685,out[i] = Math.rint(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,687,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,690,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,691,public RealVector mapRintToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,692,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,693,data[i] = Math.rint(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,695,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,698,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,699,public RealVector mapSignum() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,700,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,701,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,702,out[i] = Math.signum(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,704,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,707,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,708,public RealVector mapSignumToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,709,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,710,data[i] = Math.signum(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,712,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,715,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,716,public RealVector mapUlp() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,717,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,718,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,719,out[i] = Math.ulp(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,721,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,724,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,725,public RealVector mapUlpToSelf() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,726,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,727,data[i] = Math.ulp(data[i]);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,729,return this;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,732,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,733,public RealVector ebeMultiply(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,734,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,735,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,736,return ebeMultiply((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,737,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,738,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,739,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,740,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,741,out[i] = data[i] * v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,743,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,748,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,749,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,750,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,751,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,753,public RealVectorImpl ebeMultiply(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,754,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,755,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,756,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,757,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,758,out[i] = data[i] * v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,760,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,763,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,764,public RealVector ebeDivide(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,765,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,766,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,767,return ebeDivide((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,768,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,769,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,770,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,771,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,772,out[i] = data[i] / v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,774,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,779,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,780,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,781,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,782,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,784,public RealVectorImpl ebeDivide(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,785,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,786,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,787,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,788,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,789,out[i] = data[i] / v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,791,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,794,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,795,public double[] getData() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,796,return data.clone();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,800,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,801,* <p>Does not make a fresh copy of the underlying data.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,802,* @return array of entries
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,804,public double[] getDataRef() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,805,return data;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,808,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,809,public double dotProduct(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,810,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,811,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,812,return dotProduct((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,813,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,814,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,815,double dot = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,816,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,817,dot += data[i] * v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,819,return dot;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,824,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,825,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,826,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,827,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,829,public double dotProduct(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,830,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,831,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,832,double dot = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,833,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,834,dot += data[i] * v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,836,return dot;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,839,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,840,public double getNorm() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,841,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,842,for (double a : data) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,843,sum += a * a;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,845,return Math.sqrt(sum);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,848,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,849,public double getL1Norm() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,850,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,851,for (double a : data) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,852,sum += Math.abs(a);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,854,return sum;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,857,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,858,public double getLInfNorm() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,859,double max = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,860,for (double a : data) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,861,"max += Math.max(max, Math.abs(a));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,863,return max;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,866,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,867,public double getDistance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,868,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,869,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,870,return getDistance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,871,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,872,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,873,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,874,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,875,final double delta = data[i] - v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,876,sum += delta * delta;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,878,return Math.sqrt(sum);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,883,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,884,* <p>This method computes the distance consistent with the
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,885,"* L<sub>2</sub> norm, i.e. the square root of the sum of"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,886,"* elements differences, or euclidian distance.</p>"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,887,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,888,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,889,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,890,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,891,* @see #getL1Distance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,892,* @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,893,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,895,public double getDistance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,896,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,897,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,898,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,899,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,900,final double delta = data[i] - v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,901,sum += delta * delta;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,903,return Math.sqrt(sum);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,906,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,907,public double getL1Distance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,908,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,909,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,910,return getL1Distance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,911,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,912,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,913,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,914,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,915,final double delta = data[i] - v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,916,sum += Math.abs(delta);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,918,return sum;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,923,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,924,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,925,"* L<sub>1</sub> norm, i.e. the sum of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,926,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,927,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,928,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,929,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,930,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,931,* @see #getL1Distance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,932,* @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,933,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,935,public double getL1Distance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,936,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,937,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,938,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,939,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,940,final double delta = data[i] - v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,941,sum += Math.abs(delta);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,943,return sum;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,946,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,947,public double getLInfDistance(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,948,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,949,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,950,return getLInfDistance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,951,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,952,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,953,double max = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,954,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,955,final double delta = data[i] - v.getEntry(i);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,956,"max = Math.max(max, Math.abs(delta));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,958,return max;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,963,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,964,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,965,"* L<sub>&infty;</sub> norm, i.e. the max of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,966,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,967,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,968,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,969,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,970,* @see #getDistance(RealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,971,* @see #getL1Distance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,972,* @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,973,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,975,public double getLInfDistance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,976,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,977,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,978,double max = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,979,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,980,final double delta = data[i] - v.data[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,981,"max = Math.max(max, Math.abs(delta));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,983,return max;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,986,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,987,public RealVector unitVector() throws ArithmeticException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,988,final double norm = getNorm();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,989,if (norm == 0) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,990,"throw new ArithmeticException(""null norm"");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,992,return mapDivide(getNorm());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,995,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,996,public void unitize() throws ArithmeticException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,997,final double norm = getNorm();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,998,if (norm == 0) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,999,"throw new ArithmeticException(""null norm"");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1001,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1002,data[i] /= norm;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1006,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1007,public RealVector projection(RealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1008,return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1011,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1012,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1013,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1014,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1016,public RealVectorImpl projection(RealVectorImpl v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1017,return (RealVectorImpl) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1020,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1021,public RealMatrix outerProduct(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1022,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1023,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1024,return outerProduct((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1025,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1026,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1027,double[][] out = new double[data.length][data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1028,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1029,for (int j = 0; j < data.length; j++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1030,out[i][j] = data[i] * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1033,return new RealMatrixImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1038,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1039,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1040,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1041,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1043,public RealMatrixImpl outerProduct(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1044,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1045,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1046,double[][] out = new double[data.length][data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1047,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1048,for (int j = 0; j < data.length; j++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1049,out[i][j] = data[i] * v.data[j];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1052,return new RealMatrixImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1055,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1056,public double getEntry(int index) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1057,return data[index];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1060,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1061,public int getDimension() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1062,return data.length;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1065,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1066,public RealVector append(RealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1067,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1068,return append((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1069,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1070,"return new RealVectorImpl(this,new RealVectorImpl(v));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1075,* Construct a vector by appending a vector to this vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1076,* @param v vector to append to this one.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1077,* @return a new vector
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1079,public RealVectorImpl append(RealVectorImpl v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1080,"return new RealVectorImpl(this, v);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1083,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1084,public RealVector append(double in) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1085,final double[] out = new double[data.length + 1];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1086,"System.arraycopy(data, 0, out, 0, data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1087,out[data.length] = in;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1088,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1091,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1092,public RealVector append(double[] in) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1093,final double[] out = new double[data.length + in.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1094,"System.arraycopy(data, 0, out, 0, data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1095,"System.arraycopy(in, 0, out, data.length, in.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1096,return new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1099,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1100,"public RealVector get(int index, int n) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1101,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1102,RealVectorImpl out = new RealVectorImpl(n);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1103,"System.arraycopy(data, index, out.data, 0, n);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1105,return out;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1106,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1107,throw new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1111,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1112,"public void set(int index, double value) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1113,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1114,data[index] = value;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1115,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1116,throw new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1120,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1121,"public void set(int index, RealVector v) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1122,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1123,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1124,"set(index, (RealVectorImpl) v);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1125,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1126,for (int i = index; i < index + v.getDimension(); ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1127,data[i] = v.getEntry(i-index);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1130,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1131,throw new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1136,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1138,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1139,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1140,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1141,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1143,"public void set(int index, RealVectorImpl v)"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1144,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1145,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1146,"System.arraycopy(v.data, 0, data, index, v.data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1147,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1148,throw new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1152,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1153,public void set(double value) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1154,"Arrays.fill(data, value);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1157,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1158,public double[] toArray(){
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1159,return data.clone();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1162,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1163,public String toString(){
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1164,return DEFAULT_FORMAT.format(this);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1168,* Check if instance and specified vectors have the same dimension.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1169,* @param v vector to compare instance with
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1170,* @exception IllegalArgumentException if the vectors do not
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1171,* have the same dimension
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1173,public void checkVectorDimensions(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1174,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1175,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1179,* Check if instance dimension is equal to some expected value.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1181,* @param n expected dimension.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1182,* @exception IllegalArgumentException if the dimension is
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1183,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1185,public void checkVectorDimensions(int n)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1186,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1187,if (data.length != n) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1188,"throw new IllegalArgumentException(""vector dimension is "" + data.length +"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1189,""", not "" + n + "" as expected"");"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1194,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1195,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1197,public boolean isNaN() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1198,for (double v : data) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1199,if (Double.isNaN(v)) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1200,return true;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1203,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1207,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1208,* false otherwise
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1209,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1210,* false otherwise
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1212,public boolean isInfinite() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1214,if (isNaN()) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1215,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1218,for (double v : data) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1219,if (Double.isInfinite(v)) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1220,return true;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1224,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1229,* Test for the equality of two real vectors.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1230,* <p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1231,"* If all coordinates of two real vectors are exactly the same, and none are"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1232,"* <code>Double.NaN</code>, the two real vectors are considered to be equal."
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1233,* </p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1234,* <p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1235,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1236,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1237,"* real vector are equal to <code>Double.NaN</code>, the real vector is equal to"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1238,* a vector with all <code>Double.NaN</code> coordinates.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1239,* </p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1241,* @param other Object to test for equality to this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1242,"* @return true if two 3D vector objects are equal, false if"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1243,"*         object is null, not an instance of Vector3D, or"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1244,*         not equal to this Vector3D instance
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1247,public boolean equals(Object other) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1249,if (this == other) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1250,return true;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1253,if (other == null) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1254,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1257,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1259,RealVector rhs = (RealVector) other;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1260,if (data.length != rhs.getDimension()) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1261,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1264,if (rhs.isNaN()) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1265,return this.isNaN();
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1268,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1269,if (Double.doubleToRawLongBits(data[i]) !=
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1270,Double.doubleToRawLongBits(rhs.getEntry(i))) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1271,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1274,return true;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1276,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1277,// ignore exception
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1278,return false;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1284,* Get a hashCode for the real vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1285,* <p>All NaN values have the same hash code.</p>
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1286,* @return a hash code value for this object
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1288,public int hashCode() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1289,if (isNaN()) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1290,return 9;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1292,return MathUtils.hash(data);
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,23,public class FrenchRealVectorFormatTest extends RealVectorFormatAbstractTest {
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,25,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,26,"return ',';"
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,29,protected Locale getLocale() {
True,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,src/test/org/apache/commons/math/linear/FrenchRealVectorFormatTest.java,30,return Locale.FRENCH;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,"ssertClose(""inverse-operate"",mInv.operate(testVector),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,257,".solve(testVector),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,"assertClose(""inverse-operate"", mInv.operate(testVector),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,257,"m.solve(testVector), normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,258,"assertClose(""inverse-operate"", mInv.operate(testVector),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,259,"m.solve(new RealVectorImpl(testVector)).getData(), normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,335,ouble[] x = m.operate(testVector);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,336,"ssertClose(""identity operate"",testVector,x,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,337,"assertClose(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,338,"m.operate(testVector), entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,339,"assertClose(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,340,"m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,371,"ssertClose(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,375,"assertClose(""premultiply"", m.preMultiply(testVector),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,376,"preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,377,"assertClose(""premultiply"", m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,378,"preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,618,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,619,RealMatrix m = new RealMatrixImpl(subTestData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,620,RealVector mRow0 = new RealVectorImpl(subRow0[0]);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,621,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,622,"assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,623,"assertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,624,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,625,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,626,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,627,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,628,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,630,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,631,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,632,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,633,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,634,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,638,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,639,RealMatrix m = new RealMatrixImpl(subTestData);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,640,RealVector mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,641,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,642,"assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,643,"assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,644,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,645,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,646,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,647,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,648,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,650,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,651,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,652,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,653,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,654,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,658,private RealVector columnToVector(double[][] column) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,659,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,660,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,661,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,663,"return new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,20,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,21,import java.text.ParseException;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,22,import java.text.ParsePosition;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,23,import java.util.Locale;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,27,import org.apache.commons.math.util.CompositeFormat;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,29,public abstract class RealVectorFormatAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,31,RealVectorFormat realVectorFormat = null;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,32,RealVectorFormat realVectorFormatSquare = null;
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,34,protected abstract Locale getLocale();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,36,protected abstract char getDecimalCharacter();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,38,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,39,realVectorFormat = RealVectorFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,40,final NumberFormat nf = NumberFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,41,nf.setMaximumFractionDigits(2);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,42,"realVectorFormatSquare = new RealVectorFormat(""["", ""]"", "" : "", nf);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,45,public void testSimpleNoDecimals() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,46,"RealVectorImpl c = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,47,"String expected = ""{1; 1; 1}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,48,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,49,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,52,public void testSimpleWithDecimals() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,53,"RealVectorImpl c = new RealVectorImpl(new double[] {1.23, 1.43, 1.63});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,54,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,55,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,56,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,57,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,58,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,59,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,60,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,63,public void testSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,64,"RealVectorImpl c = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,65,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,66,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,67,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,68,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,69,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,70,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,71,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,74,public void testNegativeX() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,75,"RealVectorImpl c = new RealVectorImpl(new double[] {-1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,76,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,77,"""{-1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,78,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,79,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,80,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,81,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,82,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,85,public void testNegativeY() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,86,"RealVectorImpl c = new RealVectorImpl(new double[] {1.2323, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,87,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,88,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,89,"""23; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,90,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,91,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,92,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,93,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,96,public void testNegativeZ() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,97,"RealVectorImpl c = new RealVectorImpl(new double[] {1.2323, 1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,98,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,99,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,100,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,101,"""43; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,102,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,103,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,104,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,107,public void testNonDefaultSetting() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,108,"RealVectorImpl c = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,109,"String expected = ""[1 : 1 : 1]"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,110,String actual = realVectorFormatSquare.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,111,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,114,public void testStaticFormatRealVectorImpl() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,115,Locale defaultLocal = Locale.getDefault();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,116,Locale.setDefault(getLocale());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,118,"RealVectorImpl c = new RealVectorImpl(new double[] {232.222, -342.33, 432.444});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,119,String expected =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,120,"""{232""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,121,"""22; -342"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,122,"""33; 432"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,123,"""44}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,124,String actual = RealVectorFormat.formatRealVector(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,125,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,127,Locale.setDefault(defaultLocal);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,130,public void testNan() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,131,"RealVectorImpl c = new RealVectorImpl(new double[] {Double.NaN, Double.NaN, Double.NaN});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,132,"String expected = ""{(NaN); (NaN); (NaN)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,133,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,134,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,137,public void testPositiveInfinity() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,138,RealVectorImpl c = new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,139,"Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,141,"String expected = ""{(Infinity); (Infinity); (Infinity)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,142,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,143,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,146,public void tesNegativeInfinity() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,147,RealVectorImpl c = new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,148,"Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,150,"String expected = ""{(-Infinity); (-Infinity); (-Infinity)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,151,String actual = realVectorFormat.format(c);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,152,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,155,public void testParseSimpleNoDecimals() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,156,"String source = ""{1; 1; 1}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,157,"RealVectorImpl expected = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,158,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,159,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,160,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,161,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,162,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,166,public void testParseIgnoredWhitespace() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,167,"RealVectorImpl expected = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,168,ParsePosition pos1 = new ParsePosition(0);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,169,"String source1 = ""{1;1;1}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,170,"assertEquals(expected, realVectorFormat.parseObject(source1, pos1));"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,171,"assertEquals(source1.length(), pos1.getIndex());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,172,ParsePosition pos2 = new ParsePosition(0);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,173,"String source2 = "" { 1 ; 1 ; 1 } "";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,174,"assertEquals(expected, realVectorFormat.parseObject(source2, pos2));"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,175,"assertEquals(source2.length() - 1, pos2.getIndex());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,178,public void testParseSimpleWithDecimals() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,179,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,180,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,181,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,182,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,183,"""63}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,184,"RealVectorImpl expected = new RealVectorImpl(new double[] {1.23, 1.43, 1.63});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,185,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,186,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,187,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,188,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,189,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,193,public void testParseSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,194,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,195,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,196,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,197,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,198,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,199,"RealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,200,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,201,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,202,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,203,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,204,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,208,public void testParseNegativeX() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,209,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,210,"""{-1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,211,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,212,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,213,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,214,"RealVectorImpl expected = new RealVectorImpl(new double[] {-1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,215,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,216,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,217,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,218,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,219,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,223,public void testParseNegativeY() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,224,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,225,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,226,"""2323; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,227,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,228,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,229,"RealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,230,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,231,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,232,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,233,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,234,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,238,public void testParseNegativeZ() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,239,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,240,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,241,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,242,"""4343; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,243,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,244,"RealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,245,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,246,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,247,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,248,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,249,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,253,public void testParseNegativeAll() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,254,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,255,"""{-1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,256,"""2323; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,257,"""4343; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,258,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,259,"RealVectorImpl expected = new RealVectorImpl(new double[] {-1.2323, -1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,260,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,261,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,262,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,263,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,264,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,268,public void testParseZeroX() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,269,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,270,"""{0"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,271,"""0; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,272,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,273,"""6333}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,274,"RealVectorImpl expected = new RealVectorImpl(new double[] {0.0, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,275,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,276,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,277,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,278,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,279,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,283,public void testParseNonDefaultSetting() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,284,String source =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,285,"""[1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,286,"""2323 : 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,287,"""4343 : 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,288,"""6333]"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,289,"RealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,290,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,291,RealVectorImpl actual = (RealVectorImpl) realVectorFormatSquare.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,292,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,293,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,294,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,298,public void testParseNan() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,299,"String source = ""{(NaN); (NaN); (NaN)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,300,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,301,RealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,302,"assertEquals(new RealVectorImpl(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,303,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,304,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,308,public void testParsePositiveInfinity() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,309,"String source = ""{(Infinity); (Infinity); (Infinity)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,310,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,311,RealVectorImpl actual = (RealVectorImpl)realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,312,assertEquals(new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,313,"Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,314,"}), actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,315,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,316,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,320,public void testParseNegativeInfinity() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,321,"String source = ""{(-Infinity); (-Infinity); (-Infinity)}"";"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,322,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,323,RealVectorImpl actual = (RealVectorImpl)realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,324,assertEquals(new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,325,"Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,326,"}), actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,327,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,328,fail(ex.getMessage());
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,332,public void testParseNoComponents() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,333,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,334,"realVectorFormat.parseObject(""{ }"");"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,335,} catch (ParseException pe) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,336,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,337,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,338,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,342,public void testParseManyComponents() throws ParseException {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,343,RealVectorImpl parsed =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,344,"(RealVectorImpl) realVectorFormat.parseObject(""{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}"");"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,345,"assertEquals(24, parsed.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,348,public void testConstructorSingleFormat() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,349,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,350,RealVectorFormat cf = new RealVectorFormat(nf);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,351,assertNotNull(cf);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,352,"assertEquals(nf, cf.getFormat());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,355,public void testFormatObject() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,356,try {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,357,CompositeFormat cf = new RealVectorFormat();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,358,Object object = new Object();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,359,cf.format(object);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,360,fail();
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,361,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,362,// success
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,366,public void testForgottenPrefix() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,367,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,368,"assertNull(new RealVectorFormat().parse(""1; 1; 1}"", pos));"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,369,"assertEquals(0, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,372,public void testForgottenSeparator() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,373,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,374,"assertNull(new RealVectorFormat().parse(""{1; 1 1}"", pos));"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,375,"assertEquals(6, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,378,public void testForgottenSuffix() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,379,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,380,"assertNull(new RealVectorFormat().parse(""{1; 1; 1 "", pos));"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,381,"assertEquals(8, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,23,public class RealVectorFormatTest extends RealVectorFormatAbstractTest {
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,24,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,25,return '.';
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,28,protected Locale getLocale() {
True,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatTest.java,29,return Locale.US;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,19,import java.io.Serializable;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,25,* Test cases for the {@link RealVectorImpl} class.
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,27,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,29,public class RealVectorImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,32,"protected double[][] ma1 = {{1d, 2d, 3d}, {4d, 5d, 6d}, {7d, 8d, 9d}};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,33,"protected double[] vec1 = {1d, 2d, 3d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,34,"protected double[] vec2 = {4d, 5d, 6d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,35,"protected double[] vec3 = {7d, 8d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,36,"protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,37,"protected double[] vec_null = {0d, 0d, 0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,38,"protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,39,"protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,41,// tolerances
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,42,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,43,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,45,// Testclass to test the RealVector interface
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,46,// only with enough content to support the test
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,47,"public class RealVectorTestImpl implements RealVector, Serializable {"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,49,/** Serializable version identifier. */
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,50,private static final long serialVersionUID = 8731816072271374422L;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,52,/** Entries of the vector. */
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,53,protected double data[];
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,55,public RealVectorTestImpl(double[] d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,56,data = d.clone();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,59,private UnsupportedOperationException unsupported() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,60,"return new UnsupportedOperationException(""Not supported, unneeded for test purposes"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,63,public RealVector copy() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,64,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,67,public RealVector add(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,68,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,71,public RealVector subtract(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,72,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,75,public RealVector mapAdd(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,76,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,79,public RealVector mapAddToSelf(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,80,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,83,public RealVector mapSubtract(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,84,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,87,public RealVector mapSubtractToSelf(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,88,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,91,public RealVector mapMultiply(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,92,double[] out = new double[data.length];
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,93,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,94,out[i] = data[i] * d;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,96,return new RealVectorImpl(out);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,99,public RealVector mapMultiplyToSelf(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,100,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,103,public RealVector mapDivide(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,104,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,107,public RealVector mapDivideToSelf(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,108,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,111,public RealVector mapPow(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,112,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,115,public RealVector mapPowToSelf(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,116,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,119,public RealVector mapExp() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,120,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,123,public RealVector mapExpToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,124,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,127,public RealVector mapExpm1() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,128,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,131,public RealVector mapExpm1ToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,132,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,135,public RealVector mapLog() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,136,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,139,public RealVector mapLogToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,140,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,143,public RealVector mapLog10() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,144,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,147,public RealVector mapLog10ToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,148,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,151,public RealVector mapLog1p() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,152,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,155,public RealVector mapLog1pToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,156,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,159,public RealVector mapCosh() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,160,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,163,public RealVector mapCoshToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,164,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,167,public RealVector mapSinh() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,168,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,171,public RealVector mapSinhToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,172,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,175,public RealVector mapTanh() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,176,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,179,public RealVector mapTanhToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,180,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,183,public RealVector mapCos() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,184,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,187,public RealVector mapCosToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,188,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,191,public RealVector mapSin() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,192,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,195,public RealVector mapSinToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,196,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,199,public RealVector mapTan() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,200,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,203,public RealVector mapTanToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,204,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,207,public RealVector mapAcos() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,208,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,211,public RealVector mapAcosToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,212,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,215,public RealVector mapAsin() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,216,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,219,public RealVector mapAsinToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,220,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,223,public RealVector mapAtan() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,224,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,227,public RealVector mapAtanToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,228,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,231,public RealVector mapInv() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,232,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,235,public RealVector mapInvToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,236,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,239,public RealVector mapAbs() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,240,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,243,public RealVector mapAbsToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,244,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,247,public RealVector mapSqrt() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,248,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,251,public RealVector mapSqrtToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,252,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,255,public RealVector mapCbrt() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,256,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,259,public RealVector mapCbrtToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,260,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,263,public RealVector mapCeil() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,264,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,267,public RealVector mapCeilToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,268,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,271,public RealVector mapFloor() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,272,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,275,public RealVector mapFloorToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,276,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,279,public RealVector mapRint() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,280,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,283,public RealVector mapRintToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,284,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,287,public RealVector mapSignum() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,288,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,291,public RealVector mapSignumToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,292,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,295,public RealVector mapUlp() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,296,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,299,public RealVector mapUlpToSelf() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,300,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,303,public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,304,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,307,public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,308,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,311,public double[] getData() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,312,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,315,public double dotProduct(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,317,//	checkVectorDimensions(v);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,318,double dot = 0;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,319,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,320,dot += data[i] * v.getEntry(i);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,322,return dot;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,325,public double getNorm() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,326,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,329,public double getL1Norm() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,330,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,333,public double getLInfNorm() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,334,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,337,public double getDistance(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,338,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,341,public double getL1Distance(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,342,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,345,public double getLInfDistance(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,346,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,349,public RealVector unitVector() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,350,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,353,public void unitize() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,354,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,357,public RealVector projection(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,358,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,361,public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,362,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,365,public double getEntry(int index) throws MatrixIndexException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,366,return data[index];
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,369,public int getDimension() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,370,return data.length;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,373,public RealVector append(RealVector v) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,374,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,377,public RealVector append(double d) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,378,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,381,public RealVector append(double[] a) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,382,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,385,"public RealVector get(int index, int n) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,386,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,389,"public void set(int index, double value) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,390,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,393,"public void set(int index, RealVector v) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,394,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,397,public void set(double value) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,398,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,401,public double[] toArray() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,402,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,405,public boolean isNaN() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,406,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,409,public boolean isInfinite() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,410,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,415,public static Test suite() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,416,TestSuite suite = new TestSuite(RealVectorImplTest.class);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,417,"suite.setName(""RealVectorImpl Tests"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,418,return suite;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,421,public void testConstructors() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,423,RealVectorImpl v0 = new RealVectorImpl();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,424,"assertEquals(""testData len"", 0, v0.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,426,RealVectorImpl v1 = new RealVectorImpl(7);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,427,"assertEquals(""testData len"", 7, v1.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,428,"assertEquals(""testData is 0.0 "", 0.0, v1.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,430,"RealVectorImpl v2 = new RealVectorImpl(5, 1.23);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,431,"assertEquals(""testData len"", 5, v2.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,432,"assertEquals(""testData is 1.23 "", 1.23, v2.getEntry(4));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,434,RealVectorImpl v3 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,435,"assertEquals(""testData len"", 3, v3.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,436,"assertEquals(""testData is 2.0 "", 2.0, v3.getEntry(1));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,438,"RealVectorImpl v4 = new RealVectorImpl(vec4, 3, 2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,439,"assertEquals(""testData len"", 2, v4.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,440,"assertEquals(""testData is 4.0 "", 4.0, v4.getEntry(0));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,441,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,442,"new RealVectorImpl(vec4, 8, 3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,443,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,444,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,445,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,446,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,447,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,450,RealVector v5_i = new RealVectorImpl(dvec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,451,"assertEquals(""testData len"", 9, v5_i.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,452,"assertEquals(""testData is 9.0 "", 9.0, v5_i.getEntry(8));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,454,RealVectorImpl v5 = new RealVectorImpl(dvec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,455,"assertEquals(""testData len"", 9, v5.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,456,"assertEquals(""testData is 9.0 "", 9.0, v5.getEntry(8));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,458,"RealVectorImpl v6 = new RealVectorImpl(dvec1, 3, 2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,459,"assertEquals(""testData len"", 2, v6.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,460,"assertEquals(""testData is 4.0 "", 4.0, v6.getEntry(0));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,461,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,462,"new RealVectorImpl(dvec1, 8, 3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,463,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,464,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,465,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,466,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,467,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,470,RealVectorImpl v7 = new RealVectorImpl(v1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,471,"assertEquals(""testData len"", 7, v7.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,472,"assertEquals(""testData is 0.0 "", 0.0, v7.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,474,RealVectorTestImpl v7_i = new RealVectorTestImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,476,RealVectorImpl v7_2 = new RealVectorImpl(v7_i);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,477,"assertEquals(""testData len"", 3, v7_2.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,478,"assertEquals(""testData is 0.0 "", 2.0d, v7_2.getEntry(1));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,480,"RealVectorImpl v8 = new RealVectorImpl(v1, true);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,481,"assertEquals(""testData len"", 7, v8.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,482,"assertEquals(""testData is 0.0 "", 0.0, v8.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,483,"assertNotSame(""testData not same object "", v1.data, v8.data);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,485,"RealVectorImpl v8_2 = new RealVectorImpl(v1, false);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,486,"assertEquals(""testData len"", 7, v8_2.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,487,"assertEquals(""testData is 0.0 "", 0.0, v8_2.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,488,"assertEquals(""testData same object "", v1.data, v8_2.data);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,490,"RealVectorImpl v9 = new RealVectorImpl(v1, v3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,491,"assertEquals(""testData len"", 10, v9.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,492,"assertEquals(""testData is 1.0 "", 1.0, v9.getEntry(7));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,496,public void testDataInOut() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,498,RealVectorImpl v1 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,499,RealVectorImpl v2 = new RealVectorImpl(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,500,RealVectorImpl v4 = new RealVectorImpl(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,501,RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,503,RealVector v_append_1 = v1.append(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,504,"assertEquals(""testData len"", 6, v_append_1.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,505,"assertEquals(""testData is 4.0 "", 4.0, v_append_1.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,507,RealVector v_append_2 = v1.append(2.0);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,508,"assertEquals(""testData len"", 4, v_append_2.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,509,"assertEquals(""testData is 2.0 "", 2.0, v_append_2.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,511,RealVector v_append_3 = v1.append(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,512,"assertEquals(""testData len"", 6, v_append_3.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,513,"assertEquals(""testData is  "", 4.0, v_append_3.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,515,RealVector v_append_4 = v1.append(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,516,"assertEquals(""testData len"", 6, v_append_4.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,517,"assertEquals(""testData is 4.0 "", 4.0, v_append_4.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,519,RealVector v_copy = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,520,"assertEquals(""testData len"", 3, v_copy.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,521,"assertNotSame(""testData not same object "", v1.data, v_copy.getData());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,523,double[] a_double = v1.toArray();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,524,"assertEquals(""testData len"", 3, a_double.length);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,525,"assertNotSame(""testData not same object "", v1.data, a_double);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,528,//      RealVectorImpl vout4 = (RealVectorImpl) v1.clone();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,529,"//      assertEquals(""testData len"", 3, vout4.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,530,"//      assertEquals(""testData not same object "", v1.data, vout4.data);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,533,"RealVector vout5 = v4.get(3, 3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,534,"assertEquals(""testData len"", 3, vout5.getDimension());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,535,"assertEquals(""testData is 4.0 "", 5.0, vout5.getEntry(1));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,536,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,537,"v4.get(3, 7);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,538,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,539,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,540,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,541,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,542,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,545,RealVectorImpl v_set1 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,546,"v_set1.set(1, 11.0);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,547,"assertEquals(""testData is 11.0 "", 11.0, v_set1.getEntry(1));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,548,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,549,"v_set1.set(3, 11.0);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,550,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,551,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,552,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,553,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,554,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,557,RealVectorImpl v_set2 = (RealVectorImpl) v4.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,558,"v_set2.set(3, v1);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,559,"assertEquals(""testData is 1.0 "", 1.0, v_set2.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,560,"assertEquals(""testData is 7.0 "", 7.0, v_set2.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,561,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,562,"v_set2.set(7, v1);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,563,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,564,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,565,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,566,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,567,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,570,RealVectorImpl v_set3 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,571,v_set3.set(13.0);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,572,"assertEquals(""testData is 13.0 "", 13.0, v_set3.getEntry(2));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,574,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,575,v_set3.getEntry(23);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,576,"fail(""ArrayIndexOutOfBoundsException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,577,} catch (ArrayIndexOutOfBoundsException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,578,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,579,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,580,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,583,RealVectorImpl v_set4 = (RealVectorImpl) v4.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,584,"v_set4.set(3, v2_t);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,585,"assertEquals(""testData is 1.0 "", 4.0, v_set4.getEntry(3));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,586,"assertEquals(""testData is 7.0 "", 7.0, v_set4.getEntry(6));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,587,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,588,"v_set4.set(7, v2_t);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,589,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,590,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,591,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,592,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,593,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,597,RealVectorImpl vout10 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,598,RealVectorImpl vout10_2 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,599,"assertEquals(vout10, vout10_2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,600,"vout10_2.set(0, 1.1);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,601,"assertNotSame(vout10, vout10_2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,605,public void testMapFunctions() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,606,RealVectorImpl v1 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,608,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,609,RealVector v_mapAdd = v1.mapAdd(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,610,"double[] result_mapAdd = {3d, 4d, 5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,611,"assertClose(""compare vectors"" ,result_mapAdd,v_mapAdd.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,613,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,614,RealVector v_mapAddToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,615,v_mapAddToSelf.mapAddToSelf(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,616,"double[] result_mapAddToSelf = {3d, 4d, 5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,617,"assertClose(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,619,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,620,RealVector v_mapSubtract = v1.mapSubtract(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,621,"double[] result_mapSubtract = {-1d, 0d, 1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,622,"assertClose(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,624,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,625,RealVector v_mapSubtractToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,626,v_mapSubtractToSelf.mapSubtractToSelf(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,627,"double[] result_mapSubtractToSelf = {-1d, 0d, 1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,628,"assertClose(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,630,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,631,RealVector v_mapMultiply = v1.mapMultiply(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,632,"double[] result_mapMultiply = {2d, 4d, 6d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,633,"assertClose(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,635,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,636,RealVector v_mapMultiplyToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,637,v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,638,"double[] result_mapMultiplyToSelf = {2d, 4d, 6d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,639,"assertClose(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,641,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,642,RealVector v_mapDivide = v1.mapDivide(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,643,"double[] result_mapDivide = {.5d, 1d, 1.5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,644,"assertClose(""compare vectors"" ,result_mapDivide,v_mapDivide.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,646,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,647,RealVector v_mapDivideToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,648,v_mapDivideToSelf.mapDivideToSelf(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,649,"double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,650,"assertClose(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,652,//octave =  v1 .^ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,653,RealVector v_mapPow = v1.mapPow(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,654,"double[] result_mapPow = {1d, 4d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,655,"assertClose(""compare vectors"" ,result_mapPow,v_mapPow.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,657,//octave =  v1 .^ 2.0
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,658,RealVector v_mapPowToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,659,v_mapPowToSelf.mapPowToSelf(2.0d);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,660,"double[] result_mapPowToSelf = {1d, 4d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,661,"assertClose(""compare vectors"" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,663,//octave =  exp(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,664,RealVector v_mapExp = v1.mapExp();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,665,"double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,666,"assertClose(""compare vectors"" ,result_mapExp,v_mapExp.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,668,//octave =  exp(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,669,RealVector v_mapExpToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,670,v_mapExpToSelf.mapExpToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,671,"double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,672,"assertClose(""compare vectors"" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,675,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,676,RealVector v_mapExpm1 = v1.mapExpm1();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,677,"double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,678,"assertClose(""compare vectors"" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,680,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,681,RealVector v_mapExpm1ToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,682,v_mapExpm1ToSelf.mapExpm1ToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,683,"double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,684,"assertClose(""compare vectors"" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,686,//octave =  log(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,687,RealVector v_mapLog = v1.mapLog();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,688,"double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,689,"assertClose(""compare vectors"" ,result_mapLog,v_mapLog.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,691,//octave =  log(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,692,RealVector v_mapLogToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,693,v_mapLogToSelf.mapLogToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,694,"double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,695,"assertClose(""compare vectors"" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,697,//octave =  log10(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,698,RealVector v_mapLog10 = v1.mapLog10();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,699,"double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,700,"assertClose(""compare vectors"" ,result_mapLog10,v_mapLog10.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,702,//octave =  log(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,703,RealVector v_mapLog10ToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,704,v_mapLog10ToSelf.mapLog10ToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,705,"double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,706,"assertClose(""compare vectors"" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,708,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,709,RealVector v_mapLog1p = v1.mapLog1p();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,710,"double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,711,"assertClose(""compare vectors"" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,713,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,714,RealVector v_mapLog1pToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,715,v_mapLog1pToSelf.mapLog1pToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,716,"double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,717,"assertClose(""compare vectors"" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,719,//octave =  cosh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,720,RealVector v_mapCosh = v1.mapCosh();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,721,"double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,722,"assertClose(""compare vectors"" ,result_mapCosh,v_mapCosh.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,724,//octave =  cosh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,725,RealVector v_mapCoshToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,726,v_mapCoshToSelf.mapCoshToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,727,"double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,728,"assertClose(""compare vectors"" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,730,//octave =  sinh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,731,RealVector v_mapSinh = v1.mapSinh();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,732,"double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,733,"assertClose(""compare vectors"" ,result_mapSinh,v_mapSinh.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,735,//octave =  sinh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,736,RealVector v_mapSinhToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,737,v_mapSinhToSelf.mapSinhToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,738,"double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,739,"assertClose(""compare vectors"" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,741,//octave =  tanh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,742,RealVector v_mapTanh = v1.mapTanh();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,743,"double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,744,"assertClose(""compare vectors"" ,result_mapTanh,v_mapTanh.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,746,//octave =  tanh(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,747,RealVector v_mapTanhToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,748,v_mapTanhToSelf.mapTanhToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,749,"double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,750,"assertClose(""compare vectors"" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,752,//octave =  cos(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,753,RealVector v_mapCos = v1.mapCos();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,754,"double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,755,"assertClose(""compare vectors"" ,result_mapCos,v_mapCos.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,757,//octave =  cos(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,758,RealVector v_mapCosToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,759,v_mapCosToSelf.mapCosToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,760,"double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,761,"assertClose(""compare vectors"" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,763,//octave =  sin(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,764,RealVector v_mapSin = v1.mapSin();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,765,"double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,766,"assertClose(""compare vectors"" ,result_mapSin,v_mapSin.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,768,//octave =  sin(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,769,RealVector v_mapSinToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,770,v_mapSinToSelf.mapSinToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,771,"double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,772,"assertClose(""compare vectors"" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,774,//octave =  tan(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,775,RealVector v_mapTan = v1.mapTan();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,776,"double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,777,"assertClose(""compare vectors"" ,result_mapTan,v_mapTan.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,779,//octave =  tan(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,780,RealVector v_mapTanToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,781,v_mapTanToSelf.mapTanToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,782,"double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,783,"assertClose(""compare vectors"" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,785,"double[] vat_a = {0d, 0.5d, 1.0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,786,RealVectorImpl vat = new RealVectorImpl(vat_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,788,//octave =  acos(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,789,RealVector v_mapAcos = vat.mapAcos();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,790,"double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,791,"assertClose(""compare vectors"" ,result_mapAcos,v_mapAcos.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,793,//octave =  acos(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,794,RealVector v_mapAcosToSelf = vat.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,795,v_mapAcosToSelf.mapAcosToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,796,"double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,797,"assertClose(""compare vectors"" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,799,//octave =  asin(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,800,RealVector v_mapAsin = vat.mapAsin();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,801,"double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,802,"assertClose(""compare vectors"" ,result_mapAsin,v_mapAsin.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,804,//octave =  asin(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,805,RealVector v_mapAsinToSelf = vat.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,806,v_mapAsinToSelf.mapAsinToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,807,"double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,808,"assertClose(""compare vectors"" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,810,//octave =  atan(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,811,RealVector v_mapAtan = vat.mapAtan();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,812,"double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,813,"assertClose(""compare vectors"" ,result_mapAtan,v_mapAtan.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,815,//octave =  atan(vat)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,816,RealVector v_mapAtanToSelf = vat.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,817,v_mapAtanToSelf.mapAtanToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,818,"double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,819,"assertClose(""compare vectors"" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,821,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,822,RealVector v_mapInv = v1.mapInv();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,823,"double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,824,"assertClose(""compare vectors"" ,result_mapInv,v_mapInv.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,826,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,827,RealVector v_mapInvToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,828,v_mapInvToSelf.mapInvToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,829,"double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,830,"assertClose(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,832,"double[] abs_a = {-1.0d, 0.0d, 1.0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,833,RealVectorImpl abs_v = new RealVectorImpl(abs_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,835,//octave =  abs(abs_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,836,RealVector v_mapAbs = abs_v.mapAbs();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,837,"double[] result_mapAbs = {1d,0d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,838,"assertClose(""compare vectors"" ,result_mapAbs,v_mapAbs.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,840,//octave = abs(abs_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,841,RealVector v_mapAbsToSelf = abs_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,842,v_mapAbsToSelf.mapAbsToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,843,"double[] result_mapAbsToSelf = {1d,0d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,844,"assertClose(""compare vectors"" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,846,//octave =   sqrt(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,847,RealVector v_mapSqrt = v1.mapSqrt();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,848,"double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,849,"assertClose(""compare vectors"" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,851,//octave =  sqrt(v1)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,852,RealVector v_mapSqrtToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,853,v_mapSqrtToSelf.mapSqrtToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,854,"double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,855,"assertClose(""compare vectors"" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,857,"double[] cbrt_a = {-2.0d, 0.0d, 2.0d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,858,RealVectorImpl cbrt_v = new RealVectorImpl(cbrt_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,860,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,861,RealVector v_mapCbrt = cbrt_v.mapCbrt();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,862,"double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,863,"assertClose(""compare vectors"" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,865,//octave = ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,866,RealVector v_mapCbrtToSelf = cbrt_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,867,v_mapCbrtToSelf.mapCbrtToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,868,"double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,869,"assertClose(""compare vectors"" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,871,"double[] ceil_a = {-1.1d, 0.9d, 1.1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,872,RealVectorImpl ceil_v = new RealVectorImpl(ceil_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,874,//octave =  ceil(ceil_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,875,RealVector v_mapCeil = ceil_v.mapCeil();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,876,"double[] result_mapCeil = {-1d,1d,2d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,877,"assertClose(""compare vectors"" ,result_mapCeil,v_mapCeil.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,879,//octave = ceil(ceil_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,880,RealVector v_mapCeilToSelf = ceil_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,881,v_mapCeilToSelf.mapCeilToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,882,"double[] result_mapCeilToSelf =  {-1d,1d,2d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,883,"assertClose(""compare vectors"" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,885,//octave =  floor(ceil_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,886,RealVector v_mapFloor = ceil_v.mapFloor();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,887,"double[] result_mapFloor = {-2d,0d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,888,"assertClose(""compare vectors"" ,result_mapFloor,v_mapFloor.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,890,//octave = floor(ceil_v)
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,891,RealVector v_mapFloorToSelf = ceil_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,892,v_mapFloorToSelf.mapFloorToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,893,"double[] result_mapFloorToSelf =  {-2d,0d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,894,"assertClose(""compare vectors"" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,896,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,897,RealVector v_mapRint = ceil_v.mapRint();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,898,"double[] result_mapRint = {-1d,1d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,899,"assertClose(""compare vectors"" ,result_mapRint,v_mapRint.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,901,//octave = ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,902,RealVector v_mapRintToSelf = ceil_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,903,v_mapRintToSelf.mapRintToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,904,"double[] result_mapRintToSelf =  {-1d,1d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,905,"assertClose(""compare vectors"" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,907,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,908,RealVector v_mapSignum = ceil_v.mapSignum();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,909,"double[] result_mapSignum = {-1d,1d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,910,"assertClose(""compare vectors"" ,result_mapSignum,v_mapSignum.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,912,//octave = ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,913,RealVector v_mapSignumToSelf = ceil_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,914,v_mapSignumToSelf.mapSignumToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,915,"double[] result_mapSignumToSelf =  {-1d,1d,1d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,916,"assertClose(""compare vectors"" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,919,// Is with the used resolutions of limited value as test
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,920,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,921,RealVector v_mapUlp = ceil_v.mapUlp();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,922,"double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,923,"assertClose(""compare vectors"" ,result_mapUlp,v_mapUlp.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,925,//octave = ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,926,RealVector v_mapUlpToSelf = ceil_v.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,927,v_mapUlpToSelf.mapUlpToSelf();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,928,"double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,929,"assertClose(""compare vectors"" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,933,public void testBasicFunctions() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,934,RealVectorImpl v1 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,935,RealVectorImpl v2 = new RealVectorImpl(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,936,RealVectorImpl v_null = new RealVectorImpl(vec_null);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,938,RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,940,//octave =  sqrt(sumsq(v1))
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,941,double d_getNorm = v1.getNorm();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,942,"assertEquals(""compare values  "", 3.7416573867739413,d_getNorm);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,944,double d_getL1Norm = v1.getL1Norm();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,945,"assertEquals(""compare values  "",6.0, d_getL1Norm);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,947,double d_getLInfNorm = v1.getLInfNorm();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,948,"assertEquals(""compare values  "",6.0, d_getLInfNorm);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,950,//octave =  sqrt(sumsq(v1-v2))
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,951,double dist = v1.getDistance(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,952,"assertEquals(""compare values  "",v1.subtract(v2).getNorm(), dist );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,954,//octave =  sqrt(sumsq(v1-v2))
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,955,double dist_2 = v1.getDistance(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,956,"assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_2 );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,958,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,959,double d_getL1Distance = v1. getL1Distance(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,960,"assertEquals(""compare values  "",9d, d_getL1Distance );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,962,double d_getL1Distance_2 = v1. getL1Distance(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,963,"assertEquals(""compare values  "",9d, d_getL1Distance_2 );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,965,//octave =  ???
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,966,double d_getLInfDistance = v1. getLInfDistance(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,967,"assertEquals(""compare values  "",3d, d_getLInfDistance );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,969,double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,970,"assertEquals(""compare values  "",3d, d_getLInfDistance_2 );"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,972,//octave =  v1 + v2
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,973,RealVectorImpl v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,974,"double[] result_add = {5d, 7d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,975,"assertClose(""compare vect"" ,v_add.getData(),result_add,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,977,RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,978,RealVector v_add_i = v1.add(vt2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,979,"double[] result_add_i = {5d, 7d, 9d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,980,"assertClose(""compare vect"" ,v_add_i.getData(),result_add_i,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,982,//octave =  v1 - v2
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,983,RealVectorImpl v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,984,"double[] result_subtract = {-3d, -3d, -3d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,985,"assertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,987,RealVector v_subtract_i = v1.subtract(vt2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,988,"double[] result_subtract_i = {-3d, -3d, -3d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,989,"assertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,991,// octave v1 .* v2
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,992,RealVectorImpl  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,993,"double[] result_ebeMultiply = {4d, 10d, 18d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,994,"assertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,996,RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,997,"double[] result_ebeMultiply_2 = {4d, 10d, 18d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,998,"assertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1000,// octave v1 ./ v2
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1001,RealVectorImpl  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1002,"double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1003,"assertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1005,RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1006,"double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1007,"assertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1009,"// octave  dot(v1,v2)"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1010,double dot =  v1.dotProduct(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1011,"assertEquals(""compare val "",32d, dot);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1013,"// octave  dot(v1,v2_t)"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1014,double dot_2 =  v1.dotProduct(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1015,"assertEquals(""compare val "",32d, dot_2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1017,RealMatrixImpl m_outerProduct = v1.outerProduct(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1018,"assertEquals(""compare val "",4d, m_outerProduct.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1020,RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1021,"assertEquals(""compare val "",4d, m_outerProduct_2.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1023,RealVector v_unitVector = v1.unitVector();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1024,RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1025,"assertClose(""compare vect"" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1027,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1028,v_null.unitVector();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1029,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1030,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1031,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1032,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1033,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1036,RealVectorImpl v_unitize = (RealVectorImpl)v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1037,v_unitize.unitize();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1038,"assertClose(""compare vect"" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1039,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1040,v_null.unitize();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1041,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1042,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1043,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1044,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1045,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1048,RealVectorImpl v_projection = v1.projection(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1049,"double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1050,"assertClose(""compare vect"", v_projection.getData(), result_projection, normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1052,RealVector v_projection_2 = v1.projection(v2_t);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1053,"double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1054,"assertClose(""compare vect"", v_projection_2.getData(), result_projection_2, normTolerance);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1058,public void testMisc() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1059,RealVectorImpl v1 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1060,RealVectorImpl v4 = new RealVectorImpl(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1061,RealVector v4_2 = new RealVectorImpl(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1063,String out1 = v1.toString();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1064,"assertTrue(""some output "",  out1.length()!=0);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1066,double[] dout1 = v1.copyOut();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1067,"assertEquals(""testData len"", 3, dout1.length);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1068,"assertNotSame(""testData not same object "", v1.data, dout1);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1070,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1071,v1.checkVectorDimensions(2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1072,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1073,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1074,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1075,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1076,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1079,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1080,v1.checkVectorDimensions(v4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1081,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1082,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1083,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1084,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1085,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1088,try {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1089,v1.checkVectorDimensions(v4_2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1090,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1091,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1092,// expected behavior
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1093,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1094,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1099,public void testPredicates() {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1101,"RealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1103,assertFalse(v.isNaN());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1104,"v.set(1, Double.NaN);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1105,assertTrue(v.isNaN());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1107,assertFalse(v.isInfinite());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1108,"v.set(0, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1109,assertFalse(v.isInfinite());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1110,"v.set(1, 1);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1111,assertTrue(v.isInfinite());
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1113,"v.set(0, 0);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1114,"assertEquals(v, new RealVectorImpl(new double[] { 0, 1, 2 }));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1115,"assertNotSame(v, new RealVectorImpl(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1116,"assertNotSame(v, new RealVectorImpl(new double[] { 0, 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1118,"assertEquals(new RealVectorImpl(new double[] { Double.NaN, 1, 2 }).hashCode(),"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1119,"new RealVectorImpl(new double[] { 0, Double.NaN, 2 }).hashCode());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1121,"assertTrue(new RealVectorImpl(new double[] { Double.NaN, 1, 2 }).hashCode() !="
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1122,"new RealVectorImpl(new double[] { 0, 1, 2 }).hashCode());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1126,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1127,"protected void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1128,double tolerance) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1129,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1130,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1132,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1133,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i],tolerance);"

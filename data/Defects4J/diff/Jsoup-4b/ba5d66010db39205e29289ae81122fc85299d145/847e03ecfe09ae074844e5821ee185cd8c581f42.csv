is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,28,"rivate Tag parent; // if not null, elements must be a direct child of parent"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,28,private List<Tag> excludes = Collections.emptyList(); // cannot contain these tags
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,29,"private boolean directDescendant; // if true, must directly descend from one of the ancestors"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,30,"private boolean limitChildren; // if true, only contain children that've registered parents"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,58,tag.setExcludes();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,106,// confirm limited children
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,107,if (limitChildren) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,108,for (Tag childParent : child.ancestors) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,109,if (childParent.equals(this))
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,110,return true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,112,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,115,// exclude children
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,116,if (!excludes.isEmpty()) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,117,for (Tag excluded: excludes) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,118,if (child.equals(excluded))
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,119,return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,159,eturn this.parent != null;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,179,return directDescendant;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,163,eturn this.equals(child.parent);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,183,return isValidAncestor(child);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,184,f (canContainBlock != tag.canContainBlock) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,185,f (canContainInline != tag.canContainInline) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,186,f (empty != tag.empty) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,187,f (isBlock != tag.isBlock) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,188,f (optionalClosing != tag.optionalClosing) return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,319,"reateBlock(""THEAD"").setParent(""TABLE"").setOptionalClosing(); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,320,"reateBlock(""TFOOT"").setParent(""TABLE"").setOptionalClosing(); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,321,"reateBlock(""TBODY"").setParent(""TABLE"").setOptionalClosing(); // optional / implicit open too. just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,322,"reateBlock(""COLGROUP"").setParent(""TABLE"").setOptionalClosing(); // just COL"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,334,"createBlock(""THEAD"").setParent(""TABLE"").setLimitChildren().setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,335,"createBlock(""TFOOT"").setParent(""TABLE"").setLimitChildren().setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,336,"createBlock(""TBODY"").setParent(""TABLE"").setLimitChildren().setOptionalClosing(); // optional / implicit open too. just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,337,"createBlock(""COLGROUP"").setParent(""TABLE"").setLimitChildren().setOptionalClosing(); // just COL"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,324,"reateBlock(""TR"").setParent(""TABLE"").setOptionalClosing(); // just TH, TD"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,325,"reateBlock(""TH"").setParent(""TR"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,326,"reateBlock(""TD"").setParent(""TR"").setOptionalClosing();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,339,"createBlock(""TR"").setParent(""TBODY"", ""THEAD"", ""TFOOT"", ""TABLE"").setLimitChildren().setOptionalClosing(); // just TH, TD"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,340,"createBlock(""TH"").setParent(""TR"").setExcludes(""THEAD"", ""TFOOT"", ""TBODY"", ""COLGROUP"", ""COL"", ""TR"", ""TH"", ""TD"").setOptionalClosing();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,341,"createBlock(""TD"").setParent(""TR"").setExcludes(""THEAD"", ""TFOOT"", ""TBODY"", ""COLGROUP"", ""COL"", ""TR"", ""TH"", ""TD"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,379,f (tagNames == null) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,394,if (tagNames == null || tagNames.length == 0) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,405,private Tag setExcludes(String... tagNames) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,406,if (tagNames == null || tagNames.length == 0) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,407,excludes = Collections.emptyList();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,408,} else {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,409,excludes = new ArrayList<Tag>(tagNames.length);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,410,for (String name : tagNames) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,411,excludes.add(Tag.valueOf(name));
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,414,return this;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,390,rivate Tag setParent(String tagName) {
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,391,arent = Tag.valueOf(tagName);
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,392,etAncestor(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,417,private Tag setParent(String... tagNames) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,418,directDescendant = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,419,setAncestor(tagNames);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,420,return this;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,423,private Tag setLimitChildren() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,424,limitChildren = true;
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,183,"ssertEquals(""<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,183,"assertEquals(""<table><tbody><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,184,"// <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,192,@Test public void handlesWhatWgExpensesTableExample() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,193,// http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,194,"Document doc = Jsoup.parse(""<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,195,"assertEquals(""<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\""rowgroup\"">Research and development </th><td>$ 1,109 </td><td>$ 782 </td><td>$ 712 </td></tr><tr> <th scope=\""row\"">Percentage of net sales </th><td>3.4% </td><td>3.3% </td><td>3.7% </td></tr></tbody><tbody> <tr> <th scope=\""rowgroup\"">Selling, general, and administrative </th><td>$ 3,761 </td><td>$ 2,963 </td><td>$ 2,433 </td></tr><tr> <th scope=\""row\"">Percentage of net sales </th><td>11.6% </td><td>12.3% </td><td>12.6% </td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,198,@Test public void handlesTbodyTable() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,199,"Document doc = Jsoup.parse(""<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,200,"assertEquals(""<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,45,"ssertEquals(""<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>"", TextUtil.stripNewlines(cleanHtml));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,45,"assertEquals(""<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>"", TextUtil.stripNewlines(cleanHtml));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,1,package org.jsoup.parser;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,3,import org.apache.commons.lang.Validate;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,5,import java.util.HashMap;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,6,import java.util.Map;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,9,"HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,10,but it should capture most of what we need to know to intelligently parse a doc.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,12,"@author Jonathan Hedley, jonathan@hedley.net */"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,13,class Tag {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,14,"private static final Map<String, Tag> tags = new HashMap<String, Tag>();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,16,private String tagName;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,17,private boolean isBlock; // block or inline
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,18,private boolean canContainBlock; // Can this tag hold block level tags?
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,19,private boolean canContainInline; // only pcdata if not
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,20,"private boolean optionalClosing; // If tag is open, and another seen, close previous tag"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,21,private boolean empty; // can hold nothing; e.g. img
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,23,"private Tag(String tagName, boolean block, boolean canContainBlock, boolean canContainInline, boolean optionalClosing, boolean empty) {"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,24,this.tagName = tagName.toLowerCase();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,25,isBlock = block;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,26,this.canContainBlock = canContainBlock;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,27,this.canContainInline = canContainInline;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,28,this.optionalClosing = optionalClosing;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,29,this.empty = empty;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,33,"Get a Tag by name. If not previously defined (unknown), registers and returns a new generic tag, that can do anything."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,34,<p>
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,35,Two unknown tags with the same name will compare ==.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,36,"@param tagName Name of tag, e.g. ""p"". Case insensitive."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,37,"@return The tag, either defined or new generic."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,39,public static Tag valueOf(String tagName) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,40,Validate.notNull(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,41,tagName = tagName.trim().toLowerCase();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,42,Validate.notEmpty(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,44,synchronized (tags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,45,Tag tag = tags.get(tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,46,if (tag == null) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,47,// not defined: create default
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,48,"// TODO: log, generate warning?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,49,"tag = new Tag(tagName, true, true, true, false, false);"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,50,register(tag);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,52,return tag;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,57,"Test if this tag, the prospective parent, can accept the proposed child."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,58,@param child potential child tag.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,59,@return true if this can contain child.
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,61,public boolean canContain(Tag child) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,62,Validate.notNull(child);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,64,if (child.isBlock && !this.canContainBlock)
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,65,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,67,if (!child.isBlock && !this.canContainInline) // not block == inline
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,68,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,70,if (this.optionalClosing && this.equals(child))
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,71,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,72,// TODO: the optional closing may need more context to decide?
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,74,if (this.empty)
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,75,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,77,return true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,80,@Override
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,81,public boolean equals(Object o) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,82,if (this == o) return true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,83,if (o == null || getClass() != o.getClass()) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,85,Tag tag = (Tag) o;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,87,if (canContainBlock != tag.canContainBlock) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,88,if (canContainInline != tag.canContainInline) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,89,if (empty != tag.empty) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,90,if (isBlock != tag.isBlock) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,91,if (optionalClosing != tag.optionalClosing) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,92,if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,94,return true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,97,@Override
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,98,public int hashCode() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,99,int result = tagName != null ? tagName.hashCode() : 0;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,100,result = 31 * result + (isBlock ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,101,result = 31 * result + (canContainBlock ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,102,result = 31 * result + (canContainInline ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,103,result = 31 * result + (optionalClosing ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,104,result = 31 * result + (empty ? 1 : 0);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,105,return result;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,108,public String toString() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,109,return tagName;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,112,// internal static initialisers:
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,114,static {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,115,// prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html#inline
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,116,"// tags are set here in uppercase for legibility, but internally held as lowercase."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,117,// TODO[must]: incorporate html 5 as appropriate
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,119,// fontstyle
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,120,"createInline(""TT"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,121,"createInline(""I"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,122,"createInline(""B"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,123,"createInline(""BIG"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,124,"createInline(""SMALL"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,126,// phrase
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,127,"createInline(""EM"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,128,"createInline(""STRONG"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,129,"createInline(""DFN"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,130,"createInline(""CODE"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,131,"createInline(""SAMP"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,132,"createInline(""KBD"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,133,"createInline(""VAR"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,134,"createInline(""CITE"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,135,"createInline(""ABBR"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,136,"createInline(""ACRONYM"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,138,// special
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,139,"createInline(""A"").setOptionalClosing(); // cannot contain self"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,140,"createInline(""IMG"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,141,"createInline(""OBJECT""); // flow (block/inline) or param"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,142,"createInline(""BR"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,143,"createInline(""SCRIPT"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,144,"createInline(""MAP""); // map is defined as inline, but can hold block (what?) or area. Seldom used so NBD."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,145,"createInline(""Q"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,146,"createInline(""SUB"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,147,"createInline(""SUP"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,148,"createInline(""SPAN"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,149,"createInline(""BDO"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,151,"// things past this point aren't really blocks or inline. I'm using them because they can hold block or inline,"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,152,"// but per the spec, only specific elements can hold this. if this becomes a real-world parsing problem,"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,153,"// will need to have another non block/inline type, and explicit include & exclude rules. should be right though"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,155,// block
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,156,"createBlock(""P"").setContainInlineOnly(); // emasculated block?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,157,"createBlock(""H1"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,158,"createBlock(""H2"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,159,"createBlock(""H3"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,160,"createBlock(""H4"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,161,"createBlock(""H5"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,162,"createBlock(""H6"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,163,"createBlock(""UL"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,164,"createBlock(""OL"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,165,"createBlock(""PRE"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,166,"createBlock(""DL"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,167,"createBlock(""DIV"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,168,"createBlock(""NOSCRIPT"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,169,"createBlock(""BLOCKQUOTE"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,170,"createBlock(""FORM"").setOptionalClosing(); // can't contian self"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,171,"createBlock(""HR"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,172,"createBlock(""TABLE""); // specific list of only includes (tr, td, thead etc) not implemented"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,173,"createBlock(""FIELDSET"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,174,"createBlock(""ADDRESS"").setContainInlineOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,177,// formctrl
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,178,"createInline(""INPUT"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,179,"createInline(""SELECT""); // just optgroup or option"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,180,"createInline(""TEXTAREA"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,181,"createInline(""LABEL"").setOptionalClosing(); // not self"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,182,"createInline(""BUTTON""); // bunch of excludes not defined"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,184,// document
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,185,"createBlock(""HTML""); // specific includes not impl"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,186,"createBlock(""HEAD""); // specific includes not impl: SCRIPT, STYLE, META, LINK, OBJECT"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,187,"createBlock(""BODY""); // specific includes not impl"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,189,// other
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,190,"createInline(""AREA"").setEmpty(); // not an inline per-se"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,191,"createBlock(""LINK"").setEmpty(); // only within head"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,192,"createInline(""PARAM"").setEmpty(); // only within object"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,193,"createBlock(""INS""); // only within body"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,194,"createBlock(""DEL""); // only within body"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,196,"createInline(""DT"").setOptionalClosing(); // only within DL. Prolly should create implicit DL?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,197,"createInline(""DD"").setOptionalClosing(); // only within DL. Prolly should create implicit DL?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,199,"createBlock(""LI"").setOptionalClosing(); // only within OL or UL. Implicit?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,201,"createInline(""OPTGROUP""); // only in select, only contain option"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,202,"createInline(""OPTION"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,203,"createInline(""TEXTAREA"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,204,"createInline(""LEGEND""); // only within fieldset (implicit?)"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,206,// tables
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,207,"createInline(""CAPTION"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,208,"createInline(""THEAD"").setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,209,"createInline(""TFOOT"").setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,210,"createInline(""TBODY"").setOptionalClosing(); // optional / implicit open too. just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,211,"createInline(""COLGROUP"").setOptionalClosing(); // just COL"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,212,"createInline(""COL"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,213,"createInline(""TR"").setOptionalClosing(); // just TH, TD"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,214,"createBlock(""TD"").setOptionalClosing();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,216,// head
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,217,"createInline(""TITLE"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,218,"createInline(""BASE"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,219,"createInline(""META"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,220,"createInline(""STYLE"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,223,private static Tag createBlock(String tagName) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,224,"return register(new Tag(tagName, true, true, true, false, false));"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,227,private static Tag createInline(String tagName) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,228,"return register(new Tag(tagName, false, false, true, false, false));"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,231,private static Tag register(Tag tag) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,232,synchronized (tags) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,233,"tags.put(tag.tagName, tag);"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,235,return tag;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,238,private Tag setContainInlineOnly() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,239,canContainBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,240,canContainInline = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,241,return this;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,244,private Tag setContainDataOnly() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,245,canContainBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,246,canContainInline = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,247,return this;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,250,private Tag setEmpty() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,251,canContainBlock = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,252,canContainInline = false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,253,empty = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,254,return this;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,257,private Tag setOptionalClosing() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,258,optionalClosing = true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,259,return this;
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,1,package org.jsoup.parser;
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,3,import org.junit.Test;
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,4,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,7,Tag tests.
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,8,"@author Jonathan Hedley, jonathan@hedley.net */"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,9,public class TagTest {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,11,@Test public void isCaseInsensitive() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,12,"Tag p1 = Tag.valueOf(""P"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,13,"Tag p2 = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,14,"assertEquals(p1, p2);"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,17,@Test public void trims() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,18,"Tag p1 = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,19,"Tag p2 = Tag.valueOf("" p "");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,20,"assertEquals(p1, p2);"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,23,@Test public void equality() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,24,"Tag p1 = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,25,"Tag p2 = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,26,assertTrue(p1.equals(p2));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,27,assertTrue(p1 == p2);
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,30,@Test public void divSemantics() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,31,"Tag div = Tag.valueOf(""div"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,32,"Tag p = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,34,assertTrue(div.canContain(div));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,35,assertTrue(div.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,38,@Test public void pSemantics() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,39,"Tag div = Tag.valueOf(""div"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,40,"Tag p = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,41,"Tag img = Tag.valueOf(""img"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,42,"Tag span = Tag.valueOf(""span"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,44,assertTrue(p.canContain(img));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,45,assertTrue(p.canContain(span));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,46,assertFalse(p.canContain(div));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,47,assertFalse(p.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,50,@Test public void spanSemantics() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,51,"Tag span = Tag.valueOf(""span"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,52,"Tag p = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,53,"Tag div = Tag.valueOf(""div"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,55,assertTrue(span.canContain(span));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,56,assertFalse(span.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,57,assertFalse(span.canContain(div));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,60,@Test public void imgSemantics() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,61,"Tag img = Tag.valueOf(""img"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,62,"Tag p = Tag.valueOf(""p"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,64,assertFalse(img.canContain(img));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,65,assertFalse(img.canContain(p));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,68,@Test public void defaultSemantics() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,69,"Tag foo = Tag.valueOf(""foo""); // not defined"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,70,"Tag foo2 = Tag.valueOf(""FOO"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,71,"Tag div = Tag.valueOf(""div"");"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,73,"assertEquals(foo, foo2);"
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,74,assertTrue(foo.canContain(foo));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,75,assertTrue(foo.canContain(div));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,76,assertTrue(div.canContain(foo));
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,79,@Test(expected = IllegalArgumentException.class) public void valueOfChecksNotNull() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,80,Tag.valueOf(null);
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,83,@Test(expected = IllegalArgumentException.class) public void valueOfChecksNotEmpty() {
True,src/test/java/org/jsoup/parser/TagTest.java,src/test/java/org/jsoup/parser/TagTest.java,84,"Tag.valueOf("" "");"

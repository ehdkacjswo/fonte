is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,20,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,24,import java.util.Map;
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,25,import java.util.TreeSet;
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,37,rivate final List<WarningsGuard> guards;
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,38,rivate static final Comparator<WarningsGuard> guardComparator =
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,40,// The order that the guards were added in.
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,41,"private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,42,private int numberOfAdds = 0;
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,44,private final Comparator<WarningsGuard> guardComparator =
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,42,eturn a.getPriority() - b.getPriority();
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,48,int priorityDiff = a.getPriority() - b.getPriority();
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,49,if (priorityDiff != 0) {
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,50,return priorityDiff;
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,53,"// If the warnings guards have the same priority, the one that"
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,54,// was added last wins.
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,55,return orderOfAddition.get(b).intValue() -
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,56,orderOfAddition.get(a).intValue();
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,60,// The order that the guards are applied in.
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,61,private final TreeSet<WarningsGuard> guards =
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,62,new TreeSet<WarningsGuard>(guardComparator);
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,47,his.guards = Lists.newArrayList();
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,58,ddGuards(Lists.reverse(((ComposeWarningsGuard) guard).guards));
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,75,addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,60,"nt index = Collections.binarySearch(this.guards, guard, guardComparator);"
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,61,f (index < 0) {
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,62,ndex = -index - 1;
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,64,"his.guards.add(index, guard);"
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,77,numberOfAdds++;
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,78,"orderOfAddition.put(guard, numberOfAdds);"
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,79,guards.remove(guard);
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,80,guards.add(guard);
False,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,123,eturn Collections.unmodifiableList(guards);
True,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,src/com/google/javascript/jscomp/ComposeWarningsGuard.java,139,return Collections.unmodifiableList(Lists.newArrayList(guards));

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,396,f (n == null || NodeUtil.isLiteralValue(n) ||
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,396,"if (n == null || NodeUtil.isLiteralValue(n, true) ||"
False,src/com/google/javascript/jscomp/InlineGetters.java,src/com/google/javascript/jscomp/InlineGetters.java,95, else if (NodeUtil.isLiteralValue(returned) &&
True,src/com/google/javascript/jscomp/InlineGetters.java,src/com/google/javascript/jscomp/InlineGetters.java,95,"} else if (NodeUtil.isLiteralValue(returned, false) &&"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,552,eturn NodeUtil.isLiteralValue(value)
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,552,"return NodeUtil.isLiteralValue(value, true)"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,581,"hrow new IllegalStateException(""Unexpected initialiation parent"");"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,581,"throw new IllegalStateException(""Unexpected initialization parent "" +"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,582,initialization.getParent().toStringTree());
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,205, function() { return a; } is not.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,205,* the name a is not.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,207,"* Function literals do not meet this definition, because they"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,208,"* lexically capture variables. For example, if you have"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,209,* <code>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,210,* function() { return a; }
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,211,* </code>
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,212,"* If it is evaluated in a different scope, then it"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,213,* captures a different variable. Even if the function did not read
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,214,"* any captured vairables directly, it would still fail this definition,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,215,* because it affects the lifecycle of variables in the enclosing scope.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,217,"* However, a function literal with respect to a particular scope is"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,218,* a literal.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,220,"* @param includeFunctions If true, all function expressions will be"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,221,*     treated as literals.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,207,tatic boolean isLiteralValue(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,208,/ TODO(nicksantos): Refine this function to catch more literals.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,223,"static boolean isLiteralValue(Node n, boolean includeFunctions) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,216,f (!isLiteralValue(child)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,231,"if (!isLiteralValue(child, includeFunctions)) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,237,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,238,return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,412,eturn !isFunctionExpression(n);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,430,return checkForNewObjects || !isFunctionExpression(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,459,eturn !(isLiteralValue(current) ||
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,460,urrent.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,477,"return !isLiteralValue(current, true);"
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,180,"arameters.add(new Parameter(cur, NodeUtil.isLiteralValue(cur)));"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,180,"parameters.add(new Parameter(cur, NodeUtil.isLiteralValue(cur, false)));"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,160,f (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,160,"if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true)) {"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,167,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,168,"typeNameString = ""function"";"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,169,break;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,305,f (NodeUtil.isLiteralValue(left)
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,308,"if (NodeUtil.isLiteralValue(left, true)"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,486,f (NodeUtil.isLiteralValue(right) &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,489,"if (NodeUtil.isLiteralValue(right, false) &&"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,588,f (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,591,"if (NodeUtil.isLiteralValue(left, false) &&"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,592,"NodeUtil.isLiteralValue(right, false)) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,721,f (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,725,"if (!NodeUtil.isLiteralValue(left, false) ||"
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,726,"!NodeUtil.isLiteralValue(right, false)) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,733,oolean rightLiteral = NodeUtil.isLiteralValue(right);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,738,"boolean rightLiteral = NodeUtil.isLiteralValue(right, false);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,737,& NodeUtil.isLiteralValue(right.getFirstChild())));
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,742,"&& NodeUtil.isLiteralValue(right.getFirstChild(), false)));"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,741,f (!NodeUtil.isLiteralValue(left.getFirstChild())) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,746,"if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {"
False,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,81,f (!NodeUtil.isLiteralValue(argumentNode) &&
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,81,"if (!NodeUtil.isLiteralValue(argumentNode, true) &&"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,229,f (!NodeUtil.isLiteralValue(cond)) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,229,"if (!NodeUtil.isLiteralValue(cond, true)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,185,f (NodeUtil.isLiteralValue(cond)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,185,"if (NodeUtil.isLiteralValue(cond, true)) {"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,239,NodeUtil.isLiteralValue(value);
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,239,"!NodeUtil.isLiteralValue(value, true);"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,249,ssign.assignNode.getLastChild())) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,249,"assign.assignNode.getLastChild(), true)) {"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,69,ssertTrue(NodeUtil.isLiteralValue(n));
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,69,"assertTrue(NodeUtil.isLiteralValue(n, true));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,70,"assertTrue(NodeUtil.isLiteralValue(n, false));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,74,ssertTrue(NodeUtil.isLiteralValue(n));
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,75,"assertTrue(NodeUtil.isLiteralValue(n, true));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,76,"assertTrue(NodeUtil.isLiteralValue(n, false));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,79,ssertFalse(NodeUtil.isLiteralValue(n));
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,81,"assertFalse(NodeUtil.isLiteralValue(n, true));"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,82,"assertFalse(NodeUtil.isLiteralValue(n, false));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,344,"ssertMutableState(false, ""(function() { })"");"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,345,"ssertMutableState(false, ""(function() { i++ })"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,347,"assertMutableState(true, ""(function() { })"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,348,"assertMutableState(true, ""(function() { i++ })"");"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,363,"ssertMutableState(false, ""(function(a, b) {  })"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,366,"assertMutableState(true, ""(function(a, b) {  })"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,561,"fold(""x = typeof function() {}"", ""x = 'function'"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,591,"fold(""(function() {}) instanceof Object"", ""true"");"
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,321,public void testUnusedPropAssign6() {
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,322,"test(""var x = function() {}; x.prototype.bar = function() {};"","
True,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,323,"""(function(){})"");"

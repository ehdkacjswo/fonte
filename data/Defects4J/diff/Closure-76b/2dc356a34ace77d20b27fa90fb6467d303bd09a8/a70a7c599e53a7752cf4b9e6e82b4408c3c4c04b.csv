is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,326,"eturn new Node(Token.EXPR_RESULT, child);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,326,"Node expr = new Node(Token.EXPR_RESULT, child);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,327,expr.copyInformationFrom(child);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,328,return expr;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,275,".addChildBefore(new Node(Token.EMPTY), expr);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,276,".addChildAfter(new Node(Token.EMPTY), expr);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,275,Node empty = new Node(Token.EMPTY);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,276,empty.copyInformationFrom(n);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,277,"n.addChildBefore(empty, expr);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,278,"n.addChildAfter(empty.cloneNode(), expr);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,385,block.copyInformationFrom(last);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,416,".replaceChild(init, new Node(Token.EMPTY));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,419,Node empty = new Node(Token.EMPTY);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,420,empty.copyInformationFrom(c);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,421,"c.replaceChild(init, empty);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,584,"ramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,589,replacement.copyInformationFrom(parent);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,590,"gramps.replaceChild(parent, NodeUtil.newExpr(replacement));"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,597,"ramps.replaceChild(parent, new Node(Token.EMPTY));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,603,// We should never get here. LABELs with a single VAR statement should
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,604,// already have been normalized to have a BLOCK.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,605,"throw new IllegalStateException(""Unexpected LABEL"");"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,106,newBlock.copyInformationFrom(n);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,613,cur.setLineno(label.getLineno());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,614,int clauseAbsolutePosition =
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,615,position2charno(label.getAbsolutePosition());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,616,cur.setCharno(clauseAbsolutePosition);
True,test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java,test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java,29,public NodeTypeNormalizerTest() {
True,test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java,test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java,30,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,31,super.enableLineNumberCheck(true);

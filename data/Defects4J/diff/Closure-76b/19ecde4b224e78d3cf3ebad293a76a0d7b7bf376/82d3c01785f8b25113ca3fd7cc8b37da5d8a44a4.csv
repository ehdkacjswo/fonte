is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,20,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,23,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,24,import com.google.javascript.jscomp.graph.Graph.GraphEdge;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,25,import com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,import com.google.javascript.jscomp.graph.UndiGraph;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,mport java.util.*;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,31,import java.util.ArrayList;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,32,import java.util.Arrays;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,33,import java.util.Collection;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,34,import java.util.Comparator;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,35,import java.util.HashMap;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,36,import java.util.HashSet;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,37,import java.util.List;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,38,import java.util.Map;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,39,import java.util.Set;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,40,import java.util.TreeSet;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,81,* A graph of property affinity information.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,83,* Suppose property X and Y are access in the same function N times.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,85,* The graph would have X -> Y with the edge of N.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,87,"private final UndiGraph<Property, PropertyAffinity> affinityGraph ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,88,LinkedUndirectedGraph.createWithoutAnnotations();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,74," Sorts Property objects by their count, breaking ties alphabetically to"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,75, ensure a deterministic total ordering.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,78,ew Comparator<Property>() {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,79,"ublic int compare(Property p1, Property p2) {"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,80,f (p1.numOccurrences != p2.numOccurrences) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,81,eturn p2.numOccurrences - p1.numOccurrences;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,83,eturn p1.oldName.compareTo(p2.oldName);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,98,new Comparator<Property>() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,99,"public int compare(Property p1, Property p2) {"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,102,* First a frequently used names would always be picked first.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,104,if (p1.numOccurrences != p2.numOccurrences) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,105,return p2.numOccurrences - p1.numOccurrences;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,108,* If both properties are used equally frequent. We'll let the property
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,109,* with a high affinity score get a name first.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,111,* see #computeAffinityScores() for how the score is computed.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,113,} else if (p1.affinityScore != p2.affinityScore) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,114,return p2.affinityScore - p1.affinityScore;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,118,"* Finally, for determinism, we compare them based on the old name."
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,120,return p1.oldName.compareTo(p2.oldName);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,211,computeAffinityScores();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,286,* A X property gets an affinity score:
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,288,* score = sum (# of times X appears Y * frequency(Y)) for all Y where
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,289,*   frequency(Y) > frequency (X).
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,291,* This way a property would have a name closer to all high frequency names.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,292,* Also two property of the same frequency would have very close names if
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,293,* they always appear together.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,295,private void computeAffinityScores() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,296,for (Property p : propertyMap.values()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,297,for (Property other : propertyMap.values()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,298,if (p != other && p.numOccurrences < other.numOccurrences) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,299,"List<GraphEdge<Property,PropertyAffinity>> edges ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,300,"affinityGraph.getEdges(p, other);"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,301,if (!edges.isEmpty()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,302,p.affinityScore += edges.get(0)
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,303,.getValue().affinity + other.numOccurrences;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,323,rivate class ProcessProperties extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,385,private class ProcessProperties extends AbstractPostOrderCallback implements
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,386,ScopedCallback {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,388,private Set<Property> currentHighAffinityProperties = null;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,510,affinityGraph.createNode(prop);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,513,if (currentHighAffinityProperties != null) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,514,currentHighAffinityProperties.add(prop);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,518,@Override
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,519,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,520,if (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,521,currentHighAffinityProperties = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,525,@Override
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,526,public void exitScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,527,if (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,528,for (Property p1 : currentHighAffinityProperties) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,529,for (Property p2 : currentHighAffinityProperties) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,530,if (p1.oldName.compareTo(p2.oldName) < 0) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,531,"List<GraphEdge<Property,PropertyAffinity>> edges ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,532,"affinityGraph.getEdges(p1, p2);"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,533,if (edges.isEmpty()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,534,"affinityGraph.connect(p1, new PropertyAffinity(1), p2);"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,535,} else {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,536,edges.get(0).getValue().increase();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,541,currentHighAffinityProperties = null;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,555,int affinityScore = 0;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,562,private class PropertyAffinity {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,563,private int affinity = 0;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,565,private PropertyAffinity(int affinity) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,566,this.affinity = affinity;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,569,private void increase() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,570,affinity++;
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,256,public void testPropertyAffinity() {
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,257,// 'y' gets to be 'b' because it appears with z often.
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,258,"// Other wise, 'x' gets to be 'b' because of alphabetical ordering."
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,260,"test(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,261,"""function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,262,"""function f2() {                      foo.x}"","
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,265,"""var foo={};foo.c=1;foo.b=2;foo.a=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,266,"""function f1() { foo.a; foo.a; foo.a; foo.b}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,267,"""function f2() {                      foo.c}"");"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,269,"test(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,270,"""function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,271,"""function f2() { foo.z; foo.z; foo.z; foo.x}"","
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,274,"""var foo={};foo.b=1;foo.c=2;foo.a=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,275,"""function f1() { foo.a; foo.a; foo.a; foo.c}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,276,"""function f2() { foo.a; foo.a; foo.a; foo.b}"");"

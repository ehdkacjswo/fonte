is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,28,import com.google.javascript.jscomp.CompilerOptions.TweakProcessing;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,201,"reateDefineReplacements(config.define, options);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,202,"createDefineOrTweakReplacements(config.define, options, false);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,204,options.setTweakProcessing(config.tweakProcessing);
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,205,"createDefineOrTweakReplacements(config.tweak, options, true);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,990,"tatic void createDefineReplacements(List<String> definitions,"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,991,ompilerOptions options) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,994,"static void createDefineOrTweakReplacements(List<String> definitions,"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,995,"CompilerOptions options, boolean tweaks) {"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,998,f (assignment.length == 1) {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,999,"ptions.setDefineToBooleanLiteral(defName, true);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1000,ontinue;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1001, else {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1002,tring defValue = assignment[1];
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1002,"String defValue = assignment.length == 1 ? ""true"" : assignment[1];"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1004,"f (defValue.equals(""true"")) {"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1005,"ptions.setDefineToBooleanLiteral(defName, true);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1006,ontinue;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1007," else if (defValue.equals(""false"")) {"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1008,"ptions.setDefineToBooleanLiteral(defName, false);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1009,ontinue;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1010, else if (defValue.length() > 1
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1011,& ((defValue.charAt(0) == '\'' &&
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1012,efValue.charAt(defValue.length() - 1) == '\'')
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1013,"| (defValue.charAt(0) == '\""' &&"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1014,"efValue.charAt(defValue.length() - 1) == '\""'))) {"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1015,"/ If the value starts and ends with a single quote,"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1016,/ we assume that it's a string.
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1017,tring maybeStringVal =
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1018,"efValue.substring(1, defValue.length() - 1);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1019,f (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1004,"boolean isTrue = defValue.equals(""true"");"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1005,"boolean isFalse = defValue.equals(""false"");"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1006,if (isTrue || isFalse) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1007,if (tweaks) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1008,"options.setTweakToBooleanLiteral(defName, isTrue);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1009,} else {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1010,"options.setDefineToBooleanLiteral(defName, isTrue);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1012,continue;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1013,} else if (defValue.length() > 1
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1014,&& ((defValue.charAt(0) == '\'' &&
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1015,defValue.charAt(defValue.length() - 1) == '\'')
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1016,"|| (defValue.charAt(0) == '\""' &&"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1017,"defValue.charAt(defValue.length() - 1) == '\""'))) {"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1018,"// If the value starts and ends with a single quote,"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1019,// we assume that it's a string.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1020,String maybeStringVal =
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1021,"defValue.substring(1, defValue.length() - 1);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1022,if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1023,if (tweaks) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1024,"options.setTweakToStringLiteral(defName, maybeStringVal);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1025,} else {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1021,ontinue;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1023, else {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1024,ry {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1025,"ptions.setDefineToDoubleLiteral(defName,"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1026,ouble.parseDouble(defValue));
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1027,ontinue;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1028, catch (NumberFormatException e) {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1029,"/ do nothing, it will be caught at the end"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1028,continue;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1030,} else {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1031,try {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1032,double value = Double.parseDouble(defValue);
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1033,if (tweaks) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1034,"options.setTweakToDoubleLiteral(defName, value);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1035,} else {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1036,"options.setDefineToDoubleLiteral(defName, value);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1038,continue;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1039,} catch (NumberFormatException e) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1040,"// do nothing, it will be caught at the end"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1045,if (tweaks) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1046,throw new RuntimeException(
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1047,"""--tweak flag syntax invalid: "" + override);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1509,private final List<String> tweak = Lists.newArrayList();
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1512,* Override the default value of a registered tweak. The format is
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1513,"* <name>[=<val>], where <name> is the ID of a tweak and <val> is a boolean,"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1514,"* number, or a single-quoted string that contains no single quotes. If"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1515,"* [=<val>] is omitted, then true is assumed."
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1517,CommandLineConfig setTweak(List<String> tweak) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1518,this.tweak.clear();
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1519,this.tweak.addAll(tweak);
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1520,return this;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1523,private TweakProcessing tweakProcessing = TweakProcessing.OFF;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1526,* Sets the kind of processing to do for goog.tweak functions.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1528,CommandLineConfig setTweakProcessing(TweakProcessing tweakProcessing) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1529,this.tweakProcessing = tweakProcessing;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,1530,return this;
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,119,"ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,"
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,74,tatic final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_ERROR =
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,75,iagnosticType.error(
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,76,"JSC_INVALID_TWEAK_DEFAULT_VALUE_ERROR"","
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,77,"tweak registered with {0} must have a default value that is a "" +"
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,78,"literal of type {0}"");"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,74,static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,75,DiagnosticType.warning(
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,76,"""JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING"","
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,77,"""tweak {0} registered with {1} must have a default value that is a "" +"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,78,"""literal of type {2}"");"
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,94,"tweak getter function {0} used for tweak registered using {0}"");"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,94,"""tweak getter function {0} used for tweak registered using {1}"");"
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,295,weakInfo.defaultValueNode = entry.getValue();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,295,TweakFunction registerFunc = tweakInfo.registerCall.tweakFunc;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,296,Node value = entry.getValue();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,297,if (!registerFunc.isValidNodeType(value.getType())) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,298,"compiler.report(JSError.make(INVALID_TWEAK_DEFAULT_VALUE_WARNING,"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,299,"tweakId, registerFunc.getName(),"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,300,registerFunc.getExpectedTypeName()));
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,301,} else {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,302,tweakInfo.defaultValueNode = value;
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,488,"alueNode, INVALID_TWEAK_DEFAULT_VALUE_ERROR,"
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,489,"egisterFunc.getName(),"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,496,"valueNode, INVALID_TWEAK_DEFAULT_VALUE_WARNING,"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,497,"tweakId, registerFunc.getName(),"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,23,import java.util.Collections;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,25,import java.util.Set;
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,45,rotected CompilerPass getProcessor(Compiler compiler) {
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,46,"eturn new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,47,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,48,return new CompilerPass() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,49,@Override
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,50,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,51,ProcessTweaks processTweak =
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,52,"new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,53,"processTweak.process(externs, root);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,55,if (stripTweaks) {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,56,Set<String> emptySet = Collections.emptySet();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,57,"final StripCode stripCode = new StripCode(compiler, emptySet,"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,58,"emptySet, emptySet, emptySet);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,59,stripCode.enableTweakStripping();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,60,"stripCode.process(externs, root);"
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,106,"est(""var val = true; goog.tweak.registerBoolean('Foo', 'desc', val)"", null,"
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,107,rocessTweaks.INVALID_TWEAK_DEFAULT_VALUE_ERROR);
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,123,"testSame(""var val = true; goog.tweak.registerBoolean('Foo', 'desc', val)"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,124,ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING);
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,111,"est(""goog.tweak.overrideDefaultValue('Foo', 3 + 1);"" +"
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,112,"goog.tweak.registerNumber('Foo', 'desc')"", null,"
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,113,rocessTweaks.INVALID_TWEAK_DEFAULT_VALUE_ERROR);
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,128,"testSame(""goog.tweak.overrideDefaultValue('Foo', 3 + 1);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,129,"""goog.tweak.registerNumber('Foo', 'desc')"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,130,ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING);
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,247,public void testStrippingOfManuallyRegistered1() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,248,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,249,"test(""var reg = goog.tweak.getRegistry();"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,250,"""if (reg) {"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,251,"""  reg.register(new goog.tweak.BooleanSetting('foo', 'desc'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,252,"""  reg.getEntry('foo').setDefaultValue(1);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,254,"""if (null);"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,310,public void testCompilerOverrideWithWrongType() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,311,allowSourcelessWarnings();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,312,"defaultValueOverrides.put(""TweakA"", Node.newString(""!""));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,313,"testSame(""goog.tweak.registerBoolean('TweakA', 'desc')"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,314,ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING);

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,22,mport com.google.common.base.Tracer;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,21,mport com.google.common.base.Tracer;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,2,* Copyright 2002 Google Inc.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,19,import com.google.common.annotations.VisibleForTesting;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,20,import com.google.common.base.Joiner;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,21,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,23,import java.util.ArrayList;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,24,import java.util.HashMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,25,import java.util.HashSet;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,26,import java.util.LinkedList;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,27,import java.util.List;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,28,import java.util.Map;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,29,import java.util.concurrent.ConcurrentHashMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,30,import java.util.concurrent.ConcurrentMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,31,import java.util.concurrent.CopyOnWriteArrayList;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,32,import java.util.logging.Level;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,33,import java.util.logging.Logger;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,35,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,38,* Tracer provides a simple way to trace the handling of a request.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,40,* By timing likely slow points in the code you can quickly pinpoint
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,41,* why a request is slow.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,43,* <p>Example usage:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,44,* <pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,45,* Tracer.initCurrentThreadTrace(); // must be called in each Thread
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,46,"* Tracer wholeRequest = new Tracer(null, ""Request "" + params);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,47,* try {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,49,"*   t = new Tracer(""Database"", ""getName()"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,50,*   try {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,51,*     name = database.getName();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,52,*   } finally {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,53,*     t.stop();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,56,"*   t = new Tracer(null, ""call sendmail"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,57,*   try {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,58,*     sendMessage();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,59,*   } finally {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,60,*     t.stop();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,63,"*   t = new Tracer(""Database"", ""updateinfo()"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,64,*   try {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,65,"*     database.updateinfo(""new info"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,66,*   } finally {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,67,*     t.stop();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,70,* } finally {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,71,*   if (wholeRequest.stop() > 1000) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,72,"*     // more than a second, better log"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,73,*     Tracer.logAndClearCurrentThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,74,*   } else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,75,*     Tracer.clearCurrentThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,78,* </pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,80,* Now slow requests will produce a report like this:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,81,* <pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,82,*       10.452 Start        Request cmd=dostuff
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,83,*     3 10.455 Start        [Database] getName()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,84,*    34 10.489 Done   34 ms [Database] getName()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,85,*     3 10.491 Start        call sendmail
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,86,*  1042 11.533 Done 1042 ms call sendmail
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,87,*     0 11.533 Start        [Database] updateinfo()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,88,*     3 11.536 Done    3 ms [Database] updateinfo()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,89,*    64 11.600 Done 1148 ms Request cmd=dostuff
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,90,*   TOTAL Database 2 (37 ms)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,91,* </pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,93,"* If you enabled pretty-printing by calling {@link Tracer#setPrettyPrint},"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,94,* it will print more easily readable reports that use indentation to visualize
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,95,* the tracer hierarchy and dynamically adjusts the padding to handle large
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,96,* durations. Like:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,97,* <pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,98,*       10.452 Start        Request cmd=dostuff
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,99,*     3 10.455 Start        | [Database] getName()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,100,*    34 10.489 Done   34 ms | [Database] getName()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,101,*     3 10.491 Start        | call sendmail
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,102,*  1042 11.533 Done 1042 ms | call sendmail
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,103,*     0 11.533 Start        | [Database] updateinfo()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,104,*     3 11.536 Done    3 ms | [Database] updateinfo()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,105,*    64 11.600 Done 1148 ms Request cmd=dostuff
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,106,*   TOTAL Database 2 (37 ms)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,107,* </pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,108,* Pretty-printing is an application global setting and should only be called
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,109,"* in the main setup of an application, not in library code."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,111,"* Now you can easily see that sendmail is causing your problems, not"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,112,* the two database calls.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,114,* You can easily add additional tracing statistics to your Trace output by
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,115,* adding additional tracing statistics. Simply add to your initialization code:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,116,* <pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,117,*    Tracer.addTracingStatistic(myTracingStatistic)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,118,* </pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,119,* where myTracingStatistic implements the {@link TracingStatistic} interface.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,120,* The class {@link com.google.monitoring.tracing.TracingStatistics} contains
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,121,"* several useful statistics such as cpu time, wait time, and memory usage."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,122,"* If you add your own tracing statistics, the output is not quite as pretty,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,123,* but includes additional useful information.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,124,* <pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,125,*    31.980 Start        [LockManager] Waiting for user lock
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,126,*   9 31.989 Done    9 ms    0ms cpu;  5944bytes;  [LockManager] Waiting for user lock
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,127,*   0 31.989 Start        [CssClientImpl] ThreadGet (1 thread)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,128,*   5 31.994 Done    5 ms    0ms cpu;  2832bytes;  [CssClientImpl] ThreadGet (1 thread)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,129,*   0 31.994 Start        [MessageSorter] sort
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,130,*   0 31.994 Done    0 ms    0ms cpu;   600bytes;  [MessageSorter] sort
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,131,*   0 31.994 Start        [ConversationView] getMessageSummaries
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,132,*   0 31.994 Start        [ConversationView] creating message summary 0
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,133,*   1 31.995 Done    1 ms    0ms cpu;  5800bytes;  [ConversationView] creating message summary 0
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,134,*   0 31.995 Start        [ConversationView] creating message summary 1
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,135,*   0 31.995 Done    0 ms    0ms cpu;  5464bytes;  [ConversationView] creating message summary 1
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,137,* TOTAL NameDetector 3 (0 ms; 0 ms cpu;  784 bytes)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,138,* TOTAL Format 4 (1 ms; 0 ms cpu; 7344 bytes)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,139,* TOTAL ConversationView 5 (4 ms; 0 ms cpu; 55456 bytes)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,140,</pre>
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,142,* <p>If a Trace is given a type (the first argument to the constructor) and
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,143,"* multiple Traces are done on that type then a ""TOTAL line will be"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,144,* produced showing the total number of traces and the sum of the time
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,145,"* (""TOTAL Database 2 (37 ms)"" in our example). These traces should be"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,146,* mutually exclusive or else the sum won't make sense (the time will
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,147,* be double counted if the second starts before the first ends).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,149,"* <p>It is also possible to have a ""silent"" Tracer which does not appear"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,150,* in the trace because it was faster than the silence threshold. This
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,151,* threshold can be set for the for the current ThreadTrace with
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,152,"* setDefaultSilenceThreshold(threshold), or on a per-Tracer basis with"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,153,* t.stop(threshold). Silent tracers are still counted in the type
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,154,"* totals, so these events are not completely lost."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,156,* <p><b>WARNING:</b> This code makes a big assumption that
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,157,* everything for a given trace is done within a single thread.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,158,* It uses threads to identify requests. It is fine to have multiple
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,159,* requests traced in multiple simultaneous threads but it is not ok
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,160,* to have any given request traced in multiple threads. (the results
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,161,* will be scattered accross reports).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,163,* Java objects do not support destructors (as in C++) so Tracer is not robust
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,164,* when exceptions are thrown. Each Tracer object should be wrapped in a
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,165,"* try/finally block so that if an exception is thrown, the Tracer.stop()"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,166,* method is guaranteed to be called.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,168,* <p>A thread must call {@link Tracer#initCurrentThreadTrace()} to enable the
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,169,"* Tracer logging, otherwise Tracer does nothing.  The requirement to call"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,170,* {@code initCurrentThreadTrace} avoids the situtation where Tracer is called
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,171,* without the explicit knowledge of the application authors because they
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,172,* happen to use a class in another package that uses Tracer. If {@link
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,173,* Tracer#logCurrentThreadTrace} is called without calling {@link
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,174,"* Tracer#initCurrentThreadTrace()}, then a Third Eye WARNING message is logged,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,175,* which should help track down the problem.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,179,final class Tracer {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,180,// package-private for access from unit tests
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,181,static final Logger logger =
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,182,Logger.getLogger(Tracer.class.getName());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,185,* Whether pretty printing is enabled. This is intended to be set once
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,186,* at application startup.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,188,private static volatile boolean defaultPrettyPrint;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,190,/* This list is guaranteed to only increase in length.  It contains a list of additional
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,191,* statistics that the user wants to keep track of.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,193,private static List<TracingStatistic> extraTracingStatistics =
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,194,new CopyOnWriteArrayList<TracingStatistic>();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,196,/** Values returned by extraTracingStatistics */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,197,private long[] extraTracingValues;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,199,"/** The type for grouping traces, may be null */"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,200,private final @Nullable String type;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,202,/** A comment string for the report */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,203,private final String comment;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,205,/** Start time of the trace */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,206,private final long startTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,208,"/** Stop time of the trace, non-final */"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,209,private long stopTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,212,* Record our starter thread in order to trap Traces that are started in one
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,213,* thread and stopped in another
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,215,final Thread startThread;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,218,* We limit the number of events in a Trace in order to catch memory
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,219,* leaks (a thread that keeps logging events and never clears them).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,220,* This number is arbitrary and can be increased if necessary (though
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,221,* if there are more than 1000 events then the Tracer is probably being
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,222,* misused).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,224,static final int MAX_TRACE_SIZE = 1000;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,227,* For unit testing. Can't use {@link com.google.common.time} because
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,228,* this code is in base and has minimal dependencies.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,230,static interface InternalClock {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,231,long currentTimeMillis();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,235,* Default clock that calls through to the system clock. Can be overridden
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,236,* in unit tests.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,238,static InternalClock clock = new InternalClock() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,239,public long currentTimeMillis() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,240,return System.currentTimeMillis();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,245,* Create and start a tracer.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,246,* Both type and comment may be null. See class comment for usage.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,248,* @param type The type for totalling
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,249,* @param comment Comment about this tracer
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,251,"Tracer(@Nullable String type, @Nullable String comment) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,252,this.type = type;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,253,"this.comment = comment == null ? """" : comment;"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,254,startTimeMs = clock.currentTimeMillis();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,255,startThread = Thread.currentThread();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,256,if (!extraTracingStatistics.isEmpty()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,257,int size = extraTracingStatistics.size();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,258,extraTracingValues = new long[size];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,259,int i = 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,260,for (TracingStatistic tracingStatistic : extraTracingStatistics) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,261,extraTracingValues[i] = tracingStatistic.start(startThread);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,262,i++;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,266,ThreadTrace trace = getThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,268,// Do nothing if the current thread trace wasn't initialized.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,269,if (!trace.isInitialized()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,270,return;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,273,// Check if we are creating too many Tracers.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,274,if (trace.events.size() >= MAX_TRACE_SIZE) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,275,"logger.log(Level.WARNING,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,276,"""Giant thread trace. Too many Tracers created. """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,277,"+ ""Clearing to avoid memory leak."","
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,278,new Throwable(trace.toString()));
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,279,trace.truncateEvents();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,282,// Check if we forgot to close the Tracers.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,283,if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,284,"logger.log(Level.WARNING,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,285,"""Too many outstanding Tracers. Tracer.stop() is missing """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,286,"+ ""or Tracer.stop() is not wrapped in a """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,287,"+ ""try/finally block. """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,288,"+ ""Clearing to avoid memory leak."","
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,289,new Throwable(trace.toString()));
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,290,trace.truncateOutstandingEvents();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,293,trace.startEvent(this);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,297,* Create a tracer that isn't summed as part of a total
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,299,* @param comment  Comment about this tracer
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,301,Tracer(String comment) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,302,"this(null, comment);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,306,* Construct a tracer whose type is based on the short name of the object
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,307,* @param object   Object to use as type name
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,308,* @param comment  A comment
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,309,* @return  new Tracer.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,311,"static Tracer shortName(Object object, String comment) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,312,if (object == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,313,return new Tracer(comment);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,315,"return new Tracer(object.getClass().getSimpleName(), comment);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,319,* Converts 'v' to a string and pads it with up to 16 spaces for
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,320,* improved alignment.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,321,* @param v The value to convert.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,322,* @param digits_column_width The desired with of the string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,324,"private static String longToPaddedString(long v, int digits_column_width) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,325,int digit_width = numDigits(v);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,326,StringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,327,"appendSpaces(sb, digits_column_width - digit_width);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,328,sb.append(v);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,329,return sb.toString();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,333,* Gets the number of digits in an integer when printed in base 10. Assumes
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,334,* a positive integer.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,335,* @param n The value.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,336,* @return The number of digits in the string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,338,private static int numDigits(long n) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,339,int i = 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,340,do {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,341,i++;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,342,n = n / 10;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,343,} while (n > 0);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,344,return i;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,348,* Gets a string of spaces of the length specified.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,349,* @param sb The string builder to append to.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,350,* @param numSpaces The number of spaces in the string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,352,@VisibleForTesting
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,353,"static void appendSpaces(StringBuilder sb, int numSpaces) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,354,if (numSpaces > 16) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,355,"logger.warning(""Tracer.appendSpaces called with large numSpaces"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,356,// Avoid long loop in case some bug in the caller
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,357,numSpaces = 16;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,359,while (numSpaces >= 5) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,360,"sb.append(""     "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,361,numSpaces -= 5;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,364,// We know it's less than 5 now
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,365,switch (numSpaces) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,366,case 1:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,367,"sb.append("" "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,368,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,369,case 2:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,370,"sb.append(""  "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,371,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,372,case 3:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,373,"sb.append(""   "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,374,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,375,case 4:
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,376,"sb.append(""    "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,377,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,382,* Adds a new tracing statistic to a trace
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,384,* @param tracingStatistic to enable a run
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,385,"* @return The index of this statistic (for use with stat.extraInfo()), or"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,386,*         -1 if the statistic is not enabled.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,388,static int addTracingStatistic(TracingStatistic tracingStatistic) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,389,// Check to see if we can enable the tracing statistic before actually
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,390,// adding it.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,391,if (tracingStatistic.enable()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,392,"// No synchronization needed, since this is a copy-on-write array."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,393,extraTracingStatistics.add(tracingStatistic);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,394,"// 99.9% of the time, this will be O(1) and return extraTracingStatistics.length - 1"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,395,return extraTracingStatistics.lastIndexOf(tracingStatistic);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,396,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,397,return -1;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,402,* For testing purposes only.  These removes all current tracers.  Severe errors can occur
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,403,* if there are any active tracers going on when this is called.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,405,* The test suite uses this to remove any tracers that it has added.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,407,@VisibleForTesting
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,408,static void clearTracingStatisticsTestingOnly() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,409,extraTracingStatistics.clear();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,413,* Stop the trace.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,414,* This may only be done once and must be done from the same thread
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,415,* that started it.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,416,* @param silence_threshold Traces for time less than silence_threshold
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,417,* ms will be left out of the trace report. A value of -1 indicates
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,418,* that the current ThreadTrace silence_threshold should be used.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,419,* @return The time that this trace actually ran
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,421,long stop(int silence_threshold) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,422,Preconditions.checkState(Thread.currentThread() == startThread);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,424,ThreadTrace trace = getThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,425,// Do nothing if the thread trace was not initialized.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,426,if (!trace.isInitialized()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,427,return 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,430,stopTimeMs = clock.currentTimeMillis();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,431,if (extraTracingValues != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,432,// We use extraTracingValues.length rather than extraTracingStatistics.size() because
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,433,// a new statistic may have been added
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,434,for (int i = 0; i < extraTracingValues.length; i++) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,435,long value = extraTracingStatistics.get(i).stop(startThread);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,436,extraTracingValues[i] = value - extraTracingValues[i];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,440,// Do nothing if the thread trace was not initialized.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,441,if (!trace.isInitialized()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,442,return 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,445,"trace.endEvent(this, silence_threshold);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,446,return stopTimeMs - startTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,449,/** Stop the trace using the default silence_threshold
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,451,* @return  The time that this trace actually ran.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,453,long stop() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,454,return stop(-1);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,457,@Override public String toString() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,458,if (type == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,459,return comment;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,460,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,461,"return ""["" + type + ""] "" + comment;"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,465,static void setDefaultSilenceThreshold(int threshold) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,466,getThreadTrace().defaultSilenceThreshold = threshold;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,470,* Initialize the trace associated with the current thread by clearing
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,471,* out any existing trace. There shouldn't be a trace so if one is
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,472,* found we log it as an error.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,474,static void initCurrentThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,475,ThreadTrace events = getThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,476,if (!events.isEmpty()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,477,"logger.log(Level.WARNING,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,478,"""Non-empty timer log:\n"" + events,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,479,new Throwable());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,480,clearThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,482,// Grab a new thread trace if we find a previous non-empty ThreadTrace.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,483,events = getThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,486,// Mark the thread trace as initialized.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,487,events.init();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,490,static void initCurrentThreadTrace(int default_silence_threshold) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,491,initCurrentThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,492,setDefaultSilenceThreshold(default_silence_threshold);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,496,* Returns a timer report similar to the one described in the class comment.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,498,* @return The timer report as a string
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,500,static String getCurrentThreadTraceReport() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,501,return getThreadTrace().toString();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,505,* Logs a timer report similar to the one described in the class comment.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,507,static void logCurrentThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,508,ThreadTrace trace = getThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,510,// New threads must call Tracer.initCurrentThreadTrace() before Tracer
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,511,// statistics are gathered. This is a recent change (Jun 2007) that
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,512,// prevents spurious Third Eye messages when an application uses a class in
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,513,// a different package that happens to call Tracer without knowledge of the
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,514,// application authors.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,515,if (!trace.isInitialized()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,516,"logger.log(Level.WARNING,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,517,"""Tracer log requested for this thread but was not """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,518,"+ ""initialized using Tracer.initCurrentThreadTrace()."","
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,519,new Throwable());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,520,return;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,523,if (!trace.isEmpty()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,524,"logger.log(Level.INFO, ""timers:\n{0}"", getCurrentThreadTraceReport());"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,529,* Throw away any Trace associated with the current thread.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,531,static void clearCurrentThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,532,clearThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,536,* logCurrentThreadTrace() then clearCurrentThreadTrace()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,538,static void logAndClearCurrentThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,539,logCurrentThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,540,clearThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,544,* Sets whether pretty printing is enabled. See class-level comment. This
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,545,* only affects tracers created after this is called.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,546,* @param enabled Whether to enable pretty printing.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,548,static void setPrettyPrint(boolean enabled) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,549,defaultPrettyPrint = enabled;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,552,/** Statistics for a given tracer type */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,553,static final class Stat {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,554,private int count;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,555,private int silent;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,556,private int clockTime;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,557,private int[] extraInfo;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,559,"/** total count of tracers of a type, including silent"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,561,"* @return total count of tracers, including silent tracers"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,563,int getCount() { return count; }
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,565,/** total count of silent tracers of a type
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,567,* @return total count of silent tracers
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,569,int getSilentCount() { return silent; }
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,571,"/** total time spent in tracers of a type, in ms"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,573,"* @return total time spent in tracer, in ms"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,575,int getTotalTime() { return clockTime; }
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,577,/** total time spent doing additional things that we are clocking */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,578,@VisibleForTesting
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,579,int getExtraInfo(int index) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,580,return index >= extraInfo.length ? 0 : extraInfo[index];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,586,* This map tracks counts of tracers for each type over all time.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,588,private static @Nullable AtomicTracerStatMap typeToCountMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,591,* This map tracks counts of silent tracers for each type over all time.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,593,private static @Nullable AtomicTracerStatMap typeToSilentMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,596,* This map tracks time (ms) for each type over all time.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,598,private static @Nullable AtomicTracerStatMap typeToTimeMap;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,601,* This method MUST be called before getTypeToCountMap (and friends)
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,602,* will return a valid map.  This is because computing this information
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,603,* imposes a synchronization penalty on every Tracer that is stopped.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,605,static synchronized void enableTypeMaps() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,606,if (typeToCountMap == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,607,typeToCountMap = new AtomicTracerStatMap();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,608,typeToSilentMap = new AtomicTracerStatMap();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,609,typeToTimeMap = new AtomicTracerStatMap();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,614,* Used for exporting this data via varz.  Accesses to this
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,615,* map must be synchronized on the map.  If enableTypeMaps has not
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,616,"* been called, this will return null."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,618,"static @Nullable Map<String, Long> getTypeToCountMap() {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,619,return typeToCountMap != null ? typeToCountMap.getMap() : null;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,623,* Used for exporting this data via varz.  Accesses to this
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,624,* map must be synchronized on the map.  If enableTypeMaps has not
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,625,"* been called, this will return null."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,627,"static @Nullable Map<String, Long> getTypeToSilentMap() {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,628,return typeToSilentMap != null ? typeToSilentMap.getMap() : null;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,632,* Used for exporting this data via varz.  Accesses to this
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,633,* map must be synchronized on the map.  If enableTypeMaps has not
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,634,"* been called, this will return null."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,636,"static @Nullable Map<String, Long> getTypeToTimeMap() {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,637,return typeToTimeMap != null ? typeToTimeMap.getMap() : null;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,640,/** Gets the Stat for a tracer type; never returns null */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,641,static Stat getStatsForType(String type) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,642,Stat stat = getThreadTrace().stats.get(type);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,643,return stat != null ? stat : ZERO_STAT;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,646,private static final Stat ZERO_STAT = new Stat();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,648,"/** Return the sec.ms part of time (if time = ""20:06:11.566"",  ""11.566"") */"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,649,private static String formatTime(long time) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,650,int sec = (int) ((time / 1000) % 60);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,651,int ms = (int) (time % 1000);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,652,"return String.format(""%02d.%03d"", sec, ms);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,655,/** An event is created every time a Tracer is created or stopped */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,656,private static final class Event {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,657,boolean isStart;   // else is_stop
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,658,Tracer tracer;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,660,"Event(boolean start, Tracer t) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,661,isStart = start;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,662,tracer = t;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,665,long eventTime() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,666,return isStart ? tracer.startTimeMs : tracer.stopTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,670,* Converts the event to a formatted string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,671,* @param prevEventTime The time of the previous event which appears at
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,672,*     the left most part of the trace line.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,673,* @param indent The indentation to put before the tracer to show the
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,674,*     hieararchy.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,675,* @param digitsColWidth How many characters the digits should use.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,676,* @return The formatted string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,678,"String toString(long prevEventTime, String indent, int digitsColWidth) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,679,StringBuilder sb = new StringBuilder(120);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,681,if (prevEventTime == -1) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,682,"appendSpaces(sb, digitsColWidth);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,683,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,684,"sb.append(longToPaddedString(eventTime() - prevEventTime, digitsColWidth));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,687,sb.append(' ');
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,688,sb.append(formatTime(eventTime()));
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,689,if (isStart) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,690,"sb.append("" Start "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,691,"appendSpaces(sb, digitsColWidth);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,692,"sb.append(""   "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,693,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,694,"sb.append("" Done "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,695,long delta = tracer.stopTimeMs - tracer.startTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,696,"sb.append(longToPaddedString(delta, digitsColWidth));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,697,"sb.append("" ms "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,698,if (tracer.extraTracingValues != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,699,for (int i = 0; i < tracer.extraTracingValues.length; i++) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,700,delta = tracer.extraTracingValues[i];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,701,"sb.append(String.format(""%4d"", delta));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,702,sb.append(extraTracingStatistics.get(i).getUnits());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,703,"sb.append("";  "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,707,sb.append(indent);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,708,sb.append(tracer.toString());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,709,return sb.toString();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,713,/** Stores a thread's Trace */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,714,static final class ThreadTrace {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,716,/** Events taking less than this number of milliseconds are not reported. */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,717,int defaultSilenceThreshold; // non-final
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,719,/** The Events corresponding to each startEvent/stopEvent */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,720,final ArrayList<Event> events = new ArrayList<Event>();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,722,/** Tracers that have not had their .stop() called */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,723,final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,725,/** Map from type to Stat object */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,726,"final Map<String, Stat> stats = new HashMap<String, Stat>();"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,729,* True if {@code outstandingEvents} has been cleared because we exceeded
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,730,* the max trace limit.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,732,boolean isOutstandingEventsTruncated = false;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,735,* True if {@code events} has been cleared because we exceeded the max
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,736,* trace limit.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,738,boolean isEventsTruncated = false;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,741,* Set to true if {@link Tracer#initCurrentThreadTrace()} was called by
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,742,* the current thread.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,744,boolean isInitialized = false;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,747,* Whether pretty printing is enabled for the trace.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,749,boolean prettyPrint = false;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,751,/** Initialize the trace.  */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,752,void init() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,753,isInitialized = true;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,756,/** Is initialized? */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,757,boolean isInitialized() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,758,return isInitialized;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,762,"* Called by the constructor {@link Tracer#Tracer(String, String)} to create"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,763,* a start event.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,765,void startEvent(Tracer t) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,766,"events.add(new Event(true, t));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,767,boolean notAlreadyOutstanding = outstandingEvents.add(t);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,768,Preconditions.checkState(notAlreadyOutstanding);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,772,* Called by {@link Tracer#stop()} to create a stop event.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,774,"void endEvent(Tracer t, int silenceThreshold) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,775,boolean wasOutstanding = outstandingEvents.remove(t);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,776,if (!wasOutstanding) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,777,if (isOutstandingEventsTruncated) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,778,"// The events stack overflowed and was truncated, so just log a"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,779,"// warning. Otherwise, we get an exception which is extremely"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,780,// confusing.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,781,"logger.log(Level.WARNING,"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,782,"""event not found, probably because the event stack """
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,783,"+ ""overflowed and was truncated"","
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,784,new Throwable());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,785,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,786,// throw an exception if the event was not found and the events stack
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,787,// is pristine
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,788,throw new IllegalStateException();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,792,long elapsed = t.stopTimeMs - t.startTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,794,if (silenceThreshold == -1) {   // use default
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,795,silenceThreshold = defaultSilenceThreshold;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,798,if (elapsed < silenceThreshold) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,799,// If this one is silent then we need to remove the start Event
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,800,boolean removed = false;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,801,for (int i = 0; i < events.size(); i++) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,802,Event e = events.get(i);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,803,if (e.tracer == t) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,804,Preconditions.checkState(e.isStart);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,805,events.remove(i);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,806,removed = true;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,807,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,811,// Only assert if we didn't find the original and the events
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,812,// weren't truncated.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,813,Preconditions.checkState(removed || isEventsTruncated);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,814,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,815,"events.add(new Event(false, t));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,818,if (t.type != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,819,Stat stat = stats.get(t.type);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,820,if (stat == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,821,stat = new Stat();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,822,if (!extraTracingStatistics.isEmpty()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,823,stat.extraInfo = new int[extraTracingStatistics.size()];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,825,"stats.put(t.type, stat);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,828,stat.count++;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,829,if (typeToCountMap != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,830,"typeToCountMap.incrementBy(t.type, 1);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,833,stat.clockTime += elapsed;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,834,if (typeToTimeMap != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,835,"typeToTimeMap.incrementBy(t.type, elapsed);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,838,if (stat.extraInfo != null && t.extraTracingValues != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,839,"int overlapLength = Math.min(stat.extraInfo.length, t.extraTracingValues.length);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,840,for (int i = 0; i < overlapLength; i++) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,841,stat.extraInfo[i] += t.extraTracingValues[i];
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,842,AtomicTracerStatMap map = extraTracingStatistics.get(i).getTracingStat();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,843,if (map != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,844,"map.incrementBy(t.type, t.extraTracingValues[i]);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,849,if (elapsed < silenceThreshold) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,850,stat.silent++;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,851,if (typeToSilentMap != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,852,"typeToSilentMap.incrementBy(t.type, 1);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,858,boolean isEmpty() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,859,return events.size() == 0 && outstandingEvents.size() == 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,862,void truncateOutstandingEvents() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,863,isOutstandingEventsTruncated = true;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,864,outstandingEvents.clear();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,867,void truncateEvents() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,868,isEventsTruncated = true;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,869,events.clear();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,872,/** Produces the lovely Trace seen in the class comments */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,873,// Nullness checker does not understand that prettyPrint => indent != null
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,874,"@SuppressWarnings(""nullness"")"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,875,@Override public String toString() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,877,int numDigits = getMaxDigits();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,878,StringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,879,long etime = -1;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,880,LinkedList<String> indent = prettyPrint ? new LinkedList<String>() : null;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,881,for (Event e : events) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,882,if (prettyPrint && !e.isStart && !indent.isEmpty()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,883,indent.pop();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,885,"sb.append("" "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,886,if (prettyPrint) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,887,"sb.append(e.toString(etime, Joiner.on("""").join(indent), numDigits));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,888,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,889,"sb.append(e.toString(etime, """", 4));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,891,etime = e.eventTime();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,892,sb.append('\n');
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,893,if (prettyPrint && e.isStart) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,894,"indent.push(""|  "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,898,if (outstandingEvents.size() != 0) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,899,long now = clock.currentTimeMillis();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,901,"sb.append("" Unstopped timers:\n"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,902,for (Tracer t : outstandingEvents) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,903,"sb.append(""  "")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,904,append(t).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,905,"append("" ("")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,906,append(now - t.startTimeMs).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,907,"append("" ms, started at "")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,908,append(formatTime(t.startTimeMs)).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,909,"append("")\n"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,913,for (String key : stats.keySet()) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,914,Stat stat = stats.get(key);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,915,if (stat.count > 1) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,916,"sb.append("" TOTAL "")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,917,append(key).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,918,"append("" "")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,919,append(stat.count).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,920,"append("" ("")."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,921,append(stat.clockTime).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,922,"append("" ms"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,923,if (stat.extraInfo != null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,924,for (int i = 0; i < stat.extraInfo.length; i++) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,925,"sb.append(""; "");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,926,sb.append(stat.extraInfo[i]).
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,927,append(' ').
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,928,append(extraTracingStatistics.get(i).getUnits());
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,931,"sb.append("")\n"");"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,934,return sb.toString();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,938,* Gets the maximum number of digits that can appear in the tracer output
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,939,* in the gaps between tracers or the duration of a tracer. This is used
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,940,* by the pretty printing case so that all of the tracers are aligned.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,942,private int getMaxDigits() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,943,long etime = -1;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,944,long max_time = 0;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,945,for (Event e : events) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,946,if (etime != -1) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,947,long time = e.eventTime() - etime;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,948,"max_time = Math.max(max_time, time);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,950,if (!e.isStart) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,951,long time = e.tracer.stopTimeMs - e.tracer.startTimeMs;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,952,"max_time = Math.max(max_time, time);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,954,etime = e.eventTime();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,956,// Minimum is 3 to preserve an indent even when max is small.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,957,"return Math.max(3, numDigits(max_time));"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,961,/** Holds the ThreadTrace for each thread.  */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,962,private static ThreadLocal<ThreadTrace> traces = new ThreadLocal<ThreadTrace>();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,965,"* Get the ThreadTrace for the current thread, creating one if necessary."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,967,static ThreadTrace getThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,968,ThreadTrace t = traces.get();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,969,if (t == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,970,t = new ThreadTrace();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,971,t.prettyPrint = defaultPrettyPrint;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,972,traces.set(t);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,974,return t;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,977,/** Remove any ThreadTrace associated with the current thread */
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,978,static void clearThreadTrace() {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,979,traces.set(null);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,983,* A TracingStatistic allows the program to add additional optional statistics to the trace
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,984,* output.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,986,* The class {@link com.google.monitoring.tracing.TracingStatistics} contains several
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,987,* useful tracing statistics
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,991,static interface TracingStatistic {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,993,* This method is called at the start of the trace.  It should return a numeric result
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,994,* indicating the amount of the specific resource in use before the call started
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,995,* @param thread  The current thread
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,996,* @return   A numeric value indicating the amount of the resource already used.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,998,long start(Thread thread);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1001,* This method is called at the end of the trace.  It should return a numeric result
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1002,* indicating the amount of the specific resource in use after the call ends. The actual
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1003,* reported result will be the result end() - start()
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1004,* @param thread  The current thread
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1005,* @return   A numeric value indicating the amount of the resource currently used.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1007,long stop(Thread thread);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1010,* Called when this tracing statistic is first enabled.  A return value of True indicates that
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1011,* this statistic can successfully run in the current JVM.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1013,* @return  An indication of whether this statistic can be implemented in the current JVM.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1015,boolean enable();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1017,/** Returns this tracing statistic's trace map.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1019,* @return This tracing statistic's trace map.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1021,AtomicTracerStatMap getTracingStat();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1023,/** A string that should be appended to the numeric output indicating what this is.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1025,* @return  A string indicating the units of this statistic and what it is.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1027,String getUnits();
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1031,* This class encapsulates a map for keeping track of tracing statistics.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1032,* It allows the caller to atomically increment named fields.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1036,static final class AtomicTracerStatMap {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1037,"private ConcurrentMap<String, Long> map = new ConcurrentHashMap<String, Long>();"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1040,* Atomically increment the specified field by the specified amount.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1042,* @param key      the name of the field
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1043,* @param delta    the amount by which to increment the field
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1045,// Nullness checker is not powerful enough to prove null-safety of this method
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1046,"@SuppressWarnings(""nullness"")"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1047,"void incrementBy(String key, long delta) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1048,"// We use a compareAndSet strategy to update the map, which is much"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1049,"// faster when there isn't too much contention.  Look at a value, and"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1050,// conditionally update the map if the value hasn't changed.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1051,"// If it has changed, repeat."
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1052,Long oldValue = map.get(key);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1053,if (oldValue == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1054,"// Currently, the slot is empty"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1055,"oldValue = map.putIfAbsent(key, delta);"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1056,if (oldValue == null) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1057,// The slot was still empty when we set it
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1058,return;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1059,} else {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1060,// Someone filled in the slot behind our back.  oldValue has its current value
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1063,while (true) {
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1064,"if (map.replace(key, oldValue, oldValue + delta)) {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1065,break;
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1067,// Nullness checker doesn't understand that this cannot return null.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1068,oldValue = map.get(key);
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1073,* Returns a map of key:value pairs.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1075,"Map<String, Long> getMap() {"
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1076,return map;

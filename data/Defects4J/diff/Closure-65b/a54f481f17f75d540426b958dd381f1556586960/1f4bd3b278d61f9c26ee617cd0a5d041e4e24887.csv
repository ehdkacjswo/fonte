is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,204,"/ For all variables V not in unsafeCrossRange,"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,205,"/ LiveRangeChecker(V, X) and LiveRangeChecker(Y, V) will never add a edge"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,206,"/ to the interferenceGraph. In other words, we don't need to use"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,207,"/ LiveRangeChecker on variable pair (A, B) if both A and B are not"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,208,/ in the unsafeCrossRangeSet. See PrescreenCrossLiveRange for details.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,209,et<Var> unsafeCrossRangeSet = Sets.newHashSet();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,212,"or (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,213,f (cfg.isImplicitReturn(cfgNode)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,214,ontinue;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,217,or (Iterator<Var> i = scope.getVars(); i.hasNext();) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,218,inal Var v = i.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,220,f (!unsafeCrossRangeSet.contains(v)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,221,lowState<LiveVariableLattice> state = cfgNode.getAnnotation();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,222,rescreenCrossLiveRange check =
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,223,"ew PrescreenCrossLiveRange(v, state.getOut());"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,225,"odeTraversal.traverse(compiler, cfgNode.getValue(), check);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,227,f (!check.isSafe()) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,228,nsafeCrossRangeSet.add(v);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,298,f (!unsafeCrossRangeSet.contains(v1) &&
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,299,unsafeCrossRangeSet.contains(v2)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,300,ontinue NEXT_VAR_PAIR;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,467, The crossed live range check is pretty traversal happy and it needs to
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,468, live range crossing between all coalescing candidate x and y at each
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,469, CFG node. Since this type of live range crossing within a CFG node happens
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,470," rarely, we can pre-screen the variables' usages and eliminate the"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,471, cross live range check if it can never cross another variable's live range
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,472, within a CFG node.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,474,rivate static class PrescreenCrossLiveRange
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,475,xtends AbstractCfgNodeTraversalCallback {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,476,rivate int count;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,477,rivate final LiveVariableLattice lattice;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,478,rivate final Var var;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,480,/ Dead assignments has a strange effect on variable name coalescing.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,481,/ Consider y = 3; x = 2; print(y)
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,482,"/ Since x is never live, it would appear x and y's live range never"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,483,"/ intersects. However, merging x and y means the = 2 assignment suddenly"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,484,/ becomes live so we need to do the live range check when that happens.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,485,rivate boolean hasDeadAssignment = false;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,487,"ublic PrescreenCrossLiveRange(Var var, LiveVariableLattice lattice) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,488,his.lattice = lattice;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,489,his.var = var;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,492,Override
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,493,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,494,f (!NodeUtil.isName(n) || !var.name.equals(n.getString())) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,495,eturn;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,497,ount++;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,498,f (// is a=b or var a=b
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,499,(NodeUtil.isAssign(parent) && parent.getFirstChild() == n) ||
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,500,NodeUtil.isVar(parent) && n.hasChildren()))
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,502,& !lattice.isLive(var)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,503,asDeadAssignment = true;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,507,rivate boolean isSafe() {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,508,eturn count < 2 && !hasDeadAssignment;
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,354,public void testCannotReuseAnyParamsBug() {
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,355,"testSame(""function handleKeyboardShortcut(e, key, isModifierPressed) {\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,356,"""  if (!isModifierPressed) {\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,357,"""    return false;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,358,"""  }\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,359,"""  var command;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,360,"""  switch (key) {\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,361,"""    case 'b': // Ctrl+B\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,362,"""      command = COMMAND.BOLD;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,363,"""      break;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,364,"""    case 'i': // Ctrl+I\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,365,"""      command = COMMAND.ITALIC;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,366,"""      break;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,367,"""    case 'u': // Ctrl+U\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,368,"""      command = COMMAND.UNDERLINE;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,369,"""      break;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,370,"""    case 's': // Ctrl+S\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,371,"""      return true;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,372,"""  }\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,373,"""\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,374,"""  if (command) {\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,375,"""    this.fieldObject.execCommand(command);\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,376,"""    return true;\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,377,"""  }\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,378,"""\n"" +"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,379,"""  return false;\n"" +"

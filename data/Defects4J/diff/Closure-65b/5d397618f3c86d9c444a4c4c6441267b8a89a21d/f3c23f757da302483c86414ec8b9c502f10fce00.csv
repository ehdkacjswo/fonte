is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,120,"odeTraversal.traverse(compiler, root,"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,121,"ew NormalizeStatements(compiler, assertOnChange));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,120,new NodeTraversal(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,121,"compiler, new NormalizeStatements(compiler, assertOnChange))"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,122,".traverseRoots(externs, root);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,.getType() == Token.NAME
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,n.getType() == Token.NAME
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,221,compiler.reportCodeChange();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,91,* Whether externs changes should be allowed for this pass.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,93,private boolean allowExternsChanges = false;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,199,* Whether to allow externs changes.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,201,protected void allowExternsChanges(boolean allowExternsChanges) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,202,this.allowExternsChanges = allowExternsChanges;
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,619,"ublic void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,631,public void testSame(
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,632,"String[] js, DiagnosticType error, DiagnosticType warning) {"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,806,f (mainRootClone.checkTreeEqualsSilent(mainRoot)) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,819,boolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,820,boolean externsChange = !externsRootClone
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,821,.checkTreeEqualsSilent(externsRoot);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,823,"// Generally, externs should not be change by the compiler passes."
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,824,if (externsChange && !allowExternsChanges) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,825,String explanation = externsRootClone.checkTreeEquals(externsRoot);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,826,"fail(""Unexpected changes to externs"" +"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,827,"""\nExpected: "" + compiler.toSource(externsRootClone) +"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,828,"""\nResult: "" + compiler.toSource(externsRoot) +"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,829,"""\n"" + explanation);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,832,if (!codeChange && !externsChange) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,384,public void testIssue() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,385,super.allowExternsChanges(true);
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,386,"test(""var a,b,c; var a,b"", ""a(), b()"", ""a(), b()"", null, null);"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,431,"var b = a.CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,436,"""var b = a.CONST;"");"
True,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,34,@Override
True,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,35,protected void setUp() {
True,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java,36,super.allowExternsChanges(true);
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,42,super.allowExternsChanges(true);

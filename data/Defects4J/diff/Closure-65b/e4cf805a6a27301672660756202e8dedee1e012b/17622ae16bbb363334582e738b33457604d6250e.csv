is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AstChangeProxy.java,src/com/google/javascript/jscomp/AstChangeProxy.java,98,f ((size == 1) && node.checkTreeEqualsSilent(replacements.get(0))) {
True,src/com/google/javascript/jscomp/AstChangeProxy.java,src/com/google/javascript/jscomp/AstChangeProxy.java,98,if ((size == 1) && node.isEquivalentTo(replacements.get(0))) {
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,264,& next.checkTreeEqualsSilent(value)) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,264,&& next.isEquivalentTo(value)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,918,eturn n1.checkTreeTypeAwareEqualsSilent(n2);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,918,return n1.isEquivalentToTyped(n2);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,920,eturn n1.checkTreeEqualsSilent(n2);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,920,return n1.isEquivalentTo(n2);
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,272,1.checkTreeEqualsSilent(n2);
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,272,n1.isEquivalentTo(n2);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,315,eturn nodeThis.checkTreeEqualsSilent(nodeThat)
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,315,return nodeThis.isEquivalentTo(nodeThat)
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,107,(JSTypeExpression) other).root.checkTreeEqualsSilent(root);
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,107,((JSTypeExpression) other).root.isEquivalentTo(root);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,264,"oolean isEquivalentTo(Node node, boolean recurse) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,265,"eturn (super.isEquivalentTo(node, recurse)"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,264,"boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,265,"return (super.isEquivalentTo(node, compareJsType, recurse)"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,314,"oolean isEquivalentTo(Node node, boolean recurse) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,315,"eturn (super.isEquivalentTo(node, recurse)"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,314,"boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,315,"return (super.isEquivalentTo(node, compareJsType, recurse)"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1379," If this is a compilation pass and not a test, do not construct error"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1380, strings. Instead return true if the trees are equal.
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1382,ublic boolean checkTreeEqualsSilent(Node node2) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1383,eturn checkTreeEqualsImpl(node2) == null;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1405,"f (!isEquivalentTo(node2, false)) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1397,"if (!isEquivalentTo(node2, false, false)) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1426, Checks if the subtree under this node is the same as another subtree
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1427," including types. Returns null if it's equal, or a message describing the"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1428, differences.
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1430,ublic boolean checkTreeTypeAwareEqualsSilent(Node node2) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1431,eturn checkTreeTypeAwareEqualsImpl(node2) == null;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1441,"oolean eq = this.isEquivalentTo(node2, false);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1443,"q = eq && JSType.isEquivalent(jsType, node2.getJSType());"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1445,f (!eq) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1424,"if (!isEquivalentTo(node2, true, false)) {"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1587,"eturn isEquivalentTo(node, true);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1566,"return isEquivalentTo(node, false, true);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1590,** Returns true if this node is equivalent semantically to another */
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1591,"oolean isEquivalentTo(Node node, boolean recurse) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1570,* Returns true if this node is equivalent semantically to another and
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1571,* the types are equivalent.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1573,public boolean isEquivalentToTyped(Node node) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1574,"return isEquivalentTo(node, true, true);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1578,* @param compareJsType Whether to compare the JSTypes of the nodes.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1579,"* @param recurse Whether to compare the children of the current node, if"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1580,*    not only the the count of the children are compared.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1581,* @return Whether this node is equivalent semantically to the provided node.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1583,"boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1590,"if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1591,return false;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1639,"f (!n.isEquivalentTo(n2, true)) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1635,"if (!n.isEquivalentTo(n2, compareJsType, true)) {"
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,117,ssertTrue(orginal.checkTreeEqualsSilent(root));
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,117,assertTrue(orginal.isEquivalentTo(root));
False,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,145,ssertTrue(orginal.checkTreeEqualsSilent(root));
True,test/com/google/javascript/jscomp/AstParallelizerTest.java,test/com/google/javascript/jscomp/AstParallelizerTest.java,145,assertTrue(orginal.isEquivalentTo(root));
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,819,oolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,820,oolean externsChange = !externsRootClone
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,821,checkTreeEqualsSilent(externsRoot);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,819,boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,820,boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);
